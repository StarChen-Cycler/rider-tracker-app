{
  "url": "https://docs.memfiredb.com/docs/app/development_guide/database/tables/",
  "title": "表格和数据 | MemFire Cloud在线文档",
  "depth": 1,
  "timestamp": "2025-08-12 17:35:07",
  "html": "<main class=\"page-content bg-transparent\">\n<div class=\"top-header d-print-none\" id=\"top-header\">\n<div class=\"header-bar d-flex justify-content-between\">\n<div class=\"d-flex align-items-center\">\n<a alt=\"HomePage\" aria-label=\"HomePage\" class=\"logo-icon me-3\" href=\"/\">\n<div class=\"small\">\n<!--?xml version=\"1.0\" encoding=\"UTF-8\"?-->\n<svg height=\"112px\" version=\"1.1\" viewbox=\"0 0 99 112\" width=\"99px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<title>MemFireDB备份 6</title>\n<defs>\n<lineargradient id=\"linearGradient-1\" x1=\"49.9999885%\" x2=\"49.9999885%\" y1=\"98.082503%\" y2=\"0.766550128%\">\n<stop offset=\"0%\" stop-color=\"#ED1C23\"></stop>\n<stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop>\n</lineargradient>\n</defs>\n<g fill=\"none\" fill-rule=\"evenodd\" id=\"定稿\" stroke=\"none\" stroke-width=\"1\">\n<g id=\"MemFireDB备份-6\">\n<polygon fill=\"#F9AE7C\" id=\"Fill-1\" points=\"25.9728553 40.7912363 47.4268317 0.00591833831 1.15453123 26.7215251\"></polygon>\n<polygon fill=\"#F9AE7C\" id=\"Fill-3\" points=\"97.4213117 26.7267606 51.1285247 0.000910513587 72.4242993 40.8351686\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-5\" points=\"24.8347133 42.7618153 0.000455256793 28.682999 0.000455256793 82.1608764\"></polygon>\n<polygon fill=\"url(#linearGradient-1)\" id=\"Fill-7\" points=\"27.6634514 42.4662399 49.279044 109.05096 70.7296059 42.507213 49.2779058 1.3747617\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-9\" points=\"98.5660549 28.6951771 73.5622137 42.8047233 98.5660549 82.1719163\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-13\" points=\"72.2987623 45.061545 50.7514582 111.900071 97.579172 84.8646465\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-15\" points=\"26.1006687 45.0226206 0.987565799 84.8644188 47.8095888 111.898705\"></polygon>\n<path d=\"M60.0737516,38.507213 C59.3168872,35.669825 57.0462939,33.3514298 57.0462939,33.3514298 C57.0462939,33.3514298 57.0804382,35.8849338 56.2894295,37.513615 C55.4847631,39.1696116 53.8765685,40.3054773 53.8765685,40.3054773 C53.8765685,40.3054773 56.1016361,33.8840802 54.2715038,30.1247973 C52.0259496,25.5073552 49.1771803,23.3357803 49.1771803,23.3357803 C49.1771803,23.3357803 50.1070423,28.1319107 48.6240432,31.5065016 C47.1672215,34.8264618 42.8058614,36.7260208 40.7241997,38.7132167 C39.1865699,40.1791435 38.0814341,43.0711623 37.6068289,44.4847347 C37.5715465,44.5883056 37.560165,44.6918765 37.5533362,44.7943093 C37.584066,43.9816759 37.8890881,39.8024186 40.9654858,37.4293925 C43.8404325,35.2111538 41.2431925,30.3478731 41.2431925,30.3478731 C41.2431925,30.3478731 41.7212121,32.5638355 40.9939394,34.1401622 C40.2655285,35.7153507 38.7187936,36.5962726 38.0154218,38.259098 C37.3883056,39.7409589 37.5203301,44.1432921 37.5453692,44.8409731 C37.5453692,44.8591834 37.5476455,44.8762555 37.5476455,44.8921895 C37.5476455,44.9263338 37.5487836,44.9456822 37.5487836,44.9456822 L37.5487836,44.9115379 C37.5590269,45.2655001 37.7138142,45.6080808 37.9972116,45.8448143 L48.3713757,55.6442168 C48.8380139,56.0323232 49.5163466,56.0334614 49.9841229,55.6476312 L60.5938825,45.7105136 C60.9034571,45.4544316 61.0719021,45.0686015 61.0457249,44.6656992 C60.9546735,43.2282259 60.5699815,40.3692133 60.0737516,38.507213\" fill=\"#FFFFFF\" id=\"Fill-17\"></path>\n</g>\n</g>\n</svg>\n</div>\n<div class=\"big\">\n<svg height=\"20\" width=\"232\" xmlns=\"http://www.w3.org/2000/svg\"><defs><lineargradient id=\"a\" x1=\"50%\" x2=\"50%\" y1=\"98.083%\" y2=\".767%\"><stop offset=\"0%\" stop-color=\"#ED1C23\"></stop><stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop></lineargradient></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M78.622 12.384l1.596 21.94H77.49l-.847-14.154-8.98 15.523-4.899-15.53-4.416 14.162H55.6l7.085-21.871 5.712 17.174 10.224-17.244zm99.46.382l.324.01.454.036c.085.008.175.018.269.03l.61.096c1.09.203 2.518.644 3.883 1.596l.515.383-.46 3.694-.413-.62-.154-.195-.255-.285c-.765-.802-2.485-2.188-5.23-2.188-4.55 0-8.723 3.809-9.3 8.491-.287 2.311.334 4.469 1.755 6.077 1.342 1.517 3.257 2.354 5.39 2.354 2.606 0 4.58-1.225 5.606-2.04l.359-.3.424-.408.507-.552-.466 3.766-.093.06a12.622 12.622 0 01-4.577 1.842l-.629.1-.53.058-.418.027-.444.003c-2.918-.002-5.532-1.142-7.36-3.21-1.851-2.096-2.67-4.88-2.305-7.837.73-5.88 5.964-10.696 11.806-10.974l.732-.014zm18.174 9.018c1.724 0 3.344.713 4.443 1.956 1.101 1.248 1.59 2.88 1.377 4.596-.432 3.504-3.808 6.466-7.375 6.466-1.728 0-3.348-.715-4.45-1.96-1.096-1.242-1.583-2.864-1.377-4.563.44-3.52 3.818-6.495 7.382-6.495zm19.446.535l-1.486 12.02h-2.558l.16-1.292c-.936.93-2.462 1.755-4.173 1.755-1.318 0-2.48-.492-3.267-1.385-.804-.91-1.168-2.184-1.008-3.497l.9-7.274 2.597-.327-.914 7.402c-.101.785.084 1.466.525 1.968.49.552 1.27.845 2.25.845 1.526 0 3.3-1.155 3.51-2.873l.87-7.015 2.594-.327zm-63.587-.547c1.77 0 3.21.58 4.164 1.678 1.047 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.806 0 2.878-.434 3.868-.961l1.119-.623-.312 2.522-.106.06c-1.224.687-2.604 1.356-4.8 1.356-2.092 0-3.873-.708-5.006-1.992-.991-1.12-1.404-2.599-1.198-4.272.548-4.433 4.001-6.751 7.124-6.751zm-62.717 0c1.771 0 3.211.58 4.164 1.678 1.048 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.622 0 2.652-.35 3.563-.803l.594-.315.83-.466-.312 2.522-.105.06c-1.224.687-2.604 1.356-4.8 1.356-2.093 0-3.874-.708-5.007-1.992-.99-1.12-1.404-2.599-1.197-4.272.547-4.433 4-6.751 7.123-6.751zM231.476 12l-2.767 22.34h-2.556l.197-1.59c-1.104 1.191-2.882 2.021-4.471 2.021-1.781 0-3.24-.583-4.217-1.69-1.02-1.151-1.452-2.817-1.222-4.686.485-3.908 3.43-6.636 7.167-6.636 1.565 0 3.065.832 3.852 2.064l1.356-10.968 2.661-.855zm-42.07.002L186.64 34.34h-2.556l2.664-21.483 2.66-.854zm-56.632 1.268l-1.166 2.527h-9.586l-.85 6.867h6.627v.48h-.12l-.883 1.778v.24h-5.933l-1.138 9.163h-2.729l2.612-21.055h13.166zm2.715 9.038l-1.497 12.017h-2.559l1.455-11.722 2.601-.295zm-24.427-.537c1 0 1.93.427 2.616 1.204.84.95 1.224 2.29 1.053 3.677l-.955 7.673h-2.527l.922-7.445c.13-1.017-.027-1.81-.45-2.287-.326-.367-.815-.554-1.458-.554-1.954 0-3.178 1.346-3.332 2.613l-.955 7.673h-2.556l.922-7.445c.127-1.03-.024-1.826-.442-2.297-.319-.362-.801-.544-1.437-.544-1.522 0-3.3 1.166-3.516 2.901l-.912 7.385h-2.559l1.455-11.722 2.594-.295-.146 1.164c1.027-1.077 2.419-1.701 3.854-1.701 1.375 0 2.58.79 3.226 2.083.914-1.13 2.05-2.083 4.603-2.083zm29.487.532l-.206 1.73c1.082-.978 2.932-1.7 4.514-1.7h.269l-.271 2.282h-.214c-1.814 0-4.469.837-4.7 2.7l-.866 7.01h-2.558l1.45-11.693 2.582-.329zm55.47 1.865c-2.31 0-4.27 1.792-4.563 4.168-.144 1.145.15 2.196.824 2.957.64.725 1.586 1.126 2.656 1.126 2.292 0 4.241-1.78 4.532-4.14.146-1.169-.144-2.237-.821-3.003-.634-.715-1.567-1.108-2.628-1.108zm27.497-.029c-2.278 0-4.15 1.752-4.45 4.17-.149 1.187.137 2.255.8 3.006.611.692 1.526 1.076 2.57 1.076 2.294 0 4.173-1.743 4.468-4.143.152-1.21-.13-2.285-.79-3.033-.623-.704-1.52-1.076-2.598-1.076zm-134.356.045c-1.89 0-3.372 1.094-4.015 2.947h7.164a2.853 2.853 0 00-.71-1.956c-.574-.648-1.416-.991-2.439-.991zm62.715 0c-1.892 0-3.37 1.094-4.013 2.947h7.166a2.867 2.867 0 00-.713-1.956c-.573-.648-1.416-.991-2.44-.991zm-17.267-7.614c.919 0 1.706.748 1.754 1.668a1.587 1.587 0 01-1.603 1.692c-.917 0-1.704-.75-1.754-1.668a1.593 1.593 0 011.603-1.692z\" fill=\"#116\"></path><path d=\"M11.131 17.482L20.326.002.495 11.453zm30.621-6.028L21.912 0l9.127 17.5z\" fill=\"#F9AE7C\"></path><path d=\"M10.643 18.326L0 12.293v22.919z\" fill=\"#F9904A\"></path><path d=\"M11.856 18.2l9.264 28.536 9.193-28.519L21.119.59z\" fill=\"url(#a)\"></path><path d=\"M42.243 12.298l-10.716 6.047 10.716 16.872z\" fill=\"#F9904A\"></path><path d=\"M30.985 19.312l-9.234 28.645L41.82 36.371zm-19.799-.017L.423 36.37 20.49 47.957z\" fill=\"#FB6D33\"></path><path d=\"M25.746 16.503c-.324-1.216-1.298-2.21-1.298-2.21s.015 1.086-.324 1.784c-.345.71-1.034 1.197-1.034 1.197s.954-2.752.17-4.363c-.963-1.98-2.184-2.91-2.184-2.91s.398 2.056-.237 3.502c-.624 1.423-2.494 2.237-3.386 3.088-.659.629-1.132 1.868-1.336 2.474a.509.509 0 00-.023.133c.013-.349.144-2.14 1.463-3.157 1.232-.95.119-3.035.119-3.035s.205.95-.107 1.625c-.312.676-.975 1.053-1.277 1.766-.268.635-.212 2.522-.201 2.82v.023l.001.022v-.014a.54.54 0 00.193.4l4.446 4.2c.2.166.49.166.69.001l4.548-4.259a.535.535 0 00.193-.448c-.039-.616-.203-1.84-.416-2.639\" fill=\"#FFF\"></path></g></svg>\n</div>\n</a>\n<button class=\"btn btn-icon btn-soft\" id=\"close-sidebar\">\n<span class=\"material-icons size-20 menu-icon align-middle\">menu</span>\n</button>\n</div>\n<div class=\"d-flex align-items-center\">\n<ul class=\"list-unstyled mb-0\">\n</ul>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://memfiredb.com/\" target=\"_blank\" type=\"button\">官网</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://community.memfiredb.com/\" target=\"_blank\" type=\"button\">论坛</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://cloud.memfiredb.com/auth/login\" target=\"_blank\" type=\"button\">登录</a>\n<button aria-label=\"Toggle user interface mode\" class=\"btn btn-icon btn-default ms-2\" id=\"mode\" type=\"button\">\n<span class=\"toggle-dark\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable dark mode</title>\n<path d=\"M24 42q-7.5 0-12.75-5.25T6 24q0-7.5 5.25-12.75T24 6q.4 0 .85.025.45.025 1.15.075-1.8 1.6-2.8 3.95-1 2.35-1 4.95 0 4.5 3.15 7.65Q28.5 25.8 33 25.8q2.6 0 4.95-.925T41.9 22.3q.05.6.075.975Q42 23.65 42 24q0 7.5-5.25 12.75T24 42Zm0-3q5.45 0 9.5-3.375t5.05-7.925q-1.25.55-2.675.825Q34.45 28.8 33 28.8q-5.75 0-9.775-4.025T19.2 15q0-1.2.25-2.575.25-1.375.9-3.125-4.9 1.35-8.125 5.475Q9 18.9 9 24q0 6.25 4.375 10.625T24 39Zm-.2-14.85Z\"></path>\n</svg>\n</span>\n<span class=\"toggle-light\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable light mode</title>\n<path d=\"M24 31q2.9 0 4.95-2.05Q31 26.9 31 24q0-2.9-2.05-4.95Q26.9 17 24 17q-2.9 0-4.95 2.05Q17 21.1 17 24q0 2.9 2.05 4.95Q21.1 31 24 31Zm0 3q-4.15 0-7.075-2.925T14 24q0-4.15 2.925-7.075T24 14q4.15 0 7.075 2.925T34 24q0 4.15-2.925 7.075T24 34ZM3.5 25.5q-.65 0-1.075-.425Q2 24.65 2 24q0-.65.425-1.075Q2.85 22.5 3.5 22.5h5q.65 0 1.075.425Q10 23.35 10 24q0 .65-.425 1.075-.425.425-1.075.425Zm36 0q-.65 0-1.075-.425Q38 24.65 38 24q0-.65.425-1.075.425-.425 1.075-.425h5q.65 0 1.075.425Q46 23.35 46 24q0 .65-.425 1.075-.425.425-1.075.425ZM24 10q-.65 0-1.075-.425Q22.5 9.15 22.5 8.5v-5q0-.65.425-1.075Q23.35 2 24 2q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 10 24 10Zm0 36q-.65 0-1.075-.425-.425-.425-.425-1.075v-5q0-.65.425-1.075Q23.35 38 24 38q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 46 24 46ZM12 14.1l-2.85-2.8q-.45-.45-.425-1.075.025-.625.425-1.075.45-.45 1.075-.45t1.075.45L14.1 12q.4.45.4 1.05 0 .6-.4 1-.4.45-1.025.45-.625 0-1.075-.4Zm24.7 24.75L33.9 36q-.4-.45-.4-1.075t.45-1.025q.4-.45 1-.45t1.05.45l2.85 2.8q.45.45.425 1.075-.025.625-.425 1.075-.45.45-1.075.45t-1.075-.45ZM33.9 14.1q-.45-.45-.45-1.05 0-.6.45-1.05l2.8-2.85q.45-.45 1.075-.425.625.025 1.075.425.45.45.45 1.075t-.45 1.075L36 14.1q-.4.4-1.025.4-.625 0-1.075-.4ZM9.15 38.85q-.45-.45-.45-1.075t.45-1.075L12 33.9q.45-.45 1.05-.45.6 0 1.05.45.45.45.45 1.05 0 .6-.45 1.05l-2.8 2.85q-.45.45-1.075.425-.625-.025-1.075-.425ZM24 24Z\"></path>\n</svg>\n</span>\n</button>\n</div>\n</div>\n</div>\n<div class=\"container-fluid\">\n<div class=\"layout-spacing\">\n<div class=\"d-md-flex justify-content-between align-items-center\"></div>\n<div class=\"row flex-xl-nowrap\">\n<div class=\"docs-toc col-xl-3 d-xl-block\"><toc>\n<div class=\"fw-bold text-uppercase mb-2\">本页</div>\n\n</toc></div>\n<div class=\"docs-toc-mobile d-print-none d-xl-none\">\n<button aria-expanded=\"false\" class=\"btn-secondary dropdown-toggle\" data-bs-offset=\"0,0\" data-bs-toggle=\"dropdown\" id=\"toc-dropdown-btn\" type=\"button\">\n                                                Table of Contents\n                                            </button>\n</div>\n<div class=\"docs-content col-12 col-xl-9 mt-0\">\n<div class=\"mb-0 d-flex\">\n<h1 class=\"content-title mb-0\">\n                                                    表格和数据\n                                                    \n                                                </h1>\n</div>\n<div class=\"main-content\" data-bs-root-margin=\"0px 0px -65%\" data-bs-spy=\"scroll\" data-bs-target=\"#toc-mobile\" id=\"content\">\n<div data-prismjs-copy=\"\" data-prismjs-copy-error=\"\" data-prismjs-copy-success=\"\">\n<p>表是存储数据的地方。</p>\n<p>表格类似于Excel电子表格。它们包含列和行。\n例如，这个表有3列（<code>id</code>, <code>name</code>, <code>description</code>）和4行的数据：\n\n\n\n\n\n\n\n</p><table class=\"table table-striped-columns\">\n<thead>\n<tr>\n<th><code>id</code></th>\n<th><code>name</code></th>\n<th><code>description</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>The Phantom Menace</td>\n<td>Two Jedi escape a hostile blockade to find allies and come across a young boy who may bring balance to the Force.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Attack of the Clones</td>\n<td>Ten years after the invasion of Naboo, the Galactic Republic is facing a Separatist movement.</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Revenge of the Sith</td>\n<td>As Obi-Wan pursues a new threat, Anakin acts as a double agent between the Jedi Council and Palpatine and is lured into a sinister plan to rule the galaxy.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Star Wars</td>\n<td>Luke Skywalker joins forces with a Jedi Knight, a cocky pilot, a Wookiee and two droids to save the galaxy from the Empire’s world-destroying battle station.</td>\n</tr>\n</tbody>\n</table>\n\n它与电子表格有一些重要的区别，但如果你是关系型数据库的新手，它是一个很好的学习起点。<p></p>\n<h2 id=\"创建表\">创建表 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%88%9b%e5%bb%ba%e8%a1%a8\"><i class=\"material-icons align-middle\">link</i></a></h2><p>当创建一个表时，最好的做法是同时添加列。</p>\n<img src=\"../../../img/guides/database/tables-columns.png\"/>\n<p>你必须在创建每一列时定义它的 “数据类型”。你可以在创建表后随时添加和删除列。</p>\n<p>Supabase 为创建表提供了几个选项。你可以使用仪表板或直接使用 SQL 创建它们。\n我们在 Dashboard 中提供了一个 SQL 编辑器，或者你可以 <a data-bs-delay='{\"hide\":300,\"show\":550}' data-bs-html=\"true\" data-bs-title=\"&lt;a href='/docs/app/development_guide/database/connecting-to-postgres/'&gt;&lt;p&gt;数据库&lt;/p&gt;&lt;strong&gt;数据库连接&lt;/strong&gt;&lt;br&gt;There are various ways to connect to your Postgres database.&lt;/a&gt;\" data-bs-toggle=\"tooltip\" href=\"/docs/app/development_guide/database/connecting-to-postgres/\">连接</a>到你的数据库并自己运行SQL查询。</p>\n\n<div class=\"tab-content\" id=\"nav-tab-content\">\n<div aria-labelledby=\"nav-1\" class=\"tab-pane fade show active\" id=\"cadebf\" role=\"tabpanel\">\n<video controls=\"true\" muted=\"\" playsinline=\"\" width=\"99%\">\n<source muted=\"\" playsinline=\"\" src=\"../../../videos/api/api-create-table-sm.mp4\" type=\"video/mp4\"/>\n</video>\n<ol>\n<li>进入仪表板中的表编辑器页面。</li>\n<li>单击<strong>新表</strong>，创建一个名为<code>todos</code>的表。</li>\n<li>单击<strong>保存</strong>。</li>\n<li>点击<strong>新列</strong>，创建一个名为<code>task</code>的列，数据类型为<code>text</code>。</li>\n<li>单击<strong>保存</strong>。</li>\n</ol>\n</div>\n<div aria-labelledby=\"nav-1\" class=\"tab-pane fade\" id=\"defbca\" role=\"tabpanel\">\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"803086a\" tabindex=\"0\"><code class=\"language-sql\">create table movies (\n  id bigint generated by default as identity primary key,\n  name text,\n  description text\n);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n</div>\n</div>\n<div class=\"alert alert-info d-flex\" role=\"alert\">\n<div class=\"flex-shrink-1 alert-icon\">\n<span class=\"material-icons size-20 me-2\">\n  info\n  </span></div>\n<div class=\"w-100\">\n<p>当命名表时，使用小写字母和下划线而不是空格（例如，<code>table_name</code>，而不是<code>Table Name</code>）。</p>\n</div>\n</div>\n<h2 id=\"列\">列 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%88%97\"><i class=\"material-icons align-middle\">link</i></a></h2><p>当你创建一个列时，你必须定义 “数据类型”。</p>\n<h3 id=\"数据类型\">数据类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h3><p>每个列都是一个预定义的类型。PostgreSQL提供了许多<a href=\"https://www.postgresql.org/docs/current/datatype.html\" rel=\"external\" target=\"_blank\">默认类型<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a>，你甚至可以设计你自己的(或使用扩展) 如果默认类型不满足你的需求。</p>\n<details>\n<summary>显示/隐藏默认数据类型</summary>\n<table class=\"table table-striped-columns\">\n<thead>\n<tr>\n<th><code>名称</code></th>\n<th><code>别名</code></th>\n<th><code>描述</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bigint</td>\n<td>int8</td>\n<td>signed eight-byte integer</td>\n</tr>\n<tr>\n<td>bigserial</td>\n<td>serial8</td>\n<td>autoincrementing eight-byte integer</td>\n</tr>\n<tr>\n<td>bit</td>\n<td></td>\n<td>fixed-length bit string</td>\n</tr>\n<tr>\n<td>bit varying</td>\n<td>varbit</td>\n<td>variable-length bit string</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>bool</td>\n<td>logical Boolean (true/false)</td>\n</tr>\n<tr>\n<td>box</td>\n<td></td>\n<td>rectangular box on a plane</td>\n</tr>\n<tr>\n<td>bytea</td>\n<td></td>\n<td>binary data (“byte array”)</td>\n</tr>\n<tr>\n<td>character</td>\n<td>char</td>\n<td>fixed-length character string</td>\n</tr>\n<tr>\n<td>character varying</td>\n<td>varchar</td>\n<td>variable-length character string</td>\n</tr>\n<tr>\n<td>cidr</td>\n<td></td>\n<td>IPv4 or IPv6 network address</td>\n</tr>\n<tr>\n<td>circle</td>\n<td></td>\n<td>circle on a plane</td>\n</tr>\n<tr>\n<td>date</td>\n<td></td>\n<td>calendar date (year, month, day)</td>\n</tr>\n<tr>\n<td>double precision</td>\n<td>float8</td>\n<td>double precision floating-point number (8 bytes)</td>\n</tr>\n<tr>\n<td>inet</td>\n<td></td>\n<td>IPv4 or IPv6 host address</td>\n</tr>\n<tr>\n<td>integer</td>\n<td>int, int4</td>\n<td>signed four-byte integer</td>\n</tr>\n<tr>\n<td>interval [ fields ]</td>\n<td></td>\n<td>time span</td>\n</tr>\n<tr>\n<td>json</td>\n<td></td>\n<td>textual JSON data</td>\n</tr>\n<tr>\n<td>jsonb</td>\n<td></td>\n<td>binary JSON data, decomposed</td>\n</tr>\n<tr>\n<td>line</td>\n<td></td>\n<td>infinite line on a plane</td>\n</tr>\n<tr>\n<td>lseg</td>\n<td></td>\n<td>line segment on a plane</td>\n</tr>\n<tr>\n<td>macaddr</td>\n<td></td>\n<td>MAC (Media Access Control) address</td>\n</tr>\n<tr>\n<td>macaddr8</td>\n<td></td>\n<td>MAC (Media Access Control) address (EUI-64 format)</td>\n</tr>\n<tr>\n<td>money</td>\n<td></td>\n<td>currency amount</td>\n</tr>\n<tr>\n<td>numeric</td>\n<td>decimal</td>\n<td>exact numeric of selectable precision</td>\n</tr>\n<tr>\n<td>path</td>\n<td></td>\n<td>geometric path on a plane</td>\n</tr>\n<tr>\n<td>pg_lsn</td>\n<td></td>\n<td>PostgreSQL Log Sequence Number</td>\n</tr>\n<tr>\n<td>pg_snapshot</td>\n<td></td>\n<td>user-level transaction ID snapshot</td>\n</tr>\n<tr>\n<td>point</td>\n<td></td>\n<td>geometric point on a plane</td>\n</tr>\n<tr>\n<td>polygon</td>\n<td></td>\n<td>closed geometric path on a plane</td>\n</tr>\n<tr>\n<td>real</td>\n<td>float4</td>\n<td>single precision floating-point number (4 bytes)</td>\n</tr>\n<tr>\n<td>smallint</td>\n<td>int2</td>\n<td>signed two-byte integer</td>\n</tr>\n<tr>\n<td>smallserial</td>\n<td>serial2</td>\n<td>autoincrementing two-byte integer</td>\n</tr>\n<tr>\n<td>serial</td>\n<td>serial4</td>\n<td>autoincrementing four-byte integer</td>\n</tr>\n<tr>\n<td>text</td>\n<td></td>\n<td>variable-length character string</td>\n</tr>\n<tr>\n<td>time [ without time zone ]</td>\n<td></td>\n<td>time of day (no time zone)</td>\n</tr>\n<tr>\n<td>time with time zone</td>\n<td>timetz</td>\n<td>time of day, including time zone</td>\n</tr>\n<tr>\n<td>timestamp [ without time zone ]</td>\n<td></td>\n<td>date and time (no time zone)</td>\n</tr>\n<tr>\n<td>timestamp with time zone</td>\n<td>timestamptz</td>\n<td>date and time, including time zone</td>\n</tr>\n<tr>\n<td>tsquery</td>\n<td></td>\n<td>text search query</td>\n</tr>\n<tr>\n<td>tsvector</td>\n<td></td>\n<td>text search document</td>\n</tr>\n<tr>\n<td>txid_snapshot</td>\n<td></td>\n<td>user-level transaction ID snapshot (deprecated; see pg_snapshot)</td>\n</tr>\n<tr>\n<td>uuid</td>\n<td></td>\n<td>universally unique identifier</td>\n</tr>\n<tr>\n<td>xml</td>\n<td></td>\n<td>XML data</td>\n</tr>\n</tbody>\n</table>\n</details>\n<br/>\n<p>你可以将列从一种类型变更到另一种类型，但是不同类型之间可能有一些不兼容的地方。例如，如果你把一个时间戳转换到一个日期，你将失去所有以前保存的时间信息。</p>\n<h3 id=\"主键\">主键 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%b8%bb%e9%94%ae\"><i class=\"material-icons align-middle\">link</i></a></h3><p>一个表可以有一个\"主键\"–每行数据的唯一标识符。关于主键的一些提示：</p>\n<ul>\n<li>建议为你数据库中的每张表都创建一个主键。</li>\n<li>你可以使用任何列作为主键，只要它对每行都是唯一的。</li>\n<li>通常使用 <code>uuid</code> 类型或编号的<code>identity</code>列作为主键。</li>\n</ul>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"5f0a6cd\" tabindex=\"0\"><code class=\"language-sql\">create table movies (\n  id bigint generated always as identity primary key\n);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在上面的例子中，我们已经：</p>\n<p>1.创建了一个名为<code>id</code>的列;</p>\n<ol>\n<li>指定数据类型为<code>bigint</code>;</li>\n<li>指示数据库，这应该是<code>generated always as identity</code>，这意味着Postgres将自动给这个列分配一个唯一的数字。</li>\n<li>因为它是唯一的，我们也可以用它作为我们的`主键’。</li>\n</ol>\n<p>我们也可以使用`generated by default as identity，这将允许我们插入我们自己的唯一值。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f251dca\" tabindex=\"0\"><code class=\"language-sql\">create table movies (\n  id bigint generated by default as identity primary key\n);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"加载数据\">加载数据 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae\"><i class=\"material-icons align-middle\">link</i></a></h2><p>有几种方法可以在Supabase中加载数据。你可以直接向数据库加载数据，或者使用API。\n如果你要加载大型数据集，请使用 “批量加载 “说明。</p>\n<h3 id=\"基本数据加载\">基本数据加载 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%9f%ba%e6%9c%ac%e6%95%b0%e6%8d%ae%e5%8a%a0%e8%bd%bd\"><i class=\"material-icons align-middle\">link</i></a></h3>\n\n<div class=\"tab-content\" id=\"nav-tab-content\">\n<div aria-labelledby=\"nav-1\" class=\"tab-pane fade show active\" id=\"fbadce\" role=\"tabpanel\">\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"2e5d610\" tabindex=\"0\"><code class=\"language-sql\">insert into movies\n  (name, description)\nvalues\n  ('The Empire Strikes Back', 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'),\n  ('Return of the Jedi', 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.');</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n</div>\n<div aria-labelledby=\"nav-1\" class=\"tab-pane fade\" id=\"dbecfa\" role=\"tabpanel\">\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e1cb154\" tabindex=\"0\"><code class=\"language-sql\">const { data, error } = await supabase\n.from('movies')\n.insert([{\n  name: 'The Empire Strikes Back',\n  description: 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'\n}, {\n  name: 'Return of the Jedi',\n  description: 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'\n}])</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n</div>\n<div aria-labelledby=\"nav-1\" class=\"tab-pane fade\" id=\"bceafd\" role=\"tabpanel\">\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f7bb659\" tabindex=\"0\"><code class=\"language-sql\">final res = await supabase\n.from('movies')\n.insert([{\n  name: 'The Empire Strikes Back',\n  description: 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'\n}, {\n  name: 'Return of the Jedi',\n  description: 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'\n}]).execute();</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n</div>\n</div>\n<h3 id=\"批量数据加载\">批量数据加载 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%89%b9%e9%87%8f%e6%95%b0%e6%8d%ae%e5%8a%a0%e8%bd%bd\"><i class=\"material-icons align-middle\">link</i></a></h3><p>当插入大型数据集时，最好使用PostgreSQL的<a href=\"https://www.postgresql.org/docs/current/sql-copy.html\" rel=\"external\" target=\"_blank\">COPY<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a>命令。\n这可以直接从一个文件加载数据到一个表中。有几种文件格式可用于复制数据：文本、csv、二进制、JSON等。</p>\n<p>例如，如果你想把一个CSV文件加载到你的movies数据表中。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-csv\" id=\"3d37b1e\" tabindex=\"0\"><code class=\"language-csv\"><span class=\"token value\">\"The Empire Strikes Back\"</span><span class=\"token punctuation\">,</span><span class=\"token value\"> </span><span class=\"token value\">\"After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.\"</span>\n<span class=\"token value\">\"Return of the Jedi\"</span><span class=\"token punctuation\">,</span><span class=\"token value\"> </span><span class=\"token value\">\"After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.\"</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>你将<a data-bs-delay='{\"hide\":300,\"show\":550}' data-bs-html=\"true\" data-bs-title=\"&lt;a href='/docs/app/development_guide/database/connecting-to-postgres/'&gt;&lt;p&gt;数据库&lt;/p&gt;&lt;strong&gt;数据库连接&lt;/strong&gt;&lt;br&gt;There are various ways to connect to your Postgres database.&lt;/a&gt;\" data-bs-toggle=\"tooltip\" href=\"/docs/app/development_guide/database/connecting-to-postgres/\">连接</a>到你的数据库，然后用COPY命令加载文件：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-bash\" id=\"433ab67\" tabindex=\"0\"><code class=\"language-bash\">psql <span class=\"token parameter variable\">-h</span> DATABASE_URL <span class=\"token parameter variable\">-p</span> <span class=\"token number\">5432</span> <span class=\"token parameter variable\">-d</span> postgres <span class=\"token parameter variable\">-U</span> postgres <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"COPY movies FROM './movies.csv';\"</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"用外键连接表\">用外键连接表 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%94%a8%e5%a4%96%e9%94%ae%e8%bf%9e%e6%8e%a5%e8%a1%a8\"><i class=\"material-icons align-middle\">link</i></a></h2><p>多张表可以用外键 “连接 “在一起。</p>\n<img src=\"../../../img/guides/database/foreign-keys.png\"/>\n<p>这就是 <code>关系型</code>命名的由来，因为数据通常形成某种关系。</p>\n<p>在我们上面的<code>movies</code>例子中，我们可能想为每部电影添加一个  <code>category</code>（例如，“动作片”，或 “纪录片”）。\n让我们创建一个名为 <code>categories</code>的新表，并 <code>连接</code>我们的 <code>movies</code>表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"99319b1\" tabindex=\"0\"><code class=\"language-sql\">create table categories (\n  id bigint generated always as identity primary key,\n  name text -- category name\n);\n\nalter table movies\n  add column category_id bigint references categories;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>你也可以通过创建一个 <code>连接</code>表来创建 <code>多对多</code>关系。\n例如，如果你有以下情况。</p>\n<ul>\n<li>你有一个 <code>movies</code>的列表。</li>\n<li>一部电影可以有几个<code>actors</code>。</li>\n<li>一个<code>actors</code>可以在几部电影中演出。</li>\n</ul>\n\n<div class=\"tab-content\" id=\"nav-tab-content\">\n<div aria-labelledby=\"nav-1\" class=\"tab-pane fade show active\" id=\"cfedab\" role=\"tabpanel\">\n<div classname=\"video-container\">\n<iframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"1\" src=\"https://www.youtube-nocookie.com/embed/TKwF3IGij5c\"></iframe>\n</div>\n</div>\n<div aria-labelledby=\"nav-1\" class=\"tab-pane fade\" id=\"becfda\" role=\"tabpanel\">\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"8d14f83\" tabindex=\"0\"><code class=\"language-sql\">create table movies (\n  id bigint generated by default as identity primary key,\n  name text,\n  description text\n);\n\ncreate table actors (\n  id bigint generated by default as identity primary key,\n  name text\n);\n\ncreate table performances (\n  id bigint generated by default as identity primary key,\n  movie_id bigint not null references movies,\n  actor_id bigint not null references actors\n);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n</div>\n</div>\n<h2 id=\"schemas\">Schemas <a aria-hidden=\"true\" class=\"anchor\" href=\"#schemas\"><i class=\"material-icons align-middle\">link</i></a></h2><p>表属于<code>schemas</code>。<code>schemas</code>是组织你的表的一种方式，通常是出于安全原因。\n<img src=\"../../../img/guides/database/schema-tables.png\"/></p>\n<p>如果你在创建表时没有明确地传递模式，Postgres会假定你想在<code>public</code>模式中创建表。</p>\n<p>我们可以创建用于组织表的模式。例如，我们可能希望有一个私人模式，从我们的API中隐藏起来：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"af9d8a5\" tabindex=\"0\"><code class=\"language-sql\">create schema private;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>现在我们可以在<code>private</code>模式中创建表：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"3b215de\" tabindex=\"0\"><code class=\"language-sql\">create table salaries (\n  id bigint generated by default as identity primary key,\n  salary bigint not null,\n  actor_id bigint not null references public.actors\n);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"视图\">视图 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%a7%86%e5%9b%be\"><i class=\"material-icons align-middle\">link</i></a></h2><p>视图是查询的一个方便的快捷方式。创建一个视图并不涉及新的表或数据。当运行时，一个底层查询被执行，将其结果返回给用户。</p>\n<div class=\"alert alert-info d-flex\" role=\"alert\">\n<div class=\"flex-shrink-1 alert-icon\">\n<span class=\"material-icons size-20 me-2\">\n  info\n  </span></div>\n<div class=\"w-100\">\n<p>默认情况下，PostgreSQL视图会绕过行级安全，除非你改变它们的所有者(详见: <a href=\"https://github.com/supabase/supabase/discussions/901\" rel=\"external\" target=\"_blank\">https://github.com/supabase/supabase/discussions/901<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a>)\nPostgreSQL v15（即将推出）将通过<a href=\"https://www.depesz.com/2022/03/22/waiting-for-postgresql-15-add-support-for-security-invoker-views/\" rel=\"external\" target=\"_blank\">security invoker views<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a> 对此有一个更直观的控制，前面的步骤就不需要了。</p>\n</div>\n</div>\n<p>假设我们有一个大学的数据库中的以下表格:</p>\n<p><strong><code>students</code></strong>\n</p><table class=\"table table-striped-columns\">\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Princess Leia</td>\n<td>undergraduate</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Yoda</td>\n<td>graduate</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Anakin Skywalker</td>\n<td>graduate</td>\n</tr>\n</tbody>\n</table>\n<strong><code>courses</code></strong>\n<table class=\"table table-striped-columns\">\n<thead>\n<tr>\n<th>id</th>\n<th>title</th>\n<th>code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Introduction to Postgres</td>\n<td>PG101</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Authentication Theories</td>\n<td>AUTH205</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Fundamentals of Supabase</td>\n<td>SUP412</td>\n</tr>\n</tbody>\n</table>\n<strong><code>grades</code></strong>\n<table class=\"table table-striped-columns\">\n<thead>\n<tr>\n<th>id</th>\n<th>student_id</th>\n<th>course_id</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>B+</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>A+</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>2</td>\n<td>A</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3</td>\n<td>1</td>\n<td>A-</td>\n</tr>\n<tr>\n<td>5</td>\n<td>3</td>\n<td>2</td>\n<td>A</td>\n</tr>\n<tr>\n<td>6</td>\n<td>3</td>\n<td>3</td>\n<td>B-</td>\n</tr>\n</tbody>\n</table>\n\n创建一个由所有三个表组成的视图将看起来像这样:<p></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"c051401\" tabindex=\"0\"><code class=\"language-sql\">create view transcripts as\n    select\n        students.name,\n        students.type,\n        courses.title,\n        courses.code,\n        grades.result\n    from grades\n    left join students on grades.student_id = students.id\n    left join courses on grades.course_id = courses.id;\n\nalter view transcripts owner to authenticated;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>完成后，我们现在可以通过以下方式访问查询:</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"a8b8982\" tabindex=\"0\"><code class=\"language-sql\">select * from transcripts;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"何时使用视图\">何时使用视图 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%bd%95%e6%97%b6%e4%bd%bf%e7%94%a8%e8%a7%86%e5%9b%be\"><i class=\"material-icons align-middle\">link</i></a></h3><p>视图提供了几个好处：</p>\n<ul>\n<li>简单性</li>\n<li>一致性</li>\n<li>逻辑上的组织</li>\n<li>安全性</li>\n</ul>\n<h4 id=\"简单化\">简单化 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%ae%80%e5%8d%95%e5%8c%96\"><i class=\"material-icons align-middle\">link</i></a></h4><p>当一个查询变得复杂时，调用它就变得很麻烦了。特别是当我们定期运行它时。在上面的例子中，与其反复运行。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"1db1aea\" tabindex=\"0\"><code class=\"language-sql\">select\n    students.name,\n    students.type,\n    courses.title,\n    courses.code,\n    grades.result\nfrom grades\nleft join students on grades.student_id = students.id\nleft join courses on grades.course_id = courses.id;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>我们可以运行如下命令来替代：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"b3f8930\" tabindex=\"0\"><code class=\"language-sql\">select * from transcripts;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>此外，视图的行为就像一个典型的表。我们可以安全地在表<code>JOIN</code>中使用它，甚至可以使用现有的视图创建新的视图。</p>\n<h4 id=\"一致性\">一致性 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%b8%80%e8%87%b4%e6%80%a7\"><i class=\"material-icons align-middle\">link</i></a></h4><p>视图可以确保在重复执行查询时，出错的可能性会减少。在我们上面的例子中，我们可能决定要排除Introduction to Postgres这一课程。该查询将变成：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"523e431\" tabindex=\"0\"><code class=\"language-sql\">select\n    students.name,\n    students.type,\n    courses.title,\n    courses.code,\n    grades.result\nfrom grades\n    left join students on grades.student_id = students.id\n    left join courses on grades.course_id = courses.id\nwhere courses.code != 'PG101';</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>如果没有视图，我们将需要进入每个依赖性查询来添加新的规则。这将增加错误和不一致的可能性，同时也会给开发人员带来很多麻烦。有了视图，我们可以只改变<strong>transcripts</strong>视图中的基础查询脚本。这个改变将应用于所有使用这个视图的应用程序。</p>\n<h4 id=\"逻辑性组织\">逻辑性组织 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e9%80%bb%e8%be%91%e6%80%a7%e7%bb%84%e7%bb%87\"><i class=\"material-icons align-middle\">link</i></a></h4><p>通过视图，我们可以给我们的查询一个名字。这对于使用同一数据库的团队来说非常有用。与其猜测一个查询应该做什么，一个名字好的视图可以很容易地解释它。\n例如，通过查看视图的名称<strong>transcripts</strong>，我们可以推断出基础查询可能涉及<strong>students</strong>、<strong>courses</strong>和<strong>grades</strong>表。</p>\n<h4 id=\"安全性\">安全性 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%ae%89%e5%85%a8%e6%80%a7\"><i class=\"material-icons align-middle\">link</i></a></h4><p>视图可以限制呈现给用户的数据的数量和类型。我们不允许用户直接访问一组表，而是为他们提供一个视图。我们可以通过将敏感列从底层查询中排除来防止他们读取这些敏感列。</p>\n<h3 id=\"物化视图\">物化视图 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%89%a9%e5%8c%96%e8%a7%86%e5%9b%be\"><i class=\"material-icons align-middle\">link</i></a></h3><p>一个<a href=\"https://www.postgresql.org/docs/12/rules-materializedviews.html\" rel=\"external\" target=\"_blank\">物化视图<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a>是视图的一种形式，但它也将结果存储到磁盘上。在后续读取物化视图时，返回其结果的时间会比传统视图快得多。这是因为数据对物化视图来说是现成的，而传统视图在每次调用时都要执行底层查询。</p>\n<p>使用我们上面的例子，可以这样创建一个物化视图：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"35daadb\" tabindex=\"0\"><code class=\"language-sql\">create materialized view transcripts as\n  select\n      students.name,\n      students.type,\n      courses.title,\n      courses.code,\n      grades.result\n  from grades\n  left join students on grades.student_id = students.id\n  left join courses on grades.course_id = courses.id;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>从物化视图中读取数据与传统视图相同：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f1b0893\" tabindex=\"0\"><code class=\"language-sql\">select * from transcripts;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"刷新物化视图\">刷新物化视图 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%88%b7%e6%96%b0%e7%89%a9%e5%8c%96%e8%a7%86%e5%9b%be\"><i class=\"material-icons align-middle\">link</i></a></h3><p>不幸的是，有一个权衡 - 物化视图中的数据并不总是最新的。我们需要定期刷新它，以防止数据变得过于陈旧。要做到这一点：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"624e786\" tabindex=\"0\"><code class=\"language-sql\">refresh materialized view transcripts;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这取决于你如何定期刷新你的物化视图，而且根据每个视图的使用情况，它可能是不同的。</p>\n<h3 id=\"物化的视图与传统的视图\">物化的视图与传统的视图 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%89%a9%e5%8c%96%e7%9a%84%e8%a7%86%e5%9b%be%e4%b8%8e%e4%bc%a0%e7%bb%9f%e7%9a%84%e8%a7%86%e5%9b%be\"><i class=\"material-icons align-middle\">link</i></a></h3><p>当查询或视图的执行时间太慢时，物化视图是有用的。这些可能发生在涉及多个表和数十亿行的视图或查询中。然而，当使用这样的视图时，应该对数据过期有一定的容忍度。物化视图的一些用例是内部仪表盘和分析。</p>\n<p>创建物化视图并不是解决低效查询的方法。即使你正在实现一个物化视图，你也应该始终寻求优化一个运行缓慢的查询。</p>\n<h2 id=\"资源\">资源 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%b5%84%e6%ba%90\"><i class=\"material-icons align-middle\">link</i></a></h2><ul>\n<li><a href=\"https://www.postgresql.org/docs/current/sql-createtable.html\" rel=\"external\" target=\"_blank\">官方文档：创建表<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a></li>\n<li><a href=\"https://www.postgresql.org/docs/12/sql-createview.html\" rel=\"external\" target=\"_blank\">官方文档：创建视图<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a></li>\n<li><a href=\"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-create-table/\" rel=\"external\" target=\"_blank\">PostgreSQL 教程：创建表<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a></li>\n<li><a href=\"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-add-column/\" rel=\"external\" target=\"_blank\">PostgreSQL 教程：添加列<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a></li>\n<li><a href=\"https://www.postgresqltutorial.com/postgresql-views/\" rel=\"external\" target=\"_blank\">PostgreSQL 教程：视图<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a></li>\n</ul>\n</div>\n</div>\n<div><hr class=\"doc-hr\"/>\n<div class=\"d-print-none\" id=\"doc-nav\">\n<div class=\"row flex-xl-nowrap\">\n<div class=\"col-sm-6 pt-2 doc-next\">\n<a href=\"/docs/app/development_guide/database/functions/\">\n<div class=\"card h-100 my-1\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\"><i class=\"material-icons align-middle\">navigate_before</i> 数据库函数</p>\n</div>\n</div>\n</a>\n</div>\n<div class=\"col-sm-6 pt-2 doc-prev\">\n<a class=\"ms-auto\" href=\"/docs/app/development_guide/database/webhooks/\">\n<div class=\"card h-100 my-1 text-end\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\">数据库 Webhooks <i class=\"material-icons align-middle\">navigate_next</i></p>\n</div>\n</div>\n</a>\n</div>\n</div>\n</div></div>\n</div>\n</div>\n</div>\n</div>\n\n</main>",
  "markdown": "[MemFireDB备份 6](/)\n\nmenu\n\n[官网](https://memfiredb.com/)\n[论坛](https://community.memfiredb.com/)\n[登录](https://cloud.memfiredb.com/auth/login)\n\nEnable dark mode\n\nEnable light mode\n\n本页\n\nTable of Contents\n\n# 表格和数据\n\n表是存储数据的地方。\n\n表格类似于Excel电子表格。它们包含列和行。\n例如，这个表有3列（`id`, `name`, `description`）和4行的数据：\n\n| `id` | `name` | `description` |\n| --- | --- | --- |\n| 1 | The Phantom Menace | Two Jedi escape a hostile blockade to find allies and come across a young boy who may bring balance to the Force. |\n| 2 | Attack of the Clones | Ten years after the invasion of Naboo, the Galactic Republic is facing a Separatist movement. |\n| 3 | Revenge of the Sith | As Obi-Wan pursues a new threat, Anakin acts as a double agent between the Jedi Council and Palpatine and is lured into a sinister plan to rule the galaxy. |\n| 4 | Star Wars | Luke Skywalker joins forces with a Jedi Knight, a cocky pilot, a Wookiee and two droids to save the galaxy from the Empire’s world-destroying battle station. |\n\n它与电子表格有一些重要的区别，但如果你是关系型数据库的新手，它是一个很好的学习起点。\n\n## 创建表 [*link*](#%e5%88%9b%e5%bb%ba%e8%a1%a8)\n\n当创建一个表时，最好的做法是同时添加列。\n\n![](../../../img/guides/database/tables-columns.png)\n\n你必须在创建每一列时定义它的 “数据类型”。你可以在创建表后随时添加和删除列。\n\nSupabase 为创建表提供了几个选项。你可以使用仪表板或直接使用 SQL 创建它们。\n我们在 Dashboard 中提供了一个 SQL 编辑器，或者你可以 [连接](/docs/app/development_guide/database/connecting-to-postgres/)到你的数据库并自己运行SQL查询。\n\n[\n\n](../../../videos/api/api-create-table-sm.mp4)\n\n1. 进入仪表板中的表编辑器页面。\n2. 单击**新表**，创建一个名为`todos`的表。\n3. 单击**保存**。\n4. 点击**新列**，创建一个名为`task`的列，数据类型为`text`。\n5. 单击**保存**。\n\n```\ncreate table movies (\n  id bigint generated by default as identity primary key,\n  name text,\n  description text\n);\n```\n\ninfo\n\n当命名表时，使用小写字母和下划线而不是空格（例如，`table_name`，而不是`Table Name`）。\n\n## 列 [*link*](#%e5%88%97)\n\n当你创建一个列时，你必须定义 “数据类型”。\n\n### 数据类型 [*link*](#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b)\n\n每个列都是一个预定义的类型。PostgreSQL提供了许多[默认类型](https://www.postgresql.org/docs/current/datatype.html)，你甚至可以设计你自己的(或使用扩展) 如果默认类型不满足你的需求。\n\n显示/隐藏默认数据类型\n\n| `名称` | `别名` | `描述` |\n| --- | --- | --- |\n| bigint | int8 | signed eight-byte integer |\n| bigserial | serial8 | autoincrementing eight-byte integer |\n| bit |  | fixed-length bit string |\n| bit varying | varbit | variable-length bit string |\n| boolean | bool | logical Boolean (true/false) |\n| box |  | rectangular box on a plane |\n| bytea |  | binary data (“byte array”) |\n| character | char | fixed-length character string |\n| character varying | varchar | variable-length character string |\n| cidr |  | IPv4 or IPv6 network address |\n| circle |  | circle on a plane |\n| date |  | calendar date (year, month, day) |\n| double precision | float8 | double precision floating-point number (8 bytes) |\n| inet |  | IPv4 or IPv6 host address |\n| integer | int, int4 | signed four-byte integer |\n| interval [ fields ] |  | time span |\n| json |  | textual JSON data |\n| jsonb |  | binary JSON data, decomposed |\n| line |  | infinite line on a plane |\n| lseg |  | line segment on a plane |\n| macaddr |  | MAC (Media Access Control) address |\n| macaddr8 |  | MAC (Media Access Control) address (EUI-64 format) |\n| money |  | currency amount |\n| numeric | decimal | exact numeric of selectable precision |\n| path |  | geometric path on a plane |\n| pg\\_lsn |  | PostgreSQL Log Sequence Number |\n| pg\\_snapshot |  | user-level transaction ID snapshot |\n| point |  | geometric point on a plane |\n| polygon |  | closed geometric path on a plane |\n| real | float4 | single precision floating-point number (4 bytes) |\n| smallint | int2 | signed two-byte integer |\n| smallserial | serial2 | autoincrementing two-byte integer |\n| serial | serial4 | autoincrementing four-byte integer |\n| text |  | variable-length character string |\n| time [ without time zone ] |  | time of day (no time zone) |\n| time with time zone | timetz | time of day, including time zone |\n| timestamp [ without time zone ] |  | date and time (no time zone) |\n| timestamp with time zone | timestamptz | date and time, including time zone |\n| tsquery |  | text search query |\n| tsvector |  | text search document |\n| txid\\_snapshot |  | user-level transaction ID snapshot (deprecated; see pg\\_snapshot) |\n| uuid |  | universally unique identifier |\n| xml |  | XML data |\n\n你可以将列从一种类型变更到另一种类型，但是不同类型之间可能有一些不兼容的地方。例如，如果你把一个时间戳转换到一个日期，你将失去所有以前保存的时间信息。\n\n### 主键 [*link*](#%e4%b8%bb%e9%94%ae)\n\n一个表可以有一个\"主键\"–每行数据的唯一标识符。关于主键的一些提示：\n\n* 建议为你数据库中的每张表都创建一个主键。\n* 你可以使用任何列作为主键，只要它对每行都是唯一的。\n* 通常使用 `uuid` 类型或编号的`identity`列作为主键。\n\n```\ncreate table movies (\n  id bigint generated always as identity primary key\n);\n```\n\n在上面的例子中，我们已经：\n\n1.创建了一个名为`id`的列;\n\n1. 指定数据类型为`bigint`;\n2. 指示数据库，这应该是`generated always as identity`，这意味着Postgres将自动给这个列分配一个唯一的数字。\n3. 因为它是唯一的，我们也可以用它作为我们的`主键’。\n\n我们也可以使用`generated by default as identity，这将允许我们插入我们自己的唯一值。\n\n```\ncreate table movies (\n  id bigint generated by default as identity primary key\n);\n```\n\n## 加载数据 [*link*](#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae)\n\n有几种方法可以在Supabase中加载数据。你可以直接向数据库加载数据，或者使用API。\n如果你要加载大型数据集，请使用 “批量加载 “说明。\n\n### 基本数据加载 [*link*](#%e5%9f%ba%e6%9c%ac%e6%95%b0%e6%8d%ae%e5%8a%a0%e8%bd%bd)\n\n```\ninsert into movies\n  (name, description)\nvalues\n  ('The Empire Strikes Back', 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'),\n  ('Return of the Jedi', 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.');\n```\n\n```\nconst { data, error } = await supabase\n.from('movies')\n.insert([{\n  name: 'The Empire Strikes Back',\n  description: 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'\n}, {\n  name: 'Return of the Jedi',\n  description: 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'\n}])\n```\n\n```\nfinal res = await supabase\n.from('movies')\n.insert([{\n  name: 'The Empire Strikes Back',\n  description: 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'\n}, {\n  name: 'Return of the Jedi',\n  description: 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'\n}]).execute();\n```\n\n### 批量数据加载 [*link*](#%e6%89%b9%e9%87%8f%e6%95%b0%e6%8d%ae%e5%8a%a0%e8%bd%bd)\n\n当插入大型数据集时，最好使用PostgreSQL的[COPY](https://www.postgresql.org/docs/current/sql-copy.html)命令。\n这可以直接从一个文件加载数据到一个表中。有几种文件格式可用于复制数据：文本、csv、二进制、JSON等。\n\n例如，如果你想把一个CSV文件加载到你的movies数据表中。\n\n```\n\"The Empire Strikes Back\", \"After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.\"\n\"Return of the Jedi\", \"After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.\"\n```\n\n你将[连接](/docs/app/development_guide/database/connecting-to-postgres/)到你的数据库，然后用COPY命令加载文件：\n\n```\npsql -h DATABASE_URL -p 5432 -d postgres -U postgres \\\n-c \"COPY movies FROM './movies.csv';\"\n```\n\n## 用外键连接表 [*link*](#%e7%94%a8%e5%a4%96%e9%94%ae%e8%bf%9e%e6%8e%a5%e8%a1%a8)\n\n多张表可以用外键 “连接 “在一起。\n\n![](../../../img/guides/database/foreign-keys.png)\n\n这就是 `关系型`命名的由来，因为数据通常形成某种关系。\n\n在我们上面的`movies`例子中，我们可能想为每部电影添加一个 `category`（例如，“动作片”，或 “纪录片”）。\n让我们创建一个名为 `categories`的新表，并 `连接`我们的 `movies`表。\n\n```\ncreate table categories (\n  id bigint generated always as identity primary key,\n  name text -- category name\n);\n\nalter table movies\n  add column category_id bigint references categories;\n```\n\n你也可以通过创建一个 `连接`表来创建 `多对多`关系。\n例如，如果你有以下情况。\n\n* 你有一个 `movies`的列表。\n* 一部电影可以有几个`actors`。\n* 一个`actors`可以在几部电影中演出。\n\n```\ncreate table movies (\n  id bigint generated by default as identity primary key,\n  name text,\n  description text\n);\n\ncreate table actors (\n  id bigint generated by default as identity primary key,\n  name text\n);\n\ncreate table performances (\n  id bigint generated by default as identity primary key,\n  movie_id bigint not null references movies,\n  actor_id bigint not null references actors\n);\n```\n\n## Schemas [*link*](#schemas)\n\n表属于`schemas`。`schemas`是组织你的表的一种方式，通常是出于安全原因。\n![](../../../img/guides/database/schema-tables.png)\n\n如果你在创建表时没有明确地传递模式，Postgres会假定你想在`public`模式中创建表。\n\n我们可以创建用于组织表的模式。例如，我们可能希望有一个私人模式，从我们的API中隐藏起来：\n\n```\ncreate schema private;\n```\n\n现在我们可以在`private`模式中创建表：\n\n```\ncreate table salaries (\n  id bigint generated by default as identity primary key,\n  salary bigint not null,\n  actor_id bigint not null references public.actors\n);\n```\n\n## 视图 [*link*](#%e8%a7%86%e5%9b%be)\n\n视图是查询的一个方便的快捷方式。创建一个视图并不涉及新的表或数据。当运行时，一个底层查询被执行，将其结果返回给用户。\n\ninfo\n\n默认情况下，PostgreSQL视图会绕过行级安全，除非你改变它们的所有者(详见: <https://github.com/supabase/supabase/discussions/901>)\nPostgreSQL v15（即将推出）将通过[security invoker views](https://www.depesz.com/2022/03/22/waiting-for-postgresql-15-add-support-for-security-invoker-views/) 对此有一个更直观的控制，前面的步骤就不需要了。\n\n假设我们有一个大学的数据库中的以下表格:\n\n**`students`**\n\n| id | name | type |\n| --- | --- | --- |\n| 1 | Princess Leia | undergraduate |\n| 2 | Yoda | graduate |\n| 3 | Anakin Skywalker | graduate |\n\n**`courses`**\n\n| id | title | code |\n| --- | --- | --- |\n| 1 | Introduction to Postgres | PG101 |\n| 2 | Authentication Theories | AUTH205 |\n| 3 | Fundamentals of Supabase | SUP412 |\n\n**`grades`**\n\n| id | student\\_id | course\\_id | result |\n| --- | --- | --- | --- |\n| 1 | 1 | 1 | B+ |\n| 2 | 1 | 3 | A+ |\n| 3 | 2 | 2 | A |\n| 4 | 3 | 1 | A- |\n| 5 | 3 | 2 | A |\n| 6 | 3 | 3 | B- |\n\n创建一个由所有三个表组成的视图将看起来像这样:\n\n```\ncreate view transcripts as\n    select\n        students.name,\n        students.type,\n        courses.title,\n        courses.code,\n        grades.result\n    from grades\n    left join students on grades.student_id = students.id\n    left join courses on grades.course_id = courses.id;\n\nalter view transcripts owner to authenticated;\n```\n\n完成后，我们现在可以通过以下方式访问查询:\n\n```\nselect * from transcripts;\n```\n\n### 何时使用视图 [*link*](#%e4%bd%95%e6%97%b6%e4%bd%bf%e7%94%a8%e8%a7%86%e5%9b%be)\n\n视图提供了几个好处：\n\n* 简单性\n* 一致性\n* 逻辑上的组织\n* 安全性\n\n#### 简单化 [*link*](#%e7%ae%80%e5%8d%95%e5%8c%96)\n\n当一个查询变得复杂时，调用它就变得很麻烦了。特别是当我们定期运行它时。在上面的例子中，与其反复运行。\n\n```\nselect\n    students.name,\n    students.type,\n    courses.title,\n    courses.code,\n    grades.result\nfrom grades\nleft join students on grades.student_id = students.id\nleft join courses on grades.course_id = courses.id;\n```\n\n我们可以运行如下命令来替代：\n\n```\nselect * from transcripts;\n```\n\n此外，视图的行为就像一个典型的表。我们可以安全地在表`JOIN`中使用它，甚至可以使用现有的视图创建新的视图。\n\n#### 一致性 [*link*](#%e4%b8%80%e8%87%b4%e6%80%a7)\n\n视图可以确保在重复执行查询时，出错的可能性会减少。在我们上面的例子中，我们可能决定要排除Introduction to Postgres这一课程。该查询将变成：\n\n```\nselect\n    students.name,\n    students.type,\n    courses.title,\n    courses.code,\n    grades.result\nfrom grades\n    left join students on grades.student_id = students.id\n    left join courses on grades.course_id = courses.id\nwhere courses.code != 'PG101';\n```\n\n如果没有视图，我们将需要进入每个依赖性查询来添加新的规则。这将增加错误和不一致的可能性，同时也会给开发人员带来很多麻烦。有了视图，我们可以只改变**transcripts**视图中的基础查询脚本。这个改变将应用于所有使用这个视图的应用程序。\n\n#### 逻辑性组织 [*link*](#%e9%80%bb%e8%be%91%e6%80%a7%e7%bb%84%e7%bb%87)\n\n通过视图，我们可以给我们的查询一个名字。这对于使用同一数据库的团队来说非常有用。与其猜测一个查询应该做什么，一个名字好的视图可以很容易地解释它。\n例如，通过查看视图的名称**transcripts**，我们可以推断出基础查询可能涉及**students**、**courses**和**grades**表。\n\n#### 安全性 [*link*](#%e5%ae%89%e5%85%a8%e6%80%a7)\n\n视图可以限制呈现给用户的数据的数量和类型。我们不允许用户直接访问一组表，而是为他们提供一个视图。我们可以通过将敏感列从底层查询中排除来防止他们读取这些敏感列。\n\n### 物化视图 [*link*](#%e7%89%a9%e5%8c%96%e8%a7%86%e5%9b%be)\n\n一个[物化视图](https://www.postgresql.org/docs/12/rules-materializedviews.html)是视图的一种形式，但它也将结果存储到磁盘上。在后续读取物化视图时，返回其结果的时间会比传统视图快得多。这是因为数据对物化视图来说是现成的，而传统视图在每次调用时都要执行底层查询。\n\n使用我们上面的例子，可以这样创建一个物化视图：\n\n```\ncreate materialized view transcripts as\n  select\n      students.name,\n      students.type,\n      courses.title,\n      courses.code,\n      grades.result\n  from grades\n  left join students on grades.student_id = students.id\n  left join courses on grades.course_id = courses.id;\n```\n\n从物化视图中读取数据与传统视图相同：\n\n```\nselect * from transcripts;\n```\n\n### 刷新物化视图 [*link*](#%e5%88%b7%e6%96%b0%e7%89%a9%e5%8c%96%e8%a7%86%e5%9b%be)\n\n不幸的是，有一个权衡 - 物化视图中的数据并不总是最新的。我们需要定期刷新它，以防止数据变得过于陈旧。要做到这一点：\n\n```\nrefresh materialized view transcripts;\n```\n\n这取决于你如何定期刷新你的物化视图，而且根据每个视图的使用情况，它可能是不同的。\n\n### 物化的视图与传统的视图 [*link*](#%e7%89%a9%e5%8c%96%e7%9a%84%e8%a7%86%e5%9b%be%e4%b8%8e%e4%bc%a0%e7%bb%9f%e7%9a%84%e8%a7%86%e5%9b%be)\n\n当查询或视图的执行时间太慢时，物化视图是有用的。这些可能发生在涉及多个表和数十亿行的视图或查询中。然而，当使用这样的视图时，应该对数据过期有一定的容忍度。物化视图的一些用例是内部仪表盘和分析。\n\n创建物化视图并不是解决低效查询的方法。即使你正在实现一个物化视图，你也应该始终寻求优化一个运行缓慢的查询。\n\n## 资源 [*link*](#%e8%b5%84%e6%ba%90)\n\n* [官方文档：创建表](https://www.postgresql.org/docs/current/sql-createtable.html)\n* [官方文档：创建视图](https://www.postgresql.org/docs/12/sql-createview.html)\n* [PostgreSQL 教程：创建表](https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-create-table/)\n* [PostgreSQL 教程：添加列](https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-add-column/)\n* [PostgreSQL 教程：视图](https://www.postgresqltutorial.com/postgresql-views/)\n\n---\n\n[*navigate\\_before* 数据库函数](/docs/app/development_guide/database/functions/)\n\n[数据库 Webhooks *navigate\\_next*](/docs/app/development_guide/database/webhooks/)"
}