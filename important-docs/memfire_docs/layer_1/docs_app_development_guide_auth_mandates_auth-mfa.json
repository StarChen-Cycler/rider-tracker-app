{
  "url": "https://docs.memfiredb.com/docs/app/development_guide/auth/mandates/auth-mfa/",
  "title": "多因素身份验证 | MemFire Cloud在线文档",
  "depth": 1,
  "timestamp": "2025-08-12 17:42:24",
  "html": "<main class=\"page-content bg-transparent\">\n<div class=\"top-header d-print-none\" id=\"top-header\">\n<div class=\"header-bar d-flex justify-content-between\">\n<div class=\"d-flex align-items-center\">\n<a alt=\"HomePage\" aria-label=\"HomePage\" class=\"logo-icon me-3\" href=\"/\">\n<div class=\"small\">\n<!--?xml version=\"1.0\" encoding=\"UTF-8\"?-->\n<svg height=\"112px\" version=\"1.1\" viewbox=\"0 0 99 112\" width=\"99px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<title>MemFireDB备份 6</title>\n<defs>\n<lineargradient id=\"linearGradient-1\" x1=\"49.9999885%\" x2=\"49.9999885%\" y1=\"98.082503%\" y2=\"0.766550128%\">\n<stop offset=\"0%\" stop-color=\"#ED1C23\"></stop>\n<stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop>\n</lineargradient>\n</defs>\n<g fill=\"none\" fill-rule=\"evenodd\" id=\"定稿\" stroke=\"none\" stroke-width=\"1\">\n<g id=\"MemFireDB备份-6\">\n<polygon fill=\"#F9AE7C\" id=\"Fill-1\" points=\"25.9728553 40.7912363 47.4268317 0.00591833831 1.15453123 26.7215251\"></polygon>\n<polygon fill=\"#F9AE7C\" id=\"Fill-3\" points=\"97.4213117 26.7267606 51.1285247 0.000910513587 72.4242993 40.8351686\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-5\" points=\"24.8347133 42.7618153 0.000455256793 28.682999 0.000455256793 82.1608764\"></polygon>\n<polygon fill=\"url(#linearGradient-1)\" id=\"Fill-7\" points=\"27.6634514 42.4662399 49.279044 109.05096 70.7296059 42.507213 49.2779058 1.3747617\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-9\" points=\"98.5660549 28.6951771 73.5622137 42.8047233 98.5660549 82.1719163\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-13\" points=\"72.2987623 45.061545 50.7514582 111.900071 97.579172 84.8646465\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-15\" points=\"26.1006687 45.0226206 0.987565799 84.8644188 47.8095888 111.898705\"></polygon>\n<path d=\"M60.0737516,38.507213 C59.3168872,35.669825 57.0462939,33.3514298 57.0462939,33.3514298 C57.0462939,33.3514298 57.0804382,35.8849338 56.2894295,37.513615 C55.4847631,39.1696116 53.8765685,40.3054773 53.8765685,40.3054773 C53.8765685,40.3054773 56.1016361,33.8840802 54.2715038,30.1247973 C52.0259496,25.5073552 49.1771803,23.3357803 49.1771803,23.3357803 C49.1771803,23.3357803 50.1070423,28.1319107 48.6240432,31.5065016 C47.1672215,34.8264618 42.8058614,36.7260208 40.7241997,38.7132167 C39.1865699,40.1791435 38.0814341,43.0711623 37.6068289,44.4847347 C37.5715465,44.5883056 37.560165,44.6918765 37.5533362,44.7943093 C37.584066,43.9816759 37.8890881,39.8024186 40.9654858,37.4293925 C43.8404325,35.2111538 41.2431925,30.3478731 41.2431925,30.3478731 C41.2431925,30.3478731 41.7212121,32.5638355 40.9939394,34.1401622 C40.2655285,35.7153507 38.7187936,36.5962726 38.0154218,38.259098 C37.3883056,39.7409589 37.5203301,44.1432921 37.5453692,44.8409731 C37.5453692,44.8591834 37.5476455,44.8762555 37.5476455,44.8921895 C37.5476455,44.9263338 37.5487836,44.9456822 37.5487836,44.9456822 L37.5487836,44.9115379 C37.5590269,45.2655001 37.7138142,45.6080808 37.9972116,45.8448143 L48.3713757,55.6442168 C48.8380139,56.0323232 49.5163466,56.0334614 49.9841229,55.6476312 L60.5938825,45.7105136 C60.9034571,45.4544316 61.0719021,45.0686015 61.0457249,44.6656992 C60.9546735,43.2282259 60.5699815,40.3692133 60.0737516,38.507213\" fill=\"#FFFFFF\" id=\"Fill-17\"></path>\n</g>\n</g>\n</svg>\n</div>\n<div class=\"big\">\n<svg height=\"20\" width=\"232\" xmlns=\"http://www.w3.org/2000/svg\"><defs><lineargradient id=\"a\" x1=\"50%\" x2=\"50%\" y1=\"98.083%\" y2=\".767%\"><stop offset=\"0%\" stop-color=\"#ED1C23\"></stop><stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop></lineargradient></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M78.622 12.384l1.596 21.94H77.49l-.847-14.154-8.98 15.523-4.899-15.53-4.416 14.162H55.6l7.085-21.871 5.712 17.174 10.224-17.244zm99.46.382l.324.01.454.036c.085.008.175.018.269.03l.61.096c1.09.203 2.518.644 3.883 1.596l.515.383-.46 3.694-.413-.62-.154-.195-.255-.285c-.765-.802-2.485-2.188-5.23-2.188-4.55 0-8.723 3.809-9.3 8.491-.287 2.311.334 4.469 1.755 6.077 1.342 1.517 3.257 2.354 5.39 2.354 2.606 0 4.58-1.225 5.606-2.04l.359-.3.424-.408.507-.552-.466 3.766-.093.06a12.622 12.622 0 01-4.577 1.842l-.629.1-.53.058-.418.027-.444.003c-2.918-.002-5.532-1.142-7.36-3.21-1.851-2.096-2.67-4.88-2.305-7.837.73-5.88 5.964-10.696 11.806-10.974l.732-.014zm18.174 9.018c1.724 0 3.344.713 4.443 1.956 1.101 1.248 1.59 2.88 1.377 4.596-.432 3.504-3.808 6.466-7.375 6.466-1.728 0-3.348-.715-4.45-1.96-1.096-1.242-1.583-2.864-1.377-4.563.44-3.52 3.818-6.495 7.382-6.495zm19.446.535l-1.486 12.02h-2.558l.16-1.292c-.936.93-2.462 1.755-4.173 1.755-1.318 0-2.48-.492-3.267-1.385-.804-.91-1.168-2.184-1.008-3.497l.9-7.274 2.597-.327-.914 7.402c-.101.785.084 1.466.525 1.968.49.552 1.27.845 2.25.845 1.526 0 3.3-1.155 3.51-2.873l.87-7.015 2.594-.327zm-63.587-.547c1.77 0 3.21.58 4.164 1.678 1.047 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.806 0 2.878-.434 3.868-.961l1.119-.623-.312 2.522-.106.06c-1.224.687-2.604 1.356-4.8 1.356-2.092 0-3.873-.708-5.006-1.992-.991-1.12-1.404-2.599-1.198-4.272.548-4.433 4.001-6.751 7.124-6.751zm-62.717 0c1.771 0 3.211.58 4.164 1.678 1.048 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.622 0 2.652-.35 3.563-.803l.594-.315.83-.466-.312 2.522-.105.06c-1.224.687-2.604 1.356-4.8 1.356-2.093 0-3.874-.708-5.007-1.992-.99-1.12-1.404-2.599-1.197-4.272.547-4.433 4-6.751 7.123-6.751zM231.476 12l-2.767 22.34h-2.556l.197-1.59c-1.104 1.191-2.882 2.021-4.471 2.021-1.781 0-3.24-.583-4.217-1.69-1.02-1.151-1.452-2.817-1.222-4.686.485-3.908 3.43-6.636 7.167-6.636 1.565 0 3.065.832 3.852 2.064l1.356-10.968 2.661-.855zm-42.07.002L186.64 34.34h-2.556l2.664-21.483 2.66-.854zm-56.632 1.268l-1.166 2.527h-9.586l-.85 6.867h6.627v.48h-.12l-.883 1.778v.24h-5.933l-1.138 9.163h-2.729l2.612-21.055h13.166zm2.715 9.038l-1.497 12.017h-2.559l1.455-11.722 2.601-.295zm-24.427-.537c1 0 1.93.427 2.616 1.204.84.95 1.224 2.29 1.053 3.677l-.955 7.673h-2.527l.922-7.445c.13-1.017-.027-1.81-.45-2.287-.326-.367-.815-.554-1.458-.554-1.954 0-3.178 1.346-3.332 2.613l-.955 7.673h-2.556l.922-7.445c.127-1.03-.024-1.826-.442-2.297-.319-.362-.801-.544-1.437-.544-1.522 0-3.3 1.166-3.516 2.901l-.912 7.385h-2.559l1.455-11.722 2.594-.295-.146 1.164c1.027-1.077 2.419-1.701 3.854-1.701 1.375 0 2.58.79 3.226 2.083.914-1.13 2.05-2.083 4.603-2.083zm29.487.532l-.206 1.73c1.082-.978 2.932-1.7 4.514-1.7h.269l-.271 2.282h-.214c-1.814 0-4.469.837-4.7 2.7l-.866 7.01h-2.558l1.45-11.693 2.582-.329zm55.47 1.865c-2.31 0-4.27 1.792-4.563 4.168-.144 1.145.15 2.196.824 2.957.64.725 1.586 1.126 2.656 1.126 2.292 0 4.241-1.78 4.532-4.14.146-1.169-.144-2.237-.821-3.003-.634-.715-1.567-1.108-2.628-1.108zm27.497-.029c-2.278 0-4.15 1.752-4.45 4.17-.149 1.187.137 2.255.8 3.006.611.692 1.526 1.076 2.57 1.076 2.294 0 4.173-1.743 4.468-4.143.152-1.21-.13-2.285-.79-3.033-.623-.704-1.52-1.076-2.598-1.076zm-134.356.045c-1.89 0-3.372 1.094-4.015 2.947h7.164a2.853 2.853 0 00-.71-1.956c-.574-.648-1.416-.991-2.439-.991zm62.715 0c-1.892 0-3.37 1.094-4.013 2.947h7.166a2.867 2.867 0 00-.713-1.956c-.573-.648-1.416-.991-2.44-.991zm-17.267-7.614c.919 0 1.706.748 1.754 1.668a1.587 1.587 0 01-1.603 1.692c-.917 0-1.704-.75-1.754-1.668a1.593 1.593 0 011.603-1.692z\" fill=\"#116\"></path><path d=\"M11.131 17.482L20.326.002.495 11.453zm30.621-6.028L21.912 0l9.127 17.5z\" fill=\"#F9AE7C\"></path><path d=\"M10.643 18.326L0 12.293v22.919z\" fill=\"#F9904A\"></path><path d=\"M11.856 18.2l9.264 28.536 9.193-28.519L21.119.59z\" fill=\"url(#a)\"></path><path d=\"M42.243 12.298l-10.716 6.047 10.716 16.872z\" fill=\"#F9904A\"></path><path d=\"M30.985 19.312l-9.234 28.645L41.82 36.371zm-19.799-.017L.423 36.37 20.49 47.957z\" fill=\"#FB6D33\"></path><path d=\"M25.746 16.503c-.324-1.216-1.298-2.21-1.298-2.21s.015 1.086-.324 1.784c-.345.71-1.034 1.197-1.034 1.197s.954-2.752.17-4.363c-.963-1.98-2.184-2.91-2.184-2.91s.398 2.056-.237 3.502c-.624 1.423-2.494 2.237-3.386 3.088-.659.629-1.132 1.868-1.336 2.474a.509.509 0 00-.023.133c.013-.349.144-2.14 1.463-3.157 1.232-.95.119-3.035.119-3.035s.205.95-.107 1.625c-.312.676-.975 1.053-1.277 1.766-.268.635-.212 2.522-.201 2.82v.023l.001.022v-.014a.54.54 0 00.193.4l4.446 4.2c.2.166.49.166.69.001l4.548-4.259a.535.535 0 00.193-.448c-.039-.616-.203-1.84-.416-2.639\" fill=\"#FFF\"></path></g></svg>\n</div>\n</a>\n<button class=\"btn btn-icon btn-soft\" id=\"close-sidebar\">\n<span class=\"material-icons size-20 menu-icon align-middle\">menu</span>\n</button>\n</div>\n<div class=\"d-flex align-items-center\">\n<ul class=\"list-unstyled mb-0\">\n</ul>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://memfiredb.com/\" target=\"_blank\" type=\"button\">官网</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://community.memfiredb.com/\" target=\"_blank\" type=\"button\">论坛</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://cloud.memfiredb.com/auth/login\" target=\"_blank\" type=\"button\">登录</a>\n<button aria-label=\"Toggle user interface mode\" class=\"btn btn-icon btn-default ms-2\" id=\"mode\" type=\"button\">\n<span class=\"toggle-dark\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable dark mode</title>\n<path d=\"M24 42q-7.5 0-12.75-5.25T6 24q0-7.5 5.25-12.75T24 6q.4 0 .85.025.45.025 1.15.075-1.8 1.6-2.8 3.95-1 2.35-1 4.95 0 4.5 3.15 7.65Q28.5 25.8 33 25.8q2.6 0 4.95-.925T41.9 22.3q.05.6.075.975Q42 23.65 42 24q0 7.5-5.25 12.75T24 42Zm0-3q5.45 0 9.5-3.375t5.05-7.925q-1.25.55-2.675.825Q34.45 28.8 33 28.8q-5.75 0-9.775-4.025T19.2 15q0-1.2.25-2.575.25-1.375.9-3.125-4.9 1.35-8.125 5.475Q9 18.9 9 24q0 6.25 4.375 10.625T24 39Zm-.2-14.85Z\"></path>\n</svg>\n</span>\n<span class=\"toggle-light\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable light mode</title>\n<path d=\"M24 31q2.9 0 4.95-2.05Q31 26.9 31 24q0-2.9-2.05-4.95Q26.9 17 24 17q-2.9 0-4.95 2.05Q17 21.1 17 24q0 2.9 2.05 4.95Q21.1 31 24 31Zm0 3q-4.15 0-7.075-2.925T14 24q0-4.15 2.925-7.075T24 14q4.15 0 7.075 2.925T34 24q0 4.15-2.925 7.075T24 34ZM3.5 25.5q-.65 0-1.075-.425Q2 24.65 2 24q0-.65.425-1.075Q2.85 22.5 3.5 22.5h5q.65 0 1.075.425Q10 23.35 10 24q0 .65-.425 1.075-.425.425-1.075.425Zm36 0q-.65 0-1.075-.425Q38 24.65 38 24q0-.65.425-1.075.425-.425 1.075-.425h5q.65 0 1.075.425Q46 23.35 46 24q0 .65-.425 1.075-.425.425-1.075.425ZM24 10q-.65 0-1.075-.425Q22.5 9.15 22.5 8.5v-5q0-.65.425-1.075Q23.35 2 24 2q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 10 24 10Zm0 36q-.65 0-1.075-.425-.425-.425-.425-1.075v-5q0-.65.425-1.075Q23.35 38 24 38q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 46 24 46ZM12 14.1l-2.85-2.8q-.45-.45-.425-1.075.025-.625.425-1.075.45-.45 1.075-.45t1.075.45L14.1 12q.4.45.4 1.05 0 .6-.4 1-.4.45-1.025.45-.625 0-1.075-.4Zm24.7 24.75L33.9 36q-.4-.45-.4-1.075t.45-1.025q.4-.45 1-.45t1.05.45l2.85 2.8q.45.45.425 1.075-.025.625-.425 1.075-.45.45-1.075.45t-1.075-.45ZM33.9 14.1q-.45-.45-.45-1.05 0-.6.45-1.05l2.8-2.85q.45-.45 1.075-.425.625.025 1.075.425.45.45.45 1.075t-.45 1.075L36 14.1q-.4.4-1.025.4-.625 0-1.075-.4ZM9.15 38.85q-.45-.45-.45-1.075t.45-1.075L12 33.9q.45-.45 1.05-.45.6 0 1.05.45.45.45.45 1.05 0 .6-.45 1.05l-2.8 2.85q-.45.45-1.075.425-.625-.025-1.075-.425ZM24 24Z\"></path>\n</svg>\n</span>\n</button>\n</div>\n</div>\n</div>\n<div class=\"container-fluid\">\n<div class=\"layout-spacing\">\n<div class=\"d-md-flex justify-content-between align-items-center\"></div>\n<div class=\"row flex-xl-nowrap\">\n<div class=\"docs-toc col-xl-3 d-xl-block\"><toc>\n<div class=\"fw-bold text-uppercase mb-2\">本页</div>\n\n</toc></div>\n<div class=\"docs-toc-mobile d-print-none d-xl-none\">\n<button aria-expanded=\"false\" class=\"btn-secondary dropdown-toggle\" data-bs-offset=\"0,0\" data-bs-toggle=\"dropdown\" id=\"toc-dropdown-btn\" type=\"button\">\n                                                Table of Contents\n                                            </button>\n</div>\n<div class=\"docs-content col-12 col-xl-9 mt-0\">\n<div class=\"mb-0 d-flex\">\n<h1 class=\"content-title mb-0\">\n                                                    多因素身份验证\n                                                    \n                                                </h1>\n</div>\n<div class=\"main-content\" data-bs-root-margin=\"0px 0px -65%\" data-bs-spy=\"scroll\" data-bs-target=\"#toc-mobile\" id=\"content\">\n<div data-prismjs-copy=\"\" data-prismjs-copy-error=\"\" data-prismjs-copy-success=\"\">\n<div class=\"alert alert-info d-flex\" role=\"alert\">\n<div class=\"flex-shrink-1 alert-icon\">\n<span class=\"material-icons size-20 me-2\">\n  info\n  </span></div>\n<div class=\"w-100\">\n<p>Multi-Factor Authentication仅在早期访问预览中。\n尽管我们 相信它已经做好了生产准备，API和一些行为可能会根据 我们在预览期收到的反馈。</p>\n</div>\n</div>\n<p>多因素身份验证(MFA)，有时称为双因素身份验证 (2FA)，为您的 通过验证他们的身份附加验证步骤。</p>\n<p>将MFA用于应用程序被认为是最佳做法。密码薄弱或社交登录帐户受损的用户 容易被恶意接管账户。这些可以通过 MFA，因为他们要求用户提供 这两个：</p>\n<ul>\n<li>\n<p>他们知道的事情。 密码或访问社交登录帐户。</p>\n</li>\n<li>\n<p>他们有的东西。 访问验证器应用程序（也称为TOTP）、手机或恢复代码。</p>\n</li>\n</ul>\n<h2 id=\"概述\">概述 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%a6%82%e8%bf%b0\"><i class=\"material-icons align-middle\">link</i></a></h2><p>Supabase Auth仅实现基于时间的一次性因素（TOTP）多因素认证。这种类型的多因素身份验证使用从由用户控制的验证器应用程序。</p>\n<p>使用MFA的应用程序需要两个重要流程：</p>\n<p>1.<strong>报名流程</strong>\n这允许用户在应用程序中设置和控制MFA。</p>\n<p>2.<strong>认证流程</strong>\n这允许用户在常规登录步骤之后使用任何因素登录。</p>\n<p>Supabase Auth提供：</p>\n<ul>\n<li><strong>Enrollment API</strong>构建丰富的用户界面以添加和移除身份验证因素。</li>\n<li><strong>Challenge and Verify API</strong>安全验证用户是否具有访问因素的权限。</li>\n<li><strong>List Factors API</strong>构建丰富的用户界面以使用其他身份验证因素进行登录。</li>\n</ul>\n<p>这些API集允许您控制适用于您的MFA体验。你可以创建MFA为可选、强制或仅为特定的流用户组。</p>\n<p>一旦用户注册或使用某个因子登录，Supabase Auth补充道应用程序可以向用户的访问令牌（JWT）添加附加元数据用于允许或拒绝访问。</p>\n<p>此信息由<a href=\"https://pages.nist.gov/800-63-3-Implementation-Resources/63B/AAL/\" rel=\"external\" target=\"_blank\">身份验证器保证级别<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a>，一个关于确保超级认证用户身份的标准措施对于该特定会话。目前公认有两个级别：</p>\n<p>1.<strong>保证级别1:<code>aal1</code></strong> 表示使用常规登录方法验证了用户的身份例如电子邮件+密码、magic link、一次性密码、电话授权或社交登录。\n2.<strong>保证级别2:<code>aal2</code></strong> 意味着用户的身份已使用至少一个,例如TOTP码。</p>\n<p>该保证级别编码在与用户相关的JWT中的<code>aal</code>声明中。通过解码此值，您可以在前端、后端和数据库中创建自定义授权规则，以实施适用于应用程序的MFA策略。\n没有<code>aal</code>声明的JWT属于<code>aal1</code>级别。</p>\n<h2 id=\"正在添加到应用程序\">正在添加到应用程序 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%ad%a3%e5%9c%a8%e6%b7%bb%e5%8a%a0%e5%88%b0%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f\"><i class=\"material-icons align-middle\">link</i></a></h2><p>将MFA添加到应用程序包括以下三个步骤：</p>\n<ol>\n<li>**添加注册流程。**您需要在应用程序中提供一个用户界面，用户可以在其中设置MFA。您可以在注册后立即添加，或作为应用程序设置部分中单独流程的一部分添加。</li>\n<li>**将挑战步骤添加到登录。**如果用户设置了MFA，您的应用程序的登录流程需要向用户显示一个挑战屏幕，要求他们证明他们可以访问附加因素。</li>\n<li>**强制执行MFA登录规则。**一旦您的用户能够使用MFA注册和登录，您就需要在整个应用程序中强制执行授权规则：在前端、后端、API服务器或行级别安全策略上。</li>\n</ol>\n<h3 id=\"添加注册流程\">添加注册流程 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%b7%bb%e5%8a%a0%e6%b3%a8%e5%86%8c%e6%b5%81%e7%a8%8b\"><i class=\"material-icons align-middle\">link</i></a></h3><p>注册流为用户提供了一个UI，用于设置其他身份验证因素。 大多数应用程序在其应用程序中的两个位置添加注册流程：</p>\n<p>1.登录或注册后立即。这允许用户在登录或创建MFA后立即快速设置MFA 账户如果有意义，我们建议鼓励所有用户设置MFA 用于您的应用程序。许多应用程序将此作为 努力减少上车摩擦。\n2.在设置页面内。 允许用户设置、禁用或修改MFA设置。</p>\n<p>我们建议构建一个通用流，在这两种情况下都可以通过少量修改来重用。</p>\n<p>注册MFA使用的因子需要三个步骤：</p>\n<p>1.调用<code>supabase.auth.mfa.enroll()</code>。 此方法返回QR码和密码。显示QR代码给用户，并要求他们用他们的验证器应用程序扫描它。\n如果他们无法扫描二维码，请以纯文本显示秘密 他们可以键入或粘贴到他们的验证器应用程序中。</p>\n<p>2.调用<code>supabase.auth.mfa.challenge()</code>API。 这将准备Supabase Auth接受用户的验证码并返回挑战ID。</p>\n<p>3.调用<code>supabase.auth.mfa.verify()</code>API。 这验证了用户确实已将步骤（1）中的秘密添加到 他们的应用程序运行正常。如果验证成功 立即成为用户帐户的活动状态。如果没有，你应该重复步骤2和3。</p>\n<h4 id=\"示例react\">示例：React <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%a4%ba%e4%be%8breact\"><i class=\"material-icons align-middle\">link</i></a></h4><p>下面是创建新的<code>EnrollMFA</code>组件的示例 MFA注册流程的重要部分。</p>\n<ul>\n<li>\n<p>当组件出现在屏幕上时，<code>supabase.auth.mfa.enroll()</code>API被调用一次，以开始为当前用户注册新因子的过程。</p>\n</li>\n<li>\n<p>此API返回SVG格式的QR码，通过将SVG编码为数据URL，使用正常的<code>＜img＞</code>标记在屏幕上显示。</p>\n</li>\n<li>\n<p>用户使用其验证器应用程序扫描二维码后，应在<code>verifyCode</code>输入字段中输入验证码，然后单击<code>启用</code>。</p>\n</li>\n<li>\n<p>使用<code>supabase.auth.mfa.challenge()</code>API，用户的代码将使用<code>supabase.auth.mfa.verify()</code>挑战。</p>\n</li>\n<li>\n<p><code>onEnabled</code>是一个回调，通知其他组件注册已完成。</p>\n</li>\n<li>\n<p><code>onCancelled</code>是一个回调，通知其他组件用户已单击<code>取消</code>按钮。</p>\n</li>\n</ul>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-tsx\" id=\"cdef3c1\" tabindex=\"0\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * EnrollMFA shows a simple enrollment dialog. When shown on screen it calls\n * the `enroll` API. Each time a user clicks the Enable button it calls the\n * `challenge` and `verify` APIs to check if the code provided by the user is\n * valid.\n * When enrollment is successful, it calls `onEnrolled`. When the user clicks\n * Cancel the `onCancelled` callback is called.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">EnrollMFA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  onEnrolled<span class=\"token punctuation\">,</span>\n  onCancelled<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onEnrolled</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n  <span class=\"token function-variable function\">onCancelled</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>factorId<span class=\"token punctuation\">,</span> setFactorId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>qr<span class=\"token punctuation\">,</span> setQR<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// holds the QR code image SVG</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>verifyCode<span class=\"token punctuation\">,</span> setVerifyCode<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// contains the code entered by the user</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// holds an error message</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onEnableClicked</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> challenge <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>mfa<span class=\"token punctuation\">.</span><span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> factorId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> challenge<span class=\"token punctuation\">.</span>error\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> challengeId <span class=\"token operator\">=</span> challenge<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id\n\n      <span class=\"token keyword\">const</span> verify <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>mfa<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        factorId<span class=\"token punctuation\">,</span>\n        challengeId<span class=\"token punctuation\">,</span>\n        code<span class=\"token operator\">:</span> verifyCode<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>verify<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>verify<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> verify<span class=\"token punctuation\">.</span>error\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">onEnrolled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>mfa<span class=\"token punctuation\">.</span><span class=\"token function\">enroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        factorType<span class=\"token operator\">:</span> <span class=\"token string\">'totp'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> error\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">setFactorId</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// Supabase Auth returns an SVG QR code which you can convert into a data</span>\n      <span class=\"token comment\">// URL that you can place in an &lt;img&gt; tag.</span>\n      <span class=\"token function\">setQR</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>totp<span class=\"token punctuation\">.</span>qr_code<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>error <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>error<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>qr<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>verifyCode<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setVerifyCode</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Enable<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onEnableClicked<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Cancel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onCancelled<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"将挑战步骤添加到登录\">将挑战步骤添加到登录 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%b0%86%e6%8c%91%e6%88%98%e6%ad%a5%e9%aa%a4%e6%b7%bb%e5%8a%a0%e5%88%b0%e7%99%bb%e5%bd%95\"><i class=\"material-icons align-middle\">link</i></a></h3><p>一旦用户通过他们的第一因素（电子邮件+密码、magic link等）登录， 一次性密码、社交登录…）您需要检查是否需要验证任何其他因素。</p>\n<p>这可以通过使用<code>supabase.auth.mfa.getAuthenticatorAssuranceLevel()</code>API来完成。当用户登录并被重定向回您的应用程序时，您应该调用此方法来提取用户的当前和下一个身份验证器保证级别（AAL）。</p>\n<p>因此，如果您收到的<code>currentLevel</code>是<code>aal1</code>，但<code>nextLevel</code>为 <code>aal2</code>，则应向用户提供通过MFA的选项。</p>\n<p>下表解释了组合含义。</p>\n<table class=\"table table-striped-columns\">\n<thead>\n<tr>\n<th style=\"text-align:right\">当前级别</th>\n<th style=\"text-align:left\">下一级</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\"><code>aal1</code></td>\n<td style=\"text-align:left\"><code>aal1</code></td>\n<td style=\"text-align:left\">User does not have MFA enrolled.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>aal1</code></td>\n<td style=\"text-align:left\"><code>aal2</code></td>\n<td style=\"text-align:left\">User has an MFA factor enrolled but has not verified it.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>aal2</code></td>\n<td style=\"text-align:left\"><code>aal2</code></td>\n<td style=\"text-align:left\">User has verified their MFA factor.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>aal2</code></td>\n<td style=\"text-align:left\"><code>aal1</code></td>\n<td style=\"text-align:left\">User has disabled their MFA factor. (Stale JWT.)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"示例react-1\">示例：React <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%a4%ba%e4%be%8breact-1\"><i class=\"material-icons align-middle\">link</i></a></h4><p>向登录添加挑战步骤在很大程度上取决于应用程序的架构。然而，构造React应用程序的一种相当常见的方法是拥有一个包含大部分已验证应用程序逻辑的大型组件（通常称为<code>App</code>）。</p>\n<p>此示例将用逻辑包装此组件，如果需要，在显示完整应用程序之前，将显示MFA挑战屏幕。这在下面的<code>AppWithMFA</code>示例中进行了说明。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-tsx\" id=\"d152937\" tabindex=\"0\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">AppWithMFA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>readyToShow<span class=\"token punctuation\">,</span> setReadyToShow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showMFAScreen<span class=\"token punctuation\">,</span> setShowMFAScreen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>mfa<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthenticatorAssuranceLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> error\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>nextLevel <span class=\"token operator\">===</span> <span class=\"token string\">'aal2'</span> <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>nextLevel <span class=\"token operator\">!==</span> data<span class=\"token punctuation\">.</span>currentLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setShowMFAScreen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setReadyToShow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readyToShow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>showMFAScreen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AuthMFA</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">}</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<ul>\n<li><code>supbase.auth.mfa.getAuthenticatorAssuranceLevel()</code>不返回承诺。别担心，这是一种非常快速的方法（微秒），因为它很少使用网络。</li>\n<li><code>readyToShow</code>仅确保在向用户显示任何应用程序UI之前完成AAL检查。</li>\n<li>如果当前级别可以升级到下一级别，将显示MFA屏幕。</li>\n<li>一旦挑战成功，<code>app</code>组件将最终呈现在屏幕上。</li>\n</ul>\n<p>下面是实现挑战和验证逻辑的组件。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-tsx\" id=\"e2076ca\" tabindex=\"0\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">AuthMFA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>verifyCode<span class=\"token punctuation\">,</span> setVerifyCode<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmitClicked</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> factors <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>mfa<span class=\"token punctuation\">.</span><span class=\"token function\">listFactors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>factors<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> factors<span class=\"token punctuation\">.</span>error\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> totpFactor <span class=\"token operator\">=</span> factors<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>totp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>totpFactor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No TOTP factors found!'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> factorId <span class=\"token operator\">=</span> totpFactor<span class=\"token punctuation\">.</span>id\n\n      <span class=\"token keyword\">const</span> challenge <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>mfa<span class=\"token punctuation\">.</span><span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> factorId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> challenge<span class=\"token punctuation\">.</span>error\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> challengeId <span class=\"token operator\">=</span> challenge<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id\n\n      <span class=\"token keyword\">const</span> verify <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>mfa<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        factorId<span class=\"token punctuation\">,</span>\n        challengeId<span class=\"token punctuation\">,</span>\n        code<span class=\"token operator\">:</span> verifyCode<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>verify<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>verify<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> verify<span class=\"token punctuation\">.</span>error\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Please enter the code from your authenticator app.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>error <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>error<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>verifyCode<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setVerifyCode</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSubmitClicked<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<ul>\n<li>您可以通过调用<code>supabase.auth.mfa.listFactors()</code>为用户提取可用的MFA因子。不用担心，这种方法也很快，很少使用网络。</li>\n<li>如果<code>listFactors()</code>返回多个因子（或不同类型），则应向用户提供选择。为了简单起见，示例中没有显示这一点。</li>\n<li>每次用户按下<code>提交</code>按钮时，都会为所选因素（在本例中为第一个因素）创建一个新的挑战，并立即进行验证。任何错误都会显示给用户。</li>\n<li>验证成功后，客户端库将在后台自动刷新会话，最后调用<code>onSuccess</code>回调，该回调将在屏幕上显示经过验证的<code>App</code>组件。</li>\n</ul>\n<h3 id=\"强制mfa登录规则\">强制MFA登录规则 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%bc%ba%e5%88%b6mfa%e7%99%bb%e5%bd%95%e8%a7%84%e5%88%99\"><i class=\"material-icons align-middle\">link</i></a></h3><p>将MFA添加到应用程序的UI本身并不能为用户提供更高级别的安全性。您还需要在应用程序的数据库、API和服务器端呈现中强制执行MFA规则。</p>\n<p>根据应用程序的需要，您可以选择三种方式来实施MFA。</p>\n<ol>\n<li>**对所有用户（新用户和现有用户）强制执行。**任何用户帐户都必须注册MFA才能继续使用您的应用程序。应用程序将不允许在未首先通过MFA的情况下进行访问。</li>\n<li>**仅对新用户强制。**只有新用户将被强制注册MFA，而旧用户将被鼓励这样做。该应用程序将不允许新用户在未首先通过MFA的情况下访问。</li>\n<li>**仅对已选择的用户强制执行。**想要MFA的用户可以注册，如果不先通过MFA，应用程序将不允许访问。</li>\n</ol>\n<h4 id=\"数据库\">数据库 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e6%8d%ae%e5%ba%93\"><i class=\"material-icons align-middle\">link</i></a></h4><p>您的应用程序应根据用户当前和可能的身份验证器级别充分拒绝或允许访问表或行。</p>\n<div class=\"alert alert-info d-flex\" role=\"alert\">\n<div class=\"flex-shrink-1 alert-icon\">\n<span class=\"material-icons size-20 me-2\">\n  info\n  </span></div>\n<div class=\"w-100\">\n<p>PostgreSQL有两种策略：许可策略和限制策略。本指南使用限制性策略。确保不要省略<code>as restrictive</code>子句。</p>\n</div>\n</div>\n<h5 id=\"强制所有用户新用户和现有用户\">强制所有用户（新用户和现有用户） <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%bc%ba%e5%88%b6%e6%89%80%e6%9c%89%e7%94%a8%e6%88%b7%e6%96%b0%e7%94%a8%e6%88%b7%e5%92%8c%e7%8e%b0%e6%9c%89%e7%94%a8%e6%88%b7\"><i class=\"material-icons align-middle\">link</i></a></h5><p>如果您的应用属于这种情况，这是一个模板行级别安全策略，您可以应用于所有表：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"483c25d\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> policy <span class=\"token string\">\"Policy name.\"</span>\n<span class=\"token keyword\">on</span> table_name\n<span class=\"token keyword\">as</span> restrictive\n<span class=\"token keyword\">to</span> authenticated\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token string\">'aal'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'aal2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<ul>\n<li>在此，保单不接受除<code>aal2</code>之外的任何具有<code>aal</code>声明的JWT，这是最高的认证者保证级别。</li>\n<li><strong>使用<code>as restrictive</code>可确保此策略将限制表上的所有命令，而不考虑其他策略</strong></li>\n</ul>\n<h5 id=\"仅对新用户强制\">仅对新用户强制 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%bb%85%e5%af%b9%e6%96%b0%e7%94%a8%e6%88%b7%e5%bc%ba%e5%88%b6\"><i class=\"material-icons align-middle\">link</i></a></h5><p>如果你的应用属于这种情况，规则就会变得更加复杂。在特定时间戳之后创建的用户帐户必须具有<code>aal2</code>级别才能访问数据库。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"ae87f23\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> policy <span class=\"token string\">\"Policy name.\"</span>\n<span class=\"token keyword\">on</span> table_name\n<span class=\"token keyword\">as</span> restrictive <span class=\"token comment\">-- very important!</span>\n<span class=\"token keyword\">to</span> authenticated\n<span class=\"token keyword\">using</span>\n  <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>auth<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token string\">'aal'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>@ <span class=\"token punctuation\">(</span>\n     <span class=\"token keyword\">select</span>\n       <span class=\"token keyword\">case</span>\n         <span class=\"token keyword\">when</span> created_at <span class=\"token operator\">&gt;=</span> <span class=\"token string\">'2022-12-12T00:00:00Z'</span> <span class=\"token keyword\">then</span> array<span class=\"token punctuation\">[</span><span class=\"token string\">'aal2'</span><span class=\"token punctuation\">]</span>\n         <span class=\"token keyword\">else</span> array<span class=\"token punctuation\">[</span><span class=\"token string\">'aal1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aal2'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">]</span>\n       <span class=\"token keyword\">end</span> <span class=\"token keyword\">as</span> aal\n     <span class=\"token keyword\">from</span> auth<span class=\"token punctuation\">.</span>users\n     <span class=\"token keyword\">where</span> auth<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<ul>\n<li>对于在2022年12月12日00:00UTC之前具有<code>created_at</code>时间戳的用户，该策略将同时接受<code>aal1</code>和<code>aal2</code>，但仅接受所有其他时间戳的<code>aal2</code>。</li>\n<li>The <code>&lt;@</code> 运算符是PostgreSQL的<a href=\"https://www.postgresql.org/docs/current/functions-array.html\" rel=\"external\" target=\"_blank\"><code>contained in</code>运算符。<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a></li>\n<li>出现<code>NULL</code>是因为在Supabase Auth中引入MFA之前的一些JWT不会包含<code>aal</code>声明。</li>\n<li><strong>使用<code>as restrictive</code>可确保此策略将限制表上的所有命令，而不考虑其他策略</strong></li>\n</ul>\n<h5 id=\"仅对已选择的用户强制\">仅对已选择的用户强制 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%bb%85%e5%af%b9%e5%b7%b2%e9%80%89%e6%8b%a9%e7%9a%84%e7%94%a8%e6%88%b7%e5%bc%ba%e5%88%b6\"><i class=\"material-icons align-middle\">link</i></a></h5><p>已在其帐户上注册MFA的用户希望您的应用程序仅在他们通过MFA后才适用。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f3db47d\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> policy <span class=\"token string\">\"Policy name.\"</span>\n<span class=\"token keyword\">on</span> table_name\n<span class=\"token keyword\">as</span> restrictive <span class=\"token comment\">-- very important!</span>\n<span class=\"token keyword\">to</span> authenticated\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>\n  array<span class=\"token punctuation\">[</span>auth<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token string\">'aal'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>@ <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">select</span>\n        <span class=\"token keyword\">case</span>\n          <span class=\"token keyword\">when</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span> array<span class=\"token punctuation\">[</span><span class=\"token string\">'aal2'</span><span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">else</span> array<span class=\"token punctuation\">[</span><span class=\"token string\">'aal1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aal2'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">end</span> <span class=\"token keyword\">as</span> aal\n      <span class=\"token keyword\">from</span> auth<span class=\"token punctuation\">.</span>mfa_factors\n      <span class=\"token keyword\">where</span> auth<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> user_id <span class=\"token operator\">and</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">=</span> <span class=\"token string\">'verified'</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<ul>\n<li>当用户至少验证了一个MFA系数时，该策略仅接受<code>aal2</code>。</li>\n<li>否则，它将同时接受<code>aal1</code>和<code>aal2</code>。</li>\n<li>The <code>&lt;@</code> 运算符是PostgreSQL的<a href=\"https://www.postgresql.org/docs/current/functions-array.html\" rel=\"external\" target=\"_blank\"><code>contained in</code>运算符。<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a></li>\n<li>出现<code>NULL</code>是因为在Supabase Auth中引入MFA之前的一些JWT不会包含<code>aal</code>声明。</li>\n<li><strong>使用<code>as restrictive</code>可确保此策略将限制表上的所有命令，而不考虑其他策略</strong></li>\n</ul>\n<h3 id=\"服务器端渲染\">服务器端渲染 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%ab%af%e6%b8%b2%e6%9f%93\"><i class=\"material-icons align-middle\">link</i></a></h3><div class=\"alert alert-info d-flex\" role=\"alert\">\n<div class=\"flex-shrink-1 alert-icon\">\n<span class=\"material-icons size-20 me-2\">\n  info\n  </span></div>\n<div class=\"w-100\">\n<p>在服务器端渲染上下文中使用Supabase JavaScript库时，请确保始终为每个请求创建一个新对象！这将防止您意外地呈现和提供属于不同用户的内容。</p>\n</div>\n</div>\n<p>可以在服务器端渲染级别上强制MFA。然而，要做好这件事可能很棘手。</p>\n<p>您可以使用<code>supabase.auth.mfa.getAuthenticatorAssuranceLevel()</code>和<code>supabase.auth.mfa.listFactors()</code>API，用于标识会话的AAL级别以及为用户启用的任何因素，类似于您在浏览器上使用这些因素的方式。</p>\n<p>然而，在服务器上遇到不同的AAL级别实际上可能不是安全问题。考虑以下可能的情况：</p>\n<ol>\n<li>用户使用常规方法登录，但关闭了MFA流上的选项卡。</li>\n<li>用户长时间忘记打开标签。（这种情况比你想象的更频繁。）</li>\n<li>用户丢失了他们的认证器设备，对接下来的步骤感到困惑。</li>\n</ol>\n<p>因此，我们建议您将用户重定向到可以使用其附加因素进行身份验证的页面，而不是呈现HTTP 401未授权或HTTP 403禁止内容。</p>\n<h3 id=\"apis\">APIs <a aria-hidden=\"true\" class=\"anchor\" href=\"#apis\"><i class=\"material-icons align-middle\">link</i></a></h3><p>如果您的应用程序使用超级数据库、存储或边缘功能，那么仅使用行级别安全策略就可以提供足够的保护。如果您有其他需要保护的API，请遵循以下一般准则：</p>\n<ol>\n<li>**为您的语言使用良好的JWT验证和分析库。**这将使您能够安全地解析JWT并提取其声明。</li>\n<li>**从JWT中检索<code>aal</code>声明，并根据您的需求比较其价值。**如果您遇到可以提高的AAL级别，请要求用户继续登录过程，而不是注销。</li>\n<li>**使用<code>https://&lt;project-ref&gt;.supabase.co/rest/v1/auth/factors</code>rest端点，用于标识用户是否注册了任何MFA因素。**只应对<code>已验证</code>的因素采取行动。</li>\n</ol>\n<h2 id=\"常见问题解答\">常见问题解答 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e8%a7%a3%e7%ad%94\"><i class=\"material-icons align-middle\">link</i></a></h2><h3 id=\"当挑战没什么作用时为什么会有挑战和验证api\">当挑战没什么作用时，为什么会有挑战和验证API？ <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%bd%93%e6%8c%91%e6%88%98%e6%b2%a1%e4%bb%80%e4%b9%88%e4%bd%9c%e7%94%a8%e6%97%b6%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bc%9a%e6%9c%89%e6%8c%91%e6%88%98%e5%92%8c%e9%aa%8c%e8%af%81api\"><i class=\"material-icons align-middle\">link</i></a></h3><p>TOTP不会是Supabase Auth未来支持的唯一MFA因素。通过分离挑战和验证步骤，我们使库向前兼容我们将来可能添加的新因素，例如SMS或WebAuthn。例如，对于SMS，<code>挑战</code>端点实际上会发送带有验证码的SMS。</p>\n<h3 id=\"二维码里面是什么\">二维码里面是什么？ <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%ba%8c%e7%bb%b4%e7%a0%81%e9%87%8c%e9%9d%a2%e6%98%af%e4%bb%80%e4%b9%88\"><i class=\"material-icons align-middle\">link</i></a></h3><p>TOTP QR码使用<code>otpauth</code>方案对URI进行编码。它最初<a href=\"https://github.com/google/google-authenticator/wiki/Key-Uri-Format\" rel=\"external\" target=\"_blank\">由Google Authenticator<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a>引入但现在已被所有验证器应用程序普遍接受。</p>\n<h3 id=\"如何检查用户何时通过mfa\">如何检查用户何时通过MFA？ <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%a6%82%e4%bd%95%e6%a3%80%e6%9f%a5%e7%94%a8%e6%88%b7%e4%bd%95%e6%97%b6%e9%80%9a%e8%bf%87mfa\"><i class=\"material-icons align-middle\">link</i></a></h3><p>Supabase Auth发布的访问令牌包含<code>amr</code>（身份验证方法参考）声明。它是一个对象数组，指示用户迄今使用的身份验证方法。</p>\n<p>例如，以下结构描述了一个用户，该用户首先使用基于密码的方法登录，然后在2分钟12秒后通过TOTP MFA。条目首先按最新方法排序！</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-json\" id=\"9ae00ed\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"amr\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mfa/totp\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1666086056</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1666085924</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>使用<code>supabase.auth.getAuthenticatorAssuranceLevel()</code>方法，以便在浏览器应用程序中轻松访问此信息。</p>\n<p>您也可以在RLS策略中使用PostgreSQL片段：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"faf28ba\" tabindex=\"0\"><code class=\"language-sql\">json_query_path<span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$.amr[0]'</span><span class=\"token punctuation\">)</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<ul>\n<li><a href=\"https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE\" rel=\"external\" target=\"_blank\"><code>json_query_path(json, path)</code><svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a> 是一个函数, 允许根据<a href=\"https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-SQLJSON-PATH\" rel=\"external\" target=\"_blank\">SQL/JSON路径<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a>访问JSON对象中的元素.</li>\n<li><code>$.amr[0]</code>是一个SQL/JSON路径表达式，它获取JWT中最新的身份验证方法。</li>\n</ul>\n<p>一旦提取了数组中的最新条目，就可以比较<code>方法</code>和<code>时间戳</code>来执行更严格的规则。</p>\n<p>目前公认的方法有：</p>\n<ul>\n<li><code>password </code>-任何基于密码的登录。</li>\n<li><code>otp</code>-任何基于密码的一次性登录（电子邮件代码、短信代码、magic link）。</li>\n<li><code>oauth</code> -任何基于oauth的登录（社交登录）。</li>\n<li><code>mfa/totp</code>— totp附加系数。</li>\n</ul>\n<p>此列表将在未来扩展。</p>\n</div>\n</div>\n<div><hr class=\"doc-hr\"/>\n<div class=\"d-print-none\" id=\"doc-nav\">\n<div class=\"row flex-xl-nowrap\">\n<div class=\"col-sm-6 pt-2 doc-next\">\n<a href=\"/docs/app/development_guide/auth/mandates/server-side-rendering/\">\n<div class=\"card h-100 my-1\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\"><i class=\"material-icons align-middle\">navigate_before</i> 服务器端渲染</p>\n</div>\n</div>\n</a>\n</div>\n<div class=\"col-sm-6 pt-2 doc-prev\">\n<a class=\"ms-auto\" href=\"/docs/app/development_guide/auth/auth-helpers/auth-helpers/\">\n<div class=\"card h-100 my-1 text-end\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\">身份验证帮助程序 <i class=\"material-icons align-middle\">navigate_next</i></p>\n</div>\n</div>\n</a>\n</div>\n</div>\n</div></div>\n</div>\n</div>\n</div>\n</div>\n\n</main>",
  "markdown": "[MemFireDB备份 6](/)\n\nmenu\n\n[官网](https://memfiredb.com/)\n[论坛](https://community.memfiredb.com/)\n[登录](https://cloud.memfiredb.com/auth/login)\n\nEnable dark mode\n\nEnable light mode\n\n本页\n\nTable of Contents\n\n# 多因素身份验证\n\ninfo\n\nMulti-Factor Authentication仅在早期访问预览中。\n尽管我们 相信它已经做好了生产准备，API和一些行为可能会根据 我们在预览期收到的反馈。\n\n多因素身份验证(MFA)，有时称为双因素身份验证 (2FA)，为您的 通过验证他们的身份附加验证步骤。\n\n将MFA用于应用程序被认为是最佳做法。密码薄弱或社交登录帐户受损的用户 容易被恶意接管账户。这些可以通过 MFA，因为他们要求用户提供 这两个：\n\n* 他们知道的事情。 密码或访问社交登录帐户。\n* 他们有的东西。 访问验证器应用程序（也称为TOTP）、手机或恢复代码。\n\n## 概述 [*link*](#%e6%a6%82%e8%bf%b0)\n\nSupabase Auth仅实现基于时间的一次性因素（TOTP）多因素认证。这种类型的多因素身份验证使用从由用户控制的验证器应用程序。\n\n使用MFA的应用程序需要两个重要流程：\n\n1.**报名流程**\n这允许用户在应用程序中设置和控制MFA。\n\n2.**认证流程**\n这允许用户在常规登录步骤之后使用任何因素登录。\n\nSupabase Auth提供：\n\n* **Enrollment API**构建丰富的用户界面以添加和移除身份验证因素。\n* **Challenge and Verify API**安全验证用户是否具有访问因素的权限。\n* **List Factors API**构建丰富的用户界面以使用其他身份验证因素进行登录。\n\n这些API集允许您控制适用于您的MFA体验。你可以创建MFA为可选、强制或仅为特定的流用户组。\n\n一旦用户注册或使用某个因子登录，Supabase Auth补充道应用程序可以向用户的访问令牌（JWT）添加附加元数据用于允许或拒绝访问。\n\n此信息由[身份验证器保证级别](https://pages.nist.gov/800-63-3-Implementation-Resources/63B/AAL/)，一个关于确保超级认证用户身份的标准措施对于该特定会话。目前公认有两个级别：\n\n1.**保证级别1:`aal1`** 表示使用常规登录方法验证了用户的身份例如电子邮件+密码、magic link、一次性密码、电话授权或社交登录。\n2.**保证级别2:`aal2`** 意味着用户的身份已使用至少一个,例如TOTP码。\n\n该保证级别编码在与用户相关的JWT中的`aal`声明中。通过解码此值，您可以在前端、后端和数据库中创建自定义授权规则，以实施适用于应用程序的MFA策略。\n没有`aal`声明的JWT属于`aal1`级别。\n\n## 正在添加到应用程序 [*link*](#%e6%ad%a3%e5%9c%a8%e6%b7%bb%e5%8a%a0%e5%88%b0%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f)\n\n将MFA添加到应用程序包括以下三个步骤：\n\n1. \\*\\*添加注册流程。\\*\\*您需要在应用程序中提供一个用户界面，用户可以在其中设置MFA。您可以在注册后立即添加，或作为应用程序设置部分中单独流程的一部分添加。\n2. \\*\\*将挑战步骤添加到登录。\\*\\*如果用户设置了MFA，您的应用程序的登录流程需要向用户显示一个挑战屏幕，要求他们证明他们可以访问附加因素。\n3. \\*\\*强制执行MFA登录规则。\\*\\*一旦您的用户能够使用MFA注册和登录，您就需要在整个应用程序中强制执行授权规则：在前端、后端、API服务器或行级别安全策略上。\n\n### 添加注册流程 [*link*](#%e6%b7%bb%e5%8a%a0%e6%b3%a8%e5%86%8c%e6%b5%81%e7%a8%8b)\n\n注册流为用户提供了一个UI，用于设置其他身份验证因素。 大多数应用程序在其应用程序中的两个位置添加注册流程：\n\n1.登录或注册后立即。这允许用户在登录或创建MFA后立即快速设置MFA 账户如果有意义，我们建议鼓励所有用户设置MFA 用于您的应用程序。许多应用程序将此作为 努力减少上车摩擦。\n2.在设置页面内。 允许用户设置、禁用或修改MFA设置。\n\n我们建议构建一个通用流，在这两种情况下都可以通过少量修改来重用。\n\n注册MFA使用的因子需要三个步骤：\n\n1.调用`supabase.auth.mfa.enroll()`。 此方法返回QR码和密码。显示QR代码给用户，并要求他们用他们的验证器应用程序扫描它。\n如果他们无法扫描二维码，请以纯文本显示秘密 他们可以键入或粘贴到他们的验证器应用程序中。\n\n2.调用`supabase.auth.mfa.challenge()`API。 这将准备Supabase Auth接受用户的验证码并返回挑战ID。\n\n3.调用`supabase.auth.mfa.verify()`API。 这验证了用户确实已将步骤（1）中的秘密添加到 他们的应用程序运行正常。如果验证成功 立即成为用户帐户的活动状态。如果没有，你应该重复步骤2和3。\n\n#### 示例：React [*link*](#%e7%a4%ba%e4%be%8breact)\n\n下面是创建新的`EnrollMFA`组件的示例 MFA注册流程的重要部分。\n\n* 当组件出现在屏幕上时，`supabase.auth.mfa.enroll()`API被调用一次，以开始为当前用户注册新因子的过程。\n* 此API返回SVG格式的QR码，通过将SVG编码为数据URL，使用正常的`＜img＞`标记在屏幕上显示。\n* 用户使用其验证器应用程序扫描二维码后，应在`verifyCode`输入字段中输入验证码，然后单击`启用`。\n* 使用`supabase.auth.mfa.challenge()`API，用户的代码将使用`supabase.auth.mfa.verify()`挑战。\n* `onEnabled`是一个回调，通知其他组件注册已完成。\n* `onCancelled`是一个回调，通知其他组件用户已单击`取消`按钮。\n\n```\n/**\n * EnrollMFA shows a simple enrollment dialog. When shown on screen it calls\n * the `enroll` API. Each time a user clicks the Enable button it calls the\n * `challenge` and `verify` APIs to check if the code provided by the user is\n * valid.\n * When enrollment is successful, it calls `onEnrolled`. When the user clicks\n * Cancel the `onCancelled` callback is called.\n */\nexport function EnrollMFA({\n  onEnrolled,\n  onCancelled,\n}: {\n  onEnrolled: () => void\n  onCancelled: () => void\n}) {\n  const [factorId, setFactorId] = useState('')\n  const [qr, setQR] = useState('') // holds the QR code image SVG\n  const [verifyCode, setVerifyCode] = useState('') // contains the code entered by the user\n  const [error, setError] = useState('') // holds an error message\n\n  const onEnableClicked = () => {\n    setError('')\n    ;(async () => {\n      const challenge = await supabase.auth.mfa.challenge({ factorId })\n      if (challenge.error) {\n        setError(challenge.error.message)\n        throw challenge.error\n      }\n\n      const challengeId = challenge.data.id\n\n      const verify = await supabase.auth.mfa.verify({\n        factorId,\n        challengeId,\n        code: verifyCode,\n      })\n      if (verify.error) {\n        setError(verify.error.message)\n        throw verify.error\n      }\n\n      onEnrolled()\n    })()\n  }\n\n  useEffect(() => {\n    ;(async () => {\n      const { data, error } = await supabase.auth.mfa.enroll({\n        factorType: 'totp',\n      })\n      if (error) {\n        throw error\n      }\n\n      setFactorId(data.id)\n\n      // Supabase Auth returns an SVG QR code which you can convert into a data\n      // URL that you can place in an <img> tag.\n      setQR(data.totp.qr_code)\n    })()\n  }, [])\n\n  return (\n    <>\n      {error && <div className=\"error\">{error}</div>}\n      <img src={qr} />\n      <input\n        type=\"text\"\n        value={verifyCode}\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n      />\n      <input type=\"button\" value=\"Enable\" onClick={onEnableClicked} />\n      <input type=\"button\" value=\"Cancel\" onClick={onCancelled} />\n    </>\n  )\n}\n```\n\n### 将挑战步骤添加到登录 [*link*](#%e5%b0%86%e6%8c%91%e6%88%98%e6%ad%a5%e9%aa%a4%e6%b7%bb%e5%8a%a0%e5%88%b0%e7%99%bb%e5%bd%95)\n\n一旦用户通过他们的第一因素（电子邮件+密码、magic link等）登录， 一次性密码、社交登录…）您需要检查是否需要验证任何其他因素。\n\n这可以通过使用`supabase.auth.mfa.getAuthenticatorAssuranceLevel()`API来完成。当用户登录并被重定向回您的应用程序时，您应该调用此方法来提取用户的当前和下一个身份验证器保证级别（AAL）。\n\n因此，如果您收到的`currentLevel`是`aal1`，但`nextLevel`为 `aal2`，则应向用户提供通过MFA的选项。\n\n下表解释了组合含义。\n\n| 当前级别 | 下一级 | 含义 |\n| --- | --- | --- |\n| `aal1` | `aal1` | User does not have MFA enrolled. |\n| `aal1` | `aal2` | User has an MFA factor enrolled but has not verified it. |\n| `aal2` | `aal2` | User has verified their MFA factor. |\n| `aal2` | `aal1` | User has disabled their MFA factor. (Stale JWT.) |\n\n#### 示例：React [*link*](#%e7%a4%ba%e4%be%8breact-1)\n\n向登录添加挑战步骤在很大程度上取决于应用程序的架构。然而，构造React应用程序的一种相当常见的方法是拥有一个包含大部分已验证应用程序逻辑的大型组件（通常称为`App`）。\n\n此示例将用逻辑包装此组件，如果需要，在显示完整应用程序之前，将显示MFA挑战屏幕。这在下面的`AppWithMFA`示例中进行了说明。\n\n```\nfunction AppWithMFA() {\n  const [readyToShow, setReadyToShow] = useState(false)\n  const [showMFAScreen, setShowMFAScreen] = useState(false)\n\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()\n        if (error) {\n          throw error\n        }\n\n        console.log(data)\n\n        if (data.nextLevel === 'aal2' && data.nextLevel !== data.currentLevel) {\n          setShowMFAScreen(true)\n        }\n      } finally {\n        setReadyToShow(true)\n      }\n    })()\n  }, [])\n\n  if (readyToShow) {\n    if (showMFAScreen) {\n      return <AuthMFA />\n    }\n\n    return <App />\n  }\n\n  return <></>\n}\n```\n\n* `supbase.auth.mfa.getAuthenticatorAssuranceLevel()`不返回承诺。别担心，这是一种非常快速的方法（微秒），因为它很少使用网络。\n* `readyToShow`仅确保在向用户显示任何应用程序UI之前完成AAL检查。\n* 如果当前级别可以升级到下一级别，将显示MFA屏幕。\n* 一旦挑战成功，`app`组件将最终呈现在屏幕上。\n\n下面是实现挑战和验证逻辑的组件。\n\n```\nfunction AuthMFA() {\n  const [verifyCode, setVerifyCode] = useState('')\n  const [error, setError] = useState('')\n\n  const onSubmitClicked = () => {\n    setError('')\n    ;(async () => {\n      const factors = await supabase.auth.mfa.listFactors()\n      if (factors.error) {\n        throw factors.error\n      }\n\n      const totpFactor = factors.data.totp[0]\n\n      if (!totpFactor) {\n        throw new Error('No TOTP factors found!')\n      }\n\n      const factorId = totpFactor.id\n\n      const challenge = await supabase.auth.mfa.challenge({ factorId })\n      if (challenge.error) {\n        setError(challenge.error.message)\n        throw challenge.error\n      }\n\n      const challengeId = challenge.data.id\n\n      const verify = await supabase.auth.mfa.verify({\n        factorId,\n        challengeId,\n        code: verifyCode,\n      })\n      if (verify.error) {\n        setError(verify.error.message)\n        throw verify.error\n      }\n    })()\n  }\n\n  return (\n    <>\n      <div>Please enter the code from your authenticator app.</div>\n      {error && <div className=\"error\">{error}</div>}\n      <input\n        type=\"text\"\n        value={verifyCode}\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n      />\n      <input type=\"button\" value=\"Submit\" onClick={onSubmitClicked} />\n    </>\n  )\n}\n```\n\n* 您可以通过调用`supabase.auth.mfa.listFactors()`为用户提取可用的MFA因子。不用担心，这种方法也很快，很少使用网络。\n* 如果`listFactors()`返回多个因子（或不同类型），则应向用户提供选择。为了简单起见，示例中没有显示这一点。\n* 每次用户按下`提交`按钮时，都会为所选因素（在本例中为第一个因素）创建一个新的挑战，并立即进行验证。任何错误都会显示给用户。\n* 验证成功后，客户端库将在后台自动刷新会话，最后调用`onSuccess`回调，该回调将在屏幕上显示经过验证的`App`组件。\n\n### 强制MFA登录规则 [*link*](#%e5%bc%ba%e5%88%b6mfa%e7%99%bb%e5%bd%95%e8%a7%84%e5%88%99)\n\n将MFA添加到应用程序的UI本身并不能为用户提供更高级别的安全性。您还需要在应用程序的数据库、API和服务器端呈现中强制执行MFA规则。\n\n根据应用程序的需要，您可以选择三种方式来实施MFA。\n\n1. \\*\\*对所有用户（新用户和现有用户）强制执行。\\*\\*任何用户帐户都必须注册MFA才能继续使用您的应用程序。应用程序将不允许在未首先通过MFA的情况下进行访问。\n2. \\*\\*仅对新用户强制。\\*\\*只有新用户将被强制注册MFA，而旧用户将被鼓励这样做。该应用程序将不允许新用户在未首先通过MFA的情况下访问。\n3. \\*\\*仅对已选择的用户强制执行。\\*\\*想要MFA的用户可以注册，如果不先通过MFA，应用程序将不允许访问。\n\n#### 数据库 [*link*](#%e6%95%b0%e6%8d%ae%e5%ba%93)\n\n您的应用程序应根据用户当前和可能的身份验证器级别充分拒绝或允许访问表或行。\n\ninfo\n\nPostgreSQL有两种策略：许可策略和限制策略。本指南使用限制性策略。确保不要省略`as restrictive`子句。\n\n##### 强制所有用户（新用户和现有用户） [*link*](#%e5%bc%ba%e5%88%b6%e6%89%80%e6%9c%89%e7%94%a8%e6%88%b7%e6%96%b0%e7%94%a8%e6%88%b7%e5%92%8c%e7%8e%b0%e6%9c%89%e7%94%a8%e6%88%b7)\n\n如果您的应用属于这种情况，这是一个模板行级别安全策略，您可以应用于所有表：\n\n```\ncreate policy \"Policy name.\"\non table_name\nas restrictive\nto authenticated\nusing (auth.jwt()->>'aal' = 'aal2');\n```\n\n* 在此，保单不接受除`aal2`之外的任何具有`aal`声明的JWT，这是最高的认证者保证级别。\n* **使用`as restrictive`可确保此策略将限制表上的所有命令，而不考虑其他策略**\n\n##### 仅对新用户强制 [*link*](#%e4%bb%85%e5%af%b9%e6%96%b0%e7%94%a8%e6%88%b7%e5%bc%ba%e5%88%b6)\n\n如果你的应用属于这种情况，规则就会变得更加复杂。在特定时间戳之后创建的用户帐户必须具有`aal2`级别才能访问数据库。\n\n```\ncreate policy \"Policy name.\"\non table_name\nas restrictive -- very important!\nto authenticated\nusing\n  (array[auth.jwt()->>'aal'] <@ (\n     select\n       case\n         when created_at >= '2022-12-12T00:00:00Z' then array['aal2']\n         else array['aal1', 'aal2', NULL]\n       end as aal\n     from auth.users\n     where auth.uid() = id));\n```\n\n* 对于在2022年12月12日00:00UTC之前具有`created_at`时间戳的用户，该策略将同时接受`aal1`和`aal2`，但仅接受所有其他时间戳的`aal2`。\n* The `<@` 运算符是PostgreSQL的[`contained in`运算符。](https://www.postgresql.org/docs/current/functions-array.html)\n* 出现`NULL`是因为在Supabase Auth中引入MFA之前的一些JWT不会包含`aal`声明。\n* **使用`as restrictive`可确保此策略将限制表上的所有命令，而不考虑其他策略**\n\n##### 仅对已选择的用户强制 [*link*](#%e4%bb%85%e5%af%b9%e5%b7%b2%e9%80%89%e6%8b%a9%e7%9a%84%e7%94%a8%e6%88%b7%e5%bc%ba%e5%88%b6)\n\n已在其帐户上注册MFA的用户希望您的应用程序仅在他们通过MFA后才适用。\n\n```\ncreate policy \"Policy name.\"\non table_name\nas restrictive -- very important!\nto authenticated\nusing (\n  array[auth.jwt()->>'aal'] <@ (\n    select\n        case\n          when count(id) > 0 then array['aal2']\n          else array['aal1', 'aal2', NULL]\n        end as aal\n      from auth.mfa_factors\n      where auth.uid() = user_id and status = 'verified'\n  ));\n```\n\n* 当用户至少验证了一个MFA系数时，该策略仅接受`aal2`。\n* 否则，它将同时接受`aal1`和`aal2`。\n* The `<@` 运算符是PostgreSQL的[`contained in`运算符。](https://www.postgresql.org/docs/current/functions-array.html)\n* 出现`NULL`是因为在Supabase Auth中引入MFA之前的一些JWT不会包含`aal`声明。\n* **使用`as restrictive`可确保此策略将限制表上的所有命令，而不考虑其他策略**\n\n### 服务器端渲染 [*link*](#%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%ab%af%e6%b8%b2%e6%9f%93)\n\ninfo\n\n在服务器端渲染上下文中使用Supabase JavaScript库时，请确保始终为每个请求创建一个新对象！这将防止您意外地呈现和提供属于不同用户的内容。\n\n可以在服务器端渲染级别上强制MFA。然而，要做好这件事可能很棘手。\n\n您可以使用`supabase.auth.mfa.getAuthenticatorAssuranceLevel()`和`supabase.auth.mfa.listFactors()`API，用于标识会话的AAL级别以及为用户启用的任何因素，类似于您在浏览器上使用这些因素的方式。\n\n然而，在服务器上遇到不同的AAL级别实际上可能不是安全问题。考虑以下可能的情况：\n\n1. 用户使用常规方法登录，但关闭了MFA流上的选项卡。\n2. 用户长时间忘记打开标签。（这种情况比你想象的更频繁。）\n3. 用户丢失了他们的认证器设备，对接下来的步骤感到困惑。\n\n因此，我们建议您将用户重定向到可以使用其附加因素进行身份验证的页面，而不是呈现HTTP 401未授权或HTTP 403禁止内容。\n\n### APIs [*link*](#apis)\n\n如果您的应用程序使用超级数据库、存储或边缘功能，那么仅使用行级别安全策略就可以提供足够的保护。如果您有其他需要保护的API，请遵循以下一般准则：\n\n1. \\*\\*为您的语言使用良好的JWT验证和分析库。\\*\\*这将使您能够安全地解析JWT并提取其声明。\n2. \\*\\*从JWT中检索`aal`声明，并根据您的需求比较其价值。\\*\\*如果您遇到可以提高的AAL级别，请要求用户继续登录过程，而不是注销。\n3. \\*\\*使用`https://<project-ref>.supabase.co/rest/v1/auth/factors`rest端点，用于标识用户是否注册了任何MFA因素。\\*\\*只应对`已验证`的因素采取行动。\n\n## 常见问题解答 [*link*](#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e8%a7%a3%e7%ad%94)\n\n### 当挑战没什么作用时，为什么会有挑战和验证API？ [*link*](#%e5%bd%93%e6%8c%91%e6%88%98%e6%b2%a1%e4%bb%80%e4%b9%88%e4%bd%9c%e7%94%a8%e6%97%b6%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bc%9a%e6%9c%89%e6%8c%91%e6%88%98%e5%92%8c%e9%aa%8c%e8%af%81api)\n\nTOTP不会是Supabase Auth未来支持的唯一MFA因素。通过分离挑战和验证步骤，我们使库向前兼容我们将来可能添加的新因素，例如SMS或WebAuthn。例如，对于SMS，`挑战`端点实际上会发送带有验证码的SMS。\n\n### 二维码里面是什么？ [*link*](#%e4%ba%8c%e7%bb%b4%e7%a0%81%e9%87%8c%e9%9d%a2%e6%98%af%e4%bb%80%e4%b9%88)\n\nTOTP QR码使用`otpauth`方案对URI进行编码。它最初[由Google Authenticator](https://github.com/google/google-authenticator/wiki/Key-Uri-Format)引入但现在已被所有验证器应用程序普遍接受。\n\n### 如何检查用户何时通过MFA？ [*link*](#%e5%a6%82%e4%bd%95%e6%a3%80%e6%9f%a5%e7%94%a8%e6%88%b7%e4%bd%95%e6%97%b6%e9%80%9a%e8%bf%87mfa)\n\nSupabase Auth发布的访问令牌包含`amr`（身份验证方法参考）声明。它是一个对象数组，指示用户迄今使用的身份验证方法。\n\n例如，以下结构描述了一个用户，该用户首先使用基于密码的方法登录，然后在2分钟12秒后通过TOTP MFA。条目首先按最新方法排序！\n\n```\n{\n  \"amr\": [\n    {\n      \"method\": \"mfa/totp\",\n      \"timestamp\": 1666086056\n    },\n    {\n      \"method\": \"password\",\n      \"timestamp\": 1666085924\n    }\n  ]\n}\n```\n\n使用`supabase.auth.getAuthenticatorAssuranceLevel()`方法，以便在浏览器应用程序中轻松访问此信息。\n\n您也可以在RLS策略中使用PostgreSQL片段：\n\n```\njson_query_path(auth.jwt(), '$.amr[0]')\n```\n\n* [`json_query_path(json, path)`](https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE) 是一个函数, 允许根据[SQL/JSON路径](https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-SQLJSON-PATH)访问JSON对象中的元素.\n* `$.amr[0]`是一个SQL/JSON路径表达式，它获取JWT中最新的身份验证方法。\n\n一旦提取了数组中的最新条目，就可以比较`方法`和`时间戳`来执行更严格的规则。\n\n目前公认的方法有：\n\n* `password` -任何基于密码的登录。\n* `otp`-任何基于密码的一次性登录（电子邮件代码、短信代码、magic link）。\n* `oauth` -任何基于oauth的登录（社交登录）。\n* `mfa/totp`— totp附加系数。\n\n此列表将在未来扩展。\n\n---\n\n[*navigate\\_before* 服务器端渲染](/docs/app/development_guide/auth/mandates/server-side-rendering/)\n\n[身份验证帮助程序 *navigate\\_next*](/docs/app/development_guide/auth/auth-helpers/auth-helpers/)"
}