{
  "url": "https://docs.memfiredb.com/docs/db/guides/sql-grammar/",
  "title": "SQL语法 | MemFire Cloud在线文档",
  "depth": 1,
  "timestamp": "2025-08-12 17:47:55",
  "html": "<main class=\"page-content bg-transparent\">\n<div class=\"top-header d-print-none\" id=\"top-header\">\n<div class=\"header-bar d-flex justify-content-between\">\n<div class=\"d-flex align-items-center\">\n<a alt=\"HomePage\" aria-label=\"HomePage\" class=\"logo-icon me-3\" href=\"/\">\n<div class=\"small\">\n<!--?xml version=\"1.0\" encoding=\"UTF-8\"?-->\n<svg height=\"112px\" version=\"1.1\" viewbox=\"0 0 99 112\" width=\"99px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<title>MemFireDB备份 6</title>\n<defs>\n<lineargradient id=\"linearGradient-1\" x1=\"49.9999885%\" x2=\"49.9999885%\" y1=\"98.082503%\" y2=\"0.766550128%\">\n<stop offset=\"0%\" stop-color=\"#ED1C23\"></stop>\n<stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop>\n</lineargradient>\n</defs>\n<g fill=\"none\" fill-rule=\"evenodd\" id=\"定稿\" stroke=\"none\" stroke-width=\"1\">\n<g id=\"MemFireDB备份-6\">\n<polygon fill=\"#F9AE7C\" id=\"Fill-1\" points=\"25.9728553 40.7912363 47.4268317 0.00591833831 1.15453123 26.7215251\"></polygon>\n<polygon fill=\"#F9AE7C\" id=\"Fill-3\" points=\"97.4213117 26.7267606 51.1285247 0.000910513587 72.4242993 40.8351686\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-5\" points=\"24.8347133 42.7618153 0.000455256793 28.682999 0.000455256793 82.1608764\"></polygon>\n<polygon fill=\"url(#linearGradient-1)\" id=\"Fill-7\" points=\"27.6634514 42.4662399 49.279044 109.05096 70.7296059 42.507213 49.2779058 1.3747617\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-9\" points=\"98.5660549 28.6951771 73.5622137 42.8047233 98.5660549 82.1719163\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-13\" points=\"72.2987623 45.061545 50.7514582 111.900071 97.579172 84.8646465\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-15\" points=\"26.1006687 45.0226206 0.987565799 84.8644188 47.8095888 111.898705\"></polygon>\n<path d=\"M60.0737516,38.507213 C59.3168872,35.669825 57.0462939,33.3514298 57.0462939,33.3514298 C57.0462939,33.3514298 57.0804382,35.8849338 56.2894295,37.513615 C55.4847631,39.1696116 53.8765685,40.3054773 53.8765685,40.3054773 C53.8765685,40.3054773 56.1016361,33.8840802 54.2715038,30.1247973 C52.0259496,25.5073552 49.1771803,23.3357803 49.1771803,23.3357803 C49.1771803,23.3357803 50.1070423,28.1319107 48.6240432,31.5065016 C47.1672215,34.8264618 42.8058614,36.7260208 40.7241997,38.7132167 C39.1865699,40.1791435 38.0814341,43.0711623 37.6068289,44.4847347 C37.5715465,44.5883056 37.560165,44.6918765 37.5533362,44.7943093 C37.584066,43.9816759 37.8890881,39.8024186 40.9654858,37.4293925 C43.8404325,35.2111538 41.2431925,30.3478731 41.2431925,30.3478731 C41.2431925,30.3478731 41.7212121,32.5638355 40.9939394,34.1401622 C40.2655285,35.7153507 38.7187936,36.5962726 38.0154218,38.259098 C37.3883056,39.7409589 37.5203301,44.1432921 37.5453692,44.8409731 C37.5453692,44.8591834 37.5476455,44.8762555 37.5476455,44.8921895 C37.5476455,44.9263338 37.5487836,44.9456822 37.5487836,44.9456822 L37.5487836,44.9115379 C37.5590269,45.2655001 37.7138142,45.6080808 37.9972116,45.8448143 L48.3713757,55.6442168 C48.8380139,56.0323232 49.5163466,56.0334614 49.9841229,55.6476312 L60.5938825,45.7105136 C60.9034571,45.4544316 61.0719021,45.0686015 61.0457249,44.6656992 C60.9546735,43.2282259 60.5699815,40.3692133 60.0737516,38.507213\" fill=\"#FFFFFF\" id=\"Fill-17\"></path>\n</g>\n</g>\n</svg>\n</div>\n<div class=\"big\">\n<svg height=\"20\" width=\"232\" xmlns=\"http://www.w3.org/2000/svg\"><defs><lineargradient id=\"a\" x1=\"50%\" x2=\"50%\" y1=\"98.083%\" y2=\".767%\"><stop offset=\"0%\" stop-color=\"#ED1C23\"></stop><stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop></lineargradient></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M78.622 12.384l1.596 21.94H77.49l-.847-14.154-8.98 15.523-4.899-15.53-4.416 14.162H55.6l7.085-21.871 5.712 17.174 10.224-17.244zm99.46.382l.324.01.454.036c.085.008.175.018.269.03l.61.096c1.09.203 2.518.644 3.883 1.596l.515.383-.46 3.694-.413-.62-.154-.195-.255-.285c-.765-.802-2.485-2.188-5.23-2.188-4.55 0-8.723 3.809-9.3 8.491-.287 2.311.334 4.469 1.755 6.077 1.342 1.517 3.257 2.354 5.39 2.354 2.606 0 4.58-1.225 5.606-2.04l.359-.3.424-.408.507-.552-.466 3.766-.093.06a12.622 12.622 0 01-4.577 1.842l-.629.1-.53.058-.418.027-.444.003c-2.918-.002-5.532-1.142-7.36-3.21-1.851-2.096-2.67-4.88-2.305-7.837.73-5.88 5.964-10.696 11.806-10.974l.732-.014zm18.174 9.018c1.724 0 3.344.713 4.443 1.956 1.101 1.248 1.59 2.88 1.377 4.596-.432 3.504-3.808 6.466-7.375 6.466-1.728 0-3.348-.715-4.45-1.96-1.096-1.242-1.583-2.864-1.377-4.563.44-3.52 3.818-6.495 7.382-6.495zm19.446.535l-1.486 12.02h-2.558l.16-1.292c-.936.93-2.462 1.755-4.173 1.755-1.318 0-2.48-.492-3.267-1.385-.804-.91-1.168-2.184-1.008-3.497l.9-7.274 2.597-.327-.914 7.402c-.101.785.084 1.466.525 1.968.49.552 1.27.845 2.25.845 1.526 0 3.3-1.155 3.51-2.873l.87-7.015 2.594-.327zm-63.587-.547c1.77 0 3.21.58 4.164 1.678 1.047 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.806 0 2.878-.434 3.868-.961l1.119-.623-.312 2.522-.106.06c-1.224.687-2.604 1.356-4.8 1.356-2.092 0-3.873-.708-5.006-1.992-.991-1.12-1.404-2.599-1.198-4.272.548-4.433 4.001-6.751 7.124-6.751zm-62.717 0c1.771 0 3.211.58 4.164 1.678 1.048 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.622 0 2.652-.35 3.563-.803l.594-.315.83-.466-.312 2.522-.105.06c-1.224.687-2.604 1.356-4.8 1.356-2.093 0-3.874-.708-5.007-1.992-.99-1.12-1.404-2.599-1.197-4.272.547-4.433 4-6.751 7.123-6.751zM231.476 12l-2.767 22.34h-2.556l.197-1.59c-1.104 1.191-2.882 2.021-4.471 2.021-1.781 0-3.24-.583-4.217-1.69-1.02-1.151-1.452-2.817-1.222-4.686.485-3.908 3.43-6.636 7.167-6.636 1.565 0 3.065.832 3.852 2.064l1.356-10.968 2.661-.855zm-42.07.002L186.64 34.34h-2.556l2.664-21.483 2.66-.854zm-56.632 1.268l-1.166 2.527h-9.586l-.85 6.867h6.627v.48h-.12l-.883 1.778v.24h-5.933l-1.138 9.163h-2.729l2.612-21.055h13.166zm2.715 9.038l-1.497 12.017h-2.559l1.455-11.722 2.601-.295zm-24.427-.537c1 0 1.93.427 2.616 1.204.84.95 1.224 2.29 1.053 3.677l-.955 7.673h-2.527l.922-7.445c.13-1.017-.027-1.81-.45-2.287-.326-.367-.815-.554-1.458-.554-1.954 0-3.178 1.346-3.332 2.613l-.955 7.673h-2.556l.922-7.445c.127-1.03-.024-1.826-.442-2.297-.319-.362-.801-.544-1.437-.544-1.522 0-3.3 1.166-3.516 2.901l-.912 7.385h-2.559l1.455-11.722 2.594-.295-.146 1.164c1.027-1.077 2.419-1.701 3.854-1.701 1.375 0 2.58.79 3.226 2.083.914-1.13 2.05-2.083 4.603-2.083zm29.487.532l-.206 1.73c1.082-.978 2.932-1.7 4.514-1.7h.269l-.271 2.282h-.214c-1.814 0-4.469.837-4.7 2.7l-.866 7.01h-2.558l1.45-11.693 2.582-.329zm55.47 1.865c-2.31 0-4.27 1.792-4.563 4.168-.144 1.145.15 2.196.824 2.957.64.725 1.586 1.126 2.656 1.126 2.292 0 4.241-1.78 4.532-4.14.146-1.169-.144-2.237-.821-3.003-.634-.715-1.567-1.108-2.628-1.108zm27.497-.029c-2.278 0-4.15 1.752-4.45 4.17-.149 1.187.137 2.255.8 3.006.611.692 1.526 1.076 2.57 1.076 2.294 0 4.173-1.743 4.468-4.143.152-1.21-.13-2.285-.79-3.033-.623-.704-1.52-1.076-2.598-1.076zm-134.356.045c-1.89 0-3.372 1.094-4.015 2.947h7.164a2.853 2.853 0 00-.71-1.956c-.574-.648-1.416-.991-2.439-.991zm62.715 0c-1.892 0-3.37 1.094-4.013 2.947h7.166a2.867 2.867 0 00-.713-1.956c-.573-.648-1.416-.991-2.44-.991zm-17.267-7.614c.919 0 1.706.748 1.754 1.668a1.587 1.587 0 01-1.603 1.692c-.917 0-1.704-.75-1.754-1.668a1.593 1.593 0 011.603-1.692z\" fill=\"#116\"></path><path d=\"M11.131 17.482L20.326.002.495 11.453zm30.621-6.028L21.912 0l9.127 17.5z\" fill=\"#F9AE7C\"></path><path d=\"M10.643 18.326L0 12.293v22.919z\" fill=\"#F9904A\"></path><path d=\"M11.856 18.2l9.264 28.536 9.193-28.519L21.119.59z\" fill=\"url(#a)\"></path><path d=\"M42.243 12.298l-10.716 6.047 10.716 16.872z\" fill=\"#F9904A\"></path><path d=\"M30.985 19.312l-9.234 28.645L41.82 36.371zm-19.799-.017L.423 36.37 20.49 47.957z\" fill=\"#FB6D33\"></path><path d=\"M25.746 16.503c-.324-1.216-1.298-2.21-1.298-2.21s.015 1.086-.324 1.784c-.345.71-1.034 1.197-1.034 1.197s.954-2.752.17-4.363c-.963-1.98-2.184-2.91-2.184-2.91s.398 2.056-.237 3.502c-.624 1.423-2.494 2.237-3.386 3.088-.659.629-1.132 1.868-1.336 2.474a.509.509 0 00-.023.133c.013-.349.144-2.14 1.463-3.157 1.232-.95.119-3.035.119-3.035s.205.95-.107 1.625c-.312.676-.975 1.053-1.277 1.766-.268.635-.212 2.522-.201 2.82v.023l.001.022v-.014a.54.54 0 00.193.4l4.446 4.2c.2.166.49.166.69.001l4.548-4.259a.535.535 0 00.193-.448c-.039-.616-.203-1.84-.416-2.639\" fill=\"#FFF\"></path></g></svg>\n</div>\n</a>\n<button class=\"btn btn-icon btn-soft\" id=\"close-sidebar\">\n<span class=\"material-icons size-20 menu-icon align-middle\">menu</span>\n</button>\n</div>\n<div class=\"d-flex align-items-center\">\n<ul class=\"list-unstyled mb-0\">\n</ul>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://memfiredb.com/\" target=\"_blank\" type=\"button\">官网</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://community.memfiredb.com/\" target=\"_blank\" type=\"button\">论坛</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://cloud.memfiredb.com/auth/login\" target=\"_blank\" type=\"button\">登录</a>\n<button aria-label=\"Toggle user interface mode\" class=\"btn btn-icon btn-default ms-2\" id=\"mode\" type=\"button\">\n<span class=\"toggle-dark\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable dark mode</title>\n<path d=\"M24 42q-7.5 0-12.75-5.25T6 24q0-7.5 5.25-12.75T24 6q.4 0 .85.025.45.025 1.15.075-1.8 1.6-2.8 3.95-1 2.35-1 4.95 0 4.5 3.15 7.65Q28.5 25.8 33 25.8q2.6 0 4.95-.925T41.9 22.3q.05.6.075.975Q42 23.65 42 24q0 7.5-5.25 12.75T24 42Zm0-3q5.45 0 9.5-3.375t5.05-7.925q-1.25.55-2.675.825Q34.45 28.8 33 28.8q-5.75 0-9.775-4.025T19.2 15q0-1.2.25-2.575.25-1.375.9-3.125-4.9 1.35-8.125 5.475Q9 18.9 9 24q0 6.25 4.375 10.625T24 39Zm-.2-14.85Z\"></path>\n</svg>\n</span>\n<span class=\"toggle-light\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable light mode</title>\n<path d=\"M24 31q2.9 0 4.95-2.05Q31 26.9 31 24q0-2.9-2.05-4.95Q26.9 17 24 17q-2.9 0-4.95 2.05Q17 21.1 17 24q0 2.9 2.05 4.95Q21.1 31 24 31Zm0 3q-4.15 0-7.075-2.925T14 24q0-4.15 2.925-7.075T24 14q4.15 0 7.075 2.925T34 24q0 4.15-2.925 7.075T24 34ZM3.5 25.5q-.65 0-1.075-.425Q2 24.65 2 24q0-.65.425-1.075Q2.85 22.5 3.5 22.5h5q.65 0 1.075.425Q10 23.35 10 24q0 .65-.425 1.075-.425.425-1.075.425Zm36 0q-.65 0-1.075-.425Q38 24.65 38 24q0-.65.425-1.075.425-.425 1.075-.425h5q.65 0 1.075.425Q46 23.35 46 24q0 .65-.425 1.075-.425.425-1.075.425ZM24 10q-.65 0-1.075-.425Q22.5 9.15 22.5 8.5v-5q0-.65.425-1.075Q23.35 2 24 2q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 10 24 10Zm0 36q-.65 0-1.075-.425-.425-.425-.425-1.075v-5q0-.65.425-1.075Q23.35 38 24 38q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 46 24 46ZM12 14.1l-2.85-2.8q-.45-.45-.425-1.075.025-.625.425-1.075.45-.45 1.075-.45t1.075.45L14.1 12q.4.45.4 1.05 0 .6-.4 1-.4.45-1.025.45-.625 0-1.075-.4Zm24.7 24.75L33.9 36q-.4-.45-.4-1.075t.45-1.025q.4-.45 1-.45t1.05.45l2.85 2.8q.45.45.425 1.075-.025.625-.425 1.075-.45.45-1.075.45t-1.075-.45ZM33.9 14.1q-.45-.45-.45-1.05 0-.6.45-1.05l2.8-2.85q.45-.45 1.075-.425.625.025 1.075.425.45.45.45 1.075t-.45 1.075L36 14.1q-.4.4-1.025.4-.625 0-1.075-.4ZM9.15 38.85q-.45-.45-.45-1.075t.45-1.075L12 33.9q.45-.45 1.05-.45.6 0 1.05.45.45.45.45 1.05 0 .6-.45 1.05l-2.8 2.85q-.45.45-1.075.425-.625-.025-1.075-.425ZM24 24Z\"></path>\n</svg>\n</span>\n</button>\n</div>\n</div>\n</div>\n<div class=\"container-fluid\">\n<div class=\"layout-spacing\">\n<div class=\"d-md-flex justify-content-between align-items-center\"></div>\n<div class=\"row flex-xl-nowrap\">\n<div class=\"docs-toc col-xl-3 d-xl-block\"><toc>\n<div class=\"fw-bold text-uppercase mb-2\">本页</div>\n\n</toc></div>\n<div class=\"docs-toc-mobile d-print-none d-xl-none\">\n<button aria-expanded=\"false\" class=\"btn-secondary dropdown-toggle\" data-bs-offset=\"0,0\" data-bs-toggle=\"dropdown\" id=\"toc-dropdown-btn\" type=\"button\">\n                                                Table of Contents\n                                            </button>\n</div>\n<div class=\"docs-content col-12 col-xl-9 mt-0\">\n<div class=\"mb-0 d-flex\">\n<h1 class=\"content-title mb-0\">\n                                                    SQL语法\n                                                    \n                                                </h1>\n</div>\n<div class=\"main-content\" data-bs-root-margin=\"0px 0px -65%\" data-bs-spy=\"scroll\" data-bs-target=\"#toc-mobile\" id=\"content\">\n<div data-prismjs-copy=\"\" data-prismjs-copy-error=\"\" data-prismjs-copy-success=\"\">\n<p>MemFireDB 结构化查询语言（MSQL）是符合ANSI标准的结构化查询语言。兼容PostgreSQL 11.2版本。MemFireDB复用了PostgresSQL的原生查询层。MemFire支持所有的传统关系模型功能，例如引用完整性（例如外键）、JOIN、分布式事务、部分索引、触发器和存储过程。</p>\n<p>MSQL的主要组件包括数据定义语言（DDL）、数据操作语言（DML）和数据控制语言（DCL）。这些组件由多个元素构成，包括数据类型、数据库对象、名称和限定符、表达式和注释。此外MSQL还提供了其他用途的组件，例如系统控制、事务控制和性能调试。</p>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th>声明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ABORT</td>\n<td>回滚事务</td>\n</tr>\n<tr>\n<td>ALTER DATABASE</td>\n<td>更改数据库定义</td>\n</tr>\n<tr>\n<td>ALTER DEFAULT PRIVILEGES</td>\n<td>定义默认访问权限</td>\n</tr>\n<tr>\n<td>ALTER DOMAIN</td>\n<td>变更网域</td>\n</tr>\n<tr>\n<td>ALTER GROUP</td>\n<td>变更群组</td>\n</tr>\n<tr>\n<td>ALTER POLICY</td>\n<td>更改行级安全策略</td>\n</tr>\n<tr>\n<td>ALTER ROLE</td>\n<td>改变角色</td>\n</tr>\n<tr>\n<td>ALTER SEQUENCE</td>\n<td>更改序列定义</td>\n</tr>\n<tr>\n<td>ALTER TABLE</td>\n<td>变更表定义</td>\n</tr>\n<tr>\n<td>ALTER USER</td>\n<td>更改用户（角色）</td>\n</tr>\n<tr>\n<td>BEGIN</td>\n<td>开始交易</td>\n</tr>\n<tr>\n<td>COMMENT</td>\n<td>在数据库对象上添加注释</td>\n</tr>\n<tr>\n<td>COMMIT</td>\n<td>提交交易</td>\n</tr>\n<tr>\n<td>COPY</td>\n<td>在表和文件之间复制数据</td>\n</tr>\n<tr>\n<td>CREATE AGGREGATE</td>\n<td>创建一个新的聚合</td>\n</tr>\n<tr>\n<td>CREATE CAST</td>\n<td>建立新的类型转换</td>\n</tr>\n<tr>\n<td>CREATE DATABASE</td>\n<td>创建一个新的数据库</td>\n</tr>\n<tr>\n<td>CREATE DOMAIN</td>\n<td>创建一个新域</td>\n</tr>\n<tr>\n<td>CREATE EXTENSION</td>\n<td>加载扩展</td>\n</tr>\n<tr>\n<td>CREATE FUNCTION</td>\n<td>创建一个新功能</td>\n</tr>\n<tr>\n<td>CREATE INDEX</td>\n<td>创建一个新索引</td>\n</tr>\n<tr>\n<td>CREATE GROUP</td>\n<td>创建一个新组（角色）</td>\n</tr>\n<tr>\n<td>CREATE OPERATOR</td>\n<td>创建一个新的运算符</td>\n</tr>\n<tr>\n<td>CREATE OPERATOR CLASS</td>\n<td>创建一个新的运算符类</td>\n</tr>\n<tr>\n<td>CREATE POLICY</td>\n<td>创建一个新的行级安全策略</td>\n</tr>\n<tr>\n<td>CREATE PROCEDURE</td>\n<td>创建一个新程序</td>\n</tr>\n<tr>\n<td>CREATE ROLE</td>\n<td>创建一个新角色（用户或组）</td>\n</tr>\n<tr>\n<td>CREATE RULE</td>\n<td>创建一个新规则</td>\n</tr>\n<tr>\n<td>CREATE USER</td>\n<td>创建一个新用户（角色）</td>\n</tr>\n<tr>\n<td>CREATE SCHEMA</td>\n<td>创建一个新的架构（命名空间）</td>\n</tr>\n<tr>\n<td>CREATE SEQUENCE</td>\n<td>创建一个新的序列生成器</td>\n</tr>\n<tr>\n<td>CREATE TABLE</td>\n<td>创建一个新表</td>\n</tr>\n<tr>\n<td>CREATE TABLE AS</td>\n<td>创建一个新表</td>\n</tr>\n<tr>\n<td>CREATE TRIGGER</td>\n<td>创建一个新触发器</td>\n</tr>\n<tr>\n<td>CREATE TYPE</td>\n<td>建立新类型</td>\n</tr>\n<tr>\n<td>CREATE VIEW</td>\n<td>创建一个新的视图</td>\n</tr>\n<tr>\n<td>DEALLOCATE</td>\n<td>取消分配准备好的语句</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>从表中删除行</td>\n</tr>\n<tr>\n<td>DO</td>\n<td>执行一个匿名代码块</td>\n</tr>\n<tr>\n<td>DROP AGGREGATE</td>\n<td>删除汇总</td>\n</tr>\n<tr>\n<td>DROP CAST</td>\n<td>删除类型转换</td>\n</tr>\n<tr>\n<td>DROP DATABASE</td>\n<td>从系统中删除数据库</td>\n</tr>\n<tr>\n<td>DROP DOMAIN</td>\n<td>删除网域</td>\n</tr>\n<tr>\n<td>DROP EXTENSION</td>\n<td>删除扩展</td>\n</tr>\n<tr>\n<td>DROP FUNCTION</td>\n<td>删除功能</td>\n</tr>\n<tr>\n<td>DROP GROUP</td>\n<td>删除组（角色）</td>\n</tr>\n<tr>\n<td>DROP OPERATOR</td>\n<td>删除运算符</td>\n</tr>\n<tr>\n<td>DROP OPERATOR CLASS</td>\n<td>删除操作员类别</td>\n</tr>\n<tr>\n<td>DROP OWNED</td>\n<td>删除角色拥有的对象</td>\n</tr>\n<tr>\n<td>DROP POLICY</td>\n<td>删除行级安全策略</td>\n</tr>\n<tr>\n<td>DROP PROCEDURE</td>\n<td>删除程序</td>\n</tr>\n<tr>\n<td>DROP ROLE</td>\n<td>删除角色（用户或组）</td>\n</tr>\n<tr>\n<td>DROP RULE</td>\n<td>删除规则</td>\n</tr>\n<tr>\n<td>DROP SEQUENCE</td>\n<td>删除序列发生器</td>\n</tr>\n<tr>\n<td>DROP TABLE</td>\n<td>从数据库中删除表</td>\n</tr>\n<tr>\n<td>DROP TRIGGER</td>\n<td>删除触发器</td>\n</tr>\n<tr>\n<td>DROP TYPE</td>\n<td>删除用户定义的类型</td>\n</tr>\n<tr>\n<td>DROP USER</td>\n<td>删除用户（角色）</td>\n</tr>\n<tr>\n<td>END</td>\n<td>提交事务</td>\n</tr>\n<tr>\n<td>EXECUTE</td>\n<td>执行准备好的语句</td>\n</tr>\n<tr>\n<td>EXPLAIN</td>\n<td>显示语句的执行计划</td>\n</tr>\n<tr>\n<td>INSERT</td>\n<td>在表格中插入行</td>\n</tr>\n<tr>\n<td>LOCK</td>\n<td>锁定</td>\n</tr>\n<tr>\n<td>PREPARE</td>\n<td>准备一份声明</td>\n</tr>\n<tr>\n<td>REASSIGN OWNED</td>\n<td>重新分配拥有的对象</td>\n</tr>\n<tr>\n<td>RESET</td>\n<td>将参数重置为出厂设置</td>\n</tr>\n<tr>\n<td>REVOKE</td>\n<td>删除访问权限</td>\n</tr>\n<tr>\n<td>ROLLBACK</td>\n<td>回滚事务</td>\n</tr>\n<tr>\n<td>SELECT</td>\n<td>从表中选择行</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>设置系统，会话或事务参数</td>\n</tr>\n<tr>\n<td>SET CONSTRAINTS</td>\n<td>设置当前交易的约束</td>\n</tr>\n<tr>\n<td>SET ROLE</td>\n<td>设定角色</td>\n</tr>\n<tr>\n<td>SET SESSION AUTHORIZATION</td>\n<td>设置会话授权</td>\n</tr>\n<tr>\n<td>SET TRANSACTION</td>\n<td>设置事务行为</td>\n</tr>\n<tr>\n<td>SHOW</td>\n<td>显示系统，会话或事务参数的值</td>\n</tr>\n<tr>\n<td>SHOW TRANSACTION</td>\n<td>显示交易的属性</td>\n</tr>\n<tr>\n<td>TRUNCATE</td>\n<td>清除表格中的所有行</td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>更新表中的行</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据定义语言ddl\">数据定义语言（DDL） <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e6%8d%ae%e5%ae%9a%e4%b9%89%e8%af%ad%e8%a8%80ddl\"><i class=\"material-icons align-middle\">link</i></a></h2><p>DDL语句通过CREATE、ALTER和DROP命令来定义数据库中的结构、更改定义以及删除定义。\n\n\n\n\n\n\n\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>声明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ALTER DATABASE</td>\n<td>更改数据库定义</td>\n</tr>\n<tr>\n<td>ALTER SEQUENCE</td>\n<td>更改序列发生器的定义</td>\n</tr>\n<tr>\n<td>ALTER TABLE</td>\n<td>更改表定义</td>\n</tr>\n<tr>\n<td>CREATE AGGREGATE</td>\n<td>创建一个新的聚集函数</td>\n</tr>\n<tr>\n<td>CREATE CAST</td>\n<td>创建新的类型转换</td>\n</tr>\n<tr>\n<td>CREATE DATABASE</td>\n<td>创建一个新的数据库</td>\n</tr>\n<tr>\n<td>CREATE EXTENSION</td>\n<td>加载扩展</td>\n</tr>\n<tr>\n<td>CREATE FUNCTION</td>\n<td>创建一个新功能</td>\n</tr>\n<tr>\n<td>CREATE INDEX</td>\n<td>创建一个新索引</td>\n</tr>\n<tr>\n<td>CREATE OPERATOR</td>\n<td>创建一个新的运算符</td>\n</tr>\n<tr>\n<td>CREATE OPERATOR CLASS</td>\n<td>创建一个新的运算符类</td>\n</tr>\n<tr>\n<td>CREATE PROCEDURE</td>\n<td>创建一个新程序</td>\n</tr>\n<tr>\n<td>CREATE RULE</td>\n<td>创建一条新规则</td>\n</tr>\n<tr>\n<td>CREATE SCHEMA</td>\n<td>创建一个新的架构（命名空间）</td>\n</tr>\n<tr>\n<td>CREATE SEQUENCE</td>\n<td>创建一个新的序列生成器</td>\n</tr>\n<tr>\n<td>CREATE TABLE</td>\n<td>创建一个新表</td>\n</tr>\n<tr>\n<td>CREATE TABLE AS</td>\n<td>创建一个新表</td>\n</tr>\n<tr>\n<td>CREATE TRIGGER</td>\n<td>创建一个新触发器</td>\n</tr>\n<tr>\n<td>CREATE TYPE</td>\n<td>创建一种新的类型</td>\n</tr>\n<tr>\n<td>CREATE VIEW</td>\n<td>创建一个新的视图</td>\n</tr>\n<tr>\n<td>DROP AGGREGATE</td>\n<td>删除汇总</td>\n</tr>\n<tr>\n<td>DROP CAST</td>\n<td>删除类型转换</td>\n</tr>\n<tr>\n<td>DROP DATABASE</td>\n<td>从系统中删除数据库</td>\n</tr>\n<tr>\n<td>DROP EXTENSION</td>\n<td>删除扩展</td>\n</tr>\n<tr>\n<td>DROP FUNCTION</td>\n<td>删除功能</td>\n</tr>\n<tr>\n<td>DROP OPERATOR</td>\n<td>删除运算符</td>\n</tr>\n<tr>\n<td>DROP OPERATOR CLASS</td>\n<td>删除运算符类</td>\n</tr>\n<tr>\n<td>DROP PROCEDURE</td>\n<td>删除一个过程</td>\n</tr>\n<tr>\n<td>DROP RULE</td>\n<td>删除程序</td>\n</tr>\n<tr>\n<td>DROP SEQUENCE</td>\n<td>删除序列发​​生器</td>\n</tr>\n<tr>\n<td>DROP TABLE</td>\n<td>从数据库中删除表</td>\n</tr>\n<tr>\n<td>DROP TYPE</td>\n<td>删除用户定义的类型</td>\n</tr>\n<tr>\n<td>DROP TRIGGER</td>\n<td>删除触发器</td>\n</tr>\n<tr>\n<td>TRUNCATE</td>\n<td>清空一个表或者一组表</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h2 id=\"数据操作语言dml\">数据操作语言（DML） <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e6%8d%ae%e6%93%8d%e4%bd%9c%e8%af%ad%e8%a8%80dml\"><i class=\"material-icons align-middle\">link</i></a></h2><p>DML语句修改数据库的内容。\n\n\n\n\n\n\n\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>声明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DELETE</td>\n<td>从表中删除行</td>\n</tr>\n<tr>\n<td>INSERT</td>\n<td>向表插入行</td>\n</tr>\n<tr>\n<td>SELECT</td>\n<td>从表中选择行</td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>更新表中的行</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h2 id=\"数据控制语言dcl\">数据控制语言（DCL） <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e6%8d%ae%e6%8e%a7%e5%88%b6%e8%af%ad%e8%a8%80dcl\"><i class=\"material-icons align-middle\">link</i></a></h2><p>DCL语句可以保护并防止数据库损坏。\n\n\n\n\n\n\n\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>声明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ALTER  DEFAULT PRIVILEGES</td>\n<td>定义默认访问权限</td>\n</tr>\n<tr>\n<td>ALTER  GROUP</td>\n<td>变更群组</td>\n</tr>\n<tr>\n<td>ALTER  POLICY</td>\n<td>更改行级安全策略</td>\n</tr>\n<tr>\n<td>ALTER  ROLE</td>\n<td>更改角色（用户或组）</td>\n</tr>\n<tr>\n<td>ALTER  USER</td>\n<td>更改用户</td>\n</tr>\n<tr>\n<td>CREATE  GROUP</td>\n<td>创建一个新组（角色）</td>\n</tr>\n<tr>\n<td>CREATE  POLICY</td>\n<td>创建一个新的行级安全策略</td>\n</tr>\n<tr>\n<td>CREATE  ROLE</td>\n<td>创建一个新角色（用户或组）</td>\n</tr>\n<tr>\n<td>CREATE  USER</td>\n<td>创建一个新用户（角色）</td>\n</tr>\n<tr>\n<td>DROP  GROUP</td>\n<td>移除群组</td>\n</tr>\n<tr>\n<td>DROP  POLICY</td>\n<td>删除行级安全策略</td>\n</tr>\n<tr>\n<td>DROP  ROLE</td>\n<td>删除角色（用户或组）</td>\n</tr>\n<tr>\n<td>DROP  OWNED</td>\n<td>删除拥有的对象</td>\n</tr>\n<tr>\n<td>DROP  USER</td>\n<td>删除用户</td>\n</tr>\n<tr>\n<td>GRANT</td>\n<td>授予权限</td>\n</tr>\n<tr>\n<td>REASSIGN  OWNED</td>\n<td>重新分配拥有对象</td>\n</tr>\n<tr>\n<td>REVOKE</td>\n<td>撤销权限</td>\n</tr>\n<tr>\n<td>SET  ROLE</td>\n<td>设定角色</td>\n</tr>\n<tr>\n<td>SET  SESSION AUTHORIZATION</td>\n<td>设置会话授权</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h2 id=\"事务控制语言tcl\">事务控制语言（TCL） <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%ba%8b%e5%8a%a1%e6%8e%a7%e5%88%b6%e8%af%ad%e8%a8%80tcl\"><i class=\"material-icons align-middle\">link</i></a></h2><p>TCL语句管理数据库上的事务。\n\n\n\n\n\n\n\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>声明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ABORT</td>\n<td>回滚事务</td>\n</tr>\n<tr>\n<td>BEGIN</td>\n<td>开始事务</td>\n</tr>\n<tr>\n<td>COMMIT</td>\n<td>提交事务</td>\n</tr>\n<tr>\n<td>END</td>\n<td>提交事务</td>\n</tr>\n<tr>\n<td>ROLLBACK</td>\n<td>回滚事务</td>\n</tr>\n<tr>\n<td>SET  CONSTRAINTS</td>\n<td>设置当前事务的约束</td>\n</tr>\n<tr>\n<td>SET  TRANSACTION</td>\n<td>设置事务行为</td>\n</tr>\n<tr>\n<td>SHOW  TRANSACTION</td>\n<td>显示事务的属性</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h2 id=\"会话和系统控制\">会话和系统控制 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%bc%9a%e8%af%9d%e5%92%8c%e7%b3%bb%e7%bb%9f%e6%8e%a7%e5%88%b6\"><i class=\"material-icons align-middle\">link</i></a></h2>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th>声明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RESET</td>\n<td>将参数重置为出厂设置</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>设置系统，会话或事务参数</td>\n</tr>\n<tr>\n<td>SHOW</td>\n<td>显示系统，会话或事务参数的值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"性能控制\">性能控制 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%80%a7%e8%83%bd%e6%8e%a7%e5%88%b6\"><i class=\"material-icons align-middle\">link</i></a></h2>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th>声明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEALLOCATE</td>\n<td>取消分配准备好的语句</td>\n</tr>\n<tr>\n<td>EXECUTE</td>\n<td>执行准备好的语句</td>\n</tr>\n<tr>\n<td>EXPLAIN</td>\n<td>解释陈述的执行计划</td>\n</tr>\n<tr>\n<td>PREPARE</td>\n<td>准备一份声明</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他声明\">其他声明 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%85%b6%e4%bb%96%e5%a3%b0%e6%98%8e\"><i class=\"material-icons align-middle\">link</i></a></h2>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th>声明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>COPY</td>\n<td>在表和文件之间复制数据</td>\n</tr>\n<tr>\n<td>DO</td>\n<td>执行一个匿名代码块</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"abort\">ABORT <a aria-hidden=\"true\" class=\"anchor\" href=\"#abort\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用ABORT语句回滚当前事务，并丢弃该事务的所有更新。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"7e5689b\" tabindex=\"0\"><code class=\"language-none\">abort ::= ABORT [ TRANSACTION |  WORK ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>ABORT [ TRANSACTION | WORK ] WORK 可选。</p>\n<p>TRANSACTION 可选，目前 SERIALIZABLE隔离级别暂不支持。</p>\n<p><strong>例子</strong></p>\n<p>创建一个名为sample的表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"5b377f1\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>  k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在一个终端上创建一个事务并插入一些记录。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"4394843\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">BEGIN</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">TRANSACTION</span> <span class=\"token keyword\">ISOLATION</span> <span class=\"token keyword\">LEVEL</span>  <span class=\"token keyword\">REPEATABLE</span> <span class=\"token keyword\">READ</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在第二个终端上创建一个事务并插入一些记录。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"d5ad21d\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">BEGIN</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">TRANSACTION</span> <span class=\"token keyword\">ISOLATION</span> <span class=\"token keyword\">LEVEL</span>  <span class=\"token keyword\">REPEATABLE</span> <span class=\"token keyword\">READ</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在第一个终端上查看结果。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1b70d6b\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sample; -- run in first shell\n\nk1 | k2 | v1 |  v2\n\n----+----+----+----\n\n1 | 2 |   3 | a\n\n1 | 3 |   4 | b\n\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>第二个终端上查看结果。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"3205e09\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sample; -- run in second shell\n\nk1 | k2 | v1 |  v2\n\n----+----+----+----\n\n2 | 2 |   3 | a\n\n2 | 3 |   4 | b\n\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在第二个终端上提交事务。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"c3716de\" tabindex=\"0\"><code class=\"language-none\">COMMIT TRANSACTION; -- run in first shell.</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在第二个终端上终止事务。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f886857\" tabindex=\"0\"><code class=\"language-none\">ABORT TRANSACTION; -- run second shell.</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>查看表中的记录。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f9010a2\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sample; -- run in first shell.\n\nk1 | k2 | v1 |  v2\n\n----+----+----+----\n\n1 | 2 |   3 | a\n\n1 | 3 |   4 | b\n\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d79101e\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sample; -- run in second shell.\n\nk1 | k2 | v1 |  v2\n\n----+----+----+----\n\n1 | 2 |   3 | a\n\n1 | 3 |   4 | b\n\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"alter-database\">ALTER DATABASE <a aria-hidden=\"true\" class=\"anchor\" href=\"#alter-database\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该ALTER DATABASE语句重新定义数据库的属性。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"ff0df2d\" tabindex=\"0\"><code class=\"language-none\">alter_database ::= ALTER DATABASE name\n                     [ [ WITH ] alter_database_option [ ... ]\n                       | RENAME TO name\n                       | OWNER TO { new_owner\n \t                              |  CURRENT_USER\n \t                              |  SESSION_USER }\n                        SET TABLESPACE new_tablespace\n                       | SET configuration_parameter { TO | = }\n                          { value | DEFAULT }\n                       | SET configuration_parameter FROM CURRENT\n                       | RESET configuration_parameter\n                       | RESET ALL ]\n\nalter_database_option ::= ALLOW_CONNECTIONS allowconn\n                             | CONNECTION LIMIT  connlimit\n                             | IS_TEMPLATE  istemplate</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>name待修改的数据库名</p>\n<p>tablespace_name 指定与食宿句酷关联的新表空间</p>\n<p>ALLOW_CONNECTIONS 指定false以禁止与此数据库的连接。默认值为true，允许任何具有CREATEDB权限的用户克隆此数据库。</p>\n<p>CONNECTION_LIMIT 指定可以与此数据库建立多少个并发连接。默认值-1允许无限的并发连接。</p>\n<p>IS_TEMPLATE 设置为true代表任何具有CREATEDB权限的用户都可以克隆此数据库。指定false时仅超级用户或数据库所有者可以克隆它。</p>\n<h2 id=\"alter-default-privileges\">ALTER DEFAULT PRIVILEGES <a aria-hidden=\"true\" class=\"anchor\" href=\"#alter-default-privileges\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该ALTER DEFAULT PRIVILEGES语句定义默认访问权限。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"ccdf5af\" tabindex=\"0\"><code class=\"language-none\">alter_default_priv ::= ALTER DEFAULT PRIVILEGES\n                           [ FOR { ROLE | USER } role_name [ , ... ] ]\n                           [ IN SCHEMA schema_name [ , ... ] ]\n                           abbr_grant_or_revoke\n\nabbr_grant_or_revoke ::= a_grant_table\n                              | a_grant_seq\n                              | a_grant_func\n                              | a_grant_type\n                              | a_grant_schema\n                              | a_revoke_table\n                              | a_revoke_seq\n                              | a_revoke_func\n                              | a_revoke_type\n                              | a_revoke_schema\n\na_grant_table ::= GRANT { grant_table_priv [ , ... ]\n                            | ALL [ PRIVILEGES  ] } ON TABLES TO\n                    grant_role_spec [ , ... ] [ WITH GRANT  OPTION ]\n\na_grant_seq ::= GRANT { grant_seq_priv [ , ... ]\n                          | ALL [ PRIVILEGES ] } ON SEQUENCES TO\n                  grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\na_grant_func ::= GRANT { EXECUTE | ALL [ PRIVILEGES ] }  ON\n                   { FUNCTIONS | ROUTINES } TO grant_role_spec [ , ... ]\n                   [ WITH GRANT OPTION ]\n\na_grant_type ::= GRANT { USAGE | ALL [ PRIVILEGES ] }  ON TYPES TO\n                   grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\na_grant_schema ::= GRANT { USAGE | CREATE | ALL [  PRIVILEGES ] } ON\n                     SCHEMAS TO grant_role_spec [ , ... ]\n                     [ WITH GRANT OPTION ]\n\na_revoke_table ::= REVOKE [ GRANT OPTION FOR ]\n                      { grant_table_priv [ , ... ] | ALL [ PRIVILEGES ] }\n                      ON TABLES FROM grant_role_spec [ , ... ]\n                      [ CASCADE | RESTRICT ]\n\na_revoke_seq ::= REVOKE [ GRANT OPTION FOR ]\n                    { grant_seq_priv [ , ... ] | ALL  [ PRIVILEGES ] } ON\n                    SEQUENCES FROM grant_role_spec [ , ... ]\n                    [ CASCADE | RESTRICT ]\n\na_revoke_func ::= REVOKE [ GRANT OPTION FOR ]\n                    { EXECUTE | ALL [ PRIVILEGES ] } ON\n                    { FUNCTIONS | ROUTINES } FROM grant_role_spec\n                    [ , ... ] [ CASCADE | RESTRICT ]\n\na_revoke_type ::= REVOKE [ GRANT OPTION FOR ]\n                    { USAGE | ALL [ PRIVILEGES ] } ON TYPES FROM\n                    grant_role_spec [ , ... ] [ CASCADE |  RESTRICT ]\n\na_revoke_schema ::= REVOKE [ GRANT OPTION FOR ]\n                    { USAGE | CREATE | ALL [ PRIVILEGES ] } ON SCHEMAS\n                    FROM grant_role_spec [ , ... ]\n                    [ CASCADE | RESTRICT ]\n\ngrant_table_priv ::= SELECT\n                       | INSERT\n                       | UPDATE\n                       | DELETE\n                       | TRUNCATE\n                       | REFERENCES\n                       | TRIGGER\n\ngrant_seq_priv ::= USAGE | SELECT | UPDATE\n\ngrant_role_spec ::= [ GROUP ] role_name\n                       | PUBLIC\n                       | CURRENT_USER\n                       | SESSION_USER</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>ALTER DEFAULT PRIVILEGES定义将来创建的对象的特权。它不会影响已经创建的对象。 用户只能更改由其或其成员所创建的对象的默认特权。</p>\n<p><strong>例子</strong></p>\n<p>授权所有用户使用SELECT访问marketing schema中所有表的权限</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f404567\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token operator\">IN</span>  <span class=\"token keyword\">SCHEMA</span> marketing <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">TABLES</span> <span class=\"token keyword\">TO</span> <span class=\"token keyword\">PUBLIC</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>取消用户john使用任意表时，使用INSERT语句的权限</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"4714fef\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">PRIVILEGES</span>  <span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">TABLES</span> <span class=\"token keyword\">FROM</span> john<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"alter-domain\">ALTER DOMAIN <a aria-hidden=\"true\" class=\"anchor\" href=\"#alter-domain\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该ALTER DOMAIN语句更改现有域的定义。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d9a5183\" tabindex=\"0\"><code class=\"language-none\">alter_domain_default ::= ALTER DOMAIN name\n                          { SET DEFAULT expression | DROP DEFAULT }\n\nalter_domain_rename ::= ALTER DOMAIN name RENAME TO  name</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>SET DEFAULT | DROP DEFAULT 设置或删除域的默认值。</p>\n<p>RENAME 更改域名。</p>\n<p>name 指定域的名称。如果DOMAIN name不存在或DOMAIN new_name已经存在，则会提示错误。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e7ce4e3\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> DOMAIN idx <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">5</span> <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">VALUE</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">ALTER</span> DOMAIN idx <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DEFAULT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">ALTER</span> DOMAIN idx <span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TO</span> idx_new<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DROP</span> DOMAIN idx_new<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"alter-group\">ALTER GROUP <a aria-hidden=\"true\" class=\"anchor\" href=\"#alter-group\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该ALTER GROUP语句更改组（角色）的属性。添加它是为了与Postgres兼容。不鼓励使用。ALTER ROLE是更改角色属性的首选方法。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9a32bc5\" tabindex=\"0\"><code class=\"language-none\">alter_group ::= ALTER GROUP role_specification { ADD |  DROP } USER\n                  role_name [ , ... ]\n\nrole_specification ::= role_name | CURRENT_USER |  SESSION_USER\n\nalter_group_rename ::= ALTER GROUP role_name RENAME TO  new_role_name</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>ALTER GROUP可用于在组中添加或删除角色。请使用GRANT或REVOKE代替。也可以用来重命名角色。</p>\n<h2 id=\"alter-policy\">ALTER POLICY <a aria-hidden=\"true\" class=\"anchor\" href=\"#alter-policy\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该ALTER POLICY语句可以更改现有行级安全策略的定义。它可用于更改策略适用的角色以及策略的USING和CHECK表达式。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"e289a5b\" tabindex=\"0\"><code class=\"language-none\">alter_policy ::= ALTER POLICY name ON table_name\n                    [ TO { role_name\n                            | PUBLIC\n                            | CURRENT_USER\n                            | SESSION_USER } [ , ... ] ]\n                    [ USING ( using_expression ) ]\n                    [ WITH CHECK ( check_expression ) ]\n\nalter_policy_rename ::= ALTER POLICY name ON table_name  RENAME TO\n                          new_name</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>name 是要更新的策略的名称。</p>\n<p>table_name 是应用策略的表的名称。</p>\n<p>new_name 测略的新名称</p>\n<p>role_name 该策略使用的橘色，如使用PUBLIC则策略适用于所有角色</p>\n<p>using_expression 是SQL条件表达式，满足条件的行将在SELECT中可见，在UPDATE和DELETE修改操作中有效。</p>\n<p>check_expression 是SQL条件表达式，仅被用在INSERT和UPDATE查询中。条件为true的内容允许INSERT和UPDATE。与using_expression不同，它使用来检查新内容的。</p>\n<p><strong>例子</strong></p>\n<p>重命名策略。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"d1bc1e6\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> POLICY p1 <span class=\"token keyword\">ON</span> table_foo <span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TO</span> p2<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>将策略应用于所有角色。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"8273b0f\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> POLICY p1 <span class=\"token keyword\">ON</span> table_foo <span class=\"token keyword\">TO</span> <span class=\"token keyword\">PUBLIC</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"alter-role\">ALTER ROLE <a aria-hidden=\"true\" class=\"anchor\" href=\"#alter-role\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用ALTER ROLE语句更改角色（用户或组）的属性。 超级用户可以更改任何角色的属性。具有CREATEROLE权限的角色可以更改任何非超级用户角色的属性。其他角色只能更改自己的密码。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"88d0885\" tabindex=\"0\"><code class=\"language-none\">alter_role ::= ALTER ROLE role_specification\n                  [ [ WITH ] alter_role_option [  , ... ] ]\n\nalter_role_option ::= SUPERUSER\n                         | NOSUPERUSER\n                         | CREATEDB\n                         | NOCREATEDB\n                         | CREATEROLE\n                         | NOCREATEROLE\n                         | INHERIT\n                         | NOINHERIT\n                         | LOGIN\n                         | NOLOGIN\n                         | CONNECTION LIMIT connlimit\n                         | [ ENCRYPTED ]  PASSWORD ' password '\n                         | PASSWORD NULL\n                         | VALID UNTIL ' timestamp '\n\nrole_specification ::= role_name | CURRENT_USER |  SESSION_USER\n\nalter_role_rename ::= ALTER ROLE role_name RENAME TO  new_role_name\n\nalter_role_config ::= ALTER ROLE { role_specification |  ALL }\n                         [ IN DATABASE database_name ] config_setting\n\nconfig_setting ::= SET config_param { TO | = }\n                         { config_value | DEFAULT }\n                         | SET config_param FROM CURRENT\n                         | RESET config_param\n                         | RESET ALL</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>role_specification 指定要更改其属性的角色的名称或当前用户或当前会话用户。</p>\n<p>SUPERUSER，NOSUPERUSER 确定角色是否是“超级用户”。超级用户可以覆盖所有访问限制，应谨慎使用。只有具有SUPERUSER权限的角色才能创建其他SUPERUSER角色。</p>\n<p>CREATEDB，NOCREATEDB 确定角色是否可以创建数据库。</p>\n<p>CREATEROLE，NOCREATEROLE 确定角色是否可以创建其他角色。</p>\n<p>INHERIT，NOINHERIT 确定角色是否继承其所属角色的特权。如果没有INHERIT，则另一个角色的成员资格仅授予SET ROLE权限给该另一个角色。其他角色的权限只有在这样做之后才可用。</p>\n<p>LOGIN，NOLOGIN 确定是否允许新角色登录。客户端连接期间只能使用具有登录权限的角色。</p>\n<p>CONNECTION LIMIT 指定角色可以建立的并发连接数。这仅适用于可以登录的角色。</p>\n<p>[ENCRYPTED] PASSWORD 设置角色的密码。这仅适用于可以登录的角色。如果未指定密码，则密码将设置为null，并且该用户的密码身份验证将始终失败。请注意，密码始终以加密方式存储在系统目录中，并且仅出于与Postgres兼容而提供可选关键字ENCRYPTED。</p>\n<p>VALID UNTIL 设置一个日期和时间，之后该角色的密码将不再有效。</p>\n<p>config_param, config_value 是名称和配置参数被设置值</p>\n<p>ALTER ROLE role_name RENAME TO 可用于更改角色名称。请注意，当前会话角色无法重命名。因为MD5加密的密码使用角色名称作为加密盐，所以如果密码是MD5加密的，重命名角色将清除其密码。</p>\n<p>ALTER ROLE SET | RESET config_param 用于更改所有数据库的配置变量的角色会话默认值，或者用于更改指定数据库中的会话的IN DATABASE子句时的默认值。如果指定了ALL而不是角色名称，则将更改所有角色的设置。</p>\n<p><strong>例子</strong></p>\n<p>更改角色密码。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"c0dfd6d\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> ROLE John <span class=\"token keyword\">WITH</span>  PASSWORD <span class=\"token string\">'new_password'</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>重命名角色。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"a8b01e8\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> ROLE John <span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TO</span>  Jane<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>更改角色的default_transaction_isolation会话参数。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"22a7509\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> ROLE Jane <span class=\"token keyword\">SET</span>  default_transaction_isolation<span class=\"token operator\">=</span><span class=\"token string\">'serializable'</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"alter-sequence\">ALTER SEQUENCE <a aria-hidden=\"true\" class=\"anchor\" href=\"#alter-sequence\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该ALTER SEQUENCE语句可以更改当前模式中现有序列的定义。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9c82c92\" tabindex=\"0\"><code class=\"language-none\">alter_sequence ::= ALTER SEQUENCE [ IF EXISTS ] name\n                      alter_sequence_options\n\nname ::= '&lt;Text Literal&gt;'\n\nalter_sequence_options ::= [ AS seq_data_type ]\n                                 [ INCREMENT [ BY ]  increment ]\n                                 [ MINVALUE  minvalue | NO MINVALUE ]\n                                 [ MAXVALUE  maxvalue | NO MAXVALUE ]\n                                 [ START [ WITH ]  start ]\n                                 [ RESTART [ [ WITH  ] restart ] ]\n                                 [ CACHE cache ]\n                                 [ OWNED BY  table_name.table_column | NONE ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>ALTER SEQUENCE sequence_name [ IF EXISTS ] 指定序列的名称（sequence_name）。如果当前架构中不存在具有该名称的序列，并且IF EXISTS未指定该序列，则会引发错误。</p>\n<p>AS datatype 更改序列的数据类型。如果先前的值超出了新类型所允许的范围，则会自动更改序列的最小值和最大值。有效类型smallint，integer和bigint。</p>\n<p>INCREMENT BY increment 指定序列中连续值之间的差。默认值为1。</p>\n<p>MINVALUE minvalue | NO MINVALUE 指定序列中允许的最小值。如果达到此值（以负增量递增的顺序），nextval()将返回错误。如果NO MINVALUE指定，则使用默认值。默认值为1。 MAXVALUE maxvalue | NO MAXVALUE 指定序列中允许的最大值。如果达到此值，nextval()将返回错误。如果NO MAXVALUE指定，则使用默认值。默认值为263 - 1。</p>\n<p>START WITH start 指定序列中的第一个值。start不能少于minvalue。默认值为1。</p>\n<p>RESTART [ [ WITH ] restart ] ] 更改序列的当前值。如果未指定任何值，则当前值将设置START [ WITH ]为创建或更改序列时指定的最后一个值。</p>\n<p>CACHE cache 指定序列中要在客户端中缓存的数字。默认值为1。 OWNED BY table_name.table_column | NONE 它将序列的所有权授予指定的列（如果有）。这意味着如果删除了列（或它所属的表），则序列将被自动删除。如果NONE指定，则将删除以前的所有所有权。</p>\n<h2 id=\"alter-table\">ALTER TABLE <a aria-hidden=\"true\" class=\"anchor\" href=\"#alter-table\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用ALTER TABLE语句更改现有表的定义。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1d58adb\" tabindex=\"0\"><code class=\"language-none\">alter_table ::= ALTER TABLE [ ONLY ] name [ * ]  alter_table_action\n                   [  , ... ]\n\nalter_table_action ::= ADD [ COLUMN ] column_name  data_type\n                           [ alter_column_constraint [ ... ] ]\n                           | RENAME TO table_name\n                           | DROP [ COLUMN ] column_name\n                             [ RESTRICT | CASCADE ]\n                           | ADD  alter_table_constraint\n                           | DROP CONSTRAINT constraint_name\n                             [ RESTRICT | CASCADE ]\n                           | RENAME [ COLUMN ] column_name TO column_name\n                           | DISABLE ROW LEVEL SECURITY\n                           | ENABLE ROW LEVEL SECURITY\n                           | FORCE ROW LEVEL SECURITY\n                           | NO FORCE ROW LEVEL SECURITY\n\nalter_table_constraint ::= [ CONSTRAINT constraint_name  ]\n                                 { CHECK (  expression )\n                                   | UNIQUE (  column_names )\n                                     index_parameters\n                                   | FOREIGN KEY (  column_names )\n                                     references_clause  }\n                                 [ DEFERRABLE | NOT  DEFERRABLE ]\n                                 [ INITIALLY  DEFERRED\n                                   | INITIALLY  IMMEDIATE ]\n\nalter_column_constraint ::= [ CONSTRAINT  constraint_name ]\n                                 { NOT NULL\n                                   | NULL\n                                   | CHECK (  expression )\n                                   | DEFAULT  expression\n                                   | UNIQUE  index_parameters\n                                   |  references_clause }\n                                [ DEFERRABLE |  NOT DEFERRABLE ]\n                                [ INITIALLY  DEFERRED\n                                   | INITIALLY  IMMEDIATE ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>ALTER TABLE [ ONLY ] name [ * ] alter_table_action [ , … ] 更改指定的表和依赖项。</p>\n<ul>\n<li>ONLY 将更改限制为指定的表</li>\n</ul>\n<p>ADD [ COLUMN ] column_name data_type constraint 添加具有指定数据类型和约束的指定列。</p>\n<p>RENAME TO table_name 将表重命名为指定的表名。</p>\n<p>DROP [ COLUMN ] column_name [ RESTRICT | CASCADE ] 从表中删除命名列。</p>\n<ul>\n<li>RESTRICT 仅删除指定的</li>\n</ul>\n<p>ADD alter_table_constraint 添加具有指定数据类型和约束的指定列。</p>\n<p>DROP CONSTRAINT constraint_name [ RESTRICT | CASCADE ] 从表中删除命名列。</p>\n<ul>\n<li>RESTRICT —仅删除指定的约束。</li>\n<li>CASCADE —删除指定的约束和所有依赖关系。</li>\n</ul>\n<p>**RENAME [ COLUMN ] column_name TO column_name ** 将列重命名为指定名称。</p>\n<p>ENABLE / DISABLE ROW LEVEL SECURITY 这将启用或禁用表的行级安全性。如果启用并且该表不存在任何策略，则将应用默认拒绝策略。如果禁用，则将不应用该表的现有策略，并将其忽略。有关如何创建行级安全策略的详细信息，请参见创建策略。</p>\n<p>FORCE / NO FORCE ROW LEVEL SECURITY 当用户是表所有者时，这将控制表的行安全策略的应用。如果启用，则当用户是表所有者时，将应用行级安全策略。如果禁用（默认设置），则当用户是表所有者时，将不应用行级安全性。有关如何创建行级安全策略的详细信息，请参见创建策略。</p>\n<p>CONSTRAINT constraint_name 指定约束的名称。</p>\n<p>Foreign key FOREIGN KEY和REFERENCES指定外键。它用于强制数据的参照完整性。 Unique 这将强制UNIQUE约束在表中指定的列集在表中是唯一的，也就是说，对于约束中指定的列集，没有两行可以具有相同的值 Check 这用于强制指定表中的数据满足该CHECK子句中指定的要求。 Default 用于指定列的默认值。如果INSERT语句未为该列指定值，则使用默认值。如果没有为列指定默认值，则默认值为NULL。</p>\n<p>Deferrable constraints 可以使用该DEFERRABLE子句推迟约束。当前，在MemFire中只能推迟外键约束。在语句中的每一行之后，将检查不可延迟的约束。在可延迟约束的情况下，约束的检查可以推迟到事务结束。 标记为 INITIALLY IMMEDIATE 的约束将在语句中的每一行之后进行检查。 标记为 INITIALLY DEFERRED 的约束将在事务结束时检查。</p>\n<h2 id=\"alter-user\">ALTER USER <a aria-hidden=\"true\" class=\"anchor\" href=\"#alter-user\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该ALTER USER语句来更改角色。ALTER USER是 ALTER ROLE的 别名，用于更改角色。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"0ea85bd\" tabindex=\"0\"><code class=\"language-none\">alter_user ::= ALTER USER role_specification\n                  [  [ WITH ] alter_role_option [ , ... ] ]\n\nalter_role_option ::= SUPERUSER\n                         | NOSUPERUSER\n                         | CREATEDB\n                         | NOCREATEDB\n                         | CREATEROLE\n                         | NOCREATEROLE\n                         | INHERIT\n                         | NOINHERIT\n                         | LOGIN\n                         | NOLOGIN\n                         | CONNECTION LIMIT connlimit\n                         | [ ENCRYPTED ] PASSWORD '  password '\n                         | PASSWORD NULL\n                         | VALID UNTIL ' timestamp '\n\nrole_specification ::= role_name | CURRENT_USER |  SESSION_USER\n\nalter_user_rename ::= ALTER USER role_name RENAME TO  new_role_name\n\nalter_user_config ::= ALTER USER { role_specification |  ALL }\n                         [ IN DATABASE database_name ] config_setting\n\nconfig_setting ::= SET config_param { TO | = }\n                       { config_value | DEFAULT }\n                       | SET config_param FROM CURRENT\n                       | RESET config_param\n                       | RESET ALL</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>参阅ALTER_ROLE</p>\n<h2 id=\"begin\">BEGIN <a aria-hidden=\"true\" class=\"anchor\" href=\"#begin\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该BEGIN语句以默认（或给定）隔离级别启动新事务。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"8f6e32e\" tabindex=\"0\"><code class=\"language-none\">BEGIN [ TRANSACTION | WORK ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>ABORT [ TRANSACTION | WORK ] WORK 可选</p>\n<p><strong>例子</strong></p>\n<p>创建名为sample的表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"40c36ce\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>启动一个事务并插入一些数据。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"b1cb4ad\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">BEGIN</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">SET</span> <span class=\"token keyword\">TRANSACTION</span> <span class=\"token keyword\">ISOLATION</span> <span class=\"token keyword\">LEVEL</span>  <span class=\"token keyword\">REPEATABLE</span> <span class=\"token keyword\">READ</span><span class=\"token punctuation\">;</span>   <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>启动第二个事务并插入一些记录。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f9372af\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">BEGIN</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">SET</span> <span class=\"token keyword\">TRANSACTION</span> <span class=\"token keyword\">ISOLATION</span> <span class=\"token keyword\">LEVEL</span>  <span class=\"token keyword\">REPEATABLE</span> <span class=\"token keyword\">READ</span><span class=\"token punctuation\">;</span>   <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在每个事务中查看刚插入的内容。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"fdbdcdf\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sample; -- run in first shell\nk1 | k2 | v1 |  v2\n----+----+----+----\n1 | 2 |   3 | a\n1 | 3 |   4 | b\n(2 rows)\n\nSELECT * FROM sample; -- run in second shell\nk1 | k2 | v1 |  v2\n----+----+----+----\n2 | 2 |   3 | a\n2 | 3 |   4 | b\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>提交第一个事务</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e537dbb\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">COMMIT</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- run  in first shell.</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>终止第二个事务</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e593435\" tabindex=\"0\"><code class=\"language-sql\">ABORT <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- run  second shell.</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>查看最终结果</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"bde0a91\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sample; -- run in first shell.\nk1 | k2 | v1 |  v2\n----+----+----+----\n1 | 2 |   3 | a\n1 | 3 |   4 | b\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"comment\">COMMENT <a aria-hidden=\"true\" class=\"anchor\" href=\"#comment\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用COMMENT语句设置，更新或删除数据库对象的注释。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"fdf7d54\" tabindex=\"0\"><code class=\"language-none\">comment_on ::= COMMENT ON\n              {  ACCESS METHOD object_name\n                 | AGGREGATE aggregate_name ( aggregate_signature )\n                 | CAST ( source_type AS target_type )\n                 | COLLATION object_name\n                 | COLUMN relation_name . column_name\n                 | CONSTRAINT constraint_name ON table_name\n                 | CONSTRAINT constraint_name ON DOMAIN domain_name\n                 | CONVERSION object_name\n                 | DATABASE object_name\n                 | DOMAIN object_name\n                 | EXTENSION object_name\n                 | EVENT TRIGGER object_name\n                 | FOREIGN DATA WRAPPER object_name\n                 | FOREIGN TABLE object_name\n                 | FUNCTION function_name [ ( function_signature ) ]\n                 | INDEX object_name\n                 | LARGE OBJECT large_object_oid\n                 | OPERATOR operator_name ( operator_signature )\n                 | OPERATOR CLASS object_name USING index_method\n                 | OPERATOR FAMILY object_name USING index_method\n                 | POLICY policy_name ON table_name\n                 | [ PROCEDURAL ] LANGUAGE object_name\n                 | PROCEDURE procedure_name\n                   [ ( [ [ argmode ] [ argname ] argtype [ , ... ] ] ) ]\n                 | PUBLICATION object_name\n                 | ROLE object_name\n                 | ROUTINE routine_name\n                   [ ( [ [ argmode ] [ argname ] argtype [ , ... ] ] ) ]\n                 | RULE rule_name ON table_name\n                 | SCHEMA object_name\n                 | SEQUENCE object_name\n                 | SERVER object_name\n                 | STATISTICS object_name\n                 | SUBSCRIPTION object_name\n                 | TABLE object_name\n                 | TABLESPACE object_name\n                 | TEXT SEARCH CONFIGURATION object_name\n                 | TEXT SEARCH DICTIONARY object_name\n                 | TEXT SEARCH PARSER object_name\n                 | TEXT SEARCH TEMPLATE object_name\n                 | TRANSFORM FOR type_name  LANGUAGE lang_name\n                 | TRIGGER trigger_name ON table_name\n                 | TYPE object_name\n                 | VIEW object_name } IS { '&lt;Text Literal&gt;' | NULL }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>COMMENT ON 添加或更改有关数据库对象的注释。要删除评论，请将值设置为NULL。</p>\n<p><strong>例子</strong></p>\n<p>添加注释。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"8089be7\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">COMMENT</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DATABASE</span> postgres <span class=\"token operator\">IS</span> <span class=\"token string\">'Default database'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">COMMENT</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">INDEX</span> index_name <span class=\"token operator\">IS</span> <span class=\"token string\">'Special index'</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>删除注释。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e419ed5\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">COMMENT</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">TABLE</span> some_table <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"commit\">COMMIT <a aria-hidden=\"true\" class=\"anchor\" href=\"#commit\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用COMMIT语句提交当前事务。事务所做的所有更改对其他人都可见，并且如果发生崩溃，则保证是持久的。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"c93da03\" tabindex=\"0\"><code class=\"language-none\">commit ::= COMMIT [ TRANSACTION  | WORK ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"52caf2d\" tabindex=\"0\"><code class=\"language-none\">COMMIT [ TRANSACTION | WORK  ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>WORK 可选</p>\n<p>TRANSACTION 可选 SERIALIZABLE隔离级别暂不支持</p>\n<p><strong>例子</strong></p>\n<p>创建一个名为sample的表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"d90773e\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在一个终端上创建一个事务并插入一些记录。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"dc26139\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">BEGIN</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">SET</span> <span class=\"token keyword\">TRANSACTION</span> <span class=\"token keyword\">ISOLATION</span> <span class=\"token keyword\">LEVEL</span> <span class=\"token keyword\">REPEATABLE</span> <span class=\"token keyword\">READ</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在第二个终端上创建一个事务并插入一些记录。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"2061c7d\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">BEGIN</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">SET</span> <span class=\"token keyword\">TRANSACTION</span> <span class=\"token keyword\">ISOLATION</span> <span class=\"token keyword\">LEVEL</span> <span class=\"token keyword\">REPEATABLE</span> <span class=\"token keyword\">READ</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在第一个终端上查看结果。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"8b79898\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sample; -- run in first shell\nk1 | k2 | v1 |  v2\n----+----+----+----\n1 | 2 | 3 | a\n1 | 3 | 4 | b\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>第二个终端上查看结果。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"ed0f11b\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sample; -- run in second shell\nk1 | k2 | v1 |  v2\n----+----+----+----\n2 | 2 | 3 | a\n2 | 3 | 4 | b\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在第二个终端上提交事务。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"ccde8d9\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">COMMIT</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- run in first shell.</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在第二个终端上终止事务。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"a9d3551\" tabindex=\"0\"><code class=\"language-sql\">ABORT <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- run second shell.</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>查看表中的记录。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9cabdb4\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sample; -- run in first shell.\nk1 | k2 | v1 |  v2\n----+----+----+----\n1 | 2 | 3 | a\n1 | 3 | 4 | b\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"7c3eff8\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sample; -- run in second shell.\nk1 | k2 | v1 |  v2\n----+----+----+----\n1 | 2 | 3 | a\n1 | 3 | 4 | b\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"copy\">COPY <a aria-hidden=\"true\" class=\"anchor\" href=\"#copy\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用COPY语句在表和文件之间传输数据。COPY TO将数据从表复制到文件。COPY FROM将数据从文件复制到表。COPY输出已复制的行数。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9f53992\" tabindex=\"0\"><code class=\"language-none\">copy_from ::= COPY table_name [ ( column_name [ , ... ]  ) ] FROM\n                {  'filename' | PROGRAM 'command' | STDIN }\n                [ [  WITH ] ( option [ , ... ] ) ]\n\ncopy_to ::= COPY { table_name [ ( column_names ) ] | (  query ) } TO\n                {  'filename' | PROGRAM 'command' | STDOUT }\n                [ [  WITH ] ( option [ , ... ] ) ]\n\ncopy_option ::= FORMAT format_name\n                  |  OIDS [ boolean ]\n                  |  FREEZE [ boolean ]\n                  |  DELIMITER 'delimiter_character'\n                  |  NULL 'null_string'\n                  |  HEADER [ boolean ]\n                  |  QUOTE 'quote_character'\n                  |  ESCAPE 'escape_character'\n                  |  FORCE_QUOTE { ( column_names ) | * }\n                  |  FORCE_NOT_NULL ( column_names )\n                  |  FORCE_NULL ( column_names )\n                  |  ENCODING 'encoding_name'</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>table_name 指定要复制的表（可以选择模式限定的表）。</p>\n<p>column_name 指定要复制的列的列表。如果未指定，则将复制表的所有列。</p>\n<p>query 指定SELECT，VALUES，INSERT，UPDATE，或DELETE语句，它的结果将被复制。对于INSERT，UPDATE和DELETE语句，必须提供RETURNING子句。</p>\n<p>filename 指定要复制的文件的路径。输入文件名可以是绝对路径或相对路径，但输出文件名必须是绝对路径。</p>\n<p><strong>例子</strong></p>\n<ul>\n<li>如果表不存在，则会引发错误。</li>\n<li>COPY TO 只能与常规表一起使用。</li>\n<li>COPY FROM 可以与表，外部表或视图一起使用。</li>\n</ul>\n<h2 id=\"create-aggregate\">CREATE AGGREGATE <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-aggregate\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE AGGREGATE语句创建一个新的聚合函数。有三种创建聚合的方法。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"e7eb988\" tabindex=\"0\"><code class=\"language-none\">create_aggregate ::= create_aggregate_normal\n                        | create_aggregate_order_by\n                        | create_aggregate_old\n\ncreate_aggregate_normal ::= CREATE AGGREGATE  aggregate_name (\n                                { aggregate_arg [  , ... ] | * } ) ( SFUNC\n                                = sfunc , STYPE =  state_data_type\n                                [ ,  aggregate_normal_option [ ... ] ] )\n\ncreate_aggregate_order_by ::= CREATE AGGREGATE  aggregate_name (\n                                [ aggregate_arg  [ , ... ] ] ORDER BY\n                                aggregate_arg [  , ... ] ) ( SFUNC =\n                                sfunc , STYPE =  state_data_type\n                                [ ,  aggregate_order_by_option [ ... ] ]\n                                )\n\ncreate_aggregate_old ::= CREATE AGGREGATE  aggregate_name ( BASETYPE =\n                            base_type , SFUNC = sfunc , STYPE =\n                            state_data_type\n                            [ , aggregate_old_option [ ... ] ] )\n\n\naggregate_arg ::= [ aggregate_argmode ] [ argname ]  argtype\n\naggregate_normal_option ::= SSPACE = state_data_size\n                               | FINALFUNC =  ffunc\n                               | FINALFUNC_EXTRA\n                               |  FINALFUNC_MODIFY =\n                                  { READ_ONLY |  SHAREABLE | READ_WRITE }\n                               | COMBINEFUNC =  combinefunc\n                               | SERIALFUNC =  serialfunc\n                               | DESERIALFUNC =  deserialfunc\n                               | INITCOND =  initial_condition\n                               | MSFUNC = msfunc\n                               | MINVFUNC = minvfunc\n                               | MSTYPE =  mstate_data_type\n                               | MSSPACE =  mstate_data_size\n                               | MFINALFUNC =  mffunc\n                               |  MFINALFUNC_EXTRA\n                               | MFINALFUNC_MODIFY =\n                                  { READ_ONLY |  SHAREABLE | READ_WRITE }\n                               | MINITCOND =  minitial_condition\n                               | SORTOP =  sort_operator\n                               | PARALLEL =\n                                  { SAFE |  RESTRICTED | UNSAFE }\n\naggregate_order_by_option ::= SSPACE = state_data_size\n                                 | FINALFUNC =  ffunc\n                                 |  FINALFUNC_EXTRA\n                                 |  FINALFUNC_MODIFY =\n                                    { READ_ONLY |  SHAREABLE | READ_WRITE }\n                                 | INITCOND =  initial_condition\n                                 | PARALLEL =\n                                    { SAFE | RESTRICTED | UNSAFE }\n                                 | HYPOTHETICAL\n\naggregate_old_option ::= SSPACE = state_data_size\n                           | FINALFUNC = ffunc\n                           | FINALFUNC_EXTRA\n                           | FINALFUNC_MODIFY =\n                              { READ_ONLY |  SHAREABLE | READ_WRITE }\n                           | COMBINEFUNC = combinefunc\n                           | SERIALFUNC = serialfunc\n                           | DESERIALFUNC = deserialfunc\n                           | INITCOND =  initial_condition\n                           | MSFUNC = msfunc\n                           | MINVFUNC = minvfunc\n                           | MSTYPE = mstate_data_type\n                           | MSSPACE = mstate_data_size\n                           | MFINALFUNC = mffunc\n                           | MFINALFUNC_EXTRA\n                           | MFINALFUNC_MODIFY =\n                              { READ_ONLY |  SHAREABLE | READ_WRITE }\n                           | MINITCOND = minitial_condition\n                           | SORTOP = sort_operator</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>选项的顺序无关紧要。甚至强制性选项BASETYPE，SFUNC和STYPE 可能以任何顺序出现。</p>\n<p>请参见[PostgreSQL docs] [postgresql-docs-create-aggregate]中每个选项的语义。</p>\n<p><strong>例子</strong></p>\n<p>普通语法示例。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"47594d1\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> AGGREGATE sumdouble <span class=\"token punctuation\">(</span>float8<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>\n           STYPE <span class=\"token operator\">=</span> float8<span class=\"token punctuation\">,</span>\n           SFUNC <span class=\"token operator\">=</span> float8pl<span class=\"token punctuation\">,</span>\n           MSTYPE <span class=\"token operator\">=</span> float8<span class=\"token punctuation\">,</span>\n           MSFUNC <span class=\"token operator\">=</span> float8pl<span class=\"token punctuation\">,</span>\n           MINVFUNC <span class=\"token operator\">=</span> float8mi\n           <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> normal_table<span class=\"token punctuation\">(</span>\n          f  float8<span class=\"token punctuation\">,</span>\n          i  <span class=\"token keyword\">int</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> normal_table<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span>\n          <span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">(</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> sumdouble<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sumdouble<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> normal_table<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>带排序的语法示例。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"b102d5d\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> AGGREGATE my_percentile_disc<span class=\"token punctuation\">(</span>float8 <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span>  anyelement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>\n           STYPE <span class=\"token operator\">=</span> internal<span class=\"token punctuation\">,</span>\n           SFUNC <span class=\"token operator\">=</span> ordered_set_transition<span class=\"token punctuation\">,</span>\n           FINALFUNC <span class=\"token operator\">=</span> percentile_disc_final<span class=\"token punctuation\">,</span>\n           FINALFUNC_EXTRA <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n           FINALFUNC_MODIFY <span class=\"token operator\">=</span> read_write\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> my_percentile_disc<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> my_percentile_disc<span class=\"token punctuation\">(</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">WITHIN</span> <span class=\"token keyword\">GROUP</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> typlen<span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">FROM</span>  pg_type<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>旧的语法示例。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"7a6eea3\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> AGGREGATE oldcnt<span class=\"token punctuation\">(</span>\n          SFUNC <span class=\"token operator\">=</span> int8inc<span class=\"token punctuation\">,</span>\n          BASETYPE <span class=\"token operator\">=</span> <span class=\"token string\">'ANY'</span><span class=\"token punctuation\">,</span>\n          STYPE <span class=\"token operator\">=</span> int8<span class=\"token punctuation\">,</span>\n          INITCOND <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span>\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> oldcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> pg_aggregate<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>零参数聚合示例。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"5401343\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> AGGREGATE newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>\n          SFUNC <span class=\"token operator\">=</span> int8inc<span class=\"token punctuation\">,</span>\n          STYPE <span class=\"token operator\">=</span> int8<span class=\"token punctuation\">,</span>\n          INITCOND <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n          PARALLEL <span class=\"token operator\">=</span> SAFE\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> pg_aggregate<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-cast\">CREATE CAST <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-cast\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE CAST语句创建新的数据转换。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"8c752be\" tabindex=\"0\"><code class=\"language-none\">create_cast ::= create_cast_with_function\n                    |  create_cast_without_function\n                    |  create_cast_with_inout\n\ncreate_cast_with_function ::= CREATE CAST (  cast_signature ) WITH\n                                  FUNCTION function_name\n                                  [ (  function_signature ) ]\n                                  [ AS ASSIGNMENT  | AS IMPLICIT ]\n\ncreate_cast_without_function ::= CREATE CAST (  cast_signature ) WITHOUT  FUNCTION\n                                   [ AS  ASSIGNMENT | AS IMPLICIT ]\n\ncreate_cast_with_inout ::= CREATE CAST ( cast_signature  ) WITH INOUT\n                              [ AS ASSIGNMENT |  AS IMPLICIT ]\n\ncast_signature ::= source_type AS target_type</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>请参见[PostgreSQL docs] [postgresql-docs-create-cast]中每个选项的语义。</p>\n<p><strong>例子</strong></p>\n<p>WITH FUNCTION例子。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"aef7f12\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> sql_to_date<span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">date</span> <span class=\"token keyword\">AS</span> $$\n          <span class=\"token keyword\">SELECT</span> $<span class=\"token number\">1</span>::<span class=\"token keyword\">text</span>::<span class=\"token keyword\">date</span>\n          $$  <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">SQL</span> IMMUTABLE STRICT<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> CAST <span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">date</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">FUNCTION</span>  sql_to_date<span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> ASSIGNMENT<span class=\"token punctuation\">;</span>  <span class=\"token keyword\">SELECT</span> CAST <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">date</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>WITHOUT FUNCTION例子。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"1fcf516\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> myfloat4<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> myfloat4_in<span class=\"token punctuation\">(</span>cstring<span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> myfloat4\n           <span class=\"token keyword\">LANGUAGE</span> internal IMMUTABLE STRICT  PARALLEL SAFE <span class=\"token keyword\">AS</span> <span class=\"token string\">'float4in'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> myfloat4_out<span class=\"token punctuation\">(</span>myfloat4<span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> cstring\n           <span class=\"token keyword\">LANGUAGE</span> internal IMMUTABLE STRICT PARALLEL SAFE <span class=\"token keyword\">AS</span> <span class=\"token string\">'float4out'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> myfloat4 <span class=\"token punctuation\">(</span>\n           INPUT <span class=\"token operator\">=</span> myfloat4_in<span class=\"token punctuation\">,</span>\n           OUTPUT <span class=\"token operator\">=</span> myfloat4_out<span class=\"token punctuation\">,</span>\n           <span class=\"token operator\">LIKE</span>  <span class=\"token operator\">=</span> float4\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> CAST<span class=\"token punctuation\">(</span><span class=\"token string\">'3.14'</span>::myfloat4 <span class=\"token keyword\">AS</span> float4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> CAST <span class=\"token punctuation\">(</span>myfloat4 <span class=\"token keyword\">AS</span> float4<span class=\"token punctuation\">)</span> WITHOUT <span class=\"token keyword\">FUNCTION</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> CAST<span class=\"token punctuation\">(</span><span class=\"token string\">'3.14'</span>::myfloat4 <span class=\"token keyword\">AS</span> float4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>WITH INOUT例子。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"1c96de1\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> myint4<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> myint4_in<span class=\"token punctuation\">(</span>cstring<span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> myint4\n           <span class=\"token keyword\">LANGUAGE</span> internal IMMUTABLE STRICT PARALLEL SAFE <span class=\"token keyword\">AS</span> <span class=\"token string\">'int4in'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> myint4_out<span class=\"token punctuation\">(</span>myint4<span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> cstring\n           <span class=\"token keyword\">LANGUAGE</span> internal IMMUTABLE STRICT PARALLEL SAFE <span class=\"token keyword\">AS</span> <span class=\"token string\">'int4out'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> myint4 <span class=\"token punctuation\">(</span>\n           INPUT <span class=\"token operator\">=</span> myint4_in<span class=\"token punctuation\">,</span>\n           OUTPUT <span class=\"token operator\">=</span> myint4_out<span class=\"token punctuation\">,</span>\n           <span class=\"token operator\">LIKE</span>  <span class=\"token operator\">=</span> int4\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> CAST<span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span>::myint4 <span class=\"token keyword\">AS</span> int4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> CAST <span class=\"token punctuation\">(</span>myint4 <span class=\"token keyword\">AS</span> int4<span class=\"token punctuation\">)</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">INOUT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> CAST<span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span>::myint4 <span class=\"token keyword\">AS</span> int4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-database\">CREATE DATABASE <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-database\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE DATABASE语句创建一个数据库。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1e46d5f\" tabindex=\"0\"><code class=\"language-none\">create_database ::= CREATE DATABASE name [  create_database_options ]\n\ncreate_database_options ::= [ WITH ] [ OWNER [ = ]  user_name ]\n                                [ TEMPLATE [ = ]  template ]\n                                [ ENCODING [ = ]  encoding ]\n                                [ LC_COLLATE [ =  ] lc_collate ]\n                                [ LC_CTYPE [ = ]  lc_ctype ]\n                                [ TABLESPACE [ = ]  tablespace_name ]\n                                [  ALLOW_CONNECTIONS [ = ] allowconn ]\n                                [ COLOCATED [ = ]  { 'true' | 'false' } ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>CREATE DATABASE name 指定要创建的数据库的名称。如果要创建的数据库name已经存在，则会返回错误。</p>\n<p>[ WITH ] OWNER user_name 指定将拥有新数据库的用户的角色名称。如果未指定，则数据库创建者为所有者。</p>\n<p>TEMPLATE template 指定用于创建新数据库的模板的名称。</p>\n<p>ENCODING encoding 指定在新数据库中使用的字符集编码。</p>\n<p>LC_COLLATE lc_collate 指定排序顺序 (LC_COLLATE),目前只支持C。</p>\n<p>LC_CTYPE lc_ctype 指定字符分类（LC_CTYPE），目前只支持utf-8。</p>\n<p>TABLESPACE tablespace_name 指定与数据库关联的新表空间。</p>\n<p>ALLOW_CONNECTIONS allowconn 指定false时禁止连接数据库。默认值为true，允许连接数据库。</p>\n<p>COLOCATED 指定true此数据库的所有表是否应位于同一tablet上。查看并置表架构 有关何时使用共置表的详细信息。默认值为false，数据库中的每个表都有自己的一组tablet。</p>\n<p><strong>例子</strong></p>\n<p>创建一个并置数据库。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"02fe183\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> company <span class=\"token keyword\">WITH</span>  COLOCATED <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在此示例中，数据库company中的所有表都放置在同一个tablet上</p>\n<h2 id=\"create-domain\">CREATE DOMAIN <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-domain\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE DOMAIN语句来创建新的域。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"27bde18\" tabindex=\"0\"><code class=\"language-none\">create_domain ::= CREATE DOMAIN name [ AS ] data_type\n                    [ DEFAULT expression ]\n                    [ [ domain_constraint [ ... ] ] ]\n\ndomain_constraint ::= [ CONSTRAINT constraint_name ]\n                          { NOT NULL | NULL | CHECK ( expression ) }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>CREATE DOMAIN name 指定域的名称。如果name中已存在，则会引发错误。</p>\n<p>AS data_type 指定基础数据类型。</p>\n<p>DEFAULT expression 为域设置默认值。</p>\n<p>CONSTRAINT constraint_name 指定约束的名称。</p>\n<p>NOT NULL 不允许为空值。 NULL 允许为空值（默认）。 CHECK ( expression ) 域值必须满足的约束，返回布尔值。表达式为 为TRUE或UNKNOWN时代表成功。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"816eb10\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> DOMAIN phone_number <span class=\"token keyword\">AS</span> <span class=\"token keyword\">TEXT</span> <span class=\"token keyword\">CHECK</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">VALUE</span> <span class=\"token operator\">~</span> <span class=\"token string\">'^\\d{3}-\\d{3}-\\d{4}$'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"7aa0209\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> person<span class=\"token punctuation\">(</span>first_name <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">,</span> last_name <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">,</span> phone_number phone_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-extension\">CREATE EXTENSION <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-extension\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE EXTENSION语句将扩展加载到数据库中。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9bb56c0\" tabindex=\"0\"><code class=\"language-none\">create_extension ::= CREATE EXTENSION [ IF NOT EXISTS ]  extension_name\n                     [ WITH ] [ SCHEMA schema_name ]\n                     [ VERSION version ] [ CASCADE ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>SCHEMA, VERSION和CASCADE可以乱序。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f2c11c3\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">SCHEMA</span> myschema<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"270b2ea\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> EXTENSION pgcrypto <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">SCHEMA</span> myschema VERSION  <span class=\"token string\">'1.3'</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"969cfba\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> EXTENSION <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> earthdistance <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-function\">CREATE FUNCTION <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-function\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE FUNCTION语句在数据库中定义新功能。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"23c6d65\" tabindex=\"0\"><code class=\"language-none\">create_function ::= CREATE [ OR REPLACE ] FUNCTION name  (\n                      [ arg_decl [ , ... ] ] )\n                      [ RETURNS type_name\n                         | RETURNS TABLE ( { column_name type_name }\n                            [ , ... ] ) ]\n                      { LANGUAGE lang_name\n                         | TRANSFORM { FOR TYPE type_name } [ , ... ]\n                         | WINDOW\n                         | IMMUTABLE\n                         | STABLE\n                         | VOLATILE\n                         | [ NOT ] LEAKPROOF\n                         | CALLED ON NULL INPUT\n                         | RETURNS NULL ON NULL INPUT\n                         | STRICT\n                         | [ EXTERNAL ] SECURITY INVOKER\n                         | [ EXTERNAL ] SECURITY DEFINER\n                         | PARALLEL { UNSAFE |  RESTRICTED | SAFE }\n                         | COST int_literal\n                         | ROWS int_literal\n                         | SET configuration_parameter\n                            { TO value | = value | FROM CURRENT }\n                         | AS 'definition'\n                         | AS 'obj_file' 'link_symbol' } [ ... ]\n\narg_decl ::= [ argmode ] [ argname ] argtype\n                [ {  DEFAULT | = } expression ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<ul>\n<li>\n<p>如果给定name和参数类型的函数已经存在，那么CREATE     FUNCTION除非使用CREATE     OR REPLACE FUNCTION版本，否则将引发错误。在这种情况下，它将替换任何现有定义。</p>\n</li>\n<li>\n<p>默认支持的语言包括sql，plpgsql和C</p>\n</li>\n<li>\n<p>VOLATILE，STABLE并IMMUTABLE告知查询优化器该函数的行为。</p>\n</li>\n<li>\n<ul>\n<li>VOLATILE是默认值，表示每个调用的函数结果可能不同。例如random()或now()。</li>\n<li>STABLE 表示该函数不会修改数据库，因此在一次扫描中，如果给定相同的参数，它将返回相同的结果。</li>\n<li>IMMUTABLE表示该函数不会修改数据库，并且在给定相同参数的情况下始终返回相同结果。</li>\n</ul>\n</li>\n<li>\n<p>CALLED ON NULL INPUT，RETURNS NULL ON NULL INPUT和STRICT定义函数对于“ null”的行为。</p>\n</li>\n<li>\n<ul>\n<li>CALLED ON NULL INPUT指示输入参数可能是null。</li>\n<li>RETURNS NULL ON NULL INPUT或STRICT表示函数在输入任何null参数时总是返回null。</li>\n</ul>\n</li>\n</ul>\n<p><strong>例子</strong></p>\n<p>使用SQL语言定义函数。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"5c33d83\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> mul<span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">integer</span>\n    <span class=\"token keyword\">AS</span> <span class=\"token string\">'SELECT $1  * $2;'</span>\n    <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">SQL</span>\n    IMMUTABLE\n    <span class=\"token keyword\">RETURNS</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">ON</span> <span class=\"token boolean\">NULL</span> INPUT<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> mul<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mul<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2504372\" tabindex=\"0\"><code class=\"language-none\">mul | mul\n-----+-----\n    6 | 120\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>使用PL/pgSQL定义一个函数</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"be13b01\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> <span class=\"token keyword\">FUNCTION</span> inc<span class=\"token punctuation\">(</span>i <span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span>  <span class=\"token keyword\">integer</span> <span class=\"token keyword\">AS</span> $$\n        <span class=\"token keyword\">BEGIN</span>\n               RAISE NOTICE <span class=\"token string\">'Incrementing %'</span><span class=\"token punctuation\">,</span> i <span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">RETURN</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n\n$$ <span class=\"token keyword\">LANGUAGE</span> plpgsql<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> inc<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inc<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inc<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"34dd2e5\" tabindex=\"0\"><code class=\"language-none\">NOTICE:   Incrementing 2\nNOTICE:   Incrementing 5\nNOTICE:   Incrementing 10\ninc | inc | inc\n-----+-----+-----\n3 |  6 |   11\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-group\">CREATE GROUP <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-group\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE GROUP语句创建组角色。CREATE GROUP是 CREATE ROLE的 别名。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"854b450\" tabindex=\"0\"><code class=\"language-none\">create_group  ::= CREATE GROUP role_name\n                    [ [ WITH ] role_option [ ,  ... ] ]\n\nrole_option  ::= SUPERUSER\n                   | NOSUPERUSER\n                   | CREATEDB\n                   | NOCREATEDB\n                   | CREATEROLE\n                   | NOCREATEROLE\n                   | INHERIT\n                   | NOINHERIT\n                   | LOGIN\n                   | NOLOGIN\n                   | CONNECTION LIMIT connlimit\n                   | [ ENCRYPTED ] PASSWORD ' password '\n                   | PASSWORD NULL\n                   | VALID UNTIL ' timestamp '\n                   | IN ROLE role_name [ , ... ]\n                   | IN GROUP role_name [ , ...  ]\n                   | ROLE role_name [ , ... ]\n                   | ADMIN role_name [ , ... ]\n                   | USER role_name [ , ... ]\n                   | SYSID uid</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>例子</strong></p>\n<p>创建一个名为sample的组，可以管理数据库和角色。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"48fa637\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">GROUP</span> SysAdmin <span class=\"token keyword\">WITH</span>  CREATEDB CREATEROLE<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-index\">CREATE INDEX <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-index\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE INDEX语句在指定表的指定列上创建索引。索引主要用于提高查询性能。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"3ab5a3f\" tabindex=\"0\"><code class=\"language-none\">create_index ::= CREATE [ UNIQUE ] INDEX [ [ IF NOT  EXISTS ] name ]\n                   ON [ ONLY ] table_name ( index_elem [ , ... ] )\n                   [ INCLUDE ( column_name [ , ... ] ) ]\n                   [ WHERE predicate ]\n\nindex_elem ::= { column_name | ( expression ) }\n                  [  operator_class_name ] [ HASH | ASC | DESC ]\n                  [  NULLS { FIRST | LAST } ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>UNIQUE 强制要求不允许表中出现重复值</p>\n<p>INCLUDE指定将作为非关键列包含在索引中的列集合。</p>\n<p>WHERE部分索引是建立在只包括满足所where规定的条件的行组成的表的子集的索引。它可用于从索引中排除NULL或公共值，或仅包含感兴趣的行。这将加快对表的写入速度，因为不需要索引包含公共列值的行。它还将减小索引的大小，从而提高使用该索引的读取查询的速度。</p>\n<p>name 指定要创建的索引的名称。</p>\n<p>table_name 指定要建立索引的表的名称。</p>\n<p>column_name 指定表的列名。</p>\n<p>expression 指定表的一列或多列，并且必须用括号括起来。</p>\n<ul>\n<li>HASH-使用列的哈希值。这是第一列的默认选项，用于对索引表进行哈希分区。</li>\n<li>ASC—升序排列。这是索引的第二列和后续列的默认选项。</li>\n<li>DESC —降序排列。</li>\n<li>NULLS FIRST-指定null排在非null之前。当指定DESC时，这是默认设置。</li>\n<li>NULLS LAST-指定null排在非null之后。如果未指定DESC，则为默认设置。</li>\n</ul>\n<p>SPLIT INTO 对于散列索引，可以使用该SPLIT INTO子句指定要为索引创建的tablet的数量。使用 SPLIT INTO 预先分割索引可索引将工作负载分配到生产集群上。例如，如果您有3台服务器，则将索引分为30个tablet可以提供更高的索引写吞吐量。</p>\n<p><strong>例子</strong></p>\n<p>创建具有哈利排序列的唯一索引。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"05ccea9\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> products<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n                               name <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n                               code <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">INDEX</span> <span class=\"token keyword\">ON</span> products<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"739e53a\" tabindex=\"0\"><code class=\"language-none\">\\d products\n             Table \"public.products\"\nColumn | Type   | Collation | Nullable | Default\n--------+---------+-----------+----------+---------\nid   | integer |      | not null |\nname  | text    |      |     |\ncode  | text    |      |     |\n\nIndexes:\n    \"products_pkey\" PRIMARY KEY, lsm (id HASH)\n    \"products_code_idx\" UNIQUE, lsm (code HASH)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>用升序键创建索引。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"14977db\" tabindex=\"0\"><code class=\"language-none\">CREATE INDEX products_name ON products(name ASC);\n\\d products_name\n    Index \"public.products_name\"\nColumn | Type |  Key? | Definition\n--------+------+------+------------\nname  | text | yes | name\nlsm, for table \"public.products</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>创建具有升序排序键的索引，并包括其他列作为非键列。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"baa6388\" tabindex=\"0\"><code class=\"language-none\">CREATE INDEX products_name_code ON products(name)  INCLUDE (code);\n\\d products_name_code;\n Index  \"public.products_name_code\"\n Column | Type |  Key? | Definition\n--------+------+------+------------\nname  | text | yes | name\ncode  | text | no  | code\nlsm, for table \"public.products\"</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>指定索引的tablet数量。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"c1ca156\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> employees <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span> first_name  <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">,</span> last_name <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">)</span> SPLIT <span class=\"token keyword\">INTO</span> <span class=\"token number\">10</span> TABLETS<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> <span class=\"token keyword\">ON</span> employees<span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">)</span> SPLIT  <span class=\"token keyword\">INTO</span> <span class=\"token number\">10</span> TABLETS<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>一个维护货运信息的应用程序。它有一个shipments表，该表的列为delivery_status。如果应用程序需要频繁访问 shipments表 ，则可以使用部分索引排除货件状态为 delivered 的行。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"d34dcce\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> shipments<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> delivery_status <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>  address <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> delivery_date <span class=\"token keyword\">date</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> shipment_delivery <span class=\"token keyword\">on</span>  shipments<span class=\"token punctuation\">(</span>delivery_status<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> delivery_date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> delivery_status <span class=\"token operator\">!=</span>  <span class=\"token string\">'delivered'</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-operator\">CREATE OPERATOR <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-operator\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE OPERATOR语句创建一个新的运算符。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"cd59041\" tabindex=\"0\"><code class=\"language-none\">create_operator ::= CREATE OPERATOR operator_name (\n                       { FUNCTION = function_name\n                          | PROCEDURE = procedure_name }\n                       [ , operator_option [ ... ] ] )\n\noperator_option ::= LEFTARG = left_type\n                       | RIGHTARG = right_type\n                       | COMMUTATOR = com_op\n                       | NEGATOR = neg_op\n                       | RESTRICT = res_proc\n                       | JOIN = join_proc\n                       | HASHES\n                       | MERGES</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>请参见[PostgreSQL docs] [postgresql-docs-create-operator]中每个选项的语义。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"20a13c7\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> OPERATOR @<span class=\"token comment\">#@ (</span>\n           rightarg <span class=\"token operator\">=</span> int8<span class=\"token punctuation\">,</span>\n           <span class=\"token keyword\">procedure</span> <span class=\"token operator\">=</span> numeric_fac\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> @<span class=\"token comment\">#@ 5;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-operator-class\">CREATE OPERATOR CLASS <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-operator-class\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE OPERATOR CLASS语句创建一个新的运算符类。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"baf984e\" tabindex=\"0\"><code class=\"language-none\">reate_operator_class ::= CREATE OPERATOR CLASS  operator_class_name\n                             [ DEFAULT ] FOR  TYPE data_type USING\n                             index_method AS  operator_class_as [ , ... ]\n\noperator_class_as ::= OPERATOR strategy_number  operator_name\n                         [ ( operator_signature ) ] [ FOR SEARCH ]\n                         | FUNCTION support_number\n                            [ ( op_type [ , ... ] ) ] function_name (\n                            function_signature )\n                         | STORAGE storage_type</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>请参见[PostgreSQL docs] [postgresql-docs-create-op-class]中每个选项的语义。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"5dbf9f5\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> OPERATOR CLASS my_op_class\n       <span class=\"token keyword\">FOR</span>  <span class=\"token keyword\">TYPE</span> int4\n       <span class=\"token keyword\">USING</span>  <span class=\"token keyword\">btree</span> <span class=\"token keyword\">AS</span>\n       OPERATOR <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">,</span>\n       OPERATOR <span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-policy\">CREATE POLICY <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-policy\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE POLICY语句为表创建新的行级安全策略。策略授予SELECT，INSERT，UPDATE或DELETE访问匹配表达式的行的权限。必须使用ALTER TABLE在表上启用行级安全性，策略才能生效。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2411cd5\" tabindex=\"0\"><code class=\"language-none\">create_policy ::= CREATE POLICY name ON table_name\n                   [ AS { PERMISSIVE | RESTRICTIVE } ]\n                   [ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]\n                   [ TO { role_name\n                           | PUBLIC\n                           | CURRENT_USER\n                           | SESSION_USER } [ , ... ] ]\n                   [ USING ( using_expression ) ]\n                   [ WITH CHECK ( check_expression ) ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<ul>\n<li>name是新政策的名称。该名称必须不同于该表的任何其他策略名称。</li>\n<li>table_name 是策略适用的表的名称。</li>\n<li>PERMISSIVE/ RESTRICTIVE指定该策略是允许的还是限制性的。在将策略应用于表时，使用逻辑OR运算符将宽松的策略组合在一起，而使用逻辑AND运算符将限制性策略组合在一起。限制性策略用于减少可访问的记录数。默认值是允许的。</li>\n<li>role_name是应用策略的角色。默认值是PUBLIC将策略应用于所有角色。</li>\n<li>using_expression是SQL条件表达式。条件变为true的行仅在中可见，SELECT而在UPDATE或中可用于修改DELETE。</li>\n<li>check_expression是仅用于INSERT和UPDATE 查询的SQL条件表达式。只有行该表达式评估为真将以被允许INSERT或 UPDATE。请注意，与不同using_expression，它是针对该行的建议新内容进行评估的。</li>\n</ul>\n<p><strong>例子</strong></p>\n<p>创建一个宽松的策略。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e5272a0\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> POLICY p1 <span class=\"token keyword\">ON</span> document\n<span class=\"token keyword\">USING</span> <span class=\"token punctuation\">(</span>dlevel  <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">level</span> <span class=\"token keyword\">FROM</span> user_account <span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">current_user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>创建限制性策略。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"a0329e3\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> POLICY p_restrictive <span class=\"token keyword\">ON</span> document <span class=\"token keyword\">AS</span> RESTRICTIVE  <span class=\"token keyword\">TO</span> user_bob    <span class=\"token keyword\">USING</span> <span class=\"token punctuation\">(</span>cid  <span class=\"token operator\">&lt;&gt;</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>创建一个带有CHECK插入条件的策略。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"ba24a16\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> POLICY p2 <span class=\"token keyword\">ON</span> document <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">CHECK</span>  <span class=\"token punctuation\">(</span>dauthor <span class=\"token operator\">=</span> <span class=\"token keyword\">current_user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-procedure\">CREATE PROCEDURE <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-procedure\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE PROCEDURE语句在数据库中定义新存储过程。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5c51a19\" tabindex=\"0\"><code class=\"language-none\">create_procedure ::= CREATE [ OR REPLACE ] PROCEDURE  name (\n                       [ arg_decl [ , ... ] ] )\n                       { LANGUAGE lang_name\n                          | TRANSFORM { FOR TYPE type_name } [ , ... ]\n                          | [ EXTERNAL ] SECURITY INVOKER\n                          | [ EXTERNAL ] SECURITY DEFINER\n                          | SET configuration_parameter\n                             { TO value | = value | FROM  CURRENT }\n                          | AS 'definition'\n                          | AS 'obj_file' 'link_symbol' } [ ... ]\n\narg_decl ::= [ argmode ] [ argname ] argtype\n                 [ {  DEFAULT | = } expression ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<ul>\n<li>如果name已经存在具有给定和参数类型的过程，则CREATE     PROCEDURE除非使用该CREATE     OR REPLACE PROCEDURE版本，否则将引发错误。在这种情况下，它将替换任何现有定义。</li>\n<li>默认支持的语言包括sql，plpgsql和C。</li>\n</ul>\n<p><strong>例子</strong></p>\n<p>设置一个账户表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"3c57a35\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> accounts <span class=\"token punctuation\">(</span>\n   id <span class=\"token keyword\">integer</span>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n   name <span class=\"token keyword\">text</span> <span class=\"token operator\">NOT</span>  <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n   balance  <span class=\"token keyword\">decimal</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> accounts <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> accounts <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> accounts<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>定义transfer将资金从一个账户转移到另一个账户的存储过程。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"d322054\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> <span class=\"token keyword\">PROCEDURE</span> transfer<span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">integer</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">decimal</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">LANGUAGE</span> plpgsql\n<span class=\"token keyword\">AS</span> $$\n<span class=\"token keyword\">BEGIN</span>\n   <span class=\"token keyword\">IF</span> $<span class=\"token number\">3</span> <span class=\"token operator\">&lt;=</span>  <span class=\"token number\">0.00</span> <span class=\"token keyword\">then</span> RAISE EXCEPTION <span class=\"token string\">'Can only transfer positive amounts'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">IF</span> $<span class=\"token number\">1</span> <span class=\"token operator\">=</span> $<span class=\"token number\">2</span> <span class=\"token keyword\">then</span>  RAISE EXCEPTION <span class=\"token string\">'Sender and receiver cannot be the same'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">UPDATE</span> accounts  <span class=\"token keyword\">SET</span> balance <span class=\"token operator\">=</span> balance <span class=\"token operator\">-</span> $<span class=\"token number\">3</span> <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">UPDATE</span> accounts  <span class=\"token keyword\">SET</span> balance <span class=\"token operator\">=</span> balance <span class=\"token operator\">+</span> $<span class=\"token number\">3</span> <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n$$<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>执行转账操作。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"936c167\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CALL</span> transfer<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> accounts<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-role\">CREATE ROLE <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-role\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE ROLE语句向MemFire数据库集群添加新角色。角色是可以拥有数据库对象并具有数据库特权的实体。角色可以是用户或组，具体取决于使用方式。具有 LOGIN 属性的role可以视为user。具有CREATEROLE特权或成为数据库超级用户才能使用此命令。 可以使用GRANT/ REVOKE命令设置/删除角色的权限。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"78f001e\" tabindex=\"0\"><code class=\"language-none\">create_role ::= CREATE ROLE role_name\n                  [ [ WITH ] role_option [ , ... ] ]\n\nrole_option ::= SUPERUSER\n                  | NOSUPERUSER\n                  | CREATEDB\n                  | NOCREATEDB\n                  | CREATEROLE\n                  | NOCREATEROLE\n                  | INHERIT\n                  | NOINHERIT\n                  | LOGIN\n                  | NOLOGIN\n                  | CONNECTION LIMIT connlimit\n                  | [ ENCRYPTED ] PASSWORD ' password '\n                  | PASSWORD NULL\n                  | VALID UNTIL ' timestamp '\n                  | IN ROLE role_name [ , ... ]\n                  | IN GROUP role_name [ , ... ]\n                  | ROLE role_name [ , ... ]\n                  | ADMIN role_name [ , ... ]\n                  | USER role_name [ , ... ]\n                  | SYSID uid</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<ul>\n<li>role_name 是新角色的名称。</li>\n<li>SUPERUSER，NOSUPERUSER确定新角色是否是“超级用户”。超级用户可以覆盖所有访问限制，应谨慎使用。只有具有SUPERUSER特权的角色才能创建其他SUPERUSER角色。如果未指定，则默认为NOSUPERUSER。</li>\n<li>CREATEDB，NOCREATEDB确定新角色是否可以创建数据库。默认值为NOCREATEDB。</li>\n<li>CREATEROLE，NOCREATEROLE确定新角色是否可以创建其他角色。默认值为NOCREATEROLE。</li>\n<li>INHERIT，NOINHERIT确定新角色是否继承其所属角色的特权。如果没有INHERIT，则另一个角色的成员资格仅授予SET     ROLE权限给该另一个角色。其他角色的特权只有在这样做后才可用。如果未指定，则默认为INHERIT。</li>\n<li>LOGIN，NOLOGIN确定是否允许新角色登录。客户端连接期间只能使用具有登录特权的角色。可以将具有LOGIN的角色视为用户。如果未指定，则默认为NOLOGIN。请注意，如果使用CREATE     USER而不是CREATE     ROLE，则默认值为LOGIN。</li>\n<li>CONNECTION LIMIT指定角色可以建立的并发连接数。默认值为-1，表示无限制。这仅适用于可以登录的角色。</li>\n<li>[ENCRYPTED] PASSWORD设置新角色的密码。这仅适用于可以登录的角色。如果未指定密码，则密码将设置为null，并且该用户的密码身份验证将始终失败。请注意，密码始终以加密方式存储在系统目录中，并且仅提供可选关键字ENCRYPTED是为了与Postgres兼容。</li>\n<li>VALID UNTIL设置一个日期和时间，之后该角色的密码将不再有效。如果省略此子句，则密码将一直有效。</li>\n<li>IN ROLE role_name，IN     GROUP role_name列出一个或多个现有角色，新角色将立即作为新成员添加到其中。（请注意，没有选项可以将新角色添加为管理员；请使用单独的GRANT命令来执行此操作。）</li>\n<li>ROLE role_name，USER     role_name列出一个或多个现有角色，这些角色将自动添加为新角色的成员。（这实际上使新角色成为“组”。）</li>\n<li>ADMIN role_name与相似ROLE     role_name，但是将命名角色添加到使用ADMIN     OPTION的新角色中，从而赋予他们将这个角色的成员资格授予其他人的权利。</li>\n<li>SYSID uid 被忽略，并且与Postgres兼容。</li>\n</ul>\n<p><strong>例子</strong></p>\n<p>创建一个可以登录的角色。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"322dccf\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> ROLE John LOGIN<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>创建一个可以登录并具有密码的juese。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"9e0e96a\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> ROLE Jane LOGIN  PASSWORD <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>创建一个可以管理数据库和角色的角色。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e214646\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> ROLE SysAdmin  CREATEDB CREATEROLE<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-rule\">CREATE RULE <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-rule\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE RULE语句创建新规则。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2dcdf30\" tabindex=\"0\"><code class=\"language-none\">create_rule  ::= CREATE [ OR REPLACE ] RULE rule_name AS ON rule_event TO table_name [ WHERE  condition ] DO [ ALSO | INSTEAD ] { NOTHING | command | ( command [ ; ... ] )  }\n\nrule_event  ::= SELECT | INSERT | UPDATE | DELETE\n\ncommand  ::= SELECT | INSERT | UPDATE | DELETE | NOTIFY</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>请参见[PostgreSQL docs] [postgresql-docs-create-rule]中每个选项的语义。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"8371e87\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> t1<span class=\"token punctuation\">(</span>a int4<span class=\"token punctuation\">,</span> b int4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> t2<span class=\"token punctuation\">(</span>a int4<span class=\"token punctuation\">,</span> b int4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">RULE</span> t1_to_t2 <span class=\"token keyword\">AS</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">TO</span> t1 <span class=\"token keyword\">DO</span> INSTEAD\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> t2 <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>new<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> new<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> t1 <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> t1<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-schema\">CREATE SCHEMA <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-schema\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE SCHEMA语句在当前数据库中创建一个新模式。模式本质上是一个命名空间：它包含命名对象（表，数据类型，函数和运算符），其名称可以与其他模式中存在的其他对象的名称重复。可以通过使用模式名称作为前缀或通过在搜索路径中设置模式名称来访问模式中的命名对象。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"55c9e48\" tabindex=\"0\"><code class=\"language-none\">create_schema_name ::= CREATE SCHEMA [ IF NOT EXISTS ]  schema_name\n                         [ AUTHORIZATION role_specification ]\n\ncreate_schema_role ::= CREATE SCHEMA [ IF NOT EXISTS ]  AUTHORIZATION                                                role_specification [ schema_element [ ... ] ]\n\nrole_specification ::= role_name | CURRENT_USER | SESSION_USER</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<ul>\n<li>schema_name是要创建的模式的名称。如果未指定schema_name，role_name则使用。</li>\n<li>role_name是拥有新模式的角色。如果省略，则默认为用户执行命令。要创建另一个角色拥有的模式，必须是该角色的直接或间接成员，或者是超级用户才能执行。</li>\n</ul>\n<p><strong>例子</strong></p>\n<p>创建一个新的模式。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"42a275e\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">SCHEMA</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> EXIST branch<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>为用户创建模式。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"ddfc265\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> ROLE John<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">SCHEMA</span> <span class=\"token keyword\">AUTHORIZATION</span> john<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>创建一个模式和改模式中的对象。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"b682796\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">SCHEMA</span> branch\n          <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> dept<span class=\"token punctuation\">(</span>\n             dept_id <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n             dept_name <span class=\"token keyword\">TEXT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n             <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>dept_id<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-sequence\">CREATE SEQUENCE <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-sequence\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE SEQUENCE语句在当前模式中创建一个新序列。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"32821f8\" tabindex=\"0\"><code class=\"language-none\">create_sequence ::= CREATE SEQUENCE [ IF NOT EXISTS ]  sequence_name\n                       sequence_options\n\nsequence_name ::= '&lt;Text Literal&gt;'\n\nsequence_options ::= [ INCREMENT [ BY ] increment ]\n                         [ MINVALUE minvalue | NO MINVALUE ]\n                         [ MAXVALUE maxvalue | NO MAXVALUE ]\n                         [ START [ WITH ] start ] [ CACHE cache ]\n                         [ [ NO ] CYCLE ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>CREATE SEQUENCE sequence_name [ IF NOT EXISTS ] 指定序列的名称（sequence_name）。如果在当前模式中已经存在具有该名称的序列，并且IF NOT EXISTS未指定该序列，则会引发错误。</p>\n<p>INCREMENT BY increment 指定序列中连续值之间的差。默认值为1。</p>\n<p>MINVALUE minvalue | NO MINVALUE 指定序列中允许的最小值。如果达到该值（以负增量递增的顺序），nextval()将返回错误。如果NO MINVALUE指定，则使用默认值。默认值为1。</p>\n<p>MAXVALUE maxvalue | NO MAXVALUE 指定序列中允许的最大值。如果达到此值，nextval()将返回错误。如果NO MAXVALUE指定，则使用默认值。默认值为263 - 1。</p>\n<p>START WITH start 指定序列中的第一个值。start不能少于minvalue。默认值为1。</p>\n<p>CACHE cache 指定序列中要在客户端中缓存的数字。默认值为1。</p>\n<p>[ NO ] CYCLE 如果CYCLE已指定，则序列到达minvalue或时将环绕maxvalue。如果maxvalue达到，minvalue将是序列中的下一个数字。如果minvalue达到（对于降序序列），maxvalue将是序列中的下一个数字。NO CYCLE是默认值。</p>\n<p>Cache 在PostgreSQL中，在MSQL中，序列的数据存储在持久性系统表中。在MSQL中，此表每个序列有一行，并且它以两个值存储序列数据： last_val 存储上次使用的值或下一个要使用的值。 is_called 存储是否last_val已使用。如果为false，last_val则为序列中的下一个值。否则，last_val+ INCREMENT是下一个。</p>\n<p>默认情况下（INCREMENT为1时），每次调用都会nextval()更新last_val该序列。在MSQL中，复制包含序列数据的表，而不是将其复制到本地文件系统中。对该表的每次更新都需要两个RPC（并且将来将优化为一个RPC），无论如何，nextval()在MSQL中调用所经历的延迟将大大高于Postgres中的相同操作。为了避免这种性能下降，MemFire建议使用具有足够大值的缓存值。缓存的值存储在本地节点的内存中，检索这些值可以避免任何RPC，因此可以在为缓存分配的所有编号上摊销一次缓存分配的延迟。</p>\n<p>SERIAL类型创建的序列具有默认值为1的缓存。因此，应避免使用 SERIAL 类型，而应使用其等效语句。而不是创建具有以下SERIAL类型的表：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"da445b7\" tabindex=\"0\"><code class=\"language-none\">CREATE TABLE t(k SERIAL)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>您应该创建一个足够大的缓存序列，然后设置列，你想有一个串行类型DEFAULT以nextval()序列。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f1c199e\" tabindex=\"0\"><code class=\"language-none\">CREATE SEQUENCE t_k_seq CACHE 10000;\nCREATE TABLE t(k integer NOT NULL DEFAULT  nextval('t_k_seq'));</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>例子</strong></p>\n<p>创建一个简单的序列，每个nextval()调用时递增1。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f2b501b\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> SEQUENCE s<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>调用nextval()。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"b40a980\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> nextval<span class=\"token punctuation\">(</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>创建一个具有10,000个 缓存 值的序列。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e1caf3c\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> SEQUENCE s2 CACHE  <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在第一个会话中调用nextval()。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"91c8065\" tabindex=\"0\"><code class=\"language-none\">SELECT nextval('s2');\n nextval\n---------\n          1\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在第二个会话中调用 nextval()。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2912836\" tabindex=\"0\"><code class=\"language-none\">SELECT nextval('s2');\nnextval\n---------\n      10001\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>创建一个从0开始的序列。将MINVALUE从其默认值1更改为小于或等于0的值。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"ca701d8\" tabindex=\"0\"><code class=\"language-none\">CREATE SEQUENCE s3 START 0 MINVALUE 0;\nCREATE SEQUENCE\nSELECT nextval('s3');\nnextval\n---------\n          0\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-table\">CREATE TABLE <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-table\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE TABLE语句在数据库中创建新表。它定义了表名，列名和类型，主键和表属性。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"e828033\" tabindex=\"0\"><code class=\"language-none\">create_table ::= CREATE [ TEMPORARY | TEMP ] TABLE [ IF  NOT EXISTS ]\n                    table_name ( [ table_elem [ , ... ] ] )\n                    [ WITH ( { COLOCATED = { 'true' | 'false' }\n                                 | storage_parameters } )\n                       | WITHOUT OIDS ]\n                    [ SPLIT { INTO integer TABLETS\n                               | AT VALUES ( split_row [ , ... ] ) } ]\n\ntable_elem ::= column_name data_type [  column_constraint [ ... ] ]\n                 | table_constraint\n\ncolumn_constraint ::= [ CONSTRAINT constraint_name ]\n                          { NOT NULL\n                             | NULL\n                             | CHECK ( expression )\n                             | DEFAULT expression\n                             | UNIQUE index_parameters\n                             | PRIMARY KEY\n                             | references_clause }\n                          [ DEFERRABLE | NOT DEFERRABLE ]\n                          [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]\n\ntable_constraint ::= [ CONSTRAINT constraint_name ]\n                          { CHECK ( expression )\n                             | UNIQUE ( column_names ) index_parameters\n                             | PRIMARY KEY ( key_columns )\n                             | FOREIGN KEY ( column_names )\n                                references_clause }\n                          [ DEFERRABLE | NOT DEFERRABLE ]\n                          [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]\n\nkey_columns ::= hash_columns [ , range_columns ] |  range_columns\n\nhash_columns ::= column_name [ HASH ] | ( column_name [  , ... ] ) HASH\n\nrange_columns ::= { column_name { ASC | DESC } } [ ,  ... ]\n\nstorage_parameters ::= storage_parameter [ , ... ]\n\nstorage_parameter ::= param_name [ = param_value ]\n\nindex_parameters ::= [ INCLUDE ( column_names ) ]\n                         [ WITH ( storage_parameters ) ]\n\nreferences_clause ::= REFERENCES table_name [  column_name [ , ... ] ]\n                         [ MATCH FULL | MATCH PARTIAL | MATCH  SIMPLE ]\n                         [ ON DELETE key_action ]\n                         [ ON UPDATE key_action ]\n\nsplit_row ::= ( column_value [ , ... ] )</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>Primary key 可以在column_constraint或table_constraint 中定义主键 ，但不能在两个地方同时定义。有两种类型的主键列：</p>\n<ul>\n<li>Hash primary key columns：主键可能具有零个或多个前导哈希分区列。默认情况下，仅第一列被视为哈希分区列。但是可以通过显式使用HASH注释来修改此行为。</li>\n<li>Range primary key columns：一个表可以具有零个或多个范围主键列，并且它控制表中行的顶级排序（如果没有哈希分区列）或共享一组公共哈希分区列的行之间的行顺序价值观。默认情况下，范围主键列以升序存储。但是，可以通过显式使用ASC或来控制此行为DESC。</li>\n</ul>\n<p>Foreign key 这将强制UNIQUE约束中指定的列集在表中是唯一的，也就是说，约束中指定的列集的任何两行都不能具有相同的值。</p>\n<p>Check 这用于强制指定表中的数据满足该CHECK子句中指定的要求。</p>\n<p>Default 此子句用于指定列的默认值。如果INSERT语句未为该列指定值，则使用默认值。如果没有为列指定默认值，则默认值为NULL。</p>\n<p>Deferrable constraints 可以使用该DEFERRABLE子句推迟约束。当前，在MemFire中只能推迟外键约束。在语句中的每一行之后，将检查不可延迟的约束。在推迟约束的情况下，约束的检查可以推迟到事务结束。</p>\n<p>标记为的约束INITIALLY IMMEDIATE将在语句中的每一行之后进行检查。 标记为的约束INITIALLY DEFERRED将在事务结束时检查。</p>\n<p>Temporary or Temp 使用此限定符将创建一个临时表。临时表仅在创建它们的当前客户端会话或事务中可见，并在会话或事务结束时自动删除。在临时表上创建的所有索引也是临时的。 SPLIT INTO 对于哈希表，您可以使用该SPLIT INTO子句来指定要为该表创建的tablet。然后，将哈希范围平均分配给这些tablet。</p>\n<p><strong>例子</strong></p>\n<p>带主键的表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"34dc346\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n                            k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n                            v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n                            v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>  <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>带范围主键的表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"aaf5645\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> range<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n                            k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n                            v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n                            v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1  <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>带有检查约束的表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e21e412\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> student_grade<span class=\"token punctuation\">(</span>student_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n                                        class_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n                                        term_id  <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n                                        grade  <span class=\"token keyword\">int</span> <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span>grade <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">AND</span> grade <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                        <span class=\"token keyword\">PRIMARY</span>  <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> class_id<span class=\"token punctuation\">,</span> term_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>具有默认值的表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"a26bd91\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> cars<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n                           brand <span class=\"token keyword\">text</span> <span class=\"token keyword\">CHECK</span>  <span class=\"token punctuation\">(</span>brand <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                           model <span class=\"token keyword\">text</span> <span class=\"token operator\">NOT</span>  <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n                           color <span class=\"token keyword\">text</span> <span class=\"token operator\">NOT</span>  <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'WHITE'</span> <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span>color <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'RED'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'WHITE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BLUE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>带有外键约束的表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f3ddf27\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> products<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n                                 descr <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> orders<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n                                 pid <span class=\"token keyword\">int</span> <span class=\"token keyword\">REFERENCES</span>  products<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">,</span>\n                                 amount <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>具有唯一约束的表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"ce31677\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> translations<span class=\"token punctuation\">(</span>message_id <span class=\"token keyword\">int</span> <span class=\"token keyword\">UNIQUE</span><span class=\"token punctuation\">,</span>\n                                     message_txt <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>创建一个指定分片数量的表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"2626e76\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> tracking <span class=\"token punctuation\">(</span>id  <span class=\"token keyword\">int</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">)</span> SPLIT <span class=\"token keyword\">INTO</span> <span class=\"token number\">10</span> TABLETS<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>使用并置表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f54ff13\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> company <span class=\"token keyword\">WITH</span> colocated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> employee<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">(</span>colocated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-table-as\">CREATE TABLE AS <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-table-as\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该CREATE TABLE AS语句使用子查询的输出来创建新表。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"16d1cd8\" tabindex=\"0\"><code class=\"language-none\">create_table_as ::= CREATE TABLE [ IF NOT EXISTS ] table_name\n                    [ ( column_name [ , ... ] ) ]   AS query\n                    [ WITH [ NO ] DATA ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>CREATE TABLE [ IF NOT EXISTS ] table_name 创建一个表。</p>\n<p>table_name 指定表的名称。</p>\n<p>( column_name [ , … ] ) 指定新表中的列名。未指定时，列名称取自查询的输出列名称。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e235569\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"60d503f\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e2a30b4\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> selective_sample <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample  <span class=\"token keyword\">WHERE</span> k1 <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"045ce3f\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> selective_sample <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> k1<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-trigger\">CREATE TRIGGER <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-trigger\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE TRIGGER语句定义新的触发器。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9ea3975\" tabindex=\"0\"><code class=\"language-none\">create_trigger ::= CREATE TRIGGER name { BEFORE | AFTER  | INSTEAD OF }\n                      { event [ OR ... ] } ON table_name\n                      [ FROM table_name ] [ NOT  DEFERRABLE ]\n                      [ FOR [ EACH ] { ROW | STATEMENT } ]\n                      [ WHEN ( condition ) ] EXECUTE\n                      { FUNCTION | PROCEDURE } function_name (\n                      function_arguments )\n\nevent ::= INSERT\n            | UPDATE [ OF column_name [ , ... ] ]\n            | DELETE\n            | TRUNCATE</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<ul>\n<li>WHEN条件可用于指定是否应触发触发器。对于低级触发器，它可以引用该行的列的旧值和/或新值。</li>\n<li>可以为同一事件定义多个触发器。在这种情况下，将按名称的字母顺序将其触发。</li>\n</ul>\n<p><strong>例子</strong></p>\n<p>设置带有触发器的表，以跟踪修改时间和用户（角色）。使用预安装的扩展insert_username和moddatetime。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e389864\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> EXTENSION insert_username<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> EXTENSION moddatetime<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> posts <span class=\"token punctuation\">(</span>\n   id <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>\n   content <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n   username <span class=\"token keyword\">text</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\n   moddate <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> insert_usernames\n   BEFORE <span class=\"token keyword\">INSERT</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">ON</span> posts\n   <span class=\"token keyword\">FOR EACH ROW</span>\n   <span class=\"token keyword\">EXECUTE</span>  <span class=\"token keyword\">PROCEDURE</span> insert_username <span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> update_moddatetime\n   BEFORE <span class=\"token keyword\">UPDATE</span>  <span class=\"token keyword\">ON</span> posts\n   <span class=\"token keyword\">FOR EACH ROW</span>\n   <span class=\"token keyword\">EXECUTE</span>  <span class=\"token keyword\">PROCEDURE</span> moddatetime <span class=\"token punctuation\">(</span>moddate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>插入一些行。对于每次插入，触发器应将当前角色设置为username，将当前时间戳设置为moddate。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"9b5227e\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SET</span> ROLE memfire<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> posts <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SET</span> ROLE postgres<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> posts <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> posts <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SET</span> ROLE memfire<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> posts <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> posts <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> id<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>更新一些行。对于每一个更新的触发器既设置username和moddate相应。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"37c4fc2\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> posts <span class=\"token keyword\">SET</span> content <span class=\"token operator\">=</span> <span class=\"token string\">'desc1_updated'</span> <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">UPDATE</span> posts <span class=\"token keyword\">SET</span> content <span class=\"token operator\">=</span> <span class=\"token string\">'desc3_updated'</span> <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> posts <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> id<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-type\">CREATE TYPE <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-type\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE TYPE语句在数据库中创建新的用户定义类型。有五种类型：复合，枚举，范围，基数和shell。每个都有自己的CREATE TYPE语法。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"c9a4263\" tabindex=\"0\"><code class=\"language-none\">create_composite_type ::= CREATE TYPE type_name AS (\n                            [ composite_type_elem [ , ... ] ] )\n\ncreate_enum_type ::= CREATE TYPE type_name AS ENUM (\n                        [ label [ , ... ] ] )\n\ncreate_range_type ::= CREATE TYPE type_name AS RANGE (  SUBTYPE =\n                         subtype [ , range_type_option [ ... ] ] )\n\ncreate_base_type ::= CREATE TYPE type_name ( INPUT =  input_function ,\n                            OUTPUT = output_function\n                            [ , base_type_option [ ... ] ] )\n\ncreate_shell_type ::= CREATE TYPE type_name\n\ncomposite_type_elem ::= attribute_name data_type [  COLLATE collation ]\n\nrange_type_option ::= SUBTYPE_OPCLASS =  subtype_operator_class\n                         | COLLATION = collation\n                         | CANONICAL = canonical_function\n                         | SUBTYPE_DIFF = subtype_diff_function\n\nbase_type_option ::= RECEIVE = receive_function\n                        | SEND = send_function\n                        | TYPMOD_IN = type_modifier_input_function\n                        | TYPMOD_OUT = type_modifier_output_function\n                        | INTERNALLENGTH = { internallength | VARIABLE }\n                        | PASSEDBYVALUE\n                        | ALIGNMENT = alignment\n                        | STORAGE = storage\n                        | LIKE = like_type\n                        | CATEGORY = category\n                        | PREFERRED = preferred\n                        | DEFAULT = default\n                        | ELEMENT = element\n                        | DELIMITER = delimiter\n                        | COLLATABLE = collatable</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>base_type_option</p>\n<ul>\n<li>type_name 指定此用户定义类型的名称。</li>\n<li>attribute_name 指定此复合类型的属性的名称。</li>\n<li>data_type 指定此复合类型的属性的类型。</li>\n<li>collation指定用于此类型的排序规则。如果这是复合类型，则属性数据类型必须可合并。如果这是范围类型，则子类型必须可排序。</li>\n<li>label 指定带引号的标签为此枚举类型的值。</li>\n<li>subtype 指定用于此范围类型的类型。</li>\n<li>subtype_operator_class 指定用于此范围类型的子类型的运算符类。</li>\n<li>canonical_function 指定在将此范围类型的范围值转换为规范形式时使用的规范函数。</li>\n<li>subtype_diff_function 指定用于获取此范围类型的两个范围值之间的差的子类型差函数。</li>\n<li>input_function 指定将此类型的外部文本表示转换为内部表示的函数。</li>\n<li>output_function 指定将此类型的内部表示形式转换为外部文本表示形式的函数。</li>\n<li>receive_function 指定将此类型的外部二进制表示形式转换为内部表示形式的函数。</li>\n<li>send_function 指定将此类型的内部表示形式转换为外部二进制表示形式的函数。</li>\n<li>type_modifier_input_function 指定将此类型修饰符的外部文本表示形式转换为内部整数typmod值或引发错误的函数。</li>\n<li>type_modifier_output_function 指定将此类型修饰符的内部整数typmod值转换为外部表示形式的函数。</li>\n<li>internallength 指定此类型的大小（以字节为单位）。</li>\n<li>alignment 指定此类型的存储对齐方式。</li>\n<li>storage指定此类型的存储策略。此类型必须是可变长度。</li>\n<li>like_type指定到拷贝过来的类型INTERNALLENGTH，PASSEDBYVALUE，ALIGNMENT，和STORAGE的值从。</li>\n<li>category 指定此类型的类别代码。</li>\n<li>preferred 指定对于同一类别中的隐式强制转换是否首选此类型。</li>\n<li>default 指定此类型的默认值。</li>\n<li>element 指定此类型的元素，也使该类型成为数组。</li>\n<li>delimiter 指定用于在此类型的值的外部文本表示形式中分隔数组元素的字符。</li>\n<li>collatable 指定是否可以将排序规则信息传递给使用此类型的操作。</li>\n</ul>\n<p><strong>例子</strong></p>\n<p>复合型。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"16c1066\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> feature_struct <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> feature_tab_struct <span class=\"token punctuation\">(</span>feature_col feature_struct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>枚举类型。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"2fdb19e\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> feature_enum <span class=\"token keyword\">AS</span> <span class=\"token keyword\">ENUM</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> feature_tab_enum <span class=\"token punctuation\">(</span>feature_col  feature_enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>范围类型。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f220fe0\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> feature_range <span class=\"token keyword\">AS</span> RANGE <span class=\"token punctuation\">(</span>subtype<span class=\"token operator\">=</span><span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> feature_tab_range <span class=\"token punctuation\">(</span>feature_col feature_range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>基本类型。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"7a28b29\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> int4_type<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> int4_type_in<span class=\"token punctuation\">(</span>cstring<span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> int4_type\n            <span class=\"token keyword\">LANGUAGE</span> internal IMMUTABLE STRICT PARALLEL SAFE <span class=\"token keyword\">AS</span> <span class=\"token string\">'int4in'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> int4_type_out<span class=\"token punctuation\">(</span>int4_type<span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span>  cstring\n            <span class=\"token keyword\">LANGUAGE</span> internal IMMUTABLE STRICT PARALLEL SAFE <span class=\"token keyword\">AS</span> <span class=\"token string\">'int4out'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> int4_type <span class=\"token punctuation\">(</span>\n            INPUT <span class=\"token operator\">=</span> int4_type_in<span class=\"token punctuation\">,</span>\n            OUTPUT <span class=\"token operator\">=</span> int4_type_out<span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">LIKE</span> <span class=\"token operator\">=</span> int4\n         <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> int4_table <span class=\"token punctuation\">(</span>t int4_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>外壳类型。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"675b4b4\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> shell_type<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-user\">CREATE USER <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-user\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE USER语句创建用户。该CREATE USER语句是 CREATE ROLE 的别名，但默认情况下会创建一个具有LOGIN特权的角色。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"c2bb81c\" tabindex=\"0\"><code class=\"language-none\">create_user ::= CREATE USER role_name\n                  [ [ WITH ] role_option [ , ... ] ]\n\nrole_option ::= SUPERUSER\n                  | NOSUPERUSER\n                  | CREATEDB\n                  | NOCREATEDB\n                  | CREATEROLE\n                  | NOCREATEROLE\n                  | INHERIT\n                  | NOINHERIT\n                  | LOGIN\n                  | NOLOGIN\n                  | CONNECTION LIMIT connlimit\n                  | [ ENCRYPTED ] PASSWORD ' password '\n                  | PASSWORD NULL\n                  | VALID UNTIL ' timestamp '\n                  | IN ROLE role_name [ , ... ]\n                  | IN GROUP role_name [ , ... ]\n                  | ROLE role_name [ , ... ]\n                  | ADMIN role_name [ , ... ]\n                  | USER role_name [ , ... ]          |  SYSID uid</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>参阅CREATE ROLE</p>\n<p><strong>例子</strong></p>\n<p>使用密码创建一个示例用户。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"c620f4b\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> John <span class=\"token keyword\">WITH</span> PASSWORD <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>向John授予对MemFire数据库的所有权限。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"41691e9\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DATABASE</span> MemFire <span class=\"token keyword\">TO</span> John<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>从MemFire数据库中删除John的权限。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"92707c0\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DATABASE</span> MemFire <span class=\"token keyword\">FROM</span> John<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"create-view\">CREATE VIEW <a aria-hidden=\"true\" class=\"anchor\" href=\"#create-view\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用CREATE VIEW语句在数据库中创建新视图。它定义了视图名称和定义它的（选择）语句。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4929b86\" tabindex=\"0\"><code class=\"language-none\">create_view ::= CREATE VIEW qualified_name\n                 [ ( column_list ) ] AS select</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>CREATE VIEW qualified_name [ (column_list ) ] AS select 创建一个视图。</p>\n<p>qualified_name 指定视图的名称。如果指定数据库中已经存在具有该名称的视图，则会引发错误（除非使用了该OR REPLACE选项）。</p>\n<p>column_list 指定以逗号分隔的列列表。如果未指定，则从查询中推导出列名。 select 指定SELECT或VALUES语句，以提供视图的列和行。</p>\n<p><strong>例子</strong></p>\n<p>创建一个sample表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"4efe814\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>插入一些行。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"5be6158\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在sample表上创建一个视图。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"9d747a1\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> sample_view <span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample <span class=\"token keyword\">WHERE</span>  v2 <span class=\"token operator\">!=</span> <span class=\"token string\">'b'</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> k1 <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>从视图中选择。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"0ffc6b0\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample_view<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"dellocate\">DELLOCATE <a aria-hidden=\"true\" class=\"anchor\" href=\"#dellocate\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用DEALLOCATE语句取消分配先前准备的SQL语句。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"13674fd\" tabindex=\"0\"><code class=\"language-none\">deallocate ::= DEALLOCATE [ PREPARE ] { name | ALL }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>name 指定要释放的准备好的语句的名称。</p>\n<p>ALL 取消分配所有准备好的语句。</p>\n<p><strong>例子</strong></p>\n<p>准备并取消插入语句。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"c0800e3\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">PREPARE</span> ins <span class=\"token punctuation\">(</span><span class=\"token keyword\">bigint</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token keyword\">precision</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span>\n               <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DEALLOCATE</span> ins<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"delete\">DELETE <a aria-hidden=\"true\" class=\"anchor\" href=\"#delete\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用DELETE语句删除满足某些条件的行，并且当WHERE子句中未提供条件时，将删除所有行。DELETE输出要删除的行数。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"e2c6e01\" tabindex=\"0\"><code class=\"language-none\">delete ::= [ WITH [ RECURSIVE ] with_query [ , ... ]  ] DELETE FROM\n              [ ONLY  ] table_name [ * ] [ [ AS ] alias ]\n              [  WHERE condition | WHERE CURRENT OF cursor_name ]\n              [ returning_clause ]\n\nreturning_clause ::= RETURNING { * | {  output_expression\n                                         [ [ AS ]  output_name ] }\n                                         [ , ...  ] }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<ul>\n<li>USING 子句尚不支持。</li>\n<li>尽管该WHERE子句允许使用多种运算符，但该WHERE子句中使用的确切条件具有重要的性能考虑因素（特别是对于大型数据集）。为了获得最佳性能，请使用WHERE为PRIMARY KEY或中的所有列提供值的子句INDEX     KEY。</li>\n</ul>\n<p>with_query 指定在DELETE语句中按名称引用的子查询。</p>\n<p>table_name 指定要删除的表的名称。</p>\n<p>alias 在DELETE语句中指定目标表的标识符。指定别名后，必须使用别名代替语句中的实际表。</p>\n<p><strong>例子</strong></p>\n<p>创建一个示例表，插入几行，然后删除插入的行之一。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"02395bd\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"100c985\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sample ORDER BY k1;\nk1 | k2 | v1 | v2\n----+----+----+----\n   1 | 2 |   3 | a\n   2 | 3 |   4 | b\n   3 | 4 |   5 | c\n(3 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"0a041f4\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> sample <span class=\"token keyword\">WHERE</span> k1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">AND</span> k2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> k1<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"do\">DO <a aria-hidden=\"true\" class=\"anchor\" href=\"#do\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DO语句执行匿名代码块，或换句话说，以过程语言执行匿名函数。将代码块视为没有参数的函数的主体，并返回void。它被解析并执行一次。可选LANGUAGE子句可以在代码块之前或之后编写。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1243d00\" tabindex=\"0\"><code class=\"language-none\">do ::= DO [ LANGUAGE lang_name  ] code</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>code 要执行的过程语言代码。就像在中一样，必须将其指定为字符串文字CREATE FUNCTION。建议使用美元报价文字。</p>\n<p>lang_name 编写代码所用的过程语言的名称。如果省略，则默认值为plpgsql。要使用的过程语言必须已经安装在当前数据库中。plpgsql默认情况下已安装，但未安装其他语言。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"41abf94\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DO</span> $$<span class=\"token keyword\">DECLARE</span> r record<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">BEGIN</span>\n   <span class=\"token keyword\">FOR</span> r <span class=\"token operator\">IN</span>  <span class=\"token keyword\">SELECT</span> table_schema<span class=\"token punctuation\">,</span> table_name <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span>\n              <span class=\"token keyword\">WHERE</span> table_type <span class=\"token operator\">=</span> <span class=\"token string\">'VIEW'</span> <span class=\"token operator\">AND</span> table_schema <span class=\"token operator\">=</span> <span class=\"token string\">'public'</span>\n   <span class=\"token keyword\">LOOP</span>\n      <span class=\"token keyword\">EXECUTE</span>  <span class=\"token string\">'GRANT ALL ON '</span> <span class=\"token operator\">||</span> quote_ident<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>table_schema<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span>\nquote_ident<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>table_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">' TO webuser'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">END</span> <span class=\"token keyword\">LOOP</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span>$$<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-aggregate\">DROP AGGREGATE <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-aggregate\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用DROP AGGREGATE语句删除聚合。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f58e0fc\" tabindex=\"0\"><code class=\"language-none\">drop_aggregate ::= DROP AGGREGATE [ IF EXISTS ]\n                     { aggregate_name ( aggregate_signature ) }\n                     [ , ... ] [ CASCADE | RESTRICT ]\n\naggregate_signature ::= * | aggregate_arg [ , ... ]\n                              | [ aggregate_arg [ , ... ] ] ORDER  BY\n                                  aggregate_arg [ ,  ... ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>请参见[PostgreSQL docs] [postgresql-docs-drop-aggregate]中每个选项的语义。</p>\n<p><strong>例子</strong></p>\n<p>基本示例。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"c0fad6c\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> AGGREGATE newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>\n          sfunc <span class=\"token operator\">=</span> int8inc<span class=\"token punctuation\">,</span>\n          stype <span class=\"token operator\">=</span> int8<span class=\"token punctuation\">,</span>\n          initcond <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n          parallel <span class=\"token operator\">=</span> safe\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> AGGREGATE newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>IF EXISTS 例。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f1df800\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> AGGREGATE <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> AGGREGATE newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>\n           sfunc <span class=\"token operator\">=</span> int8inc<span class=\"token punctuation\">,</span>\n           stype <span class=\"token operator\">=</span> int8<span class=\"token punctuation\">,</span>\n           initcond <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n           parallel <span class=\"token operator\">=</span> safe\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> AGGREGATE <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>CASCADE和RESTRICT例子。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"0363b49\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> AGGREGATE newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>\n           sfunc <span class=\"token operator\">=</span> int8inc<span class=\"token punctuation\">,</span>\n           stype <span class=\"token operator\">=</span> int8<span class=\"token punctuation\">,</span>\n           initcond <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n           parallel <span class=\"token operator\">=</span> safe\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> cascade_view <span class=\"token keyword\">AS</span>\n           <span class=\"token keyword\">SELECT</span> newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> pg_aggregate<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- The following should error:</span>\n<span class=\"token keyword\">DROP</span> AGGREGATE newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RESTRICT</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- The following should error:</span>\n<span class=\"token keyword\">DROP</span> AGGREGATE newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> AGGREGATE newcnt<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-cast\">DROP CAST <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-cast\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DROP CAST语句删除转换。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"840ced8\" tabindex=\"0\"><code class=\"language-none\">drop_cast ::= DROP CAST [ IF EXISTS ] ( cast_signature  )\n             [ CASCADE | RESTRICT ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>请参见[PostgreSQL docs] [postgresql-docs-drop-cast]中每个选项的语义。</p>\n<p><strong>例子</strong></p>\n<p>基本示例。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"1b9539a\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> sql_to_date<span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">date</span> <span class=\"token keyword\">AS</span> $$\n           <span class=\"token keyword\">SELECT</span> $<span class=\"token number\">1</span>::<span class=\"token keyword\">text</span>::<span class=\"token keyword\">date</span>\n           $$  <span class=\"token keyword\">LANGUAGE</span> <span class=\"token keyword\">SQL</span> IMMUTABLE STRICT<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> CAST <span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">date</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">FUNCTION</span>  sql_to_date<span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> ASSIGNMENT<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> CAST <span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">date</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-database\">DROP DATABASE <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-database\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DROP DATABASE语句从系统中删除数据库及其所有关联对象。这是不可逆转的操作。使用该连接执行语句后，当前打开的数据库连接将失效，然后关闭。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"7372a13\" tabindex=\"0\"><code class=\"language-none\">drop_database ::= DROP DATABASE [ IF EXISTS ]  database_name</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>DROP DATABASE [ IF EXISTS ] database_name 删除数据库和所有关联的对象。database_name在drop语句完成之后，所有与之相关的对象（例如表）将失效。与删除的数据库的所有连接都将失效，并最终断开连接。 database_name 指定数据库的名称。</p>\n<h2 id=\"drop-domain\">DROP DOMAIN <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-domain\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用DROP DOMAIN语句从数据库中删除域。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"492dd18\" tabindex=\"0\"><code class=\"language-none\">drop_domain ::= DROP DOMAIN [ IF EXISTS ] name [ , ...  ]\n                [ CASCADE | RESTRICT ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>name 指定现有域的名称。如果指定的域不存在（除非IF EXISTS设置），则会引发错误。如果任何对象都依赖此域（除非CASCADE设置了），则会引发错误。</p>\n<p>IF EXISTS 如果域不存在，请不要抛出错误。</p>\n<p>CASCADE 使用域数据类型自动删除依赖于域的对象（例如表列），然后自动除去依赖于那些对象的所有其他对象。</p>\n<p>RESTRICT 如果对象依赖域，则拒绝删除域（默认）。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"6a4f5ee\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> DOMAIN idx <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">5</span> <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">VALUE</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> DOMAIN idx<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"5051cad\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> DOMAIN idx <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">5</span> <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">VALUE</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> t <span class=\"token punctuation\">(</span>k idx <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> DOMAIN idx <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-extension\">DROP EXTENSION <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-extension\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用DROP EXTENSION语句从数据库中删除扩展名。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"94fa772\" tabindex=\"0\"><code class=\"language-none\">drop_extension ::= DROP EXTENSION [ IF EXISTS ]  extension_name\n                   [ , ... ] [ CASCADE | RESTRICT ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<ul>\n<li>如果扩展名不存在，除非IF     EXISTS使用扩展名，否则将引发错误。然后，发出通知。</li>\n<li>RESTRICT 是默认值，如果有任何对象依赖扩展名，它将不会删除该扩展名。</li>\n<li>CASCADE 将删除所有依赖于扩展名的可传递对象。</li>\n</ul>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"ac22b3f\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> EXTENSION <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> cube<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"de40934\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> EXTENSION cube<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> EXTENSION earthdistance<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> EXTENSION <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> cube <span class=\"token keyword\">RESTRICT</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f157f3e\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> EXTENSION <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> cube <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-function\">DROP FUNCTION <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-function\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用DROP FUNCTION语句从数据库中删除函数。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"fcf8d8d\" tabindex=\"0\"><code class=\"language-none\">drop_function ::= DROP { FUNCTION | PROCEDURE } [ IF  EXISTS ]\n                    { name [ ( [ argtype_decl [ , ... ] ] ) ] }\n                    [ , ... ] [ CASCADE | RESTRICT ]\n\nargtype_decl ::= [ argmode ] [ argname ] argtype</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<ul>\n<li>如果该函数不存在，除非IF     EXISTS使用该函数，否则将引发错误。然后发出通知。</li>\n<li>RESTRICT 是默认值，如果有任何对象依赖该函数，它将不会删除该函数。</li>\n<li>CASCADE 将会删除所有依赖该功能的对象。</li>\n</ul>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"57ca21e\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> inc<span class=\"token punctuation\">(</span>i <span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mul<span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-group\">DROP GROUP <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-group\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用DROP GROUP语句删除角色。DROP GROUP是DROP ROLE的别名</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"5bb21e8\" tabindex=\"0\"><code class=\"language-sql\">drop_group ::<span class=\"token operator\">=</span> <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">GROUP</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">]</span> role_name <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>参阅DROP_ROLE.</p>\n<p><strong>例子</strong></p>\n<p>删除一组。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f228c57\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">GROUP</span> SysAdmin<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-operator\">DROP OPERATOR <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-operator\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用DROP OPERATOR语句删除运算符。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"cdfb91b\" tabindex=\"0\"><code class=\"language-none\">drop_operator ::= DROP OPERATOR [ IF EXISTS ]\n                    { operator_name ( operator_signature ) } [ , ... ]\n                    [ CASCADE | RESTRICT ]\n\noperator_signature ::= { left_type | NONE } , {  right_type | NONE }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>请参见[PostgreSQL docs] [postgresql-docs-drop-operator]中每个选项的语义。</p>\n<p><strong>例子</strong></p>\n<p>基本示例</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"059f1c2\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> OPERATOR @<span class=\"token comment\">#@ (</span>\n          rightarg <span class=\"token operator\">=</span> int8<span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">procedure</span> <span class=\"token operator\">=</span> numeric_fac\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> OPERATOR @<span class=\"token comment\">#@ (NONE, int8);</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-operator-class\">DROP OPERATOR CLASS <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-operator-class\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DROP OPERATOR CLASS语句删除运算符类。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"3b0daa2\" tabindex=\"0\"><code class=\"language-none\">drop_operator_class ::= DROP OPERATOR CLASS [ IF EXISTS  ]\n                          operator_class_name USING index_method\n                          [ CASCADE | RESTRICT ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>请参见[PostgreSQL docs] [postgresql-docs-drop-operator-class]中每个选项的语义。</p>\n<h2 id=\"drop-owned\">DROP OWNED <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-owned\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用DROP OWNED语句可删除当前数据库中由指定角色之一拥有的所有数据库对象。在当前数据库或共享对象上授予给定角色的任何特权也将被撤销。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"792118d\" tabindex=\"0\"><code class=\"language-none\">drop_owned ::= DROP OWNED BY role_specification [ , ...  ]\n                  [ CASCADE | RESTRICT ]\n\nrole_specification ::= role_name | CURRENT_USER |  SESSION_USER</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>CASCADE 自动删除依赖于受影响对象的对象。</p>\n<p>RESTRICT 这是默认模式，如果还有其他依赖于删除对象的数据库对象，则会引发错误。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"7bb5ce5\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">drop</span> owned <span class=\"token keyword\">by</span> john<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-policy\">DROP POLICY <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-policy\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DROP POLICY语句从表中删除指定的行级安全策略。请注意，如果删除了表的所有策略，并且该表仍然具有ENABLE ROW LEVEL SECURITY，则默认的拒绝所有策略将应用于该表。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"75d0124\" tabindex=\"0\"><code class=\"language-none\">drop_policy ::= DROP POLICY [ IF EXISTS ] name ON  table_name\n                [ CASCADE | RESTRICT ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<ul>\n<li>name 是要删除的策略的名称。</li>\n<li>table_name 是该策略所在的表的名称。</li>\n<li>CASCADE/ RESTRICT没有任何作用，因为表策略没有任何依赖关系。</li>\n</ul>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"9553f26\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> POLICY p1 <span class=\"token keyword\">ON</span> table_foo<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-procedure\">DROP PROCEDURE <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-procedure\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用DROP PROCEDURE语句从数据库中删除存储过程。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"c7273c3\" tabindex=\"0\"><code class=\"language-none\">drop_procedure ::= DROP PROCEDURE [ IF EXISTS ]\n                     { name [ ( [ argtype_decl [ , ... ] ] ) ] }\n                     [ , ... ] [ CASCADE | RESTRICT ]\n\nargtype_decl ::= [ argmode ] [ argname ] argtype</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<ul>\n<li>如果该过程不存在，除非IF     EXISTS使用该过程，否则将引发错误。然后发出通知。</li>\n<li>RESTRICT 是默认值，如果有任何对象依赖该过程，它将不会删除该过程。</li>\n<li>CASCADE 会删除所有依赖该过程的可传递对象。</li>\n</ul>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"025a91a\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> transfer<span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">integer</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">dec</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-role\">DROP ROLE <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-role\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DROP ROLE语句删除指定的角色。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"3cce0e2\" tabindex=\"0\"><code class=\"language-none\">drop_role ::= DROP ROLE [ IF EXISTS ] role_name [ , ... ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>role_name 是要删除的角色的名称。 要放弃超级用户角色，您必须自己是超级用户。要删除非超级用户角色，您必须具有CREATEROLE特权。</p>\n<p>删除角色之前，必须删除其拥有的所有对象（或重新分配其所有权），并撤消已授予该角色在其他对象上的所有特权。REASSIGN OWNED和DROP OWNED命令可被用于此目的。</p>\n<p>但是，没有必要删除涉及该角色的角色成员资格。DROP ROLE自动撤销其他角色中目标角色的所有成员身份，以及目标角色中其他角色的成员资格。其他角色不会丢失或受影响。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e203fc8\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> ROLE John<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-rule\">DROP RULE <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-rule\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DROP RULE语句删除规则。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d150776\" tabindex=\"0\"><code class=\"language-none\">drop_rule ::= DROP RULE [ IF EXISTS ] rule_name ON  table_name\n              [ CASCADE | RESTRICT ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>请参见[PostgreSQL docs] [postgresql-docs-drop-rule]中每个选项的语义。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"05bac78\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> t1<span class=\"token punctuation\">(</span>a int4<span class=\"token punctuation\">,</span> b int4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> t2<span class=\"token punctuation\">(</span>a int4<span class=\"token punctuation\">,</span> b int4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">RULE</span> t1_to_t2 <span class=\"token keyword\">AS</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">TO</span> t1 <span class=\"token keyword\">DO</span> INSTEAD\n             <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> t2 <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>new<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> new<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">RULE</span> t1_to_t2 <span class=\"token keyword\">ON</span> t1<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-sequence\">DROP SEQUENCE <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-sequence\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DROP SEQUENCE语句删除当前模式中的序列。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"756e5ea\" tabindex=\"0\"><code class=\"language-none\">drop_sequence ::= DROP SEQUENCE [ IF EXISTS ]  sequence_name\n                  [ CASCADE | RESTRICT ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>sequence_name 指定序列的名称。</p>\n<ul>\n<li>如果除非IF     EXISTS指定，否则在当前模式中不存在具有该名称的序列，则会引发错误。</li>\n<li>如果任何对象都依赖于此序列，则将引发错误，除非CASCADE指定了该选项。 CASCADE 还删除所有依赖于此顺序的对象（例如DEFAULT，表列中的值）。 RESTRICT 如果有任何对象依赖此序列，请不要删除它。即使未指定，这也是默认行为。</li>\n</ul>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"03af2eb\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> t<span class=\"token punctuation\">(</span>k <span class=\"token keyword\">SERIAL</span><span class=\"token punctuation\">,</span> v <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> SEQUENCE t_k_seq<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> SEQUENCE t_k_seq <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-table\">DROP TABLE <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-table\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DROP TABLE语句从数据库中删除一个或多个表（及其所有数据）。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f60c170\" tabindex=\"0\"><code class=\"language-none\">drop_table  ::= DROP TABLE [ IF EXISTS ] table_name [ , ... ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>if_exists在正常操作下，如果表不存在，则会引发错误。添加IF EXISTS将静默忽略指定的任何不存在的表。</p>\n<p>table_name指定要删除的表的名称。与该表关联的对象（例如，准备好的语句）在该DROP TABLE语句完成之后最终将失效。</p>\n<h2 id=\"drop-trigger\">DROP TRIGGER <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-trigger\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DROP TRIGGER语句从数据库中删除触发器。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5c72ec7\" tabindex=\"0\"><code class=\"language-none\">drop_trigger  ::= DROP TRIGGER [ IF EXISTS ] name ON table_name [ CASCADE | RESTRICT ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>RESTRICT 是默认值，如果有任何对象依赖触发器，它将引发错误。</p>\n<p>CASCADE 将删除所有（暂时地）取决于触发器的对象。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"9fe54dc\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span>  <span class=\"token keyword\">TRIGGER</span> update_moddatetime <span class=\"token keyword\">ON</span> posts<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-type\">DROP TYPE <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-type\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DROP TYPE语句从数据库中删除用户定义的类型。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"185be86\" tabindex=\"0\"><code class=\"language-none\">drop_type  ::= DROP TYPE [ IF EXISTS ] type_name [ , ... ] [ CASCADE | RESTRICT ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>type_name 指定要删除的用户定义类型的名称。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"65a7942\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span>  <span class=\"token keyword\">TYPE</span> feature_struct <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DROP</span>  <span class=\"token keyword\">TYPE</span> feature_struct<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>IF EXISTS 示例。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e65f154\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span>  <span class=\"token keyword\">TYPE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> feature_shell<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>CASCADE 示例。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"aeea6be\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span>  <span class=\"token keyword\">TYPE</span> feature_enum <span class=\"token keyword\">AS</span> <span class=\"token keyword\">ENUM</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> feature_tab_enum <span class=\"token punctuation\">(</span>feature_col feature_enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TYPE</span> feature_tab_enum  <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>RESTRICT 示例。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"615b36b\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span>  <span class=\"token keyword\">TYPE</span> feature_range <span class=\"token keyword\">AS</span> RANGE <span class=\"token punctuation\">(</span>subtype<span class=\"token operator\">=</span><span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> feature_tab_range  <span class=\"token punctuation\">(</span>feature_col feature_range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- The following should error: DROP TYPE  feature_range RESTRICT; DROP TABLE feature_tab_range;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TYPE</span> feature_range  <span class=\"token keyword\">RESTRICT</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"drop-user\">DROP USER <a aria-hidden=\"true\" class=\"anchor\" href=\"#drop-user\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该DROP USER语句删除用户或角色。DROP USER是 DROP ROLE 的别名。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"79ea38b\" tabindex=\"0\"><code class=\"language-none\">drop_user  ::= DROP USER [ IF EXISTS ] role_name [ , ... ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>参看DROP_ROLE</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"58bb66d\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">USER</span> John<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"end\">END <a aria-hidden=\"true\" class=\"anchor\" href=\"#end\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该END语句提交当前事务。事务所做的所有更改对其他人都可见，并且如果崩溃发生，保证可以持久。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1927689\" tabindex=\"0\"><code class=\"language-none\">end  ::= END [ TRANSACTION | WORK ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"execute\">EXECUTE <a aria-hidden=\"true\" class=\"anchor\" href=\"#execute\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该EXECUTE语句执行先前准备的语句。这种分离是一种性能优化，因为准备好的语句将使用不同的值执行多次，而语法和语义分析以及重写在PREPARE处理期间仅执行一次。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"97c40e0\" tabindex=\"0\"><code class=\"language-none\">execute_statement  ::= EXECUTE name [ ( expression [ , ... ] ) ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>name指定要执行的准备好的语句的名称。</p>\n<p>expression指定表达式。中的每个表达式EXECUTE必须与中的对应数据类型匹配PREPARE。</p>\n<p><strong>例子</strong></p>\n<p>创建一个sample表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"73b294c\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>执行一次简单插入。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"85c4788\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">PREPARE</span>  ins <span class=\"token punctuation\">(</span><span class=\"token keyword\">bigint</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token keyword\">precision</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span>  v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>执行两次插入。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e97865a\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">EXECUTE</span>  ins<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">EXECUTE</span> ins<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>检查结果。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"92fea33\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> k1<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"explain\">EXPLAIN <a aria-hidden=\"true\" class=\"anchor\" href=\"#explain\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该EXPLAIN语句显示一条语句的执行计划。如果使用该ANALYZE选项，则将执行该语句，而不仅仅是计划的语句。在这种情况下，执行信息（而不仅仅是计划者的估计）将添加到EXPLAIN结果中。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"a14151b\" tabindex=\"0\"><code class=\"language-none\">explain  ::= EXPLAIN [ [ ANALYZE ] [ VERBOSE ] | ( option [ , ... ] ) ] statement\n\noption  ::= ANALYZE [ boolean ] | VERBOSE [ boolean ] | COSTS [ boolean ] | BUFFERS [  boolean ] | TIMING [ boolean ] | SUMMARY [ boolean ] | FORMAT { TEXT | XML |  JSON | YAML }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>ANALYZE执行该语句并显示实际运行时间和其他统计信息。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"d811f16\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span>  k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample <span class=\"token keyword\">WHERE</span> k1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> QUERY <span class=\"token keyword\">PLAN</span>\n\n<span class=\"token keyword\">Foreign</span>  Scan <span class=\"token keyword\">on</span> sample <span class=\"token punctuation\">(</span>cost<span class=\"token operator\">=</span><span class=\"token number\">0.00</span><span class=\"token punctuation\">.</span><span class=\"token number\">.112</span><span class=\"token number\">.50</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span> width<span class=\"token operator\">=</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">row</span><span class=\"token punctuation\">)</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"grant\">GRANT <a aria-hidden=\"true\" class=\"anchor\" href=\"#grant\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该GRANT语句授予对数据库对象的访问特权，并分配角色成员身份。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"333c0eb\" tabindex=\"0\"><code class=\"language-none\">grant_table  ::= GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES |  TRIGGER } [ , ... ] | ALL [ PRIVILEGES ] } ON { [ TABLE ] table_name [ , ...  ] | ALL TABLES IN SCHEMA schema_name [ , ... ] } TO grant_role_spec [ , ... ]  [ WITH GRANT OPTION ]\n\ngrant_table_col  ::= GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( column_names ) [  ,(column_names ... ] | ALL [ PRIVILEGES ] ( column_names ) } ON { [ TABLE ]  table_name [ , ... ] } TO grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\ngrant_seq  ::= GRANT { { USAGE | SELECT | UPDATE } [ , ... ] | ALL [ PRIVILEGES ] } ON {  SEQUENCE sequence_name [ , ... ] | ALL SEQUENCES IN SCHEMA schema_name [ ,  sequence_name [ ... ] ] } TO grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\ngrant_db  ::= GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [ , ... ] | ALL [  PRIVILEGES ] } ON DATABASE database_name [ , ... ] TO grant_role_spec [ , ...  ] [ WITH GRANT OPTION ]\n\ngrant_domain  ::= GRANT { USAGE | ALL [ PRIVILEGES ] } ON DOMAIN domain_name [ , ... ] TO  grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\ngrant_schema  ::= GRANT { { CREATE | USAGE } [ , ... ] | ALL [ PRIVILEGES ] } ON SCHEMA  schema_name [ , ... ] TO grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\ngrant_type  ::= GRANT { USAGE | ALL [ PRIVILEGES ] } ON TYPE type_name [ , ... ] TO  grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\ngrant_role  ::= GRANT role_name [ , ... ] TO role_name [ , ... ] [ WITH ADMIN OPTION ]\n\ngrant_role_spec  ::= [ GROUP ] role_name | PUBLIC | CURRENT_USER | SESSION_USER</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>GRANT 可用于分配数据库对象以及角色成员的特权。</p>\n<p>GRANT 在数据库对象上</p>\n<p>此GRANT命令的变体用于将数据库对象的特权分配给一个或多个角色。如果使用关键字PUBLIC代替role_name，则表示将特权授予所有角色，包括以后可能创建的角色。</p>\n<p>如果WITH GRANT OPTION指定，则特权的接收者可以依次将其授予其他人。没有授予选项，接收者将无法做到这一点。授予选项不能授予PUBLIC。</p>\n<p>无需授予对象所有者（通常是创建对象的用户）特权，因为默认情况下所有者具有所有特权。（不过，所有者可以出于安全考虑选择撤销自己的某些特权。）</p>\n<p>·   + SELECT</p>\n<p>这允许从指定表，视图或序列的任何或指定列中进行SELECT。它还允许使用COPY TO。在UPDATE或DELETE中引用现有列值时，也需要此特权。</p>\n<p>·   + INSERT</p>\n<p>这允许将新行插入到指定表中。如果列出了特定的列，则只能在INSERT命令中将这些列分配给其他列（因此其他列将接收默认值）。还允许COPY FROM。</p>\n<p>·   + UPDATE</p>\n<p>这允许更新指定表的任何列或列出的特定列。</p>\n<p>·   + DELETE</p>\n<p>这允许从指定表中删除一行。</p>\n<p>·   + TRUNCATE</p>\n<p>这允许在指定的表上执行TRUNCATE。</p>\n<p>·   + REFERENCES</p>\n<p>这允许创建引用指定表或表的指定列的外键约束。</p>\n<p>·   + TRIGGER</p>\n<p>这允许在指定的表上创建触发器。</p>\n<p>·   + CREATE</p>\n<p>对于数据库，这允许在数据库中创建新的架构。</p>\n<p>对于模式，这允许在模式内创建新对象。要重命名现有对象，您必须拥有该对象，并对包含的架构具有此特权。</p>\n<p>·   + CONNECT</p>\n<p>这使用户可以连接到指定的数据库。连接启动时检查此特权。</p>\n<p>·   + TEMPORARY/TEMP</p>\n<p>这允许在使用指定的数据库时创建临时表。</p>\n<p>·   + EXECUTE</p>\n<p>允许使用指定的功能或过程，以及使用在该功能之上实现的任何运算符。</p>\n<p>·   + USAGE</p>\n<p>对于模式，这允许访问指定模式中包含的对象（假设还满足对象自己的特权要求）。从本质上讲，这允许被授予者“查询”架构中的对象。</p>\n<p>对于序列，此特权允许使用currval()和nextval()函数。</p>\n<p>对于类型和域，此特权允许在创建表，函数和其他架构对象时使用类型或域。</p>\n<p>·   + ALL PRIVILEGES</p>\n<p>一次授予所有特权。</p>\n<p>GRANT 在角色上的这一变体GRANT用于将一个角色的成员资格授予一个或多个其他角色。如果WITH ADMIN OPTION指定，则成员可以依次将角色的成员身份授予其他人，也可以撤消该角色的成员身份。</p>\n<p><strong>例子</strong></p>\n<p>向表“ stores”上的所有用户授予SELECT特权。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"0d2bd08\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">GRANT</span>  <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">ON</span> stores <span class=\"token keyword\">TO</span> <span class=\"token keyword\">PUBLIC</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>将用户John添加到SysAdmins组。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"8939092\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">GRANT</span> SysAdmins <span class=\"token keyword\">TO</span> John<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"insert\">INSERT <a aria-hidden=\"true\" class=\"anchor\" href=\"#insert\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该INSERT语句将一或多个行添加到指定的表。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"c29db5c\" tabindex=\"0\"><code class=\"language-none\">insert  ::= [ WITH [ RECURSIVE ] with_query [ , ... ] ] INSERT INTO table_name [ AS  alias ] [ ( column_names ) ]\n{ DEFAULT VALUES | VALUES ( column_values ) [ ,(column_values ... ] |  subquery }\n[ ON CONFLICT [ conflict_target ] conflict_action ]\n[ returning_clause ]\n\nreturning_clause  ::= RETURNING { * | { output_expression [ [ AS ] output_name ] } [ , ... ] }\n\ncolumn_values  ::= { expression | DEFAULT } [ , ... ]\n\nconflict_target  ::= ( { column_name | expression } [ , ... ] ) [ WHERE condition ] | ON  CONSTRAINT constraint_name\n\nconflict_action  ::= DO NOTHING | DO UPDATE SET update_item [ , ... ] [ WHERE condition ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>table_name指定表的名称。如果指定的表不存在，则会引发错误。</p>\n<p>column_names指定以逗号分隔的列名称列表。如果指定的列不存在，则会引发错误。每个主键列都必须具有非null值。</p>\n<p>VALUES clause</p>\n<p>·   每个值列表必须与列列表具有相同的长度。</p>\n<p>·   每个值必须可转换为其相应的（按位置）列类型。</p>\n<p>·   每个值文字可以是一个表达式。</p>\n<p>ON CONFLICT clause</p>\n<p>·   目标表必须至少具有一个具有唯一索引或唯一约束的列（列表）。我们将其称为唯一密钥。VALUES的参数是一种关系，必须至少包含目标表的唯一键之一。此唯一键的某些值可能是新值，而其他值可能已存在于目标表中。</p>\n<p>·   INSERT ON CONFLICT的基本目的是简单地插入具有唯一键的新值的行，并使用唯一键的现有值更新行，以将其余指定列的值设置为VALUES关系中的值。这样，最终效果是插入或更新。因此，“ INSERT ON CONFLICT”变体通常被通俗地称为“ upsert”。</p>\n<p><strong>例子</strong></p>\n<p>基本示例</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"a97cce1\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span>  <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span>  <span class=\"token keyword\">INTO</span> sample <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span>  <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> k1<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>“ upsert”示例。重新创建并重新填充示例表。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"933a4be\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span>  <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> sample <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span>  <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span> id <span class=\"token keyword\">int</span> <span class=\"token keyword\">CONSTRAINT</span> sample_id_pk <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span> c1 <span class=\"token keyword\">text</span> <span class=\"token keyword\">CONSTRAINT</span>  sample_c1_NN <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> c2 <span class=\"token keyword\">text</span> <span class=\"token keyword\">CONSTRAINT</span> sample_c2_NN <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span>  <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cat'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'sparrow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dog'</span> <span class=\"token punctuation\">,</span>  <span class=\"token string\">'blackbird'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'monkey'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'thrush'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span>  id<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2 <span class=\"token keyword\">FROM</span> sample <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> id<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'horse'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'pigeon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cow'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'robin'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ON</span> CONFLICT <span class=\"token keyword\">DO</span> NOTHING<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"lock\">LOCK <a aria-hidden=\"true\" class=\"anchor\" href=\"#lock\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该LOCK语句锁定表。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"97337c8\" tabindex=\"0\"><code class=\"language-none\">lock_table  ::= LOCK [ TABLE ] { { [ ONLY ] name [ * ] } [ , ... ] } [ IN lockmode MODE ]  [ NOWAIT ]  lockmode  ::= ACCESS SHARE| ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE | SHARE  | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>name指定要锁定的现有表。</p>\n<p>lockmode目前仅支持 ACCESS SHARE 锁模式。</p>\n<p>下面列出的所有其他模式正在开发中。</p>\n<p>ACCESS SHARE | ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE | SHARE | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE</p>\n<h2 id=\"prepare\">PREPARE <a aria-hidden=\"true\" class=\"anchor\" href=\"#prepare\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该PREPARE语句创建目标语句句柄。用来分析和重写（但不执行）。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9dd7ffb\" tabindex=\"0\"><code class=\"language-none\">prepare_statement ::= PREPARE name [ ( data_type [ ,  ... ] ) ] AS statement</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>PREPARE可能（应该）包含$1将由中的表达式列表提供的参数（例如）EXECUTE。</p>\n<p>数据类型列表PREPARE表示语句中使用的参数的类型。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"a58b954\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span>  <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">PREPARE</span>  ins <span class=\"token punctuation\">(</span><span class=\"token keyword\">bigint</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token keyword\">precision</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span>  v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">EXECUTE</span>  ins<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">EXECUTE</span>  ins<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span>  <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> k1<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"reassign-owned\">REASSIGN OWNED <a aria-hidden=\"true\" class=\"anchor\" href=\"#reassign-owned\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该REASSIGN OWNED语句可以将数据库对象的所有权由 old_roles改为 new_role。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"3cb43f6\" tabindex=\"0\"><code class=\"language-none\">reassign_owned  ::= REASSIGN OWNED BY role_specification [ , ... ] TO role_specification\n\nrole_specification  ::= role_name | CURRENT_USER | SESSION_USER</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>REASSIGN OWNED通常用于准备删除角色。它要求源角色和目标角色都具有成员身份。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"3e220e6\" tabindex=\"0\"><code class=\"language-sql\">reassign  owned <span class=\"token keyword\">by</span> john <span class=\"token keyword\">to</span> memfire<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"reset\">RESET <a aria-hidden=\"true\" class=\"anchor\" href=\"#reset\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该RESET语句将运行时参数的值恢复为默认值。RESET映射到SET configuration_parameter TO DEFAULT。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"62bab47\" tabindex=\"0\"><code class=\"language-none\">reset_stmt  ::= RESET { name | ALL }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p><strong>configuration_parameter</strong>指定可变的运行时参数的名称。</p>\n<h2 id=\"revoke\">REVOKE <a aria-hidden=\"true\" class=\"anchor\" href=\"#revoke\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该REVOKE语句删除一个或多个角色的访问权限。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1713d7e\" tabindex=\"0\"><code class=\"language-none\">revoke_table  ::= REVOKE [ GRANT OPTION FOR ] { { SELECT | INSERT | UPDATE | DELETE |  TRUNCATE | REFERENCES | TRIGGER } [ , ... ] | ALL [ PRIVILEGES ] } ON { [  TABLE ] table_name [ , ... ] | ALL TABLES IN SCHEMA schema_name [ , ... ] }  FROM { [ GROUP ] role_name | PUBLIC } [ , ... ] [ CASCADE | RESTRICT ]\n\nrevoke_table_col  ::= REVOKE [ GRANT OPTION FOR ] { { SELECT | INSERT | UPDATE | REFERENCES } (  column_names ) [ ,(column_names ... ] | ALL [ PRIVILEGES ] ( column_names ) }  ON [ TABLE ] table_name [ , ... ] FROM { [ GROUP ] role_name | PUBLIC } [ ,  ... ] [ CASCADE | RESTRICT ]\n\nrevoke_seq  ::= REVOKE [ GRANT OPTION FOR ] { { USAGE | SELECT | UPDATE } [ , ... ] | ALL  [ PRIVILEGES ] } ON { SEQUENCE sequence_name [ , ... ] | ALL SEQUENCES IN  SCHEMA schema_name [ , ... ] } FROM { [ GROUP ] role_name | PUBLIC } [ , ...  ] [ CASCADE | RESTRICT ]\n\nrevoke_db  ::= REVOKE [ GRANT OPTION FOR ] { { CREATE | CONNECT | TEMPORARY | TEMP } [ ,  ... ] | ALL [ PRIVILEGES ] } ON DATABASE database_name [ , ... ] FROM { [  GROUP ] role_name | PUBLIC } [ , ... ] [ CASCADE | RESTRICT ]\n\nrevoke_domain  ::= REVOKE [ GRANT OPTION FOR ] { USAGE | ALL [ PRIVILEGES ] } ON DOMAIN  domain_name [ , ... ] FROM { [ GROUP ] role_name | PUBLIC } [ , ... ] [  CASCADE | RESTRICT ]\n\nrevoke_schema  ::= REVOKE [ GRANT OPTION FOR ] { { CREATE | USAGE } [ , ... ] | ALL [  PRIVILEGES ] } ON SCHEMA schema_name [ , ... ] FROM { [ GROUP ] role_name |  PUBLIC } [ , ... ] [ CASCADE | RESTRICT ]\n\nrevoke_type  ::= REVOKE [ GRANT OPTION FOR ] { USAGE | ALL [ PRIVILEGES ] } ON TYPE  type_name [ , ... ] FROM { [ GROUP ] role_name | PUBLIC } [ , ... ] [ CASCADE  | RESTRICT ]\n\nrevoke_role  ::= REVOKE [ ADMIN OPTION FOR ] role_name [ , ... ] FROM role_name [ , ... ]  [ CASCADE | RESTRICT ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>任何角色都有分配给它的所有特权的总和。所以，如果REVOKE是用于撤消SELECT从PUBLIC，那么它并不意味着所有角色都失去SELECT特权。如果角色已SELECT直接授予或通过组继承，则它可以继续保留SELECT特权。</p>\n<p>如果GRANT OPTION FOR指定，则仅撤销特权的授予选项，而不撤销特权本身。否则，特权和授予选项都将被吊销。</p>\n<p>同样，在撤消角色时（如果ADMIN OPTION FOR已指定），则仅撤消特权的admin选项。</p>\n<p>如果一个用户拥有带有授予选项的特权，并且已经将其授予其他用户，则如果CASCADE指定了特权，则从第一个用户撤消该特权也会从相关用户撤消它。否则，REVOKE将失败。</p>\n<p>撤消表的特权时，表的每一列也会自动撤消相应的列特权（如果有）。另一方面，如果已向角色授予表特权，则从各个列中撤消相同特权将无效。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"48e2b14\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">REVOKE</span>  <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">ON</span> stores <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">PUBLIC</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">REVOKE</span> SysAdmins <span class=\"token keyword\">FROM</span> John<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"rollback\">ROLLBACK <a aria-hidden=\"true\" class=\"anchor\" href=\"#rollback\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该ROLLBACK语句回滚当前事务。此事务中包含的所有更改将被丢弃。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d69369c\" tabindex=\"0\"><code class=\"language-none\">rollback  ::= ROLLBACK [ TRANSACTION | WORK ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>WORK可选</p>\n<p>TRANSACTION可选</p>\n<h2 id=\"select\">SELECT <a aria-hidden=\"true\" class=\"anchor\" href=\"#select\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该SELECT语句从表中检索满足给定条件的指定列的行。它指定要检索的列，表的名称以及每个选定行必须满足的条件。</p>\n<p>无论您在何处使用子查询，都可以使用相同的语法规则（例如在INSERTstatement中）。某些语法点（例如，WHERE子句谓词或诸如的函数的实际参数）sqrt()仅允许标量子查询。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"97a07bc\" tabindex=\"0\"><code class=\"language-none\">select  ::= [ WITH [ RECURSIVE ] { with_query [ , ... ] } ] SELECT [ ALL | DISTINCT [  ON { ( expression [ , ... ] ) } ] ] [ * | { { expression | fn_over_window } [  [ AS ] name ] } [ , ... ] ] [ FROM { from_item [ , ... ] } ]\n[ WHERE condition ]\n[ GROUP BY { grouping_element [ , ... ] } ]\n[ HAVING { condition [ , ... ] } ]\n[ WINDOW { { name AS window_definition } [ , ... ] } ]\n[ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ] [ ORDER BY {  order_expr [ , ... ] } ]\n[ LIMIT [ integer | ALL ] ]\n[ OFFSET integer [ ROW | ROWS ] ]\n\nfn_over_window  ::= fn_invocation [ FILTER ( WHERE { boolean_expression [ , ... ] } ) ] OVER  { window_definition | name }\n\norder_expr  ::= expression [ ASC | DESC | USING operator_name ] [ NULLS { FIRST | LAST }  ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>如果指定的table_name不存在，则会引发错误。</p>\n<p>*代表所有列。</p>\n<p>尽管where子句允许使用多种运算符，但是where子句中使用的确切条件具有重要的性能考虑因素（尤其是对于大型数据集）。</p>\n<p>condition指定一个计算结果为布尔值的表达式。</p>\n<p>有关详细信息from_item，grouping_element以及with_query看到SELECT 在PostgreSQL文档中。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"601c65b\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span>  <span class=\"token keyword\">TABLE</span> sample1<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> v <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span>  <span class=\"token keyword\">TABLE</span> sample2<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> v <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span>  <span class=\"token keyword\">INTO</span> sampleINSERT <span class=\"token keyword\">INTO</span> sample2<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.5</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample2<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span>  a<span class=\"token punctuation\">.</span>k1<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>v <span class=\"token keyword\">as</span> av<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>v <span class=\"token keyword\">as</span> bv <span class=\"token keyword\">FROM</span> sample1 a <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> sample2 b <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>k1  <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>k1 <span class=\"token operator\">and</span> a<span class=\"token punctuation\">.</span>k2 <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>k2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> a<span class=\"token punctuation\">.</span>k1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">AND</span> a<span class=\"token punctuation\">.</span>k2 <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> a<span class=\"token punctuation\">.</span>k2  <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"set\">SET <a aria-hidden=\"true\" class=\"anchor\" href=\"#set\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该SET语句更新运行时控制参数。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d2bf766\" tabindex=\"0\"><code class=\"language-none\">set  ::= SET [ SESSION | LOCAL ] { configuration_parameter { TO | = } { value |  DEFAULT } | TIME ZONE { timezone | LOCAL | DEFAULT } }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>尽管可以设置，显示和重置参数的值，但MemFire尚不支持这些参数的效果。目前将使用默认设置和行为。</p>\n<p>SESSION指定该命令仅影响当前会话。</p>\n<p>LOCAL指定该命令仅影响当前事务。COMMIT或之后ROLLBACK，会话级设置再次生效。</p>\n<p>configuration_parameter指定可变的运行时参数的名称。</p>\n<p>value指定参数的新值。</p>\n<h2 id=\"set-constraints\">SET CONSTRAINTS <a aria-hidden=\"true\" class=\"anchor\" href=\"#set-constraints\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该SET CONSTRAINTS语句设置当前事务中约束检查的时间。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1bd9f68\" tabindex=\"0\"><code class=\"language-none\">set_constraints  ::= SET CONSTRAINTS { ALL | name [ , ... ] } { DEFERRED | IMMEDIATE }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>SET CONSTRAINTS语句中的属性符合SQL标准中定义的行为，但不适用于NOT NULL和CHECK约束。</p>\n<p>SET CONSTRAINTS { ALL | *name [ , … ] } { DEFERRED | IMMEDIATE }</p>\n<p>ALL更改所有可延迟约束的模式。</p>\n<p>name指定约束名称之一或列表。</p>\n<p>DEFERRED将约束设置为在事务提交之前不检查约束。</p>\n<p>除非标记，否则立即检查唯一性和排除约束DEFERRABLE。</p>\n<p>IMMEDIATE设置约束以追溯生效。</p>\n<h2 id=\"set-role\">SET ROLE <a aria-hidden=\"true\" class=\"anchor\" href=\"#set-role\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该SET ROLE语句将当前会话的当前用户设置为指定用户。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"6525a0a\" tabindex=\"0\"><code class=\"language-none\">set_role  ::= SET [ SESSION | LOCAL ] ROLE { role_name | NONE } reset_role ::= RESET  ROLE</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>指定role_name的角色必须是当前会话用户所属的角色。超级用户可以设置为任何角色。一旦将角色设置为role_name，任何其他SQL命令将使用该角色可用的特权。</p>\n<p>将角色重置回当前用户，RESET ROLE或SET ROLE NONE可以使用。</p>\n<p><strong>例子</strong></p>\n<p>换上新角色约翰</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"c81ae79\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>  <span class=\"token keyword\">session_user</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">current_user</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">set</span>  role john<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span>  <span class=\"token keyword\">session_user</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">current_user</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"set-session-authorization\">SET SESSION AUTHORIZATION <a aria-hidden=\"true\" class=\"anchor\" href=\"#set-session-authorization\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该SET SESSION AUTHORIZATION语句将当前会话的当前用户和会话用户设置为指定用户。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"c1586ad\" tabindex=\"0\"><code class=\"language-none\">set_session_authorization  ::= SET [ SESSION | LOCAL ] SESSION AUTHORIZATION { role_name | DEFAULT }\n\nreset_session_authorization  ::= RESET SESSION AUTHORIZATION</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>会话用户只能由超级用户更改。一旦role_name将会话用户设置为，任何其他SQL命令将使用该角色可用的特权。</p>\n<p>可以将会话用户重置为当前经过身份验证的用户，RESET SESSION AUTHORIZATION或者SET SESSION AUTHORIZATION DEFAULT可以使用。</p>\n<p><strong>例子</strong></p>\n<p>将会话用户设置为John。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"8eb5289\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">Set</span> <span class=\"token keyword\">session</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">to</span> John<span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">select</span>  <span class=\"token keyword\">session_user</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">current_user</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SET</span>  <span class=\"token keyword\">select</span> <span class=\"token keyword\">session_user</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">current_user</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"set-transaction\">SET TRANSACTION <a aria-hidden=\"true\" class=\"anchor\" href=\"#set-transaction\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该SET TRANSACTION语句设置当前事务隔离级别。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"b3962b1\" tabindex=\"0\"><code class=\"language-none\">set  ::= SET [ SESSION | LOCAL ] { configuration_parameter { TO | = } { value |  DEFAULT } | TIME ZONE { timezone | LOCAL | DEFAULT } }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p><em><strong>*transaction_mode*</strong></em></p>\n<p>将事务处理模式设置为以下之一。</p>\n<p>·   ISOLATION LEVEL 条款</p>\n<p>·   存取方式</p>\n<p>·   DEFERRABLE 模式</p>\n<p><strong>ISOLATION LEVEL clause</strong></p>\n<p>+ SERIALIZABLE</p>\n<p>+ REPEATABLE READ</p>\n<p>+ READ COMMITTED</p>\n<p>+ READ UNCOMMITTED</p>\n<p><strong>READ WRITE</strong> <strong>模式</strong></p>\n<p>默认该模式</p>\n<p><strong>READ ONLY</strong> <strong>模式</strong></p>\n<p>该READ ONLY模式不会阻止所有写入磁盘。</p>\n<p>当事务为时READ ONLY，以下SQL语句：</p>\n<p>+ 如果他们要写入的表不是临时表，则不允许使用。</p>\n<p>+ INSERT</p>\n<p>+ UPDATE</p>\n<p>+ DELETE</p>\n<p>+ COPY FROM</p>\n<p>+ 一律禁止</p>\n<p>+ COMMENT</p>\n<p>+ GRANT</p>\n<p>+ REVOKE</p>\n<p>+ TRUNCATE</p>\n<p>+ 当将要执行的语句是上述之一时，不允许使用</p>\n<p>+ EXECUTE</p>\n<p>+ EXPLAIN ANALYZE</p>\n<p><em><strong>*DEFERRABLE mode*</strong></em></p>\n<p>仅当同时选择SERIALIZABLE和READ ONLY模式时，才用于延迟事务。如果使用该事务，则该事务在首次获取其快照时可能会阻塞，此后它可以在没有SERIALIZABLE事务的正常开销的情况下运行，并且没有任何导致序列化失败或被序列化失败取消的风险。</p>\n<p>该DEFERRABLE模式对于长时间运行的报告或备份可能很有用。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"5605a6f\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">BEGIN</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">TRANSACTION</span> <span class=\"token keyword\">ISOLATION</span> <span class=\"token keyword\">LEVEL</span> <span class=\"token keyword\">REPEATABLE</span> <span class=\"token keyword\">READ</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample<span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">COMMIT</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- run in first shell.</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"show\">SHOW <a aria-hidden=\"true\" class=\"anchor\" href=\"#show\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该SHOW语句显示运行时参数的值。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f9676e5\" tabindex=\"0\"><code class=\"language-none\">show_stmt  ::= SHOW { name | ALL }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>configuration_parameter指定要显示的参数的名称。</p>\n<p>ALL显示所有配置参数的值以及说明。</p>\n<h2 id=\"show-transaction\">SHOW TRANSACTION <a aria-hidden=\"true\" class=\"anchor\" href=\"#show-transaction\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该SHOW TRANSACTION语句显示当前的事务隔离级别。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2f15b30\" tabindex=\"0\"><code class=\"language-none\">show_transaction  ::= SHOW TRANSACTION ISOLATION LEVEL</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>在TRANSACTION ISOLATION LEVEL返回的要么是SERIALIZABLE或REPEATABLE READS。在MemFire中，PostgreSQL 的READ COMMITTED和READ UNCOMMITTED映射到REPEATABLE READS。</p>\n<h2 id=\"truncate\">TRUNCATE <a aria-hidden=\"true\" class=\"anchor\" href=\"#truncate\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用该TRUNCATE语句清除表中的所有行。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"aece2db\" tabindex=\"0\"><code class=\"language-none\">truncate  ::= TRUNCATE [ TABLE ] { { [ ONLY ] name [ * ] } [ , ... ] }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>name指定要截断的表的名称。</p>\n<p>TRUNCATE获取ACCESS EXCLUSIVE锁。在ACCESS EXCLUSIVE 锁 还没有完全支持。</p>\n<p>TRUNCATE 外部表不支持。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"675740b\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> sample <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> k1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">TRUNCATE</span> sample<span class=\"token punctuation\">;</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"update\">UPDATE <a aria-hidden=\"true\" class=\"anchor\" href=\"#update\"><i class=\"material-icons align-middle\">link</i></a></h2><p><strong>概要</strong></p>\n<p>使用UPDATE语句修改满足某些条件的所有行中指定列的值，并且当WHERE子句中未提供条件时，将更新所有行。UPDATE输出要更新的行数。</p>\n<p><strong>语法</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"76c2f84\" tabindex=\"0\"><code class=\"language-none\">update  ::= [ WITH [ RECURSIVE ] with_query [ , ... ] ] UPDATE [ ONLY ] table_name [  * ] [ [ AS ] alias ] SET update_item [ , ... ] [ WHERE condition | WHERE  CURRENT OF cursor_name ] [ returning_clause ]\n\nreturning_clause  ::= RETURNING { * | { output_expression [ [ AS ] output_name ] } [ , ... ] }\n\nupdate_item  ::= column_name = column_value | ( column_names ) = [ ROW ] ( column_values )  | ( column_names ) = ( query )\n\ncolumn_values  ::= { expression | DEFAULT } [ , ... ]\n\ncolumn_names  ::= column_name [ , ... ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>语义</strong></p>\n<p>尚不支持更新包含PRIMARY KEY的索引键一部分的列。</p>\n<p>尽管该WHERE子句允许使用多种运算符，但是where子句中使用的确切条件具有重要的性能考虑因素（尤其是对于大型数据集）。为了获得最佳性能，请使用WHERE为PRIMARY KEY或中的所有列提供值的子句INDEX KEY。</p>\n<p>with_query指定在UPDATE语句中按名称引用的子查询。</p>\n<p>table_name指定要更新的表的名称</p>\n<p>alias在UPDATE语句中指定目标表的标识符。指定别名后，必须使用别名代替语句中的实际表。</p>\n<p>column_name在表中指定要更新的列。</p>\n<p>expression指定要分配给列的值。当表达式引用一列时，该列的旧值用于评估。</p>\n<p>output_expression指定要返回的值。当output_expression引用一列时，该列的新值（更新值）用于评估。</p>\n<p>subquery指定SELECT子查询语句。其选择的值将分配给指定的列。</p>\n<p><strong>例子</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"da6578b\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span>  <span class=\"token keyword\">TABLE</span> sample<span class=\"token punctuation\">(</span>k1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> k2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> v2 <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span>  <span class=\"token keyword\">INTO</span> sample <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span>  <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> k1<span class=\"token punctuation\">;</span> <span class=\"token keyword\">UPDATE</span> sample <span class=\"token keyword\">SET</span> v1 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> v2 <span class=\"token operator\">=</span> <span class=\"token string\">'7'</span> <span class=\"token keyword\">WHERE</span> k1 <span class=\"token operator\">=</span>  <span class=\"token number\">2</span> <span class=\"token operator\">AND</span> k2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span>  <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sample <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> k1<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n</div>\n</div>\n<div><hr class=\"doc-hr\"/>\n<div class=\"d-print-none\" id=\"doc-nav\">\n<div class=\"row flex-xl-nowrap\">\n<div class=\"col-sm-6 pt-2 doc-next\">\n<a href=\"/docs/db/guides/data-type/\">\n<div class=\"card h-100 my-1\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\"><i class=\"material-icons align-middle\">navigate_before</i> 数据类型</p>\n</div>\n</div>\n</a>\n</div>\n<div class=\"col-sm-6 pt-2 doc-prev\">\n<a class=\"ms-auto\" href=\"/docs/db/guides/functions-and-operations/\">\n<div class=\"card h-100 my-1 text-end\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\">函数与操作 <i class=\"material-icons align-middle\">navigate_next</i></p>\n</div>\n</div>\n</a>\n</div>\n</div>\n</div></div>\n</div>\n</div>\n</div>\n</div>\n\n</main>",
  "markdown": "[MemFireDB备份 6](/)\n\nmenu\n\n[官网](https://memfiredb.com/)\n[论坛](https://community.memfiredb.com/)\n[登录](https://cloud.memfiredb.com/auth/login)\n\nEnable dark mode\n\nEnable light mode\n\n本页\n\nTable of Contents\n\n# SQL语法\n\nMemFireDB 结构化查询语言（MSQL）是符合ANSI标准的结构化查询语言。兼容PostgreSQL 11.2版本。MemFireDB复用了PostgresSQL的原生查询层。MemFire支持所有的传统关系模型功能，例如引用完整性（例如外键）、JOIN、分布式事务、部分索引、触发器和存储过程。\n\nMSQL的主要组件包括数据定义语言（DDL）、数据操作语言（DML）和数据控制语言（DCL）。这些组件由多个元素构成，包括数据类型、数据库对象、名称和限定符、表达式和注释。此外MSQL还提供了其他用途的组件，例如系统控制、事务控制和性能调试。\n\n| 声明 | 描述 |\n| --- | --- |\n| ABORT | 回滚事务 |\n| ALTER DATABASE | 更改数据库定义 |\n| ALTER DEFAULT PRIVILEGES | 定义默认访问权限 |\n| ALTER DOMAIN | 变更网域 |\n| ALTER GROUP | 变更群组 |\n| ALTER POLICY | 更改行级安全策略 |\n| ALTER ROLE | 改变角色 |\n| ALTER SEQUENCE | 更改序列定义 |\n| ALTER TABLE | 变更表定义 |\n| ALTER USER | 更改用户（角色） |\n| BEGIN | 开始交易 |\n| COMMENT | 在数据库对象上添加注释 |\n| COMMIT | 提交交易 |\n| COPY | 在表和文件之间复制数据 |\n| CREATE AGGREGATE | 创建一个新的聚合 |\n| CREATE CAST | 建立新的类型转换 |\n| CREATE DATABASE | 创建一个新的数据库 |\n| CREATE DOMAIN | 创建一个新域 |\n| CREATE EXTENSION | 加载扩展 |\n| CREATE FUNCTION | 创建一个新功能 |\n| CREATE INDEX | 创建一个新索引 |\n| CREATE GROUP | 创建一个新组（角色） |\n| CREATE OPERATOR | 创建一个新的运算符 |\n| CREATE OPERATOR CLASS | 创建一个新的运算符类 |\n| CREATE POLICY | 创建一个新的行级安全策略 |\n| CREATE PROCEDURE | 创建一个新程序 |\n| CREATE ROLE | 创建一个新角色（用户或组） |\n| CREATE RULE | 创建一个新规则 |\n| CREATE USER | 创建一个新用户（角色） |\n| CREATE SCHEMA | 创建一个新的架构（命名空间） |\n| CREATE SEQUENCE | 创建一个新的序列生成器 |\n| CREATE TABLE | 创建一个新表 |\n| CREATE TABLE AS | 创建一个新表 |\n| CREATE TRIGGER | 创建一个新触发器 |\n| CREATE TYPE | 建立新类型 |\n| CREATE VIEW | 创建一个新的视图 |\n| DEALLOCATE | 取消分配准备好的语句 |\n| DELETE | 从表中删除行 |\n| DO | 执行一个匿名代码块 |\n| DROP AGGREGATE | 删除汇总 |\n| DROP CAST | 删除类型转换 |\n| DROP DATABASE | 从系统中删除数据库 |\n| DROP DOMAIN | 删除网域 |\n| DROP EXTENSION | 删除扩展 |\n| DROP FUNCTION | 删除功能 |\n| DROP GROUP | 删除组（角色） |\n| DROP OPERATOR | 删除运算符 |\n| DROP OPERATOR CLASS | 删除操作员类别 |\n| DROP OWNED | 删除角色拥有的对象 |\n| DROP POLICY | 删除行级安全策略 |\n| DROP PROCEDURE | 删除程序 |\n| DROP ROLE | 删除角色（用户或组） |\n| DROP RULE | 删除规则 |\n| DROP SEQUENCE | 删除序列发生器 |\n| DROP TABLE | 从数据库中删除表 |\n| DROP TRIGGER | 删除触发器 |\n| DROP TYPE | 删除用户定义的类型 |\n| DROP USER | 删除用户（角色） |\n| END | 提交事务 |\n| EXECUTE | 执行准备好的语句 |\n| EXPLAIN | 显示语句的执行计划 |\n| INSERT | 在表格中插入行 |\n| LOCK | 锁定 |\n| PREPARE | 准备一份声明 |\n| REASSIGN OWNED | 重新分配拥有的对象 |\n| RESET | 将参数重置为出厂设置 |\n| REVOKE | 删除访问权限 |\n| ROLLBACK | 回滚事务 |\n| SELECT | 从表中选择行 |\n| SET | 设置系统，会话或事务参数 |\n| SET CONSTRAINTS | 设置当前交易的约束 |\n| SET ROLE | 设定角色 |\n| SET SESSION AUTHORIZATION | 设置会话授权 |\n| SET TRANSACTION | 设置事务行为 |\n| SHOW | 显示系统，会话或事务参数的值 |\n| SHOW TRANSACTION | 显示交易的属性 |\n| TRUNCATE | 清除表格中的所有行 |\n| UPDATE | 更新表中的行 |\n\n## 数据定义语言（DDL） [*link*](#%e6%95%b0%e6%8d%ae%e5%ae%9a%e4%b9%89%e8%af%ad%e8%a8%80ddl)\n\nDDL语句通过CREATE、ALTER和DROP命令来定义数据库中的结构、更改定义以及删除定义。\n\n| 声明 | 描述 |\n| --- | --- |\n| ALTER DATABASE | 更改数据库定义 |\n| ALTER SEQUENCE | 更改序列发生器的定义 |\n| ALTER TABLE | 更改表定义 |\n| CREATE AGGREGATE | 创建一个新的聚集函数 |\n| CREATE CAST | 创建新的类型转换 |\n| CREATE DATABASE | 创建一个新的数据库 |\n| CREATE EXTENSION | 加载扩展 |\n| CREATE FUNCTION | 创建一个新功能 |\n| CREATE INDEX | 创建一个新索引 |\n| CREATE OPERATOR | 创建一个新的运算符 |\n| CREATE OPERATOR CLASS | 创建一个新的运算符类 |\n| CREATE PROCEDURE | 创建一个新程序 |\n| CREATE RULE | 创建一条新规则 |\n| CREATE SCHEMA | 创建一个新的架构（命名空间） |\n| CREATE SEQUENCE | 创建一个新的序列生成器 |\n| CREATE TABLE | 创建一个新表 |\n| CREATE TABLE AS | 创建一个新表 |\n| CREATE TRIGGER | 创建一个新触发器 |\n| CREATE TYPE | 创建一种新的类型 |\n| CREATE VIEW | 创建一个新的视图 |\n| DROP AGGREGATE | 删除汇总 |\n| DROP CAST | 删除类型转换 |\n| DROP DATABASE | 从系统中删除数据库 |\n| DROP EXTENSION | 删除扩展 |\n| DROP FUNCTION | 删除功能 |\n| DROP OPERATOR | 删除运算符 |\n| DROP OPERATOR CLASS | 删除运算符类 |\n| DROP PROCEDURE | 删除一个过程 |\n| DROP RULE | 删除程序 |\n| DROP SEQUENCE | 删除序列发​​生器 |\n| DROP TABLE | 从数据库中删除表 |\n| DROP TYPE | 删除用户定义的类型 |\n| DROP TRIGGER | 删除触发器 |\n| TRUNCATE | 清空一个表或者一组表 |\n\n## 数据操作语言（DML） [*link*](#%e6%95%b0%e6%8d%ae%e6%93%8d%e4%bd%9c%e8%af%ad%e8%a8%80dml)\n\nDML语句修改数据库的内容。\n\n| 声明 | 描述 |\n| --- | --- |\n| DELETE | 从表中删除行 |\n| INSERT | 向表插入行 |\n| SELECT | 从表中选择行 |\n| UPDATE | 更新表中的行 |\n\n## 数据控制语言（DCL） [*link*](#%e6%95%b0%e6%8d%ae%e6%8e%a7%e5%88%b6%e8%af%ad%e8%a8%80dcl)\n\nDCL语句可以保护并防止数据库损坏。\n\n| 声明 | 描述 |\n| --- | --- |\n| ALTER DEFAULT PRIVILEGES | 定义默认访问权限 |\n| ALTER GROUP | 变更群组 |\n| ALTER POLICY | 更改行级安全策略 |\n| ALTER ROLE | 更改角色（用户或组） |\n| ALTER USER | 更改用户 |\n| CREATE GROUP | 创建一个新组（角色） |\n| CREATE POLICY | 创建一个新的行级安全策略 |\n| CREATE ROLE | 创建一个新角色（用户或组） |\n| CREATE USER | 创建一个新用户（角色） |\n| DROP GROUP | 移除群组 |\n| DROP POLICY | 删除行级安全策略 |\n| DROP ROLE | 删除角色（用户或组） |\n| DROP OWNED | 删除拥有的对象 |\n| DROP USER | 删除用户 |\n| GRANT | 授予权限 |\n| REASSIGN OWNED | 重新分配拥有对象 |\n| REVOKE | 撤销权限 |\n| SET ROLE | 设定角色 |\n| SET SESSION AUTHORIZATION | 设置会话授权 |\n\n## 事务控制语言（TCL） [*link*](#%e4%ba%8b%e5%8a%a1%e6%8e%a7%e5%88%b6%e8%af%ad%e8%a8%80tcl)\n\nTCL语句管理数据库上的事务。\n\n| 声明 | 描述 |\n| --- | --- |\n| ABORT | 回滚事务 |\n| BEGIN | 开始事务 |\n| COMMIT | 提交事务 |\n| END | 提交事务 |\n| ROLLBACK | 回滚事务 |\n| SET CONSTRAINTS | 设置当前事务的约束 |\n| SET TRANSACTION | 设置事务行为 |\n| SHOW TRANSACTION | 显示事务的属性 |\n\n## 会话和系统控制 [*link*](#%e4%bc%9a%e8%af%9d%e5%92%8c%e7%b3%bb%e7%bb%9f%e6%8e%a7%e5%88%b6)\n\n| 声明 | 描述 |\n| --- | --- |\n| RESET | 将参数重置为出厂设置 |\n| SET | 设置系统，会话或事务参数 |\n| SHOW | 显示系统，会话或事务参数的值 |\n\n## 性能控制 [*link*](#%e6%80%a7%e8%83%bd%e6%8e%a7%e5%88%b6)\n\n| 声明 | 描述 |\n| --- | --- |\n| DEALLOCATE | 取消分配准备好的语句 |\n| EXECUTE | 执行准备好的语句 |\n| EXPLAIN | 解释陈述的执行计划 |\n| PREPARE | 准备一份声明 |\n\n## 其他声明 [*link*](#%e5%85%b6%e4%bb%96%e5%a3%b0%e6%98%8e)\n\n| 声明 | 描述 |\n| --- | --- |\n| COPY | 在表和文件之间复制数据 |\n| DO | 执行一个匿名代码块 |\n\n## ABORT [*link*](#abort)\n\n**概要**\n\n使用ABORT语句回滚当前事务，并丢弃该事务的所有更新。\n\n**语法**\n\n```\nabort ::= ABORT [ TRANSACTION |  WORK ]\n```\n\n**语义**\n\nABORT [ TRANSACTION | WORK ] WORK 可选。\n\nTRANSACTION 可选，目前 SERIALIZABLE隔离级别暂不支持。\n\n**例子**\n\n创建一个名为sample的表。\n\n```\nCREATE TABLE sample(k1 int,  k2 int, v1 int, v2 text, PRIMARY KEY (k1, k2));\n```\n\n在一个终端上创建一个事务并插入一些记录。\n\n```\nBEGIN TRANSACTION;\nSET TRANSACTION ISOLATION LEVEL  REPEATABLE READ;\nINSERT INTO sample(k1, k2, v1, v2) VALUES (1, 2.0, 3,  'a'), (1, 3.0, 4, 'b');\n```\n\n在第二个终端上创建一个事务并插入一些记录。\n\n```\nBEGIN TRANSACTION;\nSET TRANSACTION ISOLATION LEVEL  REPEATABLE READ;\nINSERT INTO sample(k1, k2, v1, v2) VALUES (2, 2.0, 3,  'a'), (2, 3.0, 4, 'b');\n```\n\n在第一个终端上查看结果。\n\n```\nSELECT * FROM sample; -- run in first shell\n\nk1 | k2 | v1 |  v2\n\n----+----+----+----\n\n1 | 2 |   3 | a\n\n1 | 3 |   4 | b\n\n(2 rows)\n```\n\n第二个终端上查看结果。\n\n```\nSELECT * FROM sample; -- run in second shell\n\nk1 | k2 | v1 |  v2\n\n----+----+----+----\n\n2 | 2 |   3 | a\n\n2 | 3 |   4 | b\n\n(2 rows)\n```\n\n在第二个终端上提交事务。\n\n```\nCOMMIT TRANSACTION; -- run in first shell.\n```\n\n在第二个终端上终止事务。\n\n```\nABORT TRANSACTION; -- run second shell.\n```\n\n查看表中的记录。\n\n```\nSELECT * FROM sample; -- run in first shell.\n\nk1 | k2 | v1 |  v2\n\n----+----+----+----\n\n1 | 2 |   3 | a\n\n1 | 3 |   4 | b\n\n(2 rows)\n```\n\n```\nSELECT * FROM sample; -- run in second shell.\n\nk1 | k2 | v1 |  v2\n\n----+----+----+----\n\n1 | 2 |   3 | a\n\n1 | 3 |   4 | b\n\n(2 rows)\n```\n\n## ALTER DATABASE [*link*](#alter-database)\n\n**概要**\n\n使用该ALTER DATABASE语句重新定义数据库的属性。\n\n**语法**\n\n```\nalter_database ::= ALTER DATABASE name\n                     [ [ WITH ] alter_database_option [ ... ]\n                       | RENAME TO name\n                       | OWNER TO { new_owner\n \t                              |  CURRENT_USER\n \t                              |  SESSION_USER }\n                        SET TABLESPACE new_tablespace\n                       | SET configuration_parameter { TO | = }\n                          { value | DEFAULT }\n                       | SET configuration_parameter FROM CURRENT\n                       | RESET configuration_parameter\n                       | RESET ALL ]\n\nalter_database_option ::= ALLOW_CONNECTIONS allowconn\n                             | CONNECTION LIMIT  connlimit\n                             | IS_TEMPLATE  istemplate\n```\n\n**语义**\n\nname待修改的数据库名\n\ntablespace\\_name 指定与食宿句酷关联的新表空间\n\nALLOW\\_CONNECTIONS 指定false以禁止与此数据库的连接。默认值为true，允许任何具有CREATEDB权限的用户克隆此数据库。\n\nCONNECTION\\_LIMIT 指定可以与此数据库建立多少个并发连接。默认值-1允许无限的并发连接。\n\nIS\\_TEMPLATE 设置为true代表任何具有CREATEDB权限的用户都可以克隆此数据库。指定false时仅超级用户或数据库所有者可以克隆它。\n\n## ALTER DEFAULT PRIVILEGES [*link*](#alter-default-privileges)\n\n**概要**\n\n使用该ALTER DEFAULT PRIVILEGES语句定义默认访问权限。\n\n**语法**\n\n```\nalter_default_priv ::= ALTER DEFAULT PRIVILEGES\n                           [ FOR { ROLE | USER } role_name [ , ... ] ]\n                           [ IN SCHEMA schema_name [ , ... ] ]\n                           abbr_grant_or_revoke\n\nabbr_grant_or_revoke ::= a_grant_table\n                              | a_grant_seq\n                              | a_grant_func\n                              | a_grant_type\n                              | a_grant_schema\n                              | a_revoke_table\n                              | a_revoke_seq\n                              | a_revoke_func\n                              | a_revoke_type\n                              | a_revoke_schema\n\na_grant_table ::= GRANT { grant_table_priv [ , ... ]\n                            | ALL [ PRIVILEGES  ] } ON TABLES TO\n                    grant_role_spec [ , ... ] [ WITH GRANT  OPTION ]\n\na_grant_seq ::= GRANT { grant_seq_priv [ , ... ]\n                          | ALL [ PRIVILEGES ] } ON SEQUENCES TO\n                  grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\na_grant_func ::= GRANT { EXECUTE | ALL [ PRIVILEGES ] }  ON\n                   { FUNCTIONS | ROUTINES } TO grant_role_spec [ , ... ]\n                   [ WITH GRANT OPTION ]\n\na_grant_type ::= GRANT { USAGE | ALL [ PRIVILEGES ] }  ON TYPES TO\n                   grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\na_grant_schema ::= GRANT { USAGE | CREATE | ALL [  PRIVILEGES ] } ON\n                     SCHEMAS TO grant_role_spec [ , ... ]\n                     [ WITH GRANT OPTION ]\n\na_revoke_table ::= REVOKE [ GRANT OPTION FOR ]\n                      { grant_table_priv [ , ... ] | ALL [ PRIVILEGES ] }\n                      ON TABLES FROM grant_role_spec [ , ... ]\n                      [ CASCADE | RESTRICT ]\n\na_revoke_seq ::= REVOKE [ GRANT OPTION FOR ]\n                    { grant_seq_priv [ , ... ] | ALL  [ PRIVILEGES ] } ON\n                    SEQUENCES FROM grant_role_spec [ , ... ]\n                    [ CASCADE | RESTRICT ]\n\na_revoke_func ::= REVOKE [ GRANT OPTION FOR ]\n                    { EXECUTE | ALL [ PRIVILEGES ] } ON\n                    { FUNCTIONS | ROUTINES } FROM grant_role_spec\n                    [ , ... ] [ CASCADE | RESTRICT ]\n\na_revoke_type ::= REVOKE [ GRANT OPTION FOR ]\n                    { USAGE | ALL [ PRIVILEGES ] } ON TYPES FROM\n                    grant_role_spec [ , ... ] [ CASCADE |  RESTRICT ]\n\na_revoke_schema ::= REVOKE [ GRANT OPTION FOR ]\n                    { USAGE | CREATE | ALL [ PRIVILEGES ] } ON SCHEMAS\n                    FROM grant_role_spec [ , ... ]\n                    [ CASCADE | RESTRICT ]\n\ngrant_table_priv ::= SELECT\n                       | INSERT\n                       | UPDATE\n                       | DELETE\n                       | TRUNCATE\n                       | REFERENCES\n                       | TRIGGER\n\ngrant_seq_priv ::= USAGE | SELECT | UPDATE\n\ngrant_role_spec ::= [ GROUP ] role_name\n                       | PUBLIC\n                       | CURRENT_USER\n                       | SESSION_USER\n```\n\n**语义**\n\nALTER DEFAULT PRIVILEGES定义将来创建的对象的特权。它不会影响已经创建的对象。 用户只能更改由其或其成员所创建的对象的默认特权。\n\n**例子**\n\n授权所有用户使用SELECT访问marketing schema中所有表的权限\n\n```\nALTER DEFAULT PRIVILEGES IN  SCHEMA marketing GRANT SELECT ON TABLES TO PUBLIC;\n```\n\n取消用户john使用任意表时，使用INSERT语句的权限\n\n```\nALTER DEFAULT PRIVILEGES  REVOKE INSERT ON TABLES FROM john;\n```\n\n## ALTER DOMAIN [*link*](#alter-domain)\n\n**概要**\n\n使用该ALTER DOMAIN语句更改现有域的定义。\n\n**语法**\n\n```\nalter_domain_default ::= ALTER DOMAIN name\n                          { SET DEFAULT expression | DROP DEFAULT }\n\nalter_domain_rename ::= ALTER DOMAIN name RENAME TO  name\n```\n\n**语义**\n\nSET DEFAULT | DROP DEFAULT 设置或删除域的默认值。\n\nRENAME 更改域名。\n\nname 指定域的名称。如果DOMAIN name不存在或DOMAIN new\\_name已经存在，则会提示错误。\n\n**例子**\n\n```\nCREATE DOMAIN idx DEFAULT 5 CHECK (VALUE > 0);\n\nALTER DOMAIN idx DROP DEFAULT;\n\nALTER DOMAIN idx RENAME TO idx_new;\n\nDROP DOMAIN idx_new;\n```\n\n## ALTER GROUP [*link*](#alter-group)\n\n**概要**\n\n使用该ALTER GROUP语句更改组（角色）的属性。添加它是为了与Postgres兼容。不鼓励使用。ALTER ROLE是更改角色属性的首选方法。\n\n**语法**\n\n```\nalter_group ::= ALTER GROUP role_specification { ADD |  DROP } USER\n                  role_name [ , ... ]\n\nrole_specification ::= role_name | CURRENT_USER |  SESSION_USER\n\nalter_group_rename ::= ALTER GROUP role_name RENAME TO  new_role_name\n```\n\n**语义**\n\nALTER GROUP可用于在组中添加或删除角色。请使用GRANT或REVOKE代替。也可以用来重命名角色。\n\n## ALTER POLICY [*link*](#alter-policy)\n\n**概要**\n\n使用该ALTER POLICY语句可以更改现有行级安全策略的定义。它可用于更改策略适用的角色以及策略的USING和CHECK表达式。\n\n**语法**\n\n```\nalter_policy ::= ALTER POLICY name ON table_name\n                    [ TO { role_name\n                            | PUBLIC\n                            | CURRENT_USER\n                            | SESSION_USER } [ , ... ] ]\n                    [ USING ( using_expression ) ]\n                    [ WITH CHECK ( check_expression ) ]\n\nalter_policy_rename ::= ALTER POLICY name ON table_name  RENAME TO\n                          new_name\n```\n\n**语义**\n\nname 是要更新的策略的名称。\n\ntable\\_name 是应用策略的表的名称。\n\nnew\\_name 测略的新名称\n\nrole\\_name 该策略使用的橘色，如使用PUBLIC则策略适用于所有角色\n\nusing\\_expression 是SQL条件表达式，满足条件的行将在SELECT中可见，在UPDATE和DELETE修改操作中有效。\n\ncheck\\_expression 是SQL条件表达式，仅被用在INSERT和UPDATE查询中。条件为true的内容允许INSERT和UPDATE。与using\\_expression不同，它使用来检查新内容的。\n\n**例子**\n\n重命名策略。\n\n```\nALTER POLICY p1 ON table_foo RENAME TO p2;\n```\n\n将策略应用于所有角色。\n\n```\nALTER POLICY p1 ON table_foo TO PUBLIC;\n```\n\n## ALTER ROLE [*link*](#alter-role)\n\n**概要**\n\n使用ALTER ROLE语句更改角色（用户或组）的属性。 超级用户可以更改任何角色的属性。具有CREATEROLE权限的角色可以更改任何非超级用户角色的属性。其他角色只能更改自己的密码。\n\n**语法**\n\n```\nalter_role ::= ALTER ROLE role_specification\n                  [ [ WITH ] alter_role_option [  , ... ] ]\n\nalter_role_option ::= SUPERUSER\n                         | NOSUPERUSER\n                         | CREATEDB\n                         | NOCREATEDB\n                         | CREATEROLE\n                         | NOCREATEROLE\n                         | INHERIT\n                         | NOINHERIT\n                         | LOGIN\n                         | NOLOGIN\n                         | CONNECTION LIMIT connlimit\n                         | [ ENCRYPTED ]  PASSWORD ' password '\n                         | PASSWORD NULL\n                         | VALID UNTIL ' timestamp '\n\nrole_specification ::= role_name | CURRENT_USER |  SESSION_USER\n\nalter_role_rename ::= ALTER ROLE role_name RENAME TO  new_role_name\n\nalter_role_config ::= ALTER ROLE { role_specification |  ALL }\n                         [ IN DATABASE database_name ] config_setting\n\nconfig_setting ::= SET config_param { TO | = }\n                         { config_value | DEFAULT }\n                         | SET config_param FROM CURRENT\n                         | RESET config_param\n                         | RESET ALL\n```\n\n**语义**\n\nrole\\_specification 指定要更改其属性的角色的名称或当前用户或当前会话用户。\n\nSUPERUSER，NOSUPERUSER 确定角色是否是“超级用户”。超级用户可以覆盖所有访问限制，应谨慎使用。只有具有SUPERUSER权限的角色才能创建其他SUPERUSER角色。\n\nCREATEDB，NOCREATEDB 确定角色是否可以创建数据库。\n\nCREATEROLE，NOCREATEROLE 确定角色是否可以创建其他角色。\n\nINHERIT，NOINHERIT 确定角色是否继承其所属角色的特权。如果没有INHERIT，则另一个角色的成员资格仅授予SET ROLE权限给该另一个角色。其他角色的权限只有在这样做之后才可用。\n\nLOGIN，NOLOGIN 确定是否允许新角色登录。客户端连接期间只能使用具有登录权限的角色。\n\nCONNECTION LIMIT 指定角色可以建立的并发连接数。这仅适用于可以登录的角色。\n\n[ENCRYPTED] PASSWORD 设置角色的密码。这仅适用于可以登录的角色。如果未指定密码，则密码将设置为null，并且该用户的密码身份验证将始终失败。请注意，密码始终以加密方式存储在系统目录中，并且仅出于与Postgres兼容而提供可选关键字ENCRYPTED。\n\nVALID UNTIL 设置一个日期和时间，之后该角色的密码将不再有效。\n\nconfig\\_param, config\\_value 是名称和配置参数被设置值\n\nALTER ROLE role\\_name RENAME TO 可用于更改角色名称。请注意，当前会话角色无法重命名。因为MD5加密的密码使用角色名称作为加密盐，所以如果密码是MD5加密的，重命名角色将清除其密码。\n\nALTER ROLE SET | RESET config\\_param 用于更改所有数据库的配置变量的角色会话默认值，或者用于更改指定数据库中的会话的IN DATABASE子句时的默认值。如果指定了ALL而不是角色名称，则将更改所有角色的设置。\n\n**例子**\n\n更改角色密码。\n\n```\nALTER ROLE John WITH  PASSWORD 'new_password';\n```\n\n重命名角色。\n\n```\nALTER ROLE John RENAME TO  Jane;\n```\n\n更改角色的default\\_transaction\\_isolation会话参数。\n\n```\nALTER ROLE Jane SET  default_transaction_isolation='serializable';\n```\n\n## ALTER SEQUENCE [*link*](#alter-sequence)\n\n**概要**\n\n使用该ALTER SEQUENCE语句可以更改当前模式中现有序列的定义。\n\n**语法**\n\n```\nalter_sequence ::= ALTER SEQUENCE [ IF EXISTS ] name\n                      alter_sequence_options\n\nname ::= '<Text Literal>'\n\nalter_sequence_options ::= [ AS seq_data_type ]\n                                 [ INCREMENT [ BY ]  increment ]\n                                 [ MINVALUE  minvalue | NO MINVALUE ]\n                                 [ MAXVALUE  maxvalue | NO MAXVALUE ]\n                                 [ START [ WITH ]  start ]\n                                 [ RESTART [ [ WITH  ] restart ] ]\n                                 [ CACHE cache ]\n                                 [ OWNED BY  table_name.table_column | NONE ]\n```\n\n**语义**\n\nALTER SEQUENCE sequence\\_name [ IF EXISTS ] 指定序列的名称（sequence\\_name）。如果当前架构中不存在具有该名称的序列，并且IF EXISTS未指定该序列，则会引发错误。\n\nAS datatype 更改序列的数据类型。如果先前的值超出了新类型所允许的范围，则会自动更改序列的最小值和最大值。有效类型smallint，integer和bigint。\n\nINCREMENT BY increment 指定序列中连续值之间的差。默认值为1。\n\nMINVALUE minvalue | NO MINVALUE 指定序列中允许的最小值。如果达到此值（以负增量递增的顺序），nextval()将返回错误。如果NO MINVALUE指定，则使用默认值。默认值为1。 MAXVALUE maxvalue | NO MAXVALUE 指定序列中允许的最大值。如果达到此值，nextval()将返回错误。如果NO MAXVALUE指定，则使用默认值。默认值为263 - 1。\n\nSTART WITH start 指定序列中的第一个值。start不能少于minvalue。默认值为1。\n\nRESTART [ [ WITH ] restart ] ] 更改序列的当前值。如果未指定任何值，则当前值将设置START [ WITH ]为创建或更改序列时指定的最后一个值。\n\nCACHE cache 指定序列中要在客户端中缓存的数字。默认值为1。 OWNED BY table\\_name.table\\_column | NONE 它将序列的所有权授予指定的列（如果有）。这意味着如果删除了列（或它所属的表），则序列将被自动删除。如果NONE指定，则将删除以前的所有所有权。\n\n## ALTER TABLE [*link*](#alter-table)\n\n**概要**\n\n使用ALTER TABLE语句更改现有表的定义。\n\n**语法**\n\n```\nalter_table ::= ALTER TABLE [ ONLY ] name [ * ]  alter_table_action\n                   [  , ... ]\n\nalter_table_action ::= ADD [ COLUMN ] column_name  data_type\n                           [ alter_column_constraint [ ... ] ]\n                           | RENAME TO table_name\n                           | DROP [ COLUMN ] column_name\n                             [ RESTRICT | CASCADE ]\n                           | ADD  alter_table_constraint\n                           | DROP CONSTRAINT constraint_name\n                             [ RESTRICT | CASCADE ]\n                           | RENAME [ COLUMN ] column_name TO column_name\n                           | DISABLE ROW LEVEL SECURITY\n                           | ENABLE ROW LEVEL SECURITY\n                           | FORCE ROW LEVEL SECURITY\n                           | NO FORCE ROW LEVEL SECURITY\n\nalter_table_constraint ::= [ CONSTRAINT constraint_name  ]\n                                 { CHECK (  expression )\n                                   | UNIQUE (  column_names )\n                                     index_parameters\n                                   | FOREIGN KEY (  column_names )\n                                     references_clause  }\n                                 [ DEFERRABLE | NOT  DEFERRABLE ]\n                                 [ INITIALLY  DEFERRED\n                                   | INITIALLY  IMMEDIATE ]\n\nalter_column_constraint ::= [ CONSTRAINT  constraint_name ]\n                                 { NOT NULL\n                                   | NULL\n                                   | CHECK (  expression )\n                                   | DEFAULT  expression\n                                   | UNIQUE  index_parameters\n                                   |  references_clause }\n                                [ DEFERRABLE |  NOT DEFERRABLE ]\n                                [ INITIALLY  DEFERRED\n                                   | INITIALLY  IMMEDIATE ]\n```\n\n**语义**\n\nALTER TABLE [ ONLY ] name [ \\* ] alter\\_table\\_action [ , … ] 更改指定的表和依赖项。\n\n* ONLY 将更改限制为指定的表\n\nADD [ COLUMN ] column\\_name data\\_type constraint 添加具有指定数据类型和约束的指定列。\n\nRENAME TO table\\_name 将表重命名为指定的表名。\n\nDROP [ COLUMN ] column\\_name [ RESTRICT | CASCADE ] 从表中删除命名列。\n\n* RESTRICT 仅删除指定的\n\nADD alter\\_table\\_constraint 添加具有指定数据类型和约束的指定列。\n\nDROP CONSTRAINT constraint\\_name [ RESTRICT | CASCADE ] 从表中删除命名列。\n\n* RESTRICT —仅删除指定的约束。\n* CASCADE —删除指定的约束和所有依赖关系。\n\n\\*\\*RENAME [ COLUMN ] column\\_name TO column\\_name \\*\\* 将列重命名为指定名称。\n\nENABLE / DISABLE ROW LEVEL SECURITY 这将启用或禁用表的行级安全性。如果启用并且该表不存在任何策略，则将应用默认拒绝策略。如果禁用，则将不应用该表的现有策略，并将其忽略。有关如何创建行级安全策略的详细信息，请参见创建策略。\n\nFORCE / NO FORCE ROW LEVEL SECURITY 当用户是表所有者时，这将控制表的行安全策略的应用。如果启用，则当用户是表所有者时，将应用行级安全策略。如果禁用（默认设置），则当用户是表所有者时，将不应用行级安全性。有关如何创建行级安全策略的详细信息，请参见创建策略。\n\nCONSTRAINT constraint\\_name 指定约束的名称。\n\nForeign key FOREIGN KEY和REFERENCES指定外键。它用于强制数据的参照完整性。 Unique 这将强制UNIQUE约束在表中指定的列集在表中是唯一的，也就是说，对于约束中指定的列集，没有两行可以具有相同的值 Check 这用于强制指定表中的数据满足该CHECK子句中指定的要求。 Default 用于指定列的默认值。如果INSERT语句未为该列指定值，则使用默认值。如果没有为列指定默认值，则默认值为NULL。\n\nDeferrable constraints 可以使用该DEFERRABLE子句推迟约束。当前，在MemFire中只能推迟外键约束。在语句中的每一行之后，将检查不可延迟的约束。在可延迟约束的情况下，约束的检查可以推迟到事务结束。 标记为 INITIALLY IMMEDIATE 的约束将在语句中的每一行之后进行检查。 标记为 INITIALLY DEFERRED 的约束将在事务结束时检查。\n\n## ALTER USER [*link*](#alter-user)\n\n**概要**\n\n使用该ALTER USER语句来更改角色。ALTER USER是 ALTER ROLE的 别名，用于更改角色。\n\n**语法**\n\n```\nalter_user ::= ALTER USER role_specification\n                  [  [ WITH ] alter_role_option [ , ... ] ]\n\nalter_role_option ::= SUPERUSER\n                         | NOSUPERUSER\n                         | CREATEDB\n                         | NOCREATEDB\n                         | CREATEROLE\n                         | NOCREATEROLE\n                         | INHERIT\n                         | NOINHERIT\n                         | LOGIN\n                         | NOLOGIN\n                         | CONNECTION LIMIT connlimit\n                         | [ ENCRYPTED ] PASSWORD '  password '\n                         | PASSWORD NULL\n                         | VALID UNTIL ' timestamp '\n\nrole_specification ::= role_name | CURRENT_USER |  SESSION_USER\n\nalter_user_rename ::= ALTER USER role_name RENAME TO  new_role_name\n\nalter_user_config ::= ALTER USER { role_specification |  ALL }\n                         [ IN DATABASE database_name ] config_setting\n\nconfig_setting ::= SET config_param { TO | = }\n                       { config_value | DEFAULT }\n                       | SET config_param FROM CURRENT\n                       | RESET config_param\n                       | RESET ALL\n```\n\n**语义**\n\n参阅ALTER\\_ROLE\n\n## BEGIN [*link*](#begin)\n\n**概要**\n\n使用该BEGIN语句以默认（或给定）隔离级别启动新事务。\n\n**语法**\n\n```\nBEGIN [ TRANSACTION | WORK ]\n```\n\n**语义**\n\nABORT [ TRANSACTION | WORK ] WORK 可选\n\n**例子**\n\n创建名为sample的表。\n\n```\nCREATE TABLE sample(k1 int, k2 int, v1 int, v2 text,  PRIMARY KEY (k1, k2));\n```\n\n启动一个事务并插入一些数据。\n\n```\nBEGIN TRANSACTION; SET TRANSACTION ISOLATION LEVEL  REPEATABLE READ;   INSERT INTO sample(k1, k2, v1, v2) VALUES (1, 2.0, 3,  'a'), (1, 3.0, 4, 'b');\n```\n\n启动第二个事务并插入一些记录。\n\n```\nBEGIN TRANSACTION; SET TRANSACTION ISOLATION LEVEL  REPEATABLE READ;   INSERT INTO sample(k1, k2, v1, v2) VALUES (2, 2.0, 3,  'a'), (2, 3.0, 4, 'b');\n```\n\n在每个事务中查看刚插入的内容。\n\n```\nSELECT * FROM sample; -- run in first shell\nk1 | k2 | v1 |  v2\n----+----+----+----\n1 | 2 |   3 | a\n1 | 3 |   4 | b\n(2 rows)\n\nSELECT * FROM sample; -- run in second shell\nk1 | k2 | v1 |  v2\n----+----+----+----\n2 | 2 |   3 | a\n2 | 3 |   4 | b\n(2 rows)\n```\n\n提交第一个事务\n\n```\nCOMMIT TRANSACTION; -- run  in first shell.\n```\n\n终止第二个事务\n\n```\nABORT TRANSACTION; -- run  second shell.\n```\n\n查看最终结果\n\n```\nSELECT * FROM sample; -- run in first shell.\nk1 | k2 | v1 |  v2\n----+----+----+----\n1 | 2 |   3 | a\n1 | 3 |   4 | b\n(2 rows)\n```\n\n## COMMENT [*link*](#comment)\n\n**概要**\n\n使用COMMENT语句设置，更新或删除数据库对象的注释。\n\n**语法**\n\n```\ncomment_on ::= COMMENT ON\n              {  ACCESS METHOD object_name\n                 | AGGREGATE aggregate_name ( aggregate_signature )\n                 | CAST ( source_type AS target_type )\n                 | COLLATION object_name\n                 | COLUMN relation_name . column_name\n                 | CONSTRAINT constraint_name ON table_name\n                 | CONSTRAINT constraint_name ON DOMAIN domain_name\n                 | CONVERSION object_name\n                 | DATABASE object_name\n                 | DOMAIN object_name\n                 | EXTENSION object_name\n                 | EVENT TRIGGER object_name\n                 | FOREIGN DATA WRAPPER object_name\n                 | FOREIGN TABLE object_name\n                 | FUNCTION function_name [ ( function_signature ) ]\n                 | INDEX object_name\n                 | LARGE OBJECT large_object_oid\n                 | OPERATOR operator_name ( operator_signature )\n                 | OPERATOR CLASS object_name USING index_method\n                 | OPERATOR FAMILY object_name USING index_method\n                 | POLICY policy_name ON table_name\n                 | [ PROCEDURAL ] LANGUAGE object_name\n                 | PROCEDURE procedure_name\n                   [ ( [ [ argmode ] [ argname ] argtype [ , ... ] ] ) ]\n                 | PUBLICATION object_name\n                 | ROLE object_name\n                 | ROUTINE routine_name\n                   [ ( [ [ argmode ] [ argname ] argtype [ , ... ] ] ) ]\n                 | RULE rule_name ON table_name\n                 | SCHEMA object_name\n                 | SEQUENCE object_name\n                 | SERVER object_name\n                 | STATISTICS object_name\n                 | SUBSCRIPTION object_name\n                 | TABLE object_name\n                 | TABLESPACE object_name\n                 | TEXT SEARCH CONFIGURATION object_name\n                 | TEXT SEARCH DICTIONARY object_name\n                 | TEXT SEARCH PARSER object_name\n                 | TEXT SEARCH TEMPLATE object_name\n                 | TRANSFORM FOR type_name  LANGUAGE lang_name\n                 | TRIGGER trigger_name ON table_name\n                 | TYPE object_name\n                 | VIEW object_name } IS { '<Text Literal>' | NULL }\n```\n\n**语义**\n\nCOMMENT ON 添加或更改有关数据库对象的注释。要删除评论，请将值设置为NULL。\n\n**例子**\n\n添加注释。\n\n```\nCOMMENT ON DATABASE postgres IS 'Default database';\n\nCOMMENT ON INDEX index_name IS 'Special index';\n```\n\n删除注释。\n\n```\nCOMMENT ON TABLE some_table IS NULL;\n```\n\n## COMMIT [*link*](#commit)\n\n**概要**\n\n使用COMMIT语句提交当前事务。事务所做的所有更改对其他人都可见，并且如果发生崩溃，则保证是持久的。\n\n**语法**\n\n```\ncommit ::= COMMIT [ TRANSACTION  | WORK ]\n```\n\n**语义**\n\n```\nCOMMIT [ TRANSACTION | WORK  ]\n```\n\nWORK 可选\n\nTRANSACTION 可选 SERIALIZABLE隔离级别暂不支持\n\n**例子**\n\n创建一个名为sample的表。\n\n```\nCREATE TABLE sample(k1 int, k2 int, v1 int, v2 text, PRIMARY KEY (k1, k2));\n```\n\n在一个终端上创建一个事务并插入一些记录。\n\n```\nBEGIN TRANSACTION; SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\nINSERT INTO sample(k1, k2, v1, v2) VALUES (1, 2.0, 3,  'a'), (1, 3.0, 4, 'b');\n```\n\n在第二个终端上创建一个事务并插入一些记录。\n\n```\nBEGIN TRANSACTION; SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\nINSERT INTO sample(k1, k2, v1, v2) VALUES (2, 2.0, 3,  'a'), (2, 3.0, 4, 'b');\n```\n\n在第一个终端上查看结果。\n\n```\nSELECT * FROM sample; -- run in first shell\nk1 | k2 | v1 |  v2\n----+----+----+----\n1 | 2 | 3 | a\n1 | 3 | 4 | b\n(2 rows)\n```\n\n第二个终端上查看结果。\n\n```\nSELECT * FROM sample; -- run in second shell\nk1 | k2 | v1 |  v2\n----+----+----+----\n2 | 2 | 3 | a\n2 | 3 | 4 | b\n(2 rows)\n```\n\n在第二个终端上提交事务。\n\n```\nCOMMIT TRANSACTION; -- run in first shell.\n```\n\n在第二个终端上终止事务。\n\n```\nABORT TRANSACTION; -- run second shell.\n```\n\n查看表中的记录。\n\n```\nSELECT * FROM sample; -- run in first shell.\nk1 | k2 | v1 |  v2\n----+----+----+----\n1 | 2 | 3 | a\n1 | 3 | 4 | b\n(2 rows)\n```\n\n```\nSELECT * FROM sample; -- run in second shell.\nk1 | k2 | v1 |  v2\n----+----+----+----\n1 | 2 | 3 | a\n1 | 3 | 4 | b\n(2 rows)\n```\n\n## COPY [*link*](#copy)\n\n**概要**\n\n使用COPY语句在表和文件之间传输数据。COPY TO将数据从表复制到文件。COPY FROM将数据从文件复制到表。COPY输出已复制的行数。\n\n**语法**\n\n```\ncopy_from ::= COPY table_name [ ( column_name [ , ... ]  ) ] FROM\n                {  'filename' | PROGRAM 'command' | STDIN }\n                [ [  WITH ] ( option [ , ... ] ) ]\n\ncopy_to ::= COPY { table_name [ ( column_names ) ] | (  query ) } TO\n                {  'filename' | PROGRAM 'command' | STDOUT }\n                [ [  WITH ] ( option [ , ... ] ) ]\n\ncopy_option ::= FORMAT format_name\n                  |  OIDS [ boolean ]\n                  |  FREEZE [ boolean ]\n                  |  DELIMITER 'delimiter_character'\n                  |  NULL 'null_string'\n                  |  HEADER [ boolean ]\n                  |  QUOTE 'quote_character'\n                  |  ESCAPE 'escape_character'\n                  |  FORCE_QUOTE { ( column_names ) | * }\n                  |  FORCE_NOT_NULL ( column_names )\n                  |  FORCE_NULL ( column_names )\n                  |  ENCODING 'encoding_name'\n```\n\n**语义**\n\ntable\\_name 指定要复制的表（可以选择模式限定的表）。\n\ncolumn\\_name 指定要复制的列的列表。如果未指定，则将复制表的所有列。\n\nquery 指定SELECT，VALUES，INSERT，UPDATE，或DELETE语句，它的结果将被复制。对于INSERT，UPDATE和DELETE语句，必须提供RETURNING子句。\n\nfilename 指定要复制的文件的路径。输入文件名可以是绝对路径或相对路径，但输出文件名必须是绝对路径。\n\n**例子**\n\n* 如果表不存在，则会引发错误。\n* COPY TO 只能与常规表一起使用。\n* COPY FROM 可以与表，外部表或视图一起使用。\n\n## CREATE AGGREGATE [*link*](#create-aggregate)\n\n**概要**\n\n使用CREATE AGGREGATE语句创建一个新的聚合函数。有三种创建聚合的方法。\n\n**语法**\n\n```\ncreate_aggregate ::= create_aggregate_normal\n                        | create_aggregate_order_by\n                        | create_aggregate_old\n\ncreate_aggregate_normal ::= CREATE AGGREGATE  aggregate_name (\n                                { aggregate_arg [  , ... ] | * } ) ( SFUNC\n                                = sfunc , STYPE =  state_data_type\n                                [ ,  aggregate_normal_option [ ... ] ] )\n\ncreate_aggregate_order_by ::= CREATE AGGREGATE  aggregate_name (\n                                [ aggregate_arg  [ , ... ] ] ORDER BY\n                                aggregate_arg [  , ... ] ) ( SFUNC =\n                                sfunc , STYPE =  state_data_type\n                                [ ,  aggregate_order_by_option [ ... ] ]\n                                )\n\ncreate_aggregate_old ::= CREATE AGGREGATE  aggregate_name ( BASETYPE =\n                            base_type , SFUNC = sfunc , STYPE =\n                            state_data_type\n                            [ , aggregate_old_option [ ... ] ] )\n\naggregate_arg ::= [ aggregate_argmode ] [ argname ]  argtype\n\naggregate_normal_option ::= SSPACE = state_data_size\n                               | FINALFUNC =  ffunc\n                               | FINALFUNC_EXTRA\n                               |  FINALFUNC_MODIFY =\n                                  { READ_ONLY |  SHAREABLE | READ_WRITE }\n                               | COMBINEFUNC =  combinefunc\n                               | SERIALFUNC =  serialfunc\n                               | DESERIALFUNC =  deserialfunc\n                               | INITCOND =  initial_condition\n                               | MSFUNC = msfunc\n                               | MINVFUNC = minvfunc\n                               | MSTYPE =  mstate_data_type\n                               | MSSPACE =  mstate_data_size\n                               | MFINALFUNC =  mffunc\n                               |  MFINALFUNC_EXTRA\n                               | MFINALFUNC_MODIFY =\n                                  { READ_ONLY |  SHAREABLE | READ_WRITE }\n                               | MINITCOND =  minitial_condition\n                               | SORTOP =  sort_operator\n                               | PARALLEL =\n                                  { SAFE |  RESTRICTED | UNSAFE }\n\naggregate_order_by_option ::= SSPACE = state_data_size\n                                 | FINALFUNC =  ffunc\n                                 |  FINALFUNC_EXTRA\n                                 |  FINALFUNC_MODIFY =\n                                    { READ_ONLY |  SHAREABLE | READ_WRITE }\n                                 | INITCOND =  initial_condition\n                                 | PARALLEL =\n                                    { SAFE | RESTRICTED | UNSAFE }\n                                 | HYPOTHETICAL\n\naggregate_old_option ::= SSPACE = state_data_size\n                           | FINALFUNC = ffunc\n                           | FINALFUNC_EXTRA\n                           | FINALFUNC_MODIFY =\n                              { READ_ONLY |  SHAREABLE | READ_WRITE }\n                           | COMBINEFUNC = combinefunc\n                           | SERIALFUNC = serialfunc\n                           | DESERIALFUNC = deserialfunc\n                           | INITCOND =  initial_condition\n                           | MSFUNC = msfunc\n                           | MINVFUNC = minvfunc\n                           | MSTYPE = mstate_data_type\n                           | MSSPACE = mstate_data_size\n                           | MFINALFUNC = mffunc\n                           | MFINALFUNC_EXTRA\n                           | MFINALFUNC_MODIFY =\n                              { READ_ONLY |  SHAREABLE | READ_WRITE }\n                           | MINITCOND = minitial_condition\n                           | SORTOP = sort_operator\n```\n\n**语义**\n\n选项的顺序无关紧要。甚至强制性选项BASETYPE，SFUNC和STYPE 可能以任何顺序出现。\n\n请参见[PostgreSQL docs] [postgresql-docs-create-aggregate]中每个选项的语义。\n\n**例子**\n\n普通语法示例。\n\n```\nCREATE AGGREGATE sumdouble (float8) (\n           STYPE = float8,\n           SFUNC = float8pl,\n           MSTYPE = float8,\n           MSFUNC = float8pl,\n           MINVFUNC = float8mi\n           );\n\nCREATE TABLE normal_table(\n          f  float8,\n          i  int\n        );\n\nINSERT INTO normal_table(f, i) VALUES\n          (0.1, 9),\n          (0.9, 1);\n\nSELECT sumdouble(f), sumdouble(i) FROM normal_table;\n```\n\n带排序的语法示例。\n\n```\nCREATE AGGREGATE my_percentile_disc(float8 ORDER BY  anyelement) (\n           STYPE = internal,\n           SFUNC = ordered_set_transition,\n           FINALFUNC = percentile_disc_final,\n           FINALFUNC_EXTRA = true,\n           FINALFUNC_MODIFY = read_write\n        );\n\nSELECT my_percentile_disc(0.1), my_percentile_disc(0.9)\n           WITHIN GROUP (ORDER BY typlen)\n           FROM  pg_type;\n```\n\n旧的语法示例。\n\n```\nCREATE AGGREGATE oldcnt(\n          SFUNC = int8inc,\n          BASETYPE = 'ANY',\n          STYPE = int8,\n          INITCOND = '0'\n       );\n\nSELECT oldcnt(*) FROM pg_aggregate;\n```\n\n零参数聚合示例。\n\n```\nCREATE AGGREGATE newcnt(*) (\n          SFUNC = int8inc,\n          STYPE = int8,\n          INITCOND = '0',\n          PARALLEL = SAFE\n       );\n\nSELECT newcnt(*) FROM pg_aggregate;\n```\n\n## CREATE CAST [*link*](#create-cast)\n\n**概要**\n\n使用CREATE CAST语句创建新的数据转换。\n\n**语法**\n\n```\ncreate_cast ::= create_cast_with_function\n                    |  create_cast_without_function\n                    |  create_cast_with_inout\n\ncreate_cast_with_function ::= CREATE CAST (  cast_signature ) WITH\n                                  FUNCTION function_name\n                                  [ (  function_signature ) ]\n                                  [ AS ASSIGNMENT  | AS IMPLICIT ]\n\ncreate_cast_without_function ::= CREATE CAST (  cast_signature ) WITHOUT  FUNCTION\n                                   [ AS  ASSIGNMENT | AS IMPLICIT ]\n\ncreate_cast_with_inout ::= CREATE CAST ( cast_signature  ) WITH INOUT\n                              [ AS ASSIGNMENT |  AS IMPLICIT ]\n\ncast_signature ::= source_type AS target_type\n```\n\n**语义**\n\n请参见[PostgreSQL docs] [postgresql-docs-create-cast]中每个选项的语义。\n\n**例子**\n\nWITH FUNCTION例子。\n\n```\nCREATE FUNCTION sql_to_date(integer) RETURNS date AS $$\n          SELECT $1::text::date\n          $$  LANGUAGE SQL IMMUTABLE STRICT;\n\nCREATE CAST (integer AS date) WITH FUNCTION  sql_to_date(integer) AS ASSIGNMENT;  SELECT CAST (3 AS date);\n```\n\nWITHOUT FUNCTION例子。\n\n```\nCREATE TYPE myfloat4;\n\nCREATE FUNCTION myfloat4_in(cstring) RETURNS myfloat4\n           LANGUAGE internal IMMUTABLE STRICT  PARALLEL SAFE AS 'float4in';\n\nCREATE FUNCTION myfloat4_out(myfloat4) RETURNS cstring\n           LANGUAGE internal IMMUTABLE STRICT PARALLEL SAFE AS 'float4out';\n\nCREATE TYPE myfloat4 (\n           INPUT = myfloat4_in,\n           OUTPUT = myfloat4_out,\n           LIKE  = float4\n        );\n\nSELECT CAST('3.14'::myfloat4 AS float4);\n\nCREATE CAST (myfloat4 AS float4) WITHOUT FUNCTION;\n\nSELECT CAST('3.14'::myfloat4 AS float4);\n```\n\nWITH INOUT例子。\n\n```\nCREATE TYPE myint4;\n\nCREATE FUNCTION myint4_in(cstring) RETURNS myint4\n           LANGUAGE internal IMMUTABLE STRICT PARALLEL SAFE AS 'int4in';\n\nCREATE FUNCTION myint4_out(myint4) RETURNS cstring\n           LANGUAGE internal IMMUTABLE STRICT PARALLEL SAFE AS 'int4out';\n\nCREATE TYPE myint4 (\n           INPUT = myint4_in,\n           OUTPUT = myint4_out,\n           LIKE  = int4\n        );\n\nSELECT CAST('2'::myint4 AS int4);\n\nCREATE CAST (myint4 AS int4) WITH INOUT;\n\nSELECT CAST('2'::myint4 AS int4);\n```\n\n## CREATE DATABASE [*link*](#create-database)\n\n**概要**\n\n使用CREATE DATABASE语句创建一个数据库。\n\n**语法**\n\n```\ncreate_database ::= CREATE DATABASE name [  create_database_options ]\n\ncreate_database_options ::= [ WITH ] [ OWNER [ = ]  user_name ]\n                                [ TEMPLATE [ = ]  template ]\n                                [ ENCODING [ = ]  encoding ]\n                                [ LC_COLLATE [ =  ] lc_collate ]\n                                [ LC_CTYPE [ = ]  lc_ctype ]\n                                [ TABLESPACE [ = ]  tablespace_name ]\n                                [  ALLOW_CONNECTIONS [ = ] allowconn ]\n                                [ COLOCATED [ = ]  { 'true' | 'false' } ]\n```\n\n**语义**\n\nCREATE DATABASE name 指定要创建的数据库的名称。如果要创建的数据库name已经存在，则会返回错误。\n\n[ WITH ] OWNER user\\_name 指定将拥有新数据库的用户的角色名称。如果未指定，则数据库创建者为所有者。\n\nTEMPLATE template 指定用于创建新数据库的模板的名称。\n\nENCODING encoding 指定在新数据库中使用的字符集编码。\n\nLC\\_COLLATE lc\\_collate 指定排序顺序 (LC\\_COLLATE),目前只支持C。\n\nLC\\_CTYPE lc\\_ctype 指定字符分类（LC\\_CTYPE），目前只支持utf-8。\n\nTABLESPACE tablespace\\_name 指定与数据库关联的新表空间。\n\nALLOW\\_CONNECTIONS allowconn 指定false时禁止连接数据库。默认值为true，允许连接数据库。\n\nCOLOCATED 指定true此数据库的所有表是否应位于同一tablet上。查看并置表架构 有关何时使用共置表的详细信息。默认值为false，数据库中的每个表都有自己的一组tablet。\n\n**例子**\n\n创建一个并置数据库。\n\n```\nCREATE DATABASE company WITH  COLOCATED = true;\n```\n\n在此示例中，数据库company中的所有表都放置在同一个tablet上\n\n## CREATE DOMAIN [*link*](#create-domain)\n\n**概要**\n\n使用CREATE DOMAIN语句来创建新的域。\n\n**语法**\n\n```\ncreate_domain ::= CREATE DOMAIN name [ AS ] data_type\n                    [ DEFAULT expression ]\n                    [ [ domain_constraint [ ... ] ] ]\n\ndomain_constraint ::= [ CONSTRAINT constraint_name ]\n                          { NOT NULL | NULL | CHECK ( expression ) }\n```\n\n**语义**\n\nCREATE DOMAIN name 指定域的名称。如果name中已存在，则会引发错误。\n\nAS data\\_type 指定基础数据类型。\n\nDEFAULT expression 为域设置默认值。\n\nCONSTRAINT constraint\\_name 指定约束的名称。\n\nNOT NULL 不允许为空值。 NULL 允许为空值（默认）。 CHECK ( expression ) 域值必须满足的约束，返回布尔值。表达式为 为TRUE或UNKNOWN时代表成功。\n\n**例子**\n\n```\nCREATE DOMAIN phone_number AS TEXT CHECK(VALUE ~ '^\\d{3}-\\d{3}-\\d{4}$');\n```\n\n```\nCREATE TABLE person(first_name TEXT, last_name TEXT, phone_number phone_number);\n```\n\n## CREATE EXTENSION [*link*](#create-extension)\n\n**概要**\n\n使用CREATE EXTENSION语句将扩展加载到数据库中。\n\n**语法**\n\n```\ncreate_extension ::= CREATE EXTENSION [ IF NOT EXISTS ]  extension_name\n                     [ WITH ] [ SCHEMA schema_name ]\n                     [ VERSION version ] [ CASCADE ]\n```\n\n**语义**\n\nSCHEMA, VERSION和CASCADE可以乱序。\n\n**例子**\n\n```\nCREATE SCHEMA myschema;\n```\n\n```\nCREATE EXTENSION pgcrypto WITH SCHEMA myschema VERSION  '1.3';\n```\n\n```\nCREATE EXTENSION IF NOT EXISTS earthdistance CASCADE;\n```\n\n## CREATE FUNCTION [*link*](#create-function)\n\n**概要**\n\n使用CREATE FUNCTION语句在数据库中定义新功能。\n\n**语法**\n\n```\ncreate_function ::= CREATE [ OR REPLACE ] FUNCTION name  (\n                      [ arg_decl [ , ... ] ] )\n                      [ RETURNS type_name\n                         | RETURNS TABLE ( { column_name type_name }\n                            [ , ... ] ) ]\n                      { LANGUAGE lang_name\n                         | TRANSFORM { FOR TYPE type_name } [ , ... ]\n                         | WINDOW\n                         | IMMUTABLE\n                         | STABLE\n                         | VOLATILE\n                         | [ NOT ] LEAKPROOF\n                         | CALLED ON NULL INPUT\n                         | RETURNS NULL ON NULL INPUT\n                         | STRICT\n                         | [ EXTERNAL ] SECURITY INVOKER\n                         | [ EXTERNAL ] SECURITY DEFINER\n                         | PARALLEL { UNSAFE |  RESTRICTED | SAFE }\n                         | COST int_literal\n                         | ROWS int_literal\n                         | SET configuration_parameter\n                            { TO value | = value | FROM CURRENT }\n                         | AS 'definition'\n                         | AS 'obj_file' 'link_symbol' } [ ... ]\n\narg_decl ::= [ argmode ] [ argname ] argtype\n                [ {  DEFAULT | = } expression ]\n```\n\n**语义**\n\n* 如果给定name和参数类型的函数已经存在，那么CREATE FUNCTION除非使用CREATE OR REPLACE FUNCTION版本，否则将引发错误。在这种情况下，它将替换任何现有定义。\n* 默认支持的语言包括sql，plpgsql和C\n* VOLATILE，STABLE并IMMUTABLE告知查询优化器该函数的行为。\n* + VOLATILE是默认值，表示每个调用的函数结果可能不同。例如random()或now()。\n  + STABLE 表示该函数不会修改数据库，因此在一次扫描中，如果给定相同的参数，它将返回相同的结果。\n  + IMMUTABLE表示该函数不会修改数据库，并且在给定相同参数的情况下始终返回相同结果。\n* CALLED ON NULL INPUT，RETURNS NULL ON NULL INPUT和STRICT定义函数对于“ null”的行为。\n* + CALLED ON NULL INPUT指示输入参数可能是null。\n  + RETURNS NULL ON NULL INPUT或STRICT表示函数在输入任何null参数时总是返回null。\n\n**例子**\n\n使用SQL语言定义函数。\n\n```\nCREATE FUNCTION mul(integer, integer) RETURNS integer\n    AS 'SELECT $1  * $2;'\n    LANGUAGE SQL\n    IMMUTABLE\n    RETURNS NULL ON NULL INPUT;\n\nSELECT mul(2,3), mul(10, 12);\n```\n\n```\nmul | mul\n-----+-----\n    6 | 120\n(1 row)\n```\n\n使用PL/pgSQL定义一个函数\n\n```\nCREATE OR REPLACE FUNCTION inc(i integer) RETURNS  integer AS $$\n        BEGIN\n               RAISE NOTICE 'Incrementing %', i ;\n               RETURN i + 1;\n        END;\n\n$$ LANGUAGE plpgsql;\n\nSELECT inc(2), inc(5), inc(10);\n```\n\n```\nNOTICE:   Incrementing 2\nNOTICE:   Incrementing 5\nNOTICE:   Incrementing 10\ninc | inc | inc\n-----+-----+-----\n3 |  6 |   11\n(1 row)\n```\n\n## CREATE GROUP [*link*](#create-group)\n\n**概要**\n\n使用CREATE GROUP语句创建组角色。CREATE GROUP是 CREATE ROLE的 别名。\n\n**语法**\n\n```\ncreate_group  ::= CREATE GROUP role_name\n                    [ [ WITH ] role_option [ ,  ... ] ]\n\nrole_option  ::= SUPERUSER\n                   | NOSUPERUSER\n                   | CREATEDB\n                   | NOCREATEDB\n                   | CREATEROLE\n                   | NOCREATEROLE\n                   | INHERIT\n                   | NOINHERIT\n                   | LOGIN\n                   | NOLOGIN\n                   | CONNECTION LIMIT connlimit\n                   | [ ENCRYPTED ] PASSWORD ' password '\n                   | PASSWORD NULL\n                   | VALID UNTIL ' timestamp '\n                   | IN ROLE role_name [ , ... ]\n                   | IN GROUP role_name [ , ...  ]\n                   | ROLE role_name [ , ... ]\n                   | ADMIN role_name [ , ... ]\n                   | USER role_name [ , ... ]\n                   | SYSID uid\n```\n\n**例子**\n\n创建一个名为sample的组，可以管理数据库和角色。\n\n```\nCREATE GROUP SysAdmin WITH  CREATEDB CREATEROLE;\n```\n\n## CREATE INDEX [*link*](#create-index)\n\n**概要**\n\n使用CREATE INDEX语句在指定表的指定列上创建索引。索引主要用于提高查询性能。\n\n**语法**\n\n```\ncreate_index ::= CREATE [ UNIQUE ] INDEX [ [ IF NOT  EXISTS ] name ]\n                   ON [ ONLY ] table_name ( index_elem [ , ... ] )\n                   [ INCLUDE ( column_name [ , ... ] ) ]\n                   [ WHERE predicate ]\n\nindex_elem ::= { column_name | ( expression ) }\n                  [  operator_class_name ] [ HASH | ASC | DESC ]\n                  [  NULLS { FIRST | LAST } ]\n```\n\n**语义**\n\nUNIQUE 强制要求不允许表中出现重复值\n\nINCLUDE指定将作为非关键列包含在索引中的列集合。\n\nWHERE部分索引是建立在只包括满足所where规定的条件的行组成的表的子集的索引。它可用于从索引中排除NULL或公共值，或仅包含感兴趣的行。这将加快对表的写入速度，因为不需要索引包含公共列值的行。它还将减小索引的大小，从而提高使用该索引的读取查询的速度。\n\nname 指定要创建的索引的名称。\n\ntable\\_name 指定要建立索引的表的名称。\n\ncolumn\\_name 指定表的列名。\n\nexpression 指定表的一列或多列，并且必须用括号括起来。\n\n* HASH-使用列的哈希值。这是第一列的默认选项，用于对索引表进行哈希分区。\n* ASC—升序排列。这是索引的第二列和后续列的默认选项。\n* DESC —降序排列。\n* NULLS FIRST-指定null排在非null之前。当指定DESC时，这是默认设置。\n* NULLS LAST-指定null排在非null之后。如果未指定DESC，则为默认设置。\n\nSPLIT INTO 对于散列索引，可以使用该SPLIT INTO子句指定要为索引创建的tablet的数量。使用 SPLIT INTO 预先分割索引可索引将工作负载分配到生产集群上。例如，如果您有3台服务器，则将索引分为30个tablet可以提供更高的索引写吞吐量。\n\n**例子**\n\n创建具有哈利排序列的唯一索引。\n\n```\nCREATE TABLE products(id int PRIMARY KEY,\n                               name text,\n                               code text);\n\nCREATE UNIQUE INDEX ON products(code);\n```\n\n```\n\\d products\n             Table \"public.products\"\nColumn | Type   | Collation | Nullable | Default\n--------+---------+-----------+----------+---------\nid   | integer |      | not null |\nname  | text    |      |     |\ncode  | text    |      |     |\n\nIndexes:\n    \"products_pkey\" PRIMARY KEY, lsm (id HASH)\n    \"products_code_idx\" UNIQUE, lsm (code HASH)\n```\n\n用升序键创建索引。\n\n```\nCREATE INDEX products_name ON products(name ASC);\n\\d products_name\n    Index \"public.products_name\"\nColumn | Type |  Key? | Definition\n--------+------+------+------------\nname  | text | yes | name\nlsm, for table \"public.products\n```\n\n创建具有升序排序键的索引，并包括其他列作为非键列。\n\n```\nCREATE INDEX products_name_code ON products(name)  INCLUDE (code);\n\\d products_name_code;\n Index  \"public.products_name_code\"\n Column | Type |  Key? | Definition\n--------+------+------+------------\nname  | text | yes | name\ncode  | text | no  | code\nlsm, for table \"public.products\"\n```\n\n指定索引的tablet数量。\n\n```\nCREATE TABLE employees (id int PRIMARY KEY, first_name  TEXT, last_name TEXT) SPLIT INTO 10 TABLETS;\n\nCREATE INDEX ON employees(first_name, last_name) SPLIT  INTO 10 TABLETS;\n```\n\n一个维护货运信息的应用程序。它有一个shipments表，该表的列为delivery\\_status。如果应用程序需要频繁访问 shipments表 ，则可以使用部分索引排除货件状态为 delivered 的行。\n\n```\ncreate table shipments(id int, delivery_status text,  address text, delivery_date date);\n\ncreate index shipment_delivery on  shipments(delivery_status, address, delivery_date) where delivery_status !=  'delivered';\n```\n\n## CREATE OPERATOR [*link*](#create-operator)\n\n**概要**\n\n使用CREATE OPERATOR语句创建一个新的运算符。\n\n**语法**\n\n```\ncreate_operator ::= CREATE OPERATOR operator_name (\n                       { FUNCTION = function_name\n                          | PROCEDURE = procedure_name }\n                       [ , operator_option [ ... ] ] )\n\noperator_option ::= LEFTARG = left_type\n                       | RIGHTARG = right_type\n                       | COMMUTATOR = com_op\n                       | NEGATOR = neg_op\n                       | RESTRICT = res_proc\n                       | JOIN = join_proc\n                       | HASHES\n                       | MERGES\n```\n\n**语义**\n\n请参见[PostgreSQL docs] [postgresql-docs-create-operator]中每个选项的语义。\n\n**例子**\n\n```\nCREATE OPERATOR @#@ (\n           rightarg = int8,\n           procedure = numeric_fac\n        );\n\nSELECT @#@ 5;\n```\n\n## CREATE OPERATOR CLASS [*link*](#create-operator-class)\n\n**概要**\n\n使用CREATE OPERATOR CLASS语句创建一个新的运算符类。\n\n**语法**\n\n```\nreate_operator_class ::= CREATE OPERATOR CLASS  operator_class_name\n                             [ DEFAULT ] FOR  TYPE data_type USING\n                             index_method AS  operator_class_as [ , ... ]\n\noperator_class_as ::= OPERATOR strategy_number  operator_name\n                         [ ( operator_signature ) ] [ FOR SEARCH ]\n                         | FUNCTION support_number\n                            [ ( op_type [ , ... ] ) ] function_name (\n                            function_signature )\n                         | STORAGE storage_type\n```\n\n**语义**\n\n请参见[PostgreSQL docs] [postgresql-docs-create-op-class]中每个选项的语义。\n\n**例子**\n\n```\nCREATE OPERATOR CLASS my_op_class\n       FOR  TYPE int4\n       USING  btree AS\n       OPERATOR 1 <,\n       OPERATOR 2 <=;\n```\n\n## CREATE POLICY [*link*](#create-policy)\n\n**概要**\n\n使用CREATE POLICY语句为表创建新的行级安全策略。策略授予SELECT，INSERT，UPDATE或DELETE访问匹配表达式的行的权限。必须使用ALTER TABLE在表上启用行级安全性，策略才能生效。\n\n**语法**\n\n```\ncreate_policy ::= CREATE POLICY name ON table_name\n                   [ AS { PERMISSIVE | RESTRICTIVE } ]\n                   [ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]\n                   [ TO { role_name\n                           | PUBLIC\n                           | CURRENT_USER\n                           | SESSION_USER } [ , ... ] ]\n                   [ USING ( using_expression ) ]\n                   [ WITH CHECK ( check_expression ) ]\n```\n\n**语义**\n\n* name是新政策的名称。该名称必须不同于该表的任何其他策略名称。\n* table\\_name 是策略适用的表的名称。\n* PERMISSIVE/ RESTRICTIVE指定该策略是允许的还是限制性的。在将策略应用于表时，使用逻辑OR运算符将宽松的策略组合在一起，而使用逻辑AND运算符将限制性策略组合在一起。限制性策略用于减少可访问的记录数。默认值是允许的。\n* role\\_name是应用策略的角色。默认值是PUBLIC将策略应用于所有角色。\n* using\\_expression是SQL条件表达式。条件变为true的行仅在中可见，SELECT而在UPDATE或中可用于修改DELETE。\n* check\\_expression是仅用于INSERT和UPDATE 查询的SQL条件表达式。只有行该表达式评估为真将以被允许INSERT或 UPDATE。请注意，与不同using\\_expression，它是针对该行的建议新内容进行评估的。\n\n**例子**\n\n创建一个宽松的策略。\n\n```\nCREATE POLICY p1 ON document\nUSING (dlevel  <= (SELECT level FROM user_account WHERE user = current_user));\n```\n\n创建限制性策略。\n\n```\nCREATE POLICY p_restrictive ON document AS RESTRICTIVE  TO user_bob    USING (cid  <> 44);\n```\n\n创建一个带有CHECK插入条件的策略。\n\n```\nCREATE POLICY p2 ON document FOR INSERT WITH CHECK  (dauthor = current_user);\n```\n\n## CREATE PROCEDURE [*link*](#create-procedure)\n\n**概要**\n\n使用CREATE PROCEDURE语句在数据库中定义新存储过程。\n\n**语法**\n\n```\ncreate_procedure ::= CREATE [ OR REPLACE ] PROCEDURE  name (\n                       [ arg_decl [ , ... ] ] )\n                       { LANGUAGE lang_name\n                          | TRANSFORM { FOR TYPE type_name } [ , ... ]\n                          | [ EXTERNAL ] SECURITY INVOKER\n                          | [ EXTERNAL ] SECURITY DEFINER\n                          | SET configuration_parameter\n                             { TO value | = value | FROM  CURRENT }\n                          | AS 'definition'\n                          | AS 'obj_file' 'link_symbol' } [ ... ]\n\narg_decl ::= [ argmode ] [ argname ] argtype\n                 [ {  DEFAULT | = } expression ]\n```\n\n**语义**\n\n* 如果name已经存在具有给定和参数类型的过程，则CREATE PROCEDURE除非使用该CREATE OR REPLACE PROCEDURE版本，否则将引发错误。在这种情况下，它将替换任何现有定义。\n* 默认支持的语言包括sql，plpgsql和C。\n\n**例子**\n\n设置一个账户表。\n\n```\nCREATE TABLE accounts (\n   id integer  PRIMARY KEY,\n   name text NOT  NULL,\n   balance  decimal(15,2) NOT NULL\n);\n\nINSERT INTO accounts VALUES (1, 'Jane', 100.00);\nINSERT INTO accounts VALUES (2, 'John', 50.00);\n\nSELECT * from accounts;\n```\n\n定义transfer将资金从一个账户转移到另一个账户的存储过程。\n\n```\nCREATE OR REPLACE PROCEDURE transfer(integer, integer,  decimal)\nLANGUAGE plpgsql\nAS $$\nBEGIN\n   IF $3 <=  0.00 then RAISE EXCEPTION 'Can only transfer positive amounts'; END IF;\n   IF $1 = $2 then  RAISE EXCEPTION 'Sender and receiver cannot be the same'; END IF;\n   UPDATE accounts  SET balance = balance - $3 WHERE id = $1;\n   UPDATE accounts  SET balance = balance + $3 WHERE id = $2;\n   COMMIT;\nEND;\n$$;\n```\n\n执行转账操作。\n\n```\nCALL transfer(1, 2, 20.00);\nSELECT * from accounts;\n```\n\n## CREATE ROLE [*link*](#create-role)\n\n**概要**\n\n使用CREATE ROLE语句向MemFire数据库集群添加新角色。角色是可以拥有数据库对象并具有数据库特权的实体。角色可以是用户或组，具体取决于使用方式。具有 LOGIN 属性的role可以视为user。具有CREATEROLE特权或成为数据库超级用户才能使用此命令。 可以使用GRANT/ REVOKE命令设置/删除角色的权限。\n\n**语法**\n\n```\ncreate_role ::= CREATE ROLE role_name\n                  [ [ WITH ] role_option [ , ... ] ]\n\nrole_option ::= SUPERUSER\n                  | NOSUPERUSER\n                  | CREATEDB\n                  | NOCREATEDB\n                  | CREATEROLE\n                  | NOCREATEROLE\n                  | INHERIT\n                  | NOINHERIT\n                  | LOGIN\n                  | NOLOGIN\n                  | CONNECTION LIMIT connlimit\n                  | [ ENCRYPTED ] PASSWORD ' password '\n                  | PASSWORD NULL\n                  | VALID UNTIL ' timestamp '\n                  | IN ROLE role_name [ , ... ]\n                  | IN GROUP role_name [ , ... ]\n                  | ROLE role_name [ , ... ]\n                  | ADMIN role_name [ , ... ]\n                  | USER role_name [ , ... ]\n                  | SYSID uid\n```\n\n**语义**\n\n* role\\_name 是新角色的名称。\n* SUPERUSER，NOSUPERUSER确定新角色是否是“超级用户”。超级用户可以覆盖所有访问限制，应谨慎使用。只有具有SUPERUSER特权的角色才能创建其他SUPERUSER角色。如果未指定，则默认为NOSUPERUSER。\n* CREATEDB，NOCREATEDB确定新角色是否可以创建数据库。默认值为NOCREATEDB。\n* CREATEROLE，NOCREATEROLE确定新角色是否可以创建其他角色。默认值为NOCREATEROLE。\n* INHERIT，NOINHERIT确定新角色是否继承其所属角色的特权。如果没有INHERIT，则另一个角色的成员资格仅授予SET ROLE权限给该另一个角色。其他角色的特权只有在这样做后才可用。如果未指定，则默认为INHERIT。\n* LOGIN，NOLOGIN确定是否允许新角色登录。客户端连接期间只能使用具有登录特权的角色。可以将具有LOGIN的角色视为用户。如果未指定，则默认为NOLOGIN。请注意，如果使用CREATE USER而不是CREATE ROLE，则默认值为LOGIN。\n* CONNECTION LIMIT指定角色可以建立的并发连接数。默认值为-1，表示无限制。这仅适用于可以登录的角色。\n* [ENCRYPTED] PASSWORD设置新角色的密码。这仅适用于可以登录的角色。如果未指定密码，则密码将设置为null，并且该用户的密码身份验证将始终失败。请注意，密码始终以加密方式存储在系统目录中，并且仅提供可选关键字ENCRYPTED是为了与Postgres兼容。\n* VALID UNTIL设置一个日期和时间，之后该角色的密码将不再有效。如果省略此子句，则密码将一直有效。\n* IN ROLE role\\_name，IN GROUP role\\_name列出一个或多个现有角色，新角色将立即作为新成员添加到其中。（请注意，没有选项可以将新角色添加为管理员；请使用单独的GRANT命令来执行此操作。）\n* ROLE role\\_name，USER role\\_name列出一个或多个现有角色，这些角色将自动添加为新角色的成员。（这实际上使新角色成为“组”。）\n* ADMIN role\\_name与相似ROLE role\\_name，但是将命名角色添加到使用ADMIN OPTION的新角色中，从而赋予他们将这个角色的成员资格授予其他人的权利。\n* SYSID uid 被忽略，并且与Postgres兼容。\n\n**例子**\n\n创建一个可以登录的角色。\n\n```\nCREATE ROLE John LOGIN;\n```\n\n创建一个可以登录并具有密码的juese。\n\n```\nCREATE ROLE Jane LOGIN  PASSWORD 'password';\n```\n\n创建一个可以管理数据库和角色的角色。\n\n```\nCREATE ROLE SysAdmin  CREATEDB CREATEROLE;\n```\n\n## CREATE RULE [*link*](#create-rule)\n\n**概要**\n\n使用CREATE RULE语句创建新规则。\n\n**语法**\n\n```\ncreate_rule  ::= CREATE [ OR REPLACE ] RULE rule_name AS ON rule_event TO table_name [ WHERE  condition ] DO [ ALSO | INSTEAD ] { NOTHING | command | ( command [ ; ... ] )  }\n\nrule_event  ::= SELECT | INSERT | UPDATE | DELETE\n\ncommand  ::= SELECT | INSERT | UPDATE | DELETE | NOTIFY\n```\n\n**语义**\n\n请参见[PostgreSQL docs] [postgresql-docs-create-rule]中每个选项的语义。\n\n**例子**\n\n```\nCREATE TABLE t1(a int4, b int4);\nCREATE TABLE t2(a int4, b int4);\nCREATE RULE t1_to_t2 AS ON INSERT TO t1 DO INSTEAD\nINSERT INTO t2 VALUES (new.a, new.b);\nINSERT INTO t1 VALUES (3, 4);\nSELECT * FROM t1;\n```\n\n## CREATE SCHEMA [*link*](#create-schema)\n\n**概要**\n\n使用CREATE SCHEMA语句在当前数据库中创建一个新模式。模式本质上是一个命名空间：它包含命名对象（表，数据类型，函数和运算符），其名称可以与其他模式中存在的其他对象的名称重复。可以通过使用模式名称作为前缀或通过在搜索路径中设置模式名称来访问模式中的命名对象。\n\n**语法**\n\n```\ncreate_schema_name ::= CREATE SCHEMA [ IF NOT EXISTS ]  schema_name\n                         [ AUTHORIZATION role_specification ]\n\ncreate_schema_role ::= CREATE SCHEMA [ IF NOT EXISTS ]  AUTHORIZATION                                                role_specification [ schema_element [ ... ] ]\n\nrole_specification ::= role_name | CURRENT_USER | SESSION_USER\n```\n\n**语义**\n\n* schema\\_name是要创建的模式的名称。如果未指定schema\\_name，role\\_name则使用。\n* role\\_name是拥有新模式的角色。如果省略，则默认为用户执行命令。要创建另一个角色拥有的模式，必须是该角色的直接或间接成员，或者是超级用户才能执行。\n\n**例子**\n\n创建一个新的模式。\n\n```\nCREATE SCHEMA IF NOT EXIST branch;\n```\n\n为用户创建模式。\n\n```\nCREATE ROLE John;\nCREATE SCHEMA AUTHORIZATION john;\n```\n\n创建一个模式和改模式中的对象。\n\n```\nCREATE SCHEMA branch\n          CREATE TABLE dept(\n             dept_id INT NOT NULL,\n             dept_name TEXT NOT NULL,\n             PRIMARY KEY (dept_id)\n          );\n```\n\n## CREATE SEQUENCE [*link*](#create-sequence)\n\n**概要**\n\n使用CREATE SEQUENCE语句在当前模式中创建一个新序列。\n\n**语法**\n\n```\ncreate_sequence ::= CREATE SEQUENCE [ IF NOT EXISTS ]  sequence_name\n                       sequence_options\n\nsequence_name ::= '<Text Literal>'\n\nsequence_options ::= [ INCREMENT [ BY ] increment ]\n                         [ MINVALUE minvalue | NO MINVALUE ]\n                         [ MAXVALUE maxvalue | NO MAXVALUE ]\n                         [ START [ WITH ] start ] [ CACHE cache ]\n                         [ [ NO ] CYCLE ]\n```\n\n**语义**\n\nCREATE SEQUENCE sequence\\_name [ IF NOT EXISTS ] 指定序列的名称（sequence\\_name）。如果在当前模式中已经存在具有该名称的序列，并且IF NOT EXISTS未指定该序列，则会引发错误。\n\nINCREMENT BY increment 指定序列中连续值之间的差。默认值为1。\n\nMINVALUE minvalue | NO MINVALUE 指定序列中允许的最小值。如果达到该值（以负增量递增的顺序），nextval()将返回错误。如果NO MINVALUE指定，则使用默认值。默认值为1。\n\nMAXVALUE maxvalue | NO MAXVALUE 指定序列中允许的最大值。如果达到此值，nextval()将返回错误。如果NO MAXVALUE指定，则使用默认值。默认值为263 - 1。\n\nSTART WITH start 指定序列中的第一个值。start不能少于minvalue。默认值为1。\n\nCACHE cache 指定序列中要在客户端中缓存的数字。默认值为1。\n\n[ NO ] CYCLE 如果CYCLE已指定，则序列到达minvalue或时将环绕maxvalue。如果maxvalue达到，minvalue将是序列中的下一个数字。如果minvalue达到（对于降序序列），maxvalue将是序列中的下一个数字。NO CYCLE是默认值。\n\nCache 在PostgreSQL中，在MSQL中，序列的数据存储在持久性系统表中。在MSQL中，此表每个序列有一行，并且它以两个值存储序列数据： last\\_val 存储上次使用的值或下一个要使用的值。 is\\_called 存储是否last\\_val已使用。如果为false，last\\_val则为序列中的下一个值。否则，last\\_val+ INCREMENT是下一个。\n\n默认情况下（INCREMENT为1时），每次调用都会nextval()更新last\\_val该序列。在MSQL中，复制包含序列数据的表，而不是将其复制到本地文件系统中。对该表的每次更新都需要两个RPC（并且将来将优化为一个RPC），无论如何，nextval()在MSQL中调用所经历的延迟将大大高于Postgres中的相同操作。为了避免这种性能下降，MemFire建议使用具有足够大值的缓存值。缓存的值存储在本地节点的内存中，检索这些值可以避免任何RPC，因此可以在为缓存分配的所有编号上摊销一次缓存分配的延迟。\n\nSERIAL类型创建的序列具有默认值为1的缓存。因此，应避免使用 SERIAL 类型，而应使用其等效语句。而不是创建具有以下SERIAL类型的表：\n\n```\nCREATE TABLE t(k SERIAL)\n```\n\n您应该创建一个足够大的缓存序列，然后设置列，你想有一个串行类型DEFAULT以nextval()序列。\n\n```\nCREATE SEQUENCE t_k_seq CACHE 10000;\nCREATE TABLE t(k integer NOT NULL DEFAULT  nextval('t_k_seq'));\n```\n\n**例子**\n\n创建一个简单的序列，每个nextval()调用时递增1。\n\n```\nCREATE SEQUENCE s;\n```\n\n调用nextval()。\n\n```\nSELECT nextval('s');\n```\n\n创建一个具有10,000个 缓存 值的序列。\n\n```\nCREATE SEQUENCE s2 CACHE  10000;\n```\n\n在第一个会话中调用nextval()。\n\n```\nSELECT nextval('s2');\n nextval\n---------\n          1\n(1 row)\n```\n\n在第二个会话中调用 nextval()。\n\n```\nSELECT nextval('s2');\nnextval\n---------\n      10001\n(1 row)\n```\n\n创建一个从0开始的序列。将MINVALUE从其默认值1更改为小于或等于0的值。\n\n```\nCREATE SEQUENCE s3 START 0 MINVALUE 0;\nCREATE SEQUENCE\nSELECT nextval('s3');\nnextval\n---------\n          0\n(1 row)\n```\n\n## CREATE TABLE [*link*](#create-table)\n\n**概要**\n\n使用CREATE TABLE语句在数据库中创建新表。它定义了表名，列名和类型，主键和表属性。\n\n**语法**\n\n```\ncreate_table ::= CREATE [ TEMPORARY | TEMP ] TABLE [ IF  NOT EXISTS ]\n                    table_name ( [ table_elem [ , ... ] ] )\n                    [ WITH ( { COLOCATED = { 'true' | 'false' }\n                                 | storage_parameters } )\n                       | WITHOUT OIDS ]\n                    [ SPLIT { INTO integer TABLETS\n                               | AT VALUES ( split_row [ , ... ] ) } ]\n\ntable_elem ::= column_name data_type [  column_constraint [ ... ] ]\n                 | table_constraint\n\ncolumn_constraint ::= [ CONSTRAINT constraint_name ]\n                          { NOT NULL\n                             | NULL\n                             | CHECK ( expression )\n                             | DEFAULT expression\n                             | UNIQUE index_parameters\n                             | PRIMARY KEY\n                             | references_clause }\n                          [ DEFERRABLE | NOT DEFERRABLE ]\n                          [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]\n\ntable_constraint ::= [ CONSTRAINT constraint_name ]\n                          { CHECK ( expression )\n                             | UNIQUE ( column_names ) index_parameters\n                             | PRIMARY KEY ( key_columns )\n                             | FOREIGN KEY ( column_names )\n                                references_clause }\n                          [ DEFERRABLE | NOT DEFERRABLE ]\n                          [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]\n\nkey_columns ::= hash_columns [ , range_columns ] |  range_columns\n\nhash_columns ::= column_name [ HASH ] | ( column_name [  , ... ] ) HASH\n\nrange_columns ::= { column_name { ASC | DESC } } [ ,  ... ]\n\nstorage_parameters ::= storage_parameter [ , ... ]\n\nstorage_parameter ::= param_name [ = param_value ]\n\nindex_parameters ::= [ INCLUDE ( column_names ) ]\n                         [ WITH ( storage_parameters ) ]\n\nreferences_clause ::= REFERENCES table_name [  column_name [ , ... ] ]\n                         [ MATCH FULL | MATCH PARTIAL | MATCH  SIMPLE ]\n                         [ ON DELETE key_action ]\n                         [ ON UPDATE key_action ]\n\nsplit_row ::= ( column_value [ , ... ] )\n```\n\n**语义**\n\nPrimary key 可以在column\\_constraint或table\\_constraint 中定义主键 ，但不能在两个地方同时定义。有两种类型的主键列：\n\n* Hash primary key columns：主键可能具有零个或多个前导哈希分区列。默认情况下，仅第一列被视为哈希分区列。但是可以通过显式使用HASH注释来修改此行为。\n* Range primary key columns：一个表可以具有零个或多个范围主键列，并且它控制表中行的顶级排序（如果没有哈希分区列）或共享一组公共哈希分区列的行之间的行顺序价值观。默认情况下，范围主键列以升序存储。但是，可以通过显式使用ASC或来控制此行为DESC。\n\nForeign key 这将强制UNIQUE约束中指定的列集在表中是唯一的，也就是说，约束中指定的列集的任何两行都不能具有相同的值。\n\nCheck 这用于强制指定表中的数据满足该CHECK子句中指定的要求。\n\nDefault 此子句用于指定列的默认值。如果INSERT语句未为该列指定值，则使用默认值。如果没有为列指定默认值，则默认值为NULL。\n\nDeferrable constraints 可以使用该DEFERRABLE子句推迟约束。当前，在MemFire中只能推迟外键约束。在语句中的每一行之后，将检查不可延迟的约束。在推迟约束的情况下，约束的检查可以推迟到事务结束。\n\n标记为的约束INITIALLY IMMEDIATE将在语句中的每一行之后进行检查。 标记为的约束INITIALLY DEFERRED将在事务结束时检查。\n\nTemporary or Temp 使用此限定符将创建一个临时表。临时表仅在创建它们的当前客户端会话或事务中可见，并在会话或事务结束时自动删除。在临时表上创建的所有索引也是临时的。 SPLIT INTO 对于哈希表，您可以使用该SPLIT INTO子句来指定要为该表创建的tablet。然后，将哈希范围平均分配给这些tablet。\n\n**例子**\n\n带主键的表。\n\n```\nCREATE TABLE sample(k1 int,\n                            k2 int,\n                            v1 int,\n                            v2 text,\n                            PRIMARY KEY  (k1, k2));\n```\n\n带范围主键的表。\n\n```\nCREATE TABLE range(k1 int,\n                            k2 int,\n                            v1 int,\n                            v2 text,\n                            PRIMARY KEY (k1  ASC, k2 DESC));\n```\n\n带有检查约束的表。\n\n```\nCREATE TABLE student_grade(student_id int,\n                                        class_id int,\n                                        term_id  int,\n                                        grade  int CHECK (grade >= 0 AND grade <= 10),\n                                        PRIMARY  KEY (student_id, class_id, term_id));\n```\n\n具有默认值的表。\n\n```\nCREATE TABLE cars(id int PRIMARY KEY,\n                           brand text CHECK  (brand in ('X', 'Y', 'Z')),\n                           model text NOT  NULL,\n                           color text NOT  NULL DEFAULT 'WHITE' CHECK (color in ('RED', 'WHITE', 'BLUE')));\n```\n\n带有外键约束的表。\n\n```\nCREATE TABLE products(id int PRIMARY KEY,\n                                 descr text);\n\nCREATE TABLE orders(id int PRIMARY KEY,\n                                 pid int REFERENCES  products(id) ON DELETE CASCADE,\n                                 amount int);\n```\n\n具有唯一约束的表。\n\n```\nCREATE TABLE translations(message_id int UNIQUE,\n                                     message_txt text);\n```\n\n创建一个指定分片数量的表。\n\n```\nCREATE TABLE tracking (id  int PRIMARY KEY) SPLIT INTO 10 TABLETS;\n```\n\n使用并置表。\n\n```\nCREATE DATABASE company WITH colocated = true;\n\nCREATE TABLE employee(id INT PRIMARY KEY, name TEXT)  WITH (colocated = false);\n```\n\n## CREATE TABLE AS [*link*](#create-table-as)\n\n**概要**\n\n使用该CREATE TABLE AS语句使用子查询的输出来创建新表。\n\n**语法**\n\n```\ncreate_table_as ::= CREATE TABLE [ IF NOT EXISTS ] table_name\n                    [ ( column_name [ , ... ] ) ]   AS query\n                    [ WITH [ NO ] DATA ]\n```\n\n**语义**\n\nCREATE TABLE [ IF NOT EXISTS ] table\\_name 创建一个表。\n\ntable\\_name 指定表的名称。\n\n( column\\_name [ , … ] ) 指定新表中的列名。未指定时，列名称取自查询的输出列名称。\n\n**例子**\n\n```\nCREATE TABLE sample(k1 int, k2 int, v1 int, v2 text,  PRIMARY KEY (k1, k2));\n```\n\n```\nINSERT INTO sample VALUES (1, 2.0, 3, 'a'), (2, 3.0, 4,  'b'), (3, 4.0, 5, 'c');\n```\n\n```\nCREATE TABLE selective_sample SELECT * FROM sample  WHERE k1 > 1;\n```\n\n```\nSELECT * FROM selective_sample ORDER BY k1;\n```\n\n## CREATE TRIGGER [*link*](#create-trigger)\n\n**概要**\n\n使用CREATE TRIGGER语句定义新的触发器。\n\n**语法**\n\n```\ncreate_trigger ::= CREATE TRIGGER name { BEFORE | AFTER  | INSTEAD OF }\n                      { event [ OR ... ] } ON table_name\n                      [ FROM table_name ] [ NOT  DEFERRABLE ]\n                      [ FOR [ EACH ] { ROW | STATEMENT } ]\n                      [ WHEN ( condition ) ] EXECUTE\n                      { FUNCTION | PROCEDURE } function_name (\n                      function_arguments )\n\nevent ::= INSERT\n            | UPDATE [ OF column_name [ , ... ] ]\n            | DELETE\n            | TRUNCATE\n```\n\n**语义**\n\n* WHEN条件可用于指定是否应触发触发器。对于低级触发器，它可以引用该行的列的旧值和/或新值。\n* 可以为同一事件定义多个触发器。在这种情况下，将按名称的字母顺序将其触发。\n\n**例子**\n\n设置带有触发器的表，以跟踪修改时间和用户（角色）。使用预安装的扩展insert\\_username和moddatetime。\n\n```\nCREATE EXTENSION insert_username;\n\nCREATE EXTENSION moddatetime;\n\nCREATE TABLE posts (\n   id int primary key,\n   content text,\n   username text not null,\n   moddate timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL\n);\n\nCREATE TRIGGER insert_usernames\n   BEFORE INSERT OR UPDATE ON posts\n   FOR EACH ROW\n   EXECUTE  PROCEDURE insert_username (username);\n\nCREATE TRIGGER update_moddatetime\n   BEFORE UPDATE  ON posts\n   FOR EACH ROW\n   EXECUTE  PROCEDURE moddatetime (moddate);\n```\n\n插入一些行。对于每次插入，触发器应将当前角色设置为username，将当前时间戳设置为moddate。\n\n```\nSET ROLE memfire;\nINSERT INTO posts VALUES(1, 'desc1');\n\nSET ROLE postgres;\nINSERT INTO posts VALUES(2, 'desc2');\nINSERT INTO posts VALUES(3, 'desc3');\n\nSET ROLE memfire;\nINSERT INTO posts VALUES(4, 'desc4');\n\nSELECT * FROM posts ORDER BY id;\n```\n\n更新一些行。对于每一个更新的触发器既设置username和moddate相应。\n\n```\nUPDATE posts SET content = 'desc1_updated' WHERE id = 1;\nUPDATE posts SET content = 'desc3_updated' WHERE id = 3;\n\nSELECT * FROM posts ORDER BY id;\n```\n\n## CREATE TYPE [*link*](#create-type)\n\n**概要**\n\n使用CREATE TYPE语句在数据库中创建新的用户定义类型。有五种类型：复合，枚举，范围，基数和shell。每个都有自己的CREATE TYPE语法。\n\n**语法**\n\n```\ncreate_composite_type ::= CREATE TYPE type_name AS (\n                            [ composite_type_elem [ , ... ] ] )\n\ncreate_enum_type ::= CREATE TYPE type_name AS ENUM (\n                        [ label [ , ... ] ] )\n\ncreate_range_type ::= CREATE TYPE type_name AS RANGE (  SUBTYPE =\n                         subtype [ , range_type_option [ ... ] ] )\n\ncreate_base_type ::= CREATE TYPE type_name ( INPUT =  input_function ,\n                            OUTPUT = output_function\n                            [ , base_type_option [ ... ] ] )\n\ncreate_shell_type ::= CREATE TYPE type_name\n\ncomposite_type_elem ::= attribute_name data_type [  COLLATE collation ]\n\nrange_type_option ::= SUBTYPE_OPCLASS =  subtype_operator_class\n                         | COLLATION = collation\n                         | CANONICAL = canonical_function\n                         | SUBTYPE_DIFF = subtype_diff_function\n\nbase_type_option ::= RECEIVE = receive_function\n                        | SEND = send_function\n                        | TYPMOD_IN = type_modifier_input_function\n                        | TYPMOD_OUT = type_modifier_output_function\n                        | INTERNALLENGTH = { internallength | VARIABLE }\n                        | PASSEDBYVALUE\n                        | ALIGNMENT = alignment\n                        | STORAGE = storage\n                        | LIKE = like_type\n                        | CATEGORY = category\n                        | PREFERRED = preferred\n                        | DEFAULT = default\n                        | ELEMENT = element\n                        | DELIMITER = delimiter\n                        | COLLATABLE = collatable\n```\n\n**语义**\n\nbase\\_type\\_option\n\n* type\\_name 指定此用户定义类型的名称。\n* attribute\\_name 指定此复合类型的属性的名称。\n* data\\_type 指定此复合类型的属性的类型。\n* collation指定用于此类型的排序规则。如果这是复合类型，则属性数据类型必须可合并。如果这是范围类型，则子类型必须可排序。\n* label 指定带引号的标签为此枚举类型的值。\n* subtype 指定用于此范围类型的类型。\n* subtype\\_operator\\_class 指定用于此范围类型的子类型的运算符类。\n* canonical\\_function 指定在将此范围类型的范围值转换为规范形式时使用的规范函数。\n* subtype\\_diff\\_function 指定用于获取此范围类型的两个范围值之间的差的子类型差函数。\n* input\\_function 指定将此类型的外部文本表示转换为内部表示的函数。\n* output\\_function 指定将此类型的内部表示形式转换为外部文本表示形式的函数。\n* receive\\_function 指定将此类型的外部二进制表示形式转换为内部表示形式的函数。\n* send\\_function 指定将此类型的内部表示形式转换为外部二进制表示形式的函数。\n* type\\_modifier\\_input\\_function 指定将此类型修饰符的外部文本表示形式转换为内部整数typmod值或引发错误的函数。\n* type\\_modifier\\_output\\_function 指定将此类型修饰符的内部整数typmod值转换为外部表示形式的函数。\n* internallength 指定此类型的大小（以字节为单位）。\n* alignment 指定此类型的存储对齐方式。\n* storage指定此类型的存储策略。此类型必须是可变长度。\n* like\\_type指定到拷贝过来的类型INTERNALLENGTH，PASSEDBYVALUE，ALIGNMENT，和STORAGE的值从。\n* category 指定此类型的类别代码。\n* preferred 指定对于同一类别中的隐式强制转换是否首选此类型。\n* default 指定此类型的默认值。\n* element 指定此类型的元素，也使该类型成为数组。\n* delimiter 指定用于在此类型的值的外部文本表示形式中分隔数组元素的字符。\n* collatable 指定是否可以将排序规则信息传递给使用此类型的操作。\n\n**例子**\n\n复合型。\n\n```\nCREATE TYPE feature_struct AS (id INTEGER, name TEXT);\nCREATE TABLE feature_tab_struct (feature_col feature_struct);\n```\n\n枚举类型。\n\n```\nCREATE TYPE feature_enum AS ENUM ('one', 'two', 'three');\nCREATE TABLE feature_tab_enum (feature_col  feature_enum);\n```\n\n范围类型。\n\n```\nCREATE TYPE feature_range AS RANGE (subtype=INTEGER);\nCREATE TABLE feature_tab_range (feature_col feature_range);\n```\n\n基本类型。\n\n```\nCREATE TYPE int4_type;\nCREATE FUNCTION int4_type_in(cstring) RETURNS int4_type\n            LANGUAGE internal IMMUTABLE STRICT PARALLEL SAFE AS 'int4in';\nCREATE FUNCTION int4_type_out(int4_type) RETURNS  cstring\n            LANGUAGE internal IMMUTABLE STRICT PARALLEL SAFE AS 'int4out';\nCREATE TYPE int4_type (\n            INPUT = int4_type_in,\n            OUTPUT = int4_type_out,\n            LIKE = int4\n         );\nCREATE TABLE int4_table (t int4_type);\n```\n\n外壳类型。\n\n```\nCREATE TYPE shell_type;\n```\n\n## CREATE USER [*link*](#create-user)\n\n**概要**\n\n使用CREATE USER语句创建用户。该CREATE USER语句是 CREATE ROLE 的别名，但默认情况下会创建一个具有LOGIN特权的角色。\n\n**语法**\n\n```\ncreate_user ::= CREATE USER role_name\n                  [ [ WITH ] role_option [ , ... ] ]\n\nrole_option ::= SUPERUSER\n                  | NOSUPERUSER\n                  | CREATEDB\n                  | NOCREATEDB\n                  | CREATEROLE\n                  | NOCREATEROLE\n                  | INHERIT\n                  | NOINHERIT\n                  | LOGIN\n                  | NOLOGIN\n                  | CONNECTION LIMIT connlimit\n                  | [ ENCRYPTED ] PASSWORD ' password '\n                  | PASSWORD NULL\n                  | VALID UNTIL ' timestamp '\n                  | IN ROLE role_name [ , ... ]\n                  | IN GROUP role_name [ , ... ]\n                  | ROLE role_name [ , ... ]\n                  | ADMIN role_name [ , ... ]\n                  | USER role_name [ , ... ]          |  SYSID uid\n```\n\n**语义**\n\n参阅CREATE ROLE\n\n**例子**\n\n使用密码创建一个示例用户。\n\n```\nCREATE USER John WITH PASSWORD 'password';\n```\n\n向John授予对MemFire数据库的所有权限。\n\n```\nGRANT ALL ON DATABASE MemFire TO John;\n```\n\n从MemFire数据库中删除John的权限。\n\n```\nREVOKE ALL ON DATABASE MemFire FROM John;\n```\n\n## CREATE VIEW [*link*](#create-view)\n\n**概要**\n\n使用CREATE VIEW语句在数据库中创建新视图。它定义了视图名称和定义它的（选择）语句。\n\n**语法**\n\n```\ncreate_view ::= CREATE VIEW qualified_name\n                 [ ( column_list ) ] AS select\n```\n\n**语义**\n\nCREATE VIEW qualified\\_name [ (column\\_list ) ] AS select 创建一个视图。\n\nqualified\\_name 指定视图的名称。如果指定数据库中已经存在具有该名称的视图，则会引发错误（除非使用了该OR REPLACE选项）。\n\ncolumn\\_list 指定以逗号分隔的列列表。如果未指定，则从查询中推导出列名。 select 指定SELECT或VALUES语句，以提供视图的列和行。\n\n**例子**\n\n创建一个sample表。\n\n```\nCREATE TABLE sample(k1 int, k2 int, v1 int, v2 text,  PRIMARY KEY (k1, k2));\n```\n\n插入一些行。\n\n```\nINSERT INTO sample(k1, k2, v1, v2) VALUES (1, 2.0, 3,  'a'), (2, 3.0, 4, 'b'), (3, 4.0, 5, 'c');\n```\n\n在sample表上创建一个视图。\n\n```\nCREATE VIEW sample_view AS SELECT * FROM sample WHERE  v2 != 'b' ORDER BY k1 DESC;\n```\n\n从视图中选择。\n\n```\nSELECT * FROM sample_view;\n```\n\n## DELLOCATE [*link*](#dellocate)\n\n**概要**\n\n使用DEALLOCATE语句取消分配先前准备的SQL语句。\n\n**语法**\n\n```\ndeallocate ::= DEALLOCATE [ PREPARE ] { name | ALL }\n```\n\n**语义**\n\nname 指定要释放的准备好的语句的名称。\n\nALL 取消分配所有准备好的语句。\n\n**例子**\n\n准备并取消插入语句。\n\n```\nCREATE TABLE sample(k1 int, k2 int, v1 int, v2 text,  PRIMARY KEY (k1, k2));\nPREPARE ins (bigint, double precision, int, text) AS\n               INSERT INTO sample(k1, k2, v1, v2) VALUES ($1, $2, $3, $4);\nDEALLOCATE ins;\n```\n\n## DELETE [*link*](#delete)\n\n**概要**\n\n使用DELETE语句删除满足某些条件的行，并且当WHERE子句中未提供条件时，将删除所有行。DELETE输出要删除的行数。\n\n**语法**\n\n```\ndelete ::= [ WITH [ RECURSIVE ] with_query [ , ... ]  ] DELETE FROM\n              [ ONLY  ] table_name [ * ] [ [ AS ] alias ]\n              [  WHERE condition | WHERE CURRENT OF cursor_name ]\n              [ returning_clause ]\n\nreturning_clause ::= RETURNING { * | {  output_expression\n                                         [ [ AS ]  output_name ] }\n                                         [ , ...  ] }\n```\n\n**语义**\n\n* USING 子句尚不支持。\n* 尽管该WHERE子句允许使用多种运算符，但该WHERE子句中使用的确切条件具有重要的性能考虑因素（特别是对于大型数据集）。为了获得最佳性能，请使用WHERE为PRIMARY KEY或中的所有列提供值的子句INDEX KEY。\n\nwith\\_query 指定在DELETE语句中按名称引用的子查询。\n\ntable\\_name 指定要删除的表的名称。\n\nalias 在DELETE语句中指定目标表的标识符。指定别名后，必须使用别名代替语句中的实际表。\n\n**例子**\n\n创建一个示例表，插入几行，然后删除插入的行之一。\n\n```\nCREATE TABLE sample(k1 int, k2 int, v1 int, v2 text,  PRIMARY KEY (k1, k2));\nINSERT INTO sample VALUES (1, 2.0, 3, 'a'), (2, 3.0, 4,  'b'), (3, 4.0, 5, 'c');\n```\n\n```\nSELECT * FROM sample ORDER BY k1;\nk1 | k2 | v1 | v2\n----+----+----+----\n   1 | 2 |   3 | a\n   2 | 3 |   4 | b\n   3 | 4 |   5 | c\n(3 rows)\n```\n\n```\nDELETE FROM sample WHERE k1 = 2 AND k2 = 3;\nSELECT * FROM sample ORDER BY k1;\n```\n\n## DO [*link*](#do)\n\n**概要**\n\n使用该DO语句执行匿名代码块，或换句话说，以过程语言执行匿名函数。将代码块视为没有参数的函数的主体，并返回void。它被解析并执行一次。可选LANGUAGE子句可以在代码块之前或之后编写。\n\n**语法**\n\n```\ndo ::= DO [ LANGUAGE lang_name  ] code\n```\n\n**语义**\n\ncode 要执行的过程语言代码。就像在中一样，必须将其指定为字符串文字CREATE FUNCTION。建议使用美元报价文字。\n\nlang\\_name 编写代码所用的过程语言的名称。如果省略，则默认值为plpgsql。要使用的过程语言必须已经安装在当前数据库中。plpgsql默认情况下已安装，但未安装其他语言。\n\n**例子**\n\n```\nDO $$DECLARE r record;\nBEGIN\n   FOR r IN  SELECT table_schema, table_name FROM information_schema.tables\n              WHERE table_type = 'VIEW' AND table_schema = 'public'\n   LOOP\n      EXECUTE  'GRANT ALL ON ' || quote_ident(r.table_schema) || '.' ||\nquote_ident(r.table_name) || ' TO webuser';\n      END LOOP;\nEND$$;\n```\n\n## DROP AGGREGATE [*link*](#drop-aggregate)\n\n**概要**\n\n使用DROP AGGREGATE语句删除聚合。\n\n**语法**\n\n```\ndrop_aggregate ::= DROP AGGREGATE [ IF EXISTS ]\n                     { aggregate_name ( aggregate_signature ) }\n                     [ , ... ] [ CASCADE | RESTRICT ]\n\naggregate_signature ::= * | aggregate_arg [ , ... ]\n                              | [ aggregate_arg [ , ... ] ] ORDER  BY\n                                  aggregate_arg [ ,  ... ]\n```\n\n**语义**\n\n请参见[PostgreSQL docs] [postgresql-docs-drop-aggregate]中每个选项的语义。\n\n**例子**\n\n基本示例。\n\n```\nCREATE AGGREGATE newcnt(*) (\n          sfunc = int8inc,\n          stype = int8,\n          initcond = '0',\n          parallel = safe\n       );\nDROP AGGREGATE newcnt(*);\n```\n\nIF EXISTS 例。\n\n```\nDROP AGGREGATE IF EXISTS newcnt(*);\nCREATE AGGREGATE newcnt(*) (\n           sfunc = int8inc,\n           stype = int8,\n           initcond = '0',\n           parallel = safe\n        );\nDROP AGGREGATE IF EXISTS newcnt(*);\n```\n\nCASCADE和RESTRICT例子。\n\n```\nCREATE AGGREGATE newcnt(*) (\n           sfunc = int8inc,\n           stype = int8,\n           initcond = '0',\n           parallel = safe\n        );\nCREATE VIEW cascade_view AS\n           SELECT newcnt(*) FROM pg_aggregate;\n-- The following should error:\nDROP AGGREGATE newcnt(*) RESTRICT;\n-- The following should error:\nDROP AGGREGATE newcnt(*);\nDROP AGGREGATE newcnt(*) CASCADE;\n```\n\n## DROP CAST [*link*](#drop-cast)\n\n**概要**\n\n使用该DROP CAST语句删除转换。\n\n**语法**\n\n```\ndrop_cast ::= DROP CAST [ IF EXISTS ] ( cast_signature  )\n             [ CASCADE | RESTRICT ]\n```\n\n**语义**\n\n请参见[PostgreSQL docs] [postgresql-docs-drop-cast]中每个选项的语义。\n\n**例子**\n\n基本示例。\n\n```\nCREATE FUNCTION sql_to_date(integer) RETURNS date AS $$\n           SELECT $1::text::date\n           $$  LANGUAGE SQL IMMUTABLE STRICT;\nCREATE CAST (integer AS date) WITH FUNCTION  sql_to_date(integer) AS ASSIGNMENT;\nDROP CAST (integer AS date);\n```\n\n## DROP DATABASE [*link*](#drop-database)\n\n**概要**\n\n使用该DROP DATABASE语句从系统中删除数据库及其所有关联对象。这是不可逆转的操作。使用该连接执行语句后，当前打开的数据库连接将失效，然后关闭。\n\n**语法**\n\n```\ndrop_database ::= DROP DATABASE [ IF EXISTS ]  database_name\n```\n\n**语义**\n\nDROP DATABASE [ IF EXISTS ] database\\_name 删除数据库和所有关联的对象。database\\_name在drop语句完成之后，所有与之相关的对象（例如表）将失效。与删除的数据库的所有连接都将失效，并最终断开连接。 database\\_name 指定数据库的名称。\n\n## DROP DOMAIN [*link*](#drop-domain)\n\n**概要**\n\n使用DROP DOMAIN语句从数据库中删除域。\n\n**语法**\n\n```\ndrop_domain ::= DROP DOMAIN [ IF EXISTS ] name [ , ...  ]\n                [ CASCADE | RESTRICT ]\n```\n\n**语义**\n\nname 指定现有域的名称。如果指定的域不存在（除非IF EXISTS设置），则会引发错误。如果任何对象都依赖此域（除非CASCADE设置了），则会引发错误。\n\nIF EXISTS 如果域不存在，请不要抛出错误。\n\nCASCADE 使用域数据类型自动删除依赖于域的对象（例如表列），然后自动除去依赖于那些对象的所有其他对象。\n\nRESTRICT 如果对象依赖域，则拒绝删除域（默认）。\n\n**例子**\n\n```\nCREATE DOMAIN idx DEFAULT 5 CHECK (VALUE > 0);\nDROP DOMAIN idx;\n```\n\n```\nCREATE DOMAIN idx DEFAULT 5 CHECK (VALUE > 0);\nCREATE TABLE t (k idx primary key);\nDROP DOMAIN idx CASCADE;\n```\n\n## DROP EXTENSION [*link*](#drop-extension)\n\n**概要**\n\n使用DROP EXTENSION语句从数据库中删除扩展名。\n\n**语法**\n\n```\ndrop_extension ::= DROP EXTENSION [ IF EXISTS ]  extension_name\n                   [ , ... ] [ CASCADE | RESTRICT ]\n```\n\n**语义**\n\n* 如果扩展名不存在，除非IF EXISTS使用扩展名，否则将引发错误。然后，发出通知。\n* RESTRICT 是默认值，如果有任何对象依赖扩展名，它将不会删除该扩展名。\n* CASCADE 将删除所有依赖于扩展名的可传递对象。\n\n**例子**\n\n```\nDROP EXTENSION IF EXISTS cube;\n```\n\n```\nCREATE EXTENSION cube;\nCREATE EXTENSION earthdistance;\nDROP EXTENSION IF EXISTS cube RESTRICT;\n```\n\n```\nDROP EXTENSION IF EXISTS cube CASCADE;\n```\n\n## DROP FUNCTION [*link*](#drop-function)\n\n**概要**\n\n使用DROP FUNCTION语句从数据库中删除函数。\n\n**语法**\n\n```\ndrop_function ::= DROP { FUNCTION | PROCEDURE } [ IF  EXISTS ]\n                    { name [ ( [ argtype_decl [ , ... ] ] ) ] }\n                    [ , ... ] [ CASCADE | RESTRICT ]\n\nargtype_decl ::= [ argmode ] [ argname ] argtype\n```\n\n**语义**\n\n* 如果该函数不存在，除非IF EXISTS使用该函数，否则将引发错误。然后发出通知。\n* RESTRICT 是默认值，如果有任何对象依赖该函数，它将不会删除该函数。\n* CASCADE 将会删除所有依赖该功能的对象。\n\n**例子**\n\n```\nDROP FUNCTION IF EXISTS inc(i integer), mul(integer,  integer) CASCADE;\n```\n\n## DROP GROUP [*link*](#drop-group)\n\n**概要**\n\n使用DROP GROUP语句删除角色。DROP GROUP是DROP ROLE的别名\n\n**语法**\n\n```\ndrop_group ::= DROP GROUP [ IF EXISTS ] role_name [ ,  ... ]\n```\n\n**语义**\n\n参阅DROP\\_ROLE.\n\n**例子**\n\n删除一组。\n\n```\nDROP GROUP SysAdmin;\n```\n\n## DROP OPERATOR [*link*](#drop-operator)\n\n**概要**\n\n使用DROP OPERATOR语句删除运算符。\n\n**语法**\n\n```\ndrop_operator ::= DROP OPERATOR [ IF EXISTS ]\n                    { operator_name ( operator_signature ) } [ , ... ]\n                    [ CASCADE | RESTRICT ]\n\noperator_signature ::= { left_type | NONE } , {  right_type | NONE }\n```\n\n**语义**\n\n请参见[PostgreSQL docs] [postgresql-docs-drop-operator]中每个选项的语义。\n\n**例子**\n\n基本示例\n\n```\nCREATE OPERATOR @#@ (\n          rightarg = int8,\n          procedure = numeric_fac\n       );\nDROP OPERATOR @#@ (NONE, int8);\n```\n\n## DROP OPERATOR CLASS [*link*](#drop-operator-class)\n\n**概要**\n\n使用该DROP OPERATOR CLASS语句删除运算符类。\n\n**语法**\n\n```\ndrop_operator_class ::= DROP OPERATOR CLASS [ IF EXISTS  ]\n                          operator_class_name USING index_method\n                          [ CASCADE | RESTRICT ]\n```\n\n**语义**\n\n请参见[PostgreSQL docs] [postgresql-docs-drop-operator-class]中每个选项的语义。\n\n## DROP OWNED [*link*](#drop-owned)\n\n**概要**\n\n使用DROP OWNED语句可删除当前数据库中由指定角色之一拥有的所有数据库对象。在当前数据库或共享对象上授予给定角色的任何特权也将被撤销。\n\n**语法**\n\n```\ndrop_owned ::= DROP OWNED BY role_specification [ , ...  ]\n                  [ CASCADE | RESTRICT ]\n\nrole_specification ::= role_name | CURRENT_USER |  SESSION_USER\n```\n\n**语义**\n\nCASCADE 自动删除依赖于受影响对象的对象。\n\nRESTRICT 这是默认模式，如果还有其他依赖于删除对象的数据库对象，则会引发错误。\n\n**例子**\n\n```\ndrop owned by john;\n```\n\n## DROP POLICY [*link*](#drop-policy)\n\n**概要**\n\n使用该DROP POLICY语句从表中删除指定的行级安全策略。请注意，如果删除了表的所有策略，并且该表仍然具有ENABLE ROW LEVEL SECURITY，则默认的拒绝所有策略将应用于该表。\n\n**语法**\n\n```\ndrop_policy ::= DROP POLICY [ IF EXISTS ] name ON  table_name\n                [ CASCADE | RESTRICT ]\n```\n\n**语义**\n\n* name 是要删除的策略的名称。\n* table\\_name 是该策略所在的表的名称。\n* CASCADE/ RESTRICT没有任何作用，因为表策略没有任何依赖关系。\n\n**例子**\n\n```\nDROP POLICY p1 ON table_foo;\n```\n\n## DROP PROCEDURE [*link*](#drop-procedure)\n\n**概要**\n\n使用DROP PROCEDURE语句从数据库中删除存储过程。\n\n**语法**\n\n```\ndrop_procedure ::= DROP PROCEDURE [ IF EXISTS ]\n                     { name [ ( [ argtype_decl [ , ... ] ] ) ] }\n                     [ , ... ] [ CASCADE | RESTRICT ]\n\nargtype_decl ::= [ argmode ] [ argname ] argtype\n```\n\n**语义**\n\n* 如果该过程不存在，除非IF EXISTS使用该过程，否则将引发错误。然后发出通知。\n* RESTRICT 是默认值，如果有任何对象依赖该过程，它将不会删除该过程。\n* CASCADE 会删除所有依赖该过程的可传递对象。\n\n**例子**\n\n```\nDROP PROCEDURE IF EXISTS transfer(integer, integer, dec) CASCADE;\n```\n\n## DROP ROLE [*link*](#drop-role)\n\n**概要**\n\n使用该DROP ROLE语句删除指定的角色。\n\n**语法**\n\n```\ndrop_role ::= DROP ROLE [ IF EXISTS ] role_name [ , ... ]\n```\n\n**语义**\n\nrole\\_name 是要删除的角色的名称。 要放弃超级用户角色，您必须自己是超级用户。要删除非超级用户角色，您必须具有CREATEROLE特权。\n\n删除角色之前，必须删除其拥有的所有对象（或重新分配其所有权），并撤消已授予该角色在其他对象上的所有特权。REASSIGN OWNED和DROP OWNED命令可被用于此目的。\n\n但是，没有必要删除涉及该角色的角色成员资格。DROP ROLE自动撤销其他角色中目标角色的所有成员身份，以及目标角色中其他角色的成员资格。其他角色不会丢失或受影响。\n\n**例子**\n\n```\nDROP ROLE John;\n```\n\n## DROP RULE [*link*](#drop-rule)\n\n**概要**\n\n使用该DROP RULE语句删除规则。\n\n**语法**\n\n```\ndrop_rule ::= DROP RULE [ IF EXISTS ] rule_name ON  table_name\n              [ CASCADE | RESTRICT ]\n```\n\n**语义**\n\n请参见[PostgreSQL docs] [postgresql-docs-drop-rule]中每个选项的语义。\n\n**例子**\n\n```\nCREATE TABLE t1(a int4, b int4);\nCREATE TABLE t2(a int4, b int4);\nCREATE RULE t1_to_t2 AS ON INSERT TO t1 DO INSTEAD\n             INSERT INTO t2 VALUES (new.a, new.b);\nDROP RULE t1_to_t2 ON t1;\n```\n\n## DROP SEQUENCE [*link*](#drop-sequence)\n\n**概要**\n\n使用该DROP SEQUENCE语句删除当前模式中的序列。\n\n**语法**\n\n```\ndrop_sequence ::= DROP SEQUENCE [ IF EXISTS ]  sequence_name\n                  [ CASCADE | RESTRICT ]\n```\n\n**语义**\n\nsequence\\_name 指定序列的名称。\n\n* 如果除非IF EXISTS指定，否则在当前模式中不存在具有该名称的序列，则会引发错误。\n* 如果任何对象都依赖于此序列，则将引发错误，除非CASCADE指定了该选项。 CASCADE 还删除所有依赖于此顺序的对象（例如DEFAULT，表列中的值）。 RESTRICT 如果有任何对象依赖此序列，请不要删除它。即使未指定，这也是默认行为。\n\n**例子**\n\n```\nCREATE TABLE t(k SERIAL, v INT);\nDROP SEQUENCE t_k_seq;\nDROP SEQUENCE t_k_seq CASCADE;\n```\n\n## DROP TABLE [*link*](#drop-table)\n\n**概要**\n\n使用该DROP TABLE语句从数据库中删除一个或多个表（及其所有数据）。\n\n**语法**\n\n```\ndrop_table  ::= DROP TABLE [ IF EXISTS ] table_name [ , ... ]\n```\n\n**语义**\n\nif\\_exists在正常操作下，如果表不存在，则会引发错误。添加IF EXISTS将静默忽略指定的任何不存在的表。\n\ntable\\_name指定要删除的表的名称。与该表关联的对象（例如，准备好的语句）在该DROP TABLE语句完成之后最终将失效。\n\n## DROP TRIGGER [*link*](#drop-trigger)\n\n**概要**\n\n使用该DROP TRIGGER语句从数据库中删除触发器。\n\n**语法**\n\n```\ndrop_trigger  ::= DROP TRIGGER [ IF EXISTS ] name ON table_name [ CASCADE | RESTRICT ]\n```\n\n**语义**\n\nRESTRICT 是默认值，如果有任何对象依赖触发器，它将引发错误。\n\nCASCADE 将删除所有（暂时地）取决于触发器的对象。\n\n**例子**\n\n```\nDROP  TRIGGER update_moddatetime ON posts;\n```\n\n## DROP TYPE [*link*](#drop-type)\n\n**概要**\n\n使用该DROP TYPE语句从数据库中删除用户定义的类型。\n\n**语法**\n\n```\ndrop_type  ::= DROP TYPE [ IF EXISTS ] type_name [ , ... ] [ CASCADE | RESTRICT ]\n```\n\n**语义**\n\ntype\\_name 指定要删除的用户定义类型的名称。\n\n**例子**\n\n```\nCREATE  TYPE feature_struct AS (id INTEGER, name TEXT);\n\nDROP  TYPE feature_struct;\n```\n\nIF EXISTS 示例。\n\n```\nDROP  TYPE IF EXISTS feature_shell;\n```\n\nCASCADE 示例。\n\n```\nCREATE  TYPE feature_enum AS ENUM ('one', 'two', 'three');\nCREATE TABLE feature_tab_enum (feature_col feature_enum);\nDROP TYPE feature_tab_enum  CASCADE;\n```\n\nRESTRICT 示例。\n\n```\nCREATE  TYPE feature_range AS RANGE (subtype=INTEGER);\nCREATE TABLE feature_tab_range  (feature_col feature_range); -- The following should error: DROP TYPE  feature_range RESTRICT; DROP TABLE feature_tab_range;\nDROP TYPE feature_range  RESTRICT;\n```\n\n## DROP USER [*link*](#drop-user)\n\n**概要**\n\n使用该DROP USER语句删除用户或角色。DROP USER是 DROP ROLE 的别名。\n\n**语法**\n\n```\ndrop_user  ::= DROP USER [ IF EXISTS ] role_name [ , ... ]\n```\n\n**语义**\n\n参看DROP\\_ROLE\n\n**例子**\n\n```\nDROP USER John;\n```\n\n## END [*link*](#end)\n\n**概要**\n\n使用该END语句提交当前事务。事务所做的所有更改对其他人都可见，并且如果崩溃发生，保证可以持久。\n\n**语法**\n\n```\nend  ::= END [ TRANSACTION | WORK ]\n```\n\n## EXECUTE [*link*](#execute)\n\n**概要**\n\n使用该EXECUTE语句执行先前准备的语句。这种分离是一种性能优化，因为准备好的语句将使用不同的值执行多次，而语法和语义分析以及重写在PREPARE处理期间仅执行一次。\n\n**语法**\n\n```\nexecute_statement  ::= EXECUTE name [ ( expression [ , ... ] ) ]\n```\n\n**语义**\n\nname指定要执行的准备好的语句的名称。\n\nexpression指定表达式。中的每个表达式EXECUTE必须与中的对应数据类型匹配PREPARE。\n\n**例子**\n\n创建一个sample表。\n\n```\nCREATE TABLE sample(k1 int, k2 int, v1 int, v2 text, PRIMARY KEY (k1, k2));\n```\n\n执行一次简单插入。\n\n```\nPREPARE  ins (bigint, double precision, int, text) AS INSERT INTO sample(k1, k2, v1,  v2) VALUES ($1, $2, $3, $4);\n```\n\n执行两次插入。\n\n```\nEXECUTE  ins(1, 2.0, 3, 'a'); EXECUTE ins(2, 3.0, 4, 'b');\n```\n\n检查结果。\n\n```\nSELECT * FROM sample ORDER BY k1;\n```\n\n## EXPLAIN [*link*](#explain)\n\n**概要**\n\n使用该EXPLAIN语句显示一条语句的执行计划。如果使用该ANALYZE选项，则将执行该语句，而不仅仅是计划的语句。在这种情况下，执行信息（而不仅仅是计划者的估计）将添加到EXPLAIN结果中。\n\n**语法**\n\n```\nexplain  ::= EXPLAIN [ [ ANALYZE ] [ VERBOSE ] | ( option [ , ... ] ) ] statement\n\noption  ::= ANALYZE [ boolean ] | VERBOSE [ boolean ] | COSTS [ boolean ] | BUFFERS [  boolean ] | TIMING [ boolean ] | SUMMARY [ boolean ] | FORMAT { TEXT | XML |  JSON | YAML }\n```\n\n**语义**\n\nANALYZE执行该语句并显示实际运行时间和其他统计信息。\n\n**例子**\n\n```\nCREATE TABLE sample(k1 int, k2 int, v1 int, v2 text, PRIMARY KEY (k1,  k2));\nINSERT INTO sample(k1, k2, v1, v2) VALUES (1, 2.0, 3, 'a'), (2, 3.0, 4,  'b'), (3, 4.0, 5, 'c'); EXPLAIN SELECT * FROM sample WHERE k1 = 1; QUERY PLAN\n\nForeign  Scan on sample (cost=0.00..112.50 rows=1000 width=44) (1 row)\n```\n\n## GRANT [*link*](#grant)\n\n**概要**\n\n使用该GRANT语句授予对数据库对象的访问特权，并分配角色成员身份。\n\n**语法**\n\n```\ngrant_table  ::= GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES |  TRIGGER } [ , ... ] | ALL [ PRIVILEGES ] } ON { [ TABLE ] table_name [ , ...  ] | ALL TABLES IN SCHEMA schema_name [ , ... ] } TO grant_role_spec [ , ... ]  [ WITH GRANT OPTION ]\n\ngrant_table_col  ::= GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( column_names ) [  ,(column_names ... ] | ALL [ PRIVILEGES ] ( column_names ) } ON { [ TABLE ]  table_name [ , ... ] } TO grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\ngrant_seq  ::= GRANT { { USAGE | SELECT | UPDATE } [ , ... ] | ALL [ PRIVILEGES ] } ON {  SEQUENCE sequence_name [ , ... ] | ALL SEQUENCES IN SCHEMA schema_name [ ,  sequence_name [ ... ] ] } TO grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\ngrant_db  ::= GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [ , ... ] | ALL [  PRIVILEGES ] } ON DATABASE database_name [ , ... ] TO grant_role_spec [ , ...  ] [ WITH GRANT OPTION ]\n\ngrant_domain  ::= GRANT { USAGE | ALL [ PRIVILEGES ] } ON DOMAIN domain_name [ , ... ] TO  grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\ngrant_schema  ::= GRANT { { CREATE | USAGE } [ , ... ] | ALL [ PRIVILEGES ] } ON SCHEMA  schema_name [ , ... ] TO grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\ngrant_type  ::= GRANT { USAGE | ALL [ PRIVILEGES ] } ON TYPE type_name [ , ... ] TO  grant_role_spec [ , ... ] [ WITH GRANT OPTION ]\n\ngrant_role  ::= GRANT role_name [ , ... ] TO role_name [ , ... ] [ WITH ADMIN OPTION ]\n\ngrant_role_spec  ::= [ GROUP ] role_name | PUBLIC | CURRENT_USER | SESSION_USER\n```\n\n**语义**\n\nGRANT 可用于分配数据库对象以及角色成员的特权。\n\nGRANT 在数据库对象上\n\n此GRANT命令的变体用于将数据库对象的特权分配给一个或多个角色。如果使用关键字PUBLIC代替role\\_name，则表示将特权授予所有角色，包括以后可能创建的角色。\n\n如果WITH GRANT OPTION指定，则特权的接收者可以依次将其授予其他人。没有授予选项，接收者将无法做到这一点。授予选项不能授予PUBLIC。\n\n无需授予对象所有者（通常是创建对象的用户）特权，因为默认情况下所有者具有所有特权。（不过，所有者可以出于安全考虑选择撤销自己的某些特权。）\n\n· + SELECT\n\n这允许从指定表，视图或序列的任何或指定列中进行SELECT。它还允许使用COPY TO。在UPDATE或DELETE中引用现有列值时，也需要此特权。\n\n· + INSERT\n\n这允许将新行插入到指定表中。如果列出了特定的列，则只能在INSERT命令中将这些列分配给其他列（因此其他列将接收默认值）。还允许COPY FROM。\n\n· + UPDATE\n\n这允许更新指定表的任何列或列出的特定列。\n\n· + DELETE\n\n这允许从指定表中删除一行。\n\n· + TRUNCATE\n\n这允许在指定的表上执行TRUNCATE。\n\n· + REFERENCES\n\n这允许创建引用指定表或表的指定列的外键约束。\n\n· + TRIGGER\n\n这允许在指定的表上创建触发器。\n\n· + CREATE\n\n对于数据库，这允许在数据库中创建新的架构。\n\n对于模式，这允许在模式内创建新对象。要重命名现有对象，您必须拥有该对象，并对包含的架构具有此特权。\n\n· + CONNECT\n\n这使用户可以连接到指定的数据库。连接启动时检查此特权。\n\n· + TEMPORARY/TEMP\n\n这允许在使用指定的数据库时创建临时表。\n\n· + EXECUTE\n\n允许使用指定的功能或过程，以及使用在该功能之上实现的任何运算符。\n\n· + USAGE\n\n对于模式，这允许访问指定模式中包含的对象（假设还满足对象自己的特权要求）。从本质上讲，这允许被授予者“查询”架构中的对象。\n\n对于序列，此特权允许使用currval()和nextval()函数。\n\n对于类型和域，此特权允许在创建表，函数和其他架构对象时使用类型或域。\n\n· + ALL PRIVILEGES\n\n一次授予所有特权。\n\nGRANT 在角色上的这一变体GRANT用于将一个角色的成员资格授予一个或多个其他角色。如果WITH ADMIN OPTION指定，则成员可以依次将角色的成员身份授予其他人，也可以撤消该角色的成员身份。\n\n**例子**\n\n向表“ stores”上的所有用户授予SELECT特权。\n\n```\nGRANT  SELECT ON stores TO PUBLIC;\n```\n\n将用户John添加到SysAdmins组。\n\n```\nGRANT SysAdmins TO John;\n```\n\n## INSERT [*link*](#insert)\n\n**概要**\n\n使用该INSERT语句将一或多个行添加到指定的表。\n\n**语法**\n\n```\ninsert  ::= [ WITH [ RECURSIVE ] with_query [ , ... ] ] INSERT INTO table_name [ AS  alias ] [ ( column_names ) ]\n{ DEFAULT VALUES | VALUES ( column_values ) [ ,(column_values ... ] |  subquery }\n[ ON CONFLICT [ conflict_target ] conflict_action ]\n[ returning_clause ]\n\nreturning_clause  ::= RETURNING { * | { output_expression [ [ AS ] output_name ] } [ , ... ] }\n\ncolumn_values  ::= { expression | DEFAULT } [ , ... ]\n\nconflict_target  ::= ( { column_name | expression } [ , ... ] ) [ WHERE condition ] | ON  CONSTRAINT constraint_name\n\nconflict_action  ::= DO NOTHING | DO UPDATE SET update_item [ , ... ] [ WHERE condition ]\n```\n\n**语义**\n\ntable\\_name指定表的名称。如果指定的表不存在，则会引发错误。\n\ncolumn\\_names指定以逗号分隔的列名称列表。如果指定的列不存在，则会引发错误。每个主键列都必须具有非null值。\n\nVALUES clause\n\n· 每个值列表必须与列列表具有相同的长度。\n\n· 每个值必须可转换为其相应的（按位置）列类型。\n\n· 每个值文字可以是一个表达式。\n\nON CONFLICT clause\n\n· 目标表必须至少具有一个具有唯一索引或唯一约束的列（列表）。我们将其称为唯一密钥。VALUES的参数是一种关系，必须至少包含目标表的唯一键之一。此唯一键的某些值可能是新值，而其他值可能已存在于目标表中。\n\n· INSERT ON CONFLICT的基本目的是简单地插入具有唯一键的新值的行，并使用唯一键的现有值更新行，以将其余指定列的值设置为VALUES关系中的值。这样，最终效果是插入或更新。因此，“ INSERT ON CONFLICT”变体通常被通俗地称为“ upsert”。\n\n**例子**\n\n基本示例\n\n```\nCREATE  TABLE sample(k1 int, k2 int, v1 int, v2 text, PRIMARY KEY (k1, k2));\n\nINSERT  INTO sample VALUES (1, 2.0, 3, 'a'), (2, 3.0, 4, 'b'), (3, 4.0, 5, 'c');\n\nSELECT  * FROM sample ORDER BY k1;\n```\n\n“ upsert”示例。重新创建并重新填充示例表。\n\n```\nDROP  TABLE IF EXISTS sample CASCADE;\n\nCREATE  TABLE sample( id int CONSTRAINT sample_id_pk PRIMARY KEY, c1 text CONSTRAINT  sample_c1_NN NOT NULL, c2 text CONSTRAINT sample_c2_NN NOT NULL);\n\nINSERT  INTO sample(id, c1, c2) VALUES (1, 'cat' , 'sparrow'), (2, 'dog' ,  'blackbird'), (3, 'monkey' , 'thrush');\n\nSELECT  id, c1, c2 FROM sample ORDER BY id;\n\nINSERT INTO sample(id, c1, c2) VALUES (3,  'horse' , 'pigeon'), (4, 'cow' , 'robin') ON CONFLICT DO NOTHING;\n```\n\n## LOCK [*link*](#lock)\n\n**概要**\n\n使用该LOCK语句锁定表。\n\n**语法**\n\n```\nlock_table  ::= LOCK [ TABLE ] { { [ ONLY ] name [ * ] } [ , ... ] } [ IN lockmode MODE ]  [ NOWAIT ]  lockmode  ::= ACCESS SHARE| ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE | SHARE  | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE\n```\n\n**语义**\n\nname指定要锁定的现有表。\n\nlockmode目前仅支持 ACCESS SHARE 锁模式。\n\n下面列出的所有其他模式正在开发中。\n\nACCESS SHARE | ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE | SHARE | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE\n\n## PREPARE [*link*](#prepare)\n\n**概要**\n\n使用该PREPARE语句创建目标语句句柄。用来分析和重写（但不执行）。\n\n**语法**\n\n```\nprepare_statement ::= PREPARE name [ ( data_type [ ,  ... ] ) ] AS statement\n```\n\n**语义**\n\nPREPARE可能（应该）包含$1将由中的表达式列表提供的参数（例如）EXECUTE。\n\n数据类型列表PREPARE表示语句中使用的参数的类型。\n\n**例子**\n\n```\nCREATE  TABLE sample(k1 int, k2 int, v1 int, v2 text, PRIMARY KEY (k1, k2));\n\nPREPARE  ins (bigint, double precision, int, text) AS INSERT INTO sample(k1, k2, v1,  v2) VALUES ($1, $2, $3, $4);\n\nEXECUTE  ins(1, 2.0, 3, 'a');\n\nEXECUTE  ins(2, 3.0, 4, 'b');\n\nSELECT  * FROM sample ORDER BY k1;\n```\n\n## REASSIGN OWNED [*link*](#reassign-owned)\n\n**概要**\n\n使用该REASSIGN OWNED语句可以将数据库对象的所有权由 old\\_roles改为 new\\_role。\n\n**语法**\n\n```\nreassign_owned  ::= REASSIGN OWNED BY role_specification [ , ... ] TO role_specification\n\nrole_specification  ::= role_name | CURRENT_USER | SESSION_USER\n```\n\n**语义**\n\nREASSIGN OWNED通常用于准备删除角色。它要求源角色和目标角色都具有成员身份。\n\n**例子**\n\n```\nreassign  owned by john to memfire;\n```\n\n## RESET [*link*](#reset)\n\n**概要**\n\n使用该RESET语句将运行时参数的值恢复为默认值。RESET映射到SET configuration\\_parameter TO DEFAULT。\n\n**语法**\n\n```\nreset_stmt  ::= RESET { name | ALL }\n```\n\n**语义**\n\n**configuration\\_parameter**指定可变的运行时参数的名称。\n\n## REVOKE [*link*](#revoke)\n\n**概要**\n\n使用该REVOKE语句删除一个或多个角色的访问权限。\n\n**语法**\n\n```\nrevoke_table  ::= REVOKE [ GRANT OPTION FOR ] { { SELECT | INSERT | UPDATE | DELETE |  TRUNCATE | REFERENCES | TRIGGER } [ , ... ] | ALL [ PRIVILEGES ] } ON { [  TABLE ] table_name [ , ... ] | ALL TABLES IN SCHEMA schema_name [ , ... ] }  FROM { [ GROUP ] role_name | PUBLIC } [ , ... ] [ CASCADE | RESTRICT ]\n\nrevoke_table_col  ::= REVOKE [ GRANT OPTION FOR ] { { SELECT | INSERT | UPDATE | REFERENCES } (  column_names ) [ ,(column_names ... ] | ALL [ PRIVILEGES ] ( column_names ) }  ON [ TABLE ] table_name [ , ... ] FROM { [ GROUP ] role_name | PUBLIC } [ ,  ... ] [ CASCADE | RESTRICT ]\n\nrevoke_seq  ::= REVOKE [ GRANT OPTION FOR ] { { USAGE | SELECT | UPDATE } [ , ... ] | ALL  [ PRIVILEGES ] } ON { SEQUENCE sequence_name [ , ... ] | ALL SEQUENCES IN  SCHEMA schema_name [ , ... ] } FROM { [ GROUP ] role_name | PUBLIC } [ , ...  ] [ CASCADE | RESTRICT ]\n\nrevoke_db  ::= REVOKE [ GRANT OPTION FOR ] { { CREATE | CONNECT | TEMPORARY | TEMP } [ ,  ... ] | ALL [ PRIVILEGES ] } ON DATABASE database_name [ , ... ] FROM { [  GROUP ] role_name | PUBLIC } [ , ... ] [ CASCADE | RESTRICT ]\n\nrevoke_domain  ::= REVOKE [ GRANT OPTION FOR ] { USAGE | ALL [ PRIVILEGES ] } ON DOMAIN  domain_name [ , ... ] FROM { [ GROUP ] role_name | PUBLIC } [ , ... ] [  CASCADE | RESTRICT ]\n\nrevoke_schema  ::= REVOKE [ GRANT OPTION FOR ] { { CREATE | USAGE } [ , ... ] | ALL [  PRIVILEGES ] } ON SCHEMA schema_name [ , ... ] FROM { [ GROUP ] role_name |  PUBLIC } [ , ... ] [ CASCADE | RESTRICT ]\n\nrevoke_type  ::= REVOKE [ GRANT OPTION FOR ] { USAGE | ALL [ PRIVILEGES ] } ON TYPE  type_name [ , ... ] FROM { [ GROUP ] role_name | PUBLIC } [ , ... ] [ CASCADE  | RESTRICT ]\n\nrevoke_role  ::= REVOKE [ ADMIN OPTION FOR ] role_name [ , ... ] FROM role_name [ , ... ]  [ CASCADE | RESTRICT ]\n```\n\n**语义**\n\n任何角色都有分配给它的所有特权的总和。所以，如果REVOKE是用于撤消SELECT从PUBLIC，那么它并不意味着所有角色都失去SELECT特权。如果角色已SELECT直接授予或通过组继承，则它可以继续保留SELECT特权。\n\n如果GRANT OPTION FOR指定，则仅撤销特权的授予选项，而不撤销特权本身。否则，特权和授予选项都将被吊销。\n\n同样，在撤消角色时（如果ADMIN OPTION FOR已指定），则仅撤消特权的admin选项。\n\n如果一个用户拥有带有授予选项的特权，并且已经将其授予其他用户，则如果CASCADE指定了特权，则从第一个用户撤消该特权也会从相关用户撤消它。否则，REVOKE将失败。\n\n撤消表的特权时，表的每一列也会自动撤消相应的列特权（如果有）。另一方面，如果已向角色授予表特权，则从各个列中撤消相同特权将无效。\n\n**例子**\n\n```\nREVOKE  SELECT ON stores FROM PUBLIC; REVOKE SysAdmins FROM John;\n```\n\n## ROLLBACK [*link*](#rollback)\n\n**概要**\n\n使用该ROLLBACK语句回滚当前事务。此事务中包含的所有更改将被丢弃。\n\n**语法**\n\n```\nrollback  ::= ROLLBACK [ TRANSACTION | WORK ]\n```\n\n**语义**\n\nWORK可选\n\nTRANSACTION可选\n\n## SELECT [*link*](#select)\n\n**概要**\n\n使用该SELECT语句从表中检索满足给定条件的指定列的行。它指定要检索的列，表的名称以及每个选定行必须满足的条件。\n\n无论您在何处使用子查询，都可以使用相同的语法规则（例如在INSERTstatement中）。某些语法点（例如，WHERE子句谓词或诸如的函数的实际参数）sqrt()仅允许标量子查询。\n\n**语法**\n\n```\nselect  ::= [ WITH [ RECURSIVE ] { with_query [ , ... ] } ] SELECT [ ALL | DISTINCT [  ON { ( expression [ , ... ] ) } ] ] [ * | { { expression | fn_over_window } [  [ AS ] name ] } [ , ... ] ] [ FROM { from_item [ , ... ] } ]\n[ WHERE condition ]\n[ GROUP BY { grouping_element [ , ... ] } ]\n[ HAVING { condition [ , ... ] } ]\n[ WINDOW { { name AS window_definition } [ , ... ] } ]\n[ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ] [ ORDER BY {  order_expr [ , ... ] } ]\n[ LIMIT [ integer | ALL ] ]\n[ OFFSET integer [ ROW | ROWS ] ]\n\nfn_over_window  ::= fn_invocation [ FILTER ( WHERE { boolean_expression [ , ... ] } ) ] OVER  { window_definition | name }\n\norder_expr  ::= expression [ ASC | DESC | USING operator_name ] [ NULLS { FIRST | LAST }  ]\n```\n\n**语义**\n\n如果指定的table\\_name不存在，则会引发错误。\n\n\\*代表所有列。\n\n尽管where子句允许使用多种运算符，但是where子句中使用的确切条件具有重要的性能考虑因素（尤其是对于大型数据集）。\n\ncondition指定一个计算结果为布尔值的表达式。\n\n有关详细信息from\\_item，grouping\\_element以及with\\_query看到SELECT 在PostgreSQL文档中。\n\n**例子**\n\n```\nCREATE  TABLE sample1(k1 bigint, k2 float, v text, PRIMARY KEY (k1, k2));\n\nCREATE  TABLE sample2(k1 bigint, k2 float, v text, PRIMARY KEY (k1, k2));\n\nINSERT  INTO sampleINSERT INTO sample2(k1, k2, v) VALUES (1, 2.5, 'foo'), (1, 4.5,  'bar');\n\nINSERT INTO sample2(k1, k2, v) VALUES (1,  2.5, 'foo'), (1, 4.5, 'bar');\n\nSELECT  a.k1, a.k2, a.v as av, b.v as bv FROM sample1 a LEFT JOIN sample2 b ON (a.k1  = b.k1 and a.k2 = b.k2) WHERE a.k1 = 1 AND a.k2 IN (2.5, 3.5) ORDER BY a.k2  DESC;\n```\n\n## SET [*link*](#set)\n\n**概要**\n\n使用该SET语句更新运行时控制参数。\n\n**语法**\n\n```\nset  ::= SET [ SESSION | LOCAL ] { configuration_parameter { TO | = } { value |  DEFAULT } | TIME ZONE { timezone | LOCAL | DEFAULT } }\n```\n\n**语义**\n\n尽管可以设置，显示和重置参数的值，但MemFire尚不支持这些参数的效果。目前将使用默认设置和行为。\n\nSESSION指定该命令仅影响当前会话。\n\nLOCAL指定该命令仅影响当前事务。COMMIT或之后ROLLBACK，会话级设置再次生效。\n\nconfiguration\\_parameter指定可变的运行时参数的名称。\n\nvalue指定参数的新值。\n\n## SET CONSTRAINTS [*link*](#set-constraints)\n\n**概要**\n\n使用该SET CONSTRAINTS语句设置当前事务中约束检查的时间。\n\n**语法**\n\n```\nset_constraints  ::= SET CONSTRAINTS { ALL | name [ , ... ] } { DEFERRED | IMMEDIATE }\n```\n\n**语义**\n\nSET CONSTRAINTS语句中的属性符合SQL标准中定义的行为，但不适用于NOT NULL和CHECK约束。\n\nSET CONSTRAINTS { ALL | \\*name [ , … ] } { DEFERRED | IMMEDIATE }\n\nALL更改所有可延迟约束的模式。\n\nname指定约束名称之一或列表。\n\nDEFERRED将约束设置为在事务提交之前不检查约束。\n\n除非标记，否则立即检查唯一性和排除约束DEFERRABLE。\n\nIMMEDIATE设置约束以追溯生效。\n\n## SET ROLE [*link*](#set-role)\n\n**概要**\n\n使用该SET ROLE语句将当前会话的当前用户设置为指定用户。\n\n**语法**\n\n```\nset_role  ::= SET [ SESSION | LOCAL ] ROLE { role_name | NONE } reset_role ::= RESET  ROLE\n```\n\n**语义**\n\n指定role\\_name的角色必须是当前会话用户所属的角色。超级用户可以设置为任何角色。一旦将角色设置为role\\_name，任何其他SQL命令将使用该角色可用的特权。\n\n将角色重置回当前用户，RESET ROLE或SET ROLE NONE可以使用。\n\n**例子**\n\n换上新角色约翰\n\n```\nselect  session_user, current_user;\n\nset  role john;\n\nselect  session_user, current_user;\n```\n\n## SET SESSION AUTHORIZATION [*link*](#set-session-authorization)\n\n**概要**\n\n使用该SET SESSION AUTHORIZATION语句将当前会话的当前用户和会话用户设置为指定用户。\n\n**语法**\n\n```\nset_session_authorization  ::= SET [ SESSION | LOCAL ] SESSION AUTHORIZATION { role_name | DEFAULT }\n\nreset_session_authorization  ::= RESET SESSION AUTHORIZATION\n```\n\n**语义**\n\n会话用户只能由超级用户更改。一旦role\\_name将会话用户设置为，任何其他SQL命令将使用该角色可用的特权。\n\n可以将会话用户重置为当前经过身份验证的用户，RESET SESSION AUTHORIZATION或者SET SESSION AUTHORIZATION DEFAULT可以使用。\n\n**例子**\n\n将会话用户设置为John。\n\n```\nSet session user to John.\n\nselect  session_user, current_user;\n\nSET  select session_user, current_user;\n```\n\n## SET TRANSACTION [*link*](#set-transaction)\n\n**概要**\n\n使用该SET TRANSACTION语句设置当前事务隔离级别。\n\n**语法**\n\n```\nset  ::= SET [ SESSION | LOCAL ] { configuration_parameter { TO | = } { value |  DEFAULT } | TIME ZONE { timezone | LOCAL | DEFAULT } }\n```\n\n**语义**\n\n***\\*transaction\\_mode\\****\n\n将事务处理模式设置为以下之一。\n\n· ISOLATION LEVEL 条款\n\n· 存取方式\n\n· DEFERRABLE 模式\n\n**ISOLATION LEVEL clause**\n\n+ SERIALIZABLE\n\n+ REPEATABLE READ\n\n+ READ COMMITTED\n\n+ READ UNCOMMITTED\n\n**READ WRITE** **模式**\n\n默认该模式\n\n**READ ONLY** **模式**\n\n该READ ONLY模式不会阻止所有写入磁盘。\n\n当事务为时READ ONLY，以下SQL语句：\n\n+ 如果他们要写入的表不是临时表，则不允许使用。\n\n+ INSERT\n\n+ UPDATE\n\n+ DELETE\n\n+ COPY FROM\n\n+ 一律禁止\n\n+ COMMENT\n\n+ GRANT\n\n+ REVOKE\n\n+ TRUNCATE\n\n+ 当将要执行的语句是上述之一时，不允许使用\n\n+ EXECUTE\n\n+ EXPLAIN ANALYZE\n\n***\\*DEFERRABLE mode\\****\n\n仅当同时选择SERIALIZABLE和READ ONLY模式时，才用于延迟事务。如果使用该事务，则该事务在首次获取其快照时可能会阻塞，此后它可以在没有SERIALIZABLE事务的正常开销的情况下运行，并且没有任何导致序列化失败或被序列化失败取消的风险。\n\n该DEFERRABLE模式对于长时间运行的报告或备份可能很有用。\n\n**例子**\n\n```\nCREATE TABLE sample(k1 int, k2 int, v1 int, v2 text,  PRIMARY KEY (k1, k2));\nBEGIN TRANSACTION;\nSET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\nINSERT INTO sample(k1, k2, v1, v2) VALUES (1, 2.0, 3,  'a'), (1, 3.0, 4, 'b');\nCOMMIT TRANSACTION; -- run in first shell.\n```\n\n## SHOW [*link*](#show)\n\n**概要**\n\n使用该SHOW语句显示运行时参数的值。\n\n**语法**\n\n```\nshow_stmt  ::= SHOW { name | ALL }\n```\n\n**语义**\n\nconfiguration\\_parameter指定要显示的参数的名称。\n\nALL显示所有配置参数的值以及说明。\n\n## SHOW TRANSACTION [*link*](#show-transaction)\n\n**概要**\n\n使用该SHOW TRANSACTION语句显示当前的事务隔离级别。\n\n**语法**\n\n```\nshow_transaction  ::= SHOW TRANSACTION ISOLATION LEVEL\n```\n\n**语义**\n\n在TRANSACTION ISOLATION LEVEL返回的要么是SERIALIZABLE或REPEATABLE READS。在MemFire中，PostgreSQL 的READ COMMITTED和READ UNCOMMITTED映射到REPEATABLE READS。\n\n## TRUNCATE [*link*](#truncate)\n\n**概要**\n\n使用该TRUNCATE语句清除表中的所有行。\n\n**语法**\n\n```\ntruncate  ::= TRUNCATE [ TABLE ] { { [ ONLY ] name [ * ] } [ , ... ] }\n```\n\n**语义**\n\nname指定要截断的表的名称。\n\nTRUNCATE获取ACCESS EXCLUSIVE锁。在ACCESS EXCLUSIVE 锁 还没有完全支持。\n\nTRUNCATE 外部表不支持。\n\n**例子**\n\n```\nCREATE TABLE sample(k1 int, k2 int, v1 int, v2 text,  PRIMARY KEY (k1, k2));\nINSERT INTO sample VALUES (1, 2.0, 3, 'a'), (2, 3.0, 4,  'b'), (3, 4.0, 5, 'c');\nSELECT * FROM sample ORDER BY k1;\nTRUNCATE sample; SELECT * FROM sample;\n```\n\n## UPDATE [*link*](#update)\n\n**概要**\n\n使用UPDATE语句修改满足某些条件的所有行中指定列的值，并且当WHERE子句中未提供条件时，将更新所有行。UPDATE输出要更新的行数。\n\n**语法**\n\n```\nupdate  ::= [ WITH [ RECURSIVE ] with_query [ , ... ] ] UPDATE [ ONLY ] table_name [  * ] [ [ AS ] alias ] SET update_item [ , ... ] [ WHERE condition | WHERE  CURRENT OF cursor_name ] [ returning_clause ]\n\nreturning_clause  ::= RETURNING { * | { output_expression [ [ AS ] output_name ] } [ , ... ] }\n\nupdate_item  ::= column_name = column_value | ( column_names ) = [ ROW ] ( column_values )  | ( column_names ) = ( query )\n\ncolumn_values  ::= { expression | DEFAULT } [ , ... ]\n\ncolumn_names  ::= column_name [ , ... ]\n```\n\n**语义**\n\n尚不支持更新包含PRIMARY KEY的索引键一部分的列。\n\n尽管该WHERE子句允许使用多种运算符，但是where子句中使用的确切条件具有重要的性能考虑因素（尤其是对于大型数据集）。为了获得最佳性能，请使用WHERE为PRIMARY KEY或中的所有列提供值的子句INDEX KEY。\n\nwith\\_query指定在UPDATE语句中按名称引用的子查询。\n\ntable\\_name指定要更新的表的名称\n\nalias在UPDATE语句中指定目标表的标识符。指定别名后，必须使用别名代替语句中的实际表。\n\ncolumn\\_name在表中指定要更新的列。\n\nexpression指定要分配给列的值。当表达式引用一列时，该列的旧值用于评估。\n\noutput\\_expression指定要返回的值。当output\\_expression引用一列时，该列的新值（更新值）用于评估。\n\nsubquery指定SELECT子查询语句。其选择的值将分配给指定的列。\n\n**例子**\n\n```\nCREATE  TABLE sample(k1 int, k2 int, v1 int, v2 text, PRIMARY KEY (k1, k2));\n\nINSERT  INTO sample VALUES (1, 2.0, 3, 'a'), (2, 3.0, 4, 'b'), (3, 4.0, 5, 'c');\n\nSELECT  * FROM sample ORDER BY k1; UPDATE sample SET v1 = v1 + 3, v2 = '7' WHERE k1 =  2 AND k2 = 3;\n\nSELECT  * FROM sample ORDER BY k1;\n```\n\n---\n\n[*navigate\\_before* 数据类型](/docs/db/guides/data-type/)\n\n[函数与操作 *navigate\\_next*](/docs/db/guides/functions-and-operations/)"
}