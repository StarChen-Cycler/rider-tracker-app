{
  "url": "https://docs.memfiredb.com/docs/db/guides/data-type/",
  "title": "数据类型 | MemFire Cloud在线文档",
  "depth": 1,
  "timestamp": "2025-08-12 17:57:21",
  "html": "<main class=\"page-content bg-transparent\">\n<div class=\"top-header d-print-none\" id=\"top-header\">\n<div class=\"header-bar d-flex justify-content-between\">\n<div class=\"d-flex align-items-center\">\n<a alt=\"HomePage\" aria-label=\"HomePage\" class=\"logo-icon me-3\" href=\"/\">\n<div class=\"small\">\n<!--?xml version=\"1.0\" encoding=\"UTF-8\"?-->\n<svg height=\"112px\" version=\"1.1\" viewbox=\"0 0 99 112\" width=\"99px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<title>MemFireDB备份 6</title>\n<defs>\n<lineargradient id=\"linearGradient-1\" x1=\"49.9999885%\" x2=\"49.9999885%\" y1=\"98.082503%\" y2=\"0.766550128%\">\n<stop offset=\"0%\" stop-color=\"#ED1C23\"></stop>\n<stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop>\n</lineargradient>\n</defs>\n<g fill=\"none\" fill-rule=\"evenodd\" id=\"定稿\" stroke=\"none\" stroke-width=\"1\">\n<g id=\"MemFireDB备份-6\">\n<polygon fill=\"#F9AE7C\" id=\"Fill-1\" points=\"25.9728553 40.7912363 47.4268317 0.00591833831 1.15453123 26.7215251\"></polygon>\n<polygon fill=\"#F9AE7C\" id=\"Fill-3\" points=\"97.4213117 26.7267606 51.1285247 0.000910513587 72.4242993 40.8351686\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-5\" points=\"24.8347133 42.7618153 0.000455256793 28.682999 0.000455256793 82.1608764\"></polygon>\n<polygon fill=\"url(#linearGradient-1)\" id=\"Fill-7\" points=\"27.6634514 42.4662399 49.279044 109.05096 70.7296059 42.507213 49.2779058 1.3747617\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-9\" points=\"98.5660549 28.6951771 73.5622137 42.8047233 98.5660549 82.1719163\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-13\" points=\"72.2987623 45.061545 50.7514582 111.900071 97.579172 84.8646465\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-15\" points=\"26.1006687 45.0226206 0.987565799 84.8644188 47.8095888 111.898705\"></polygon>\n<path d=\"M60.0737516,38.507213 C59.3168872,35.669825 57.0462939,33.3514298 57.0462939,33.3514298 C57.0462939,33.3514298 57.0804382,35.8849338 56.2894295,37.513615 C55.4847631,39.1696116 53.8765685,40.3054773 53.8765685,40.3054773 C53.8765685,40.3054773 56.1016361,33.8840802 54.2715038,30.1247973 C52.0259496,25.5073552 49.1771803,23.3357803 49.1771803,23.3357803 C49.1771803,23.3357803 50.1070423,28.1319107 48.6240432,31.5065016 C47.1672215,34.8264618 42.8058614,36.7260208 40.7241997,38.7132167 C39.1865699,40.1791435 38.0814341,43.0711623 37.6068289,44.4847347 C37.5715465,44.5883056 37.560165,44.6918765 37.5533362,44.7943093 C37.584066,43.9816759 37.8890881,39.8024186 40.9654858,37.4293925 C43.8404325,35.2111538 41.2431925,30.3478731 41.2431925,30.3478731 C41.2431925,30.3478731 41.7212121,32.5638355 40.9939394,34.1401622 C40.2655285,35.7153507 38.7187936,36.5962726 38.0154218,38.259098 C37.3883056,39.7409589 37.5203301,44.1432921 37.5453692,44.8409731 C37.5453692,44.8591834 37.5476455,44.8762555 37.5476455,44.8921895 C37.5476455,44.9263338 37.5487836,44.9456822 37.5487836,44.9456822 L37.5487836,44.9115379 C37.5590269,45.2655001 37.7138142,45.6080808 37.9972116,45.8448143 L48.3713757,55.6442168 C48.8380139,56.0323232 49.5163466,56.0334614 49.9841229,55.6476312 L60.5938825,45.7105136 C60.9034571,45.4544316 61.0719021,45.0686015 61.0457249,44.6656992 C60.9546735,43.2282259 60.5699815,40.3692133 60.0737516,38.507213\" fill=\"#FFFFFF\" id=\"Fill-17\"></path>\n</g>\n</g>\n</svg>\n</div>\n<div class=\"big\">\n<svg height=\"20\" width=\"232\" xmlns=\"http://www.w3.org/2000/svg\"><defs><lineargradient id=\"a\" x1=\"50%\" x2=\"50%\" y1=\"98.083%\" y2=\".767%\"><stop offset=\"0%\" stop-color=\"#ED1C23\"></stop><stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop></lineargradient></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M78.622 12.384l1.596 21.94H77.49l-.847-14.154-8.98 15.523-4.899-15.53-4.416 14.162H55.6l7.085-21.871 5.712 17.174 10.224-17.244zm99.46.382l.324.01.454.036c.085.008.175.018.269.03l.61.096c1.09.203 2.518.644 3.883 1.596l.515.383-.46 3.694-.413-.62-.154-.195-.255-.285c-.765-.802-2.485-2.188-5.23-2.188-4.55 0-8.723 3.809-9.3 8.491-.287 2.311.334 4.469 1.755 6.077 1.342 1.517 3.257 2.354 5.39 2.354 2.606 0 4.58-1.225 5.606-2.04l.359-.3.424-.408.507-.552-.466 3.766-.093.06a12.622 12.622 0 01-4.577 1.842l-.629.1-.53.058-.418.027-.444.003c-2.918-.002-5.532-1.142-7.36-3.21-1.851-2.096-2.67-4.88-2.305-7.837.73-5.88 5.964-10.696 11.806-10.974l.732-.014zm18.174 9.018c1.724 0 3.344.713 4.443 1.956 1.101 1.248 1.59 2.88 1.377 4.596-.432 3.504-3.808 6.466-7.375 6.466-1.728 0-3.348-.715-4.45-1.96-1.096-1.242-1.583-2.864-1.377-4.563.44-3.52 3.818-6.495 7.382-6.495zm19.446.535l-1.486 12.02h-2.558l.16-1.292c-.936.93-2.462 1.755-4.173 1.755-1.318 0-2.48-.492-3.267-1.385-.804-.91-1.168-2.184-1.008-3.497l.9-7.274 2.597-.327-.914 7.402c-.101.785.084 1.466.525 1.968.49.552 1.27.845 2.25.845 1.526 0 3.3-1.155 3.51-2.873l.87-7.015 2.594-.327zm-63.587-.547c1.77 0 3.21.58 4.164 1.678 1.047 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.806 0 2.878-.434 3.868-.961l1.119-.623-.312 2.522-.106.06c-1.224.687-2.604 1.356-4.8 1.356-2.092 0-3.873-.708-5.006-1.992-.991-1.12-1.404-2.599-1.198-4.272.548-4.433 4.001-6.751 7.124-6.751zm-62.717 0c1.771 0 3.211.58 4.164 1.678 1.048 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.622 0 2.652-.35 3.563-.803l.594-.315.83-.466-.312 2.522-.105.06c-1.224.687-2.604 1.356-4.8 1.356-2.093 0-3.874-.708-5.007-1.992-.99-1.12-1.404-2.599-1.197-4.272.547-4.433 4-6.751 7.123-6.751zM231.476 12l-2.767 22.34h-2.556l.197-1.59c-1.104 1.191-2.882 2.021-4.471 2.021-1.781 0-3.24-.583-4.217-1.69-1.02-1.151-1.452-2.817-1.222-4.686.485-3.908 3.43-6.636 7.167-6.636 1.565 0 3.065.832 3.852 2.064l1.356-10.968 2.661-.855zm-42.07.002L186.64 34.34h-2.556l2.664-21.483 2.66-.854zm-56.632 1.268l-1.166 2.527h-9.586l-.85 6.867h6.627v.48h-.12l-.883 1.778v.24h-5.933l-1.138 9.163h-2.729l2.612-21.055h13.166zm2.715 9.038l-1.497 12.017h-2.559l1.455-11.722 2.601-.295zm-24.427-.537c1 0 1.93.427 2.616 1.204.84.95 1.224 2.29 1.053 3.677l-.955 7.673h-2.527l.922-7.445c.13-1.017-.027-1.81-.45-2.287-.326-.367-.815-.554-1.458-.554-1.954 0-3.178 1.346-3.332 2.613l-.955 7.673h-2.556l.922-7.445c.127-1.03-.024-1.826-.442-2.297-.319-.362-.801-.544-1.437-.544-1.522 0-3.3 1.166-3.516 2.901l-.912 7.385h-2.559l1.455-11.722 2.594-.295-.146 1.164c1.027-1.077 2.419-1.701 3.854-1.701 1.375 0 2.58.79 3.226 2.083.914-1.13 2.05-2.083 4.603-2.083zm29.487.532l-.206 1.73c1.082-.978 2.932-1.7 4.514-1.7h.269l-.271 2.282h-.214c-1.814 0-4.469.837-4.7 2.7l-.866 7.01h-2.558l1.45-11.693 2.582-.329zm55.47 1.865c-2.31 0-4.27 1.792-4.563 4.168-.144 1.145.15 2.196.824 2.957.64.725 1.586 1.126 2.656 1.126 2.292 0 4.241-1.78 4.532-4.14.146-1.169-.144-2.237-.821-3.003-.634-.715-1.567-1.108-2.628-1.108zm27.497-.029c-2.278 0-4.15 1.752-4.45 4.17-.149 1.187.137 2.255.8 3.006.611.692 1.526 1.076 2.57 1.076 2.294 0 4.173-1.743 4.468-4.143.152-1.21-.13-2.285-.79-3.033-.623-.704-1.52-1.076-2.598-1.076zm-134.356.045c-1.89 0-3.372 1.094-4.015 2.947h7.164a2.853 2.853 0 00-.71-1.956c-.574-.648-1.416-.991-2.439-.991zm62.715 0c-1.892 0-3.37 1.094-4.013 2.947h7.166a2.867 2.867 0 00-.713-1.956c-.573-.648-1.416-.991-2.44-.991zm-17.267-7.614c.919 0 1.706.748 1.754 1.668a1.587 1.587 0 01-1.603 1.692c-.917 0-1.704-.75-1.754-1.668a1.593 1.593 0 011.603-1.692z\" fill=\"#116\"></path><path d=\"M11.131 17.482L20.326.002.495 11.453zm30.621-6.028L21.912 0l9.127 17.5z\" fill=\"#F9AE7C\"></path><path d=\"M10.643 18.326L0 12.293v22.919z\" fill=\"#F9904A\"></path><path d=\"M11.856 18.2l9.264 28.536 9.193-28.519L21.119.59z\" fill=\"url(#a)\"></path><path d=\"M42.243 12.298l-10.716 6.047 10.716 16.872z\" fill=\"#F9904A\"></path><path d=\"M30.985 19.312l-9.234 28.645L41.82 36.371zm-19.799-.017L.423 36.37 20.49 47.957z\" fill=\"#FB6D33\"></path><path d=\"M25.746 16.503c-.324-1.216-1.298-2.21-1.298-2.21s.015 1.086-.324 1.784c-.345.71-1.034 1.197-1.034 1.197s.954-2.752.17-4.363c-.963-1.98-2.184-2.91-2.184-2.91s.398 2.056-.237 3.502c-.624 1.423-2.494 2.237-3.386 3.088-.659.629-1.132 1.868-1.336 2.474a.509.509 0 00-.023.133c.013-.349.144-2.14 1.463-3.157 1.232-.95.119-3.035.119-3.035s.205.95-.107 1.625c-.312.676-.975 1.053-1.277 1.766-.268.635-.212 2.522-.201 2.82v.023l.001.022v-.014a.54.54 0 00.193.4l4.446 4.2c.2.166.49.166.69.001l4.548-4.259a.535.535 0 00.193-.448c-.039-.616-.203-1.84-.416-2.639\" fill=\"#FFF\"></path></g></svg>\n</div>\n</a>\n<button class=\"btn btn-icon btn-soft\" id=\"close-sidebar\">\n<span class=\"material-icons size-20 menu-icon align-middle\">menu</span>\n</button>\n</div>\n<div class=\"d-flex align-items-center\">\n<ul class=\"list-unstyled mb-0\">\n</ul>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://memfiredb.com/\" target=\"_blank\" type=\"button\">官网</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://community.memfiredb.com/\" target=\"_blank\" type=\"button\">论坛</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://cloud.memfiredb.com/auth/login\" target=\"_blank\" type=\"button\">登录</a>\n<button aria-label=\"Toggle user interface mode\" class=\"btn btn-icon btn-default ms-2\" id=\"mode\" type=\"button\">\n<span class=\"toggle-dark\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable dark mode</title>\n<path d=\"M24 42q-7.5 0-12.75-5.25T6 24q0-7.5 5.25-12.75T24 6q.4 0 .85.025.45.025 1.15.075-1.8 1.6-2.8 3.95-1 2.35-1 4.95 0 4.5 3.15 7.65Q28.5 25.8 33 25.8q2.6 0 4.95-.925T41.9 22.3q.05.6.075.975Q42 23.65 42 24q0 7.5-5.25 12.75T24 42Zm0-3q5.45 0 9.5-3.375t5.05-7.925q-1.25.55-2.675.825Q34.45 28.8 33 28.8q-5.75 0-9.775-4.025T19.2 15q0-1.2.25-2.575.25-1.375.9-3.125-4.9 1.35-8.125 5.475Q9 18.9 9 24q0 6.25 4.375 10.625T24 39Zm-.2-14.85Z\"></path>\n</svg>\n</span>\n<span class=\"toggle-light\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable light mode</title>\n<path d=\"M24 31q2.9 0 4.95-2.05Q31 26.9 31 24q0-2.9-2.05-4.95Q26.9 17 24 17q-2.9 0-4.95 2.05Q17 21.1 17 24q0 2.9 2.05 4.95Q21.1 31 24 31Zm0 3q-4.15 0-7.075-2.925T14 24q0-4.15 2.925-7.075T24 14q4.15 0 7.075 2.925T34 24q0 4.15-2.925 7.075T24 34ZM3.5 25.5q-.65 0-1.075-.425Q2 24.65 2 24q0-.65.425-1.075Q2.85 22.5 3.5 22.5h5q.65 0 1.075.425Q10 23.35 10 24q0 .65-.425 1.075-.425.425-1.075.425Zm36 0q-.65 0-1.075-.425Q38 24.65 38 24q0-.65.425-1.075.425-.425 1.075-.425h5q.65 0 1.075.425Q46 23.35 46 24q0 .65-.425 1.075-.425.425-1.075.425ZM24 10q-.65 0-1.075-.425Q22.5 9.15 22.5 8.5v-5q0-.65.425-1.075Q23.35 2 24 2q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 10 24 10Zm0 36q-.65 0-1.075-.425-.425-.425-.425-1.075v-5q0-.65.425-1.075Q23.35 38 24 38q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 46 24 46ZM12 14.1l-2.85-2.8q-.45-.45-.425-1.075.025-.625.425-1.075.45-.45 1.075-.45t1.075.45L14.1 12q.4.45.4 1.05 0 .6-.4 1-.4.45-1.025.45-.625 0-1.075-.4Zm24.7 24.75L33.9 36q-.4-.45-.4-1.075t.45-1.025q.4-.45 1-.45t1.05.45l2.85 2.8q.45.45.425 1.075-.025.625-.425 1.075-.45.45-1.075.45t-1.075-.45ZM33.9 14.1q-.45-.45-.45-1.05 0-.6.45-1.05l2.8-2.85q.45-.45 1.075-.425.625.025 1.075.425.45.45.45 1.075t-.45 1.075L36 14.1q-.4.4-1.025.4-.625 0-1.075-.4ZM9.15 38.85q-.45-.45-.45-1.075t.45-1.075L12 33.9q.45-.45 1.05-.45.6 0 1.05.45.45.45.45 1.05 0 .6-.45 1.05l-2.8 2.85q-.45.45-1.075.425-.625-.025-1.075-.425ZM24 24Z\"></path>\n</svg>\n</span>\n</button>\n</div>\n</div>\n</div>\n<div class=\"container-fluid\">\n<div class=\"layout-spacing\">\n<div class=\"d-md-flex justify-content-between align-items-center\"></div>\n<div class=\"row flex-xl-nowrap\">\n<div class=\"docs-toc col-xl-3 d-xl-block\"><toc>\n<div class=\"fw-bold text-uppercase mb-2\">本页</div>\n\n</toc></div>\n<div class=\"docs-toc-mobile d-print-none d-xl-none\">\n<button aria-expanded=\"false\" class=\"btn-secondary dropdown-toggle\" data-bs-offset=\"0,0\" data-bs-toggle=\"dropdown\" id=\"toc-dropdown-btn\" type=\"button\">数据类型汇总</button>\n</div>\n<div class=\"docs-content col-12 col-xl-9 mt-0\">\n<div class=\"mb-0 d-flex\">\n<h1 class=\"content-title mb-0\">\n                                                    数据类型\n                                                    \n                                                </h1>\n</div>\n<div class=\"main-content\" data-bs-root-margin=\"0px 0px -65%\" data-bs-spy=\"scroll\" data-bs-target=\"#toc-mobile\" id=\"content\">\n<div data-prismjs-copy=\"\" data-prismjs-copy-error=\"\" data-prismjs-copy-success=\"\">\n<h2 id=\"数据类型汇总\">数据类型汇总 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e6%b1%87%e6%80%bb\"><i class=\"material-icons align-middle\">link</i></a></h2><p>下表列出了MemFireDB支持的原始和复合数据类型。显示了所有内建的普通数据类型。大部分在“别名”列里列出的可选名字都是因历史原因在内部使用的名字。</p>\n<p><strong>表 数据类型</strong></p>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th>数据类型</th>\n<th>别名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bigint</td>\n<td>int8</td>\n<td>有符号8字节整数</td>\n</tr>\n<tr>\n<td>bigserial</td>\n<td>serial8</td>\n<td>自动增长的8字节整数</td>\n</tr>\n<tr>\n<td><code>bit [ (n) ]</code></td>\n<td></td>\n<td>定长位串</td>\n</tr>\n<tr>\n<td><code>bit varying [ (n) ] </code></td>\n<td>varbit [ (n) ]</td>\n<td>变长位串</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>bool</td>\n<td>逻辑布尔值（真/假）</td>\n</tr>\n<tr>\n<td><code>box </code></td>\n<td></td>\n<td>平面上的普通方框</td>\n</tr>\n<tr>\n<td>bytea</td>\n<td></td>\n<td>二进制数据（“字节数组”）</td>\n</tr>\n<tr>\n<td>character [ (n) ]</td>\n<td>char [ (n) ]</td>\n<td>定长字符串</td>\n</tr>\n<tr>\n<td>character varying  [ (n) ]</td>\n<td>varchar [ (n) ]</td>\n<td>变长字符串</td>\n</tr>\n<tr>\n<td><code>cidr </code></td>\n<td></td>\n<td>IPv4或IPv6网络地址</td>\n</tr>\n<tr>\n<td><code>circle  </code></td>\n<td></td>\n<td>平面上的圆</td>\n</tr>\n<tr>\n<td>date</td>\n<td></td>\n<td>日历日期（年、月、日）</td>\n</tr>\n<tr>\n<td>double precision</td>\n<td>float8</td>\n<td>双精度浮点数（8字节）</td>\n</tr>\n<tr>\n<td><code>inet  </code></td>\n<td></td>\n<td>IPv4或IPv6主机地址</td>\n</tr>\n<tr>\n<td>integer</td>\n<td>int， int4</td>\n<td>有符号4字节整数</td>\n</tr>\n<tr>\n<td>interval  [ fields ] [ (p) ]</td>\n<td></td>\n<td>时间段</td>\n</tr>\n<tr>\n<td><code>json </code></td>\n<td></td>\n<td>文本JSON数据</td>\n</tr>\n<tr>\n<td><code>jsonb  </code></td>\n<td></td>\n<td>二进制JSON数据，已分解</td>\n</tr>\n<tr>\n<td><code>line  </code></td>\n<td></td>\n<td>平面上的无限长的线</td>\n</tr>\n<tr>\n<td><code>lseg  </code></td>\n<td></td>\n<td>平面上的线段</td>\n</tr>\n<tr>\n<td><code>macaddr  </code></td>\n<td></td>\n<td>MAC（Media Access Control）地址</td>\n</tr>\n<tr>\n<td><code>macaddr8</code></td>\n<td></td>\n<td>MAC（Media Access  Control）地址（EUI-64格式）</td>\n</tr>\n<tr>\n<td>money</td>\n<td></td>\n<td>货币数量</td>\n</tr>\n<tr>\n<td>numeric [ (p, s) ]</td>\n<td>decimal [ (p, s) ]</td>\n<td>可选择精度的精确数字</td>\n</tr>\n<tr>\n<td><code>path  </code></td>\n<td></td>\n<td>平面上的几何路径</td>\n</tr>\n<tr>\n<td><code>pg_lsn </code></td>\n<td></td>\n<td>日志序号</td>\n</tr>\n<tr>\n<td><code>point </code></td>\n<td></td>\n<td>平面上的几何点</td>\n</tr>\n<tr>\n<td><code>polygon </code></td>\n<td></td>\n<td>平面上的封闭几何路径</td>\n</tr>\n<tr>\n<td>real</td>\n<td>float4</td>\n<td>单精度浮点数（4字节）</td>\n</tr>\n<tr>\n<td>smallint</td>\n<td>int2</td>\n<td>有符号2字节整数</td>\n</tr>\n<tr>\n<td>smallserial</td>\n<td>serial2</td>\n<td>自动增长的2字节整数</td>\n</tr>\n<tr>\n<td>serial</td>\n<td>serial4</td>\n<td>自动增长的4字节整数</td>\n</tr>\n<tr>\n<td>text</td>\n<td></td>\n<td>变长字符串</td>\n</tr>\n<tr>\n<td>time [ (p) ] [  without time zone ]</td>\n<td></td>\n<td>一天中的时间（无时区）</td>\n</tr>\n<tr>\n<td>time [ (p) ] with  time zone</td>\n<td>timetz</td>\n<td>一天中的时间，包括时区</td>\n</tr>\n<tr>\n<td>timestamp [ (p) ]  [ without time zone ]</td>\n<td></td>\n<td>日期和时间（无时区）</td>\n</tr>\n<tr>\n<td>timestamp [ (p) ]  with time zone</td>\n<td>timestampz</td>\n<td>日期和时间，包括时区</td>\n</tr>\n<tr>\n<td><code>tsquery </code></td>\n<td></td>\n<td>文本搜索查询</td>\n</tr>\n<tr>\n<td><code>tsvector </code></td>\n<td></td>\n<td>文本搜索文档</td>\n</tr>\n<tr>\n<td><code>txid_snapshot </code></td>\n<td></td>\n<td>用户级别事务ID快照</td>\n</tr>\n<tr>\n<td>uuid</td>\n<td></td>\n<td>通用唯一标识码</td>\n</tr>\n</tbody>\n</table>\n<p>除了<code>XML</code>的数据类型，MemFireDB尚不支持外，兼容PostgreSQL的其他所有数据类型；<br/>\n<code>颜色</code>此类型的表列不能是的一部分INDEX KEY。<br/>\n用户可以使用CREATE TYPE命令为 MemFireDB增加新的数据类型；</p>\n<h2 id=\"数字类型\">数字类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e5%ad%97%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>MemFireDB支持具有不同值范围和精度的整数、浮点数和定点数。</p>\n<p>数字类型由2、4或8字节的整数以及4或8字节的浮点数和可选精度小数组成。下表列出了所有可用类型。</p>\n<p><strong>表</strong> <strong>数字类型</strong></p>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th>名字</th>\n<th>存储尺寸</th>\n<th>描述</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>smallint</td>\n<td>2字节</td>\n<td>小范围整数</td>\n<td>-32768 to +32767</td>\n</tr>\n<tr>\n<td>integer</td>\n<td>4字节</td>\n<td>整数</td>\n<td>-2147483648 to +2147483647</td>\n</tr>\n<tr>\n<td>bigint</td>\n<td>8字节</td>\n<td>大范围整数</td>\n<td>-9223372036854775808 to +9223372036854775807</td>\n</tr>\n<tr>\n<td>decimal</td>\n<td>可变</td>\n<td>用户指定精度，精确</td>\n<td>最高小数点前131072位，以及小数点后16383位</td>\n</tr>\n<tr>\n<td>numeric</td>\n<td>可变</td>\n<td>用户指定精度，精确</td>\n<td>最高小数点前131072位，以及小数点后16383位</td>\n</tr>\n<tr>\n<td>real</td>\n<td>4字节</td>\n<td>可变精度，不精确的浮点数</td>\n<td>6位十进制精度</td>\n</tr>\n<tr>\n<td>double precision</td>\n<td>8字节</td>\n<td>可变精度，不精确浮点数</td>\n<td>15位十进制精度</td>\n</tr>\n<tr>\n<td>smallserial</td>\n<td>2字节</td>\n<td>自动增加的小整数</td>\n<td>1到32767</td>\n</tr>\n<tr>\n<td>serial</td>\n<td>4字节</td>\n<td>自动增加的整数</td>\n<td>1到2147483647</td>\n</tr>\n<tr>\n<td>bigserial</td>\n<td>8字节</td>\n<td>自动增长的大整数</td>\n<td>1到9223372036854775807</td>\n</tr>\n<tr>\n<td>float</td>\n<td>8字节</td>\n<td>可变精度，不精确的浮点数</td>\n<td></td>\n</tr>\n<tr>\n<td>numeric</td>\n<td></td>\n<td>精确的定点数字</td>\n<td>最高小数点前131072位，以及小数点后16383位</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"整数类型\">整数类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b4%e6%95%b0%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h3><p>类型smallint、integer和bigint存储各种范围的全部是数字的数，也就是没有小数部分的数字。试图存储超出范围以外的值将导致一个错误。</p>\n<p>常用的类型是integer，因为它提供了在范围、存储空间和性能之间的最佳平衡。一般只有在磁盘空间紧张的时候才使用 smallint类型。而只有在integer的范围不够的时候才使用bigint。</p>\n<p>SQL只声明了整数类型integer（或int）、smallint和bigint。类型int2、int4和int8都是扩展，也在许多其它SQL数据库系统中使用。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"ee0048c\" tabindex=\"0\"><code class=\"language-none\">type_specification ::= SMALLINT | INT |  INTEGER | BIGINT  integer_literal ::= [ + | - ] digit [ { digit  | , } ... ]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>·   类型的列<code>integer</code>、<code>int</code>、<code>smallint</code>和<code>bigint</code>可以是部分PRIMARY KEY。</p>\n<p>·   不同整数数据类型的值是可比较的并且可以相互转换。</p>\n<p>·   整数数据类型的值是可转换的，但不能与浮点数相比。</p>\n<p>·   当前，浮点数据类型的值不能转换为整数。此限制将在不久的将来取消。</p>\n<h3 id=\"浮点数类型\">浮点数类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%b5%ae%e7%82%b9%e6%95%b0%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h3><p>数据类型real、double precision是不准确的、变精度的数字类型。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"88e2c76\" tabindex=\"0\"><code class=\"language-none\">type_specification ::= { FLOAT | DOUBLE PRECISION  | REAL }  floating_point_literal ::=  non_integer_fixed_point_literal | \"NaN\" | \"Infinity\" |  \"-Infinity\"</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>·   类型为<code>real</code>、<code>double precision</code>和float可以是的一部分PRIMARY KEY。</p>\n<p>·   不同的浮点和精确数据类型的值是可比较的并且可以相互转换。</p>\n<p>·   浮点类型转换到DECIMAL会引发错误的特殊值NaN，Infinity和-Infinity。</p>\n<p>·   浮点类型还有几个特殊值：Infinity、-Infinity、NaN，这些值分别表示 IEEE 754 特殊值“正无穷大”、“负无穷大”以及“不是一个数字”</p>\n<p>·   非整数数值数据类型的值既不可比较也不可转换为整数，尽管整数可转换为整数。此限制将被删除。</p>\n<p>MemFireDB还支持 SQL 标准表示法float和float(p)用于声明非精确的数字类型。在这里，p指定以二进制位表示的最低可接受精度。 在选取real类型的时候，MemFireDB接受float(1)到float(24)，在选取double precision的时候，接受float(25)到float(53)。在允许范围之外的p值将导致一个错误。没有指定精度的float将被当作是double precision。</p>\n<h3 id=\"高精度数值类型\">高精度数值类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e9%ab%98%e7%b2%be%e5%ba%a6%e6%95%b0%e5%80%bc%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h3><p>类型numeric可以存储非常多位的数字。我们特别建议将它用于货币金额和其它要求计算准确的数量。numeric值的计算在可能的情况下会得到准确的结果，例如加法、减法、乘法。不过，numeric类型上的算术运算比整数类型或者浮点数类型要慢很多。</p>\n<p>术语：一个numeric的precision（精度）是整个数中有效位的总数，也就是小数点两边的位数。numeric的scale（刻度）是小数部分的数字位数，也就是小数点右边的部分。因此数字 23.5141 的精度为6而刻度为4。</p>\n<p>numeric列的最大精度和最大比例都是可以配置的。要声明一个类型为numeric的列，你可以用下面的语法：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"59249c1\" tabindex=\"0\"><code class=\"language-none\">NUMERIC(precision, scale)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>以下关键字用于为不同的约束（包括其值范围）指定一列由用户指定的精确精度类型。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f999355\" tabindex=\"0\"><code class=\"language-none\">type_specification ::= { DEC | DECIMAL |  NUMERIC }  fixed_point_literal ::= [ + | - ] { digit [  digit ...] '.' [ digit ...] | '.' digit [ digit ...] }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>·   类型为DEC，DECIMAL和的列NUMERIC可以是的一部分PRIMARY KEY。</p>\n<p>·   不同的浮点和定点数据类型的值是可比较的并且可以相互转换。</p>\n<p>·   非整数数值数据类型的值既不可比较也不可转换为整数，尽管整数可转换为整数。此限制将被删除。</p>\n<p>类型decimal和numeric是等效的。两种类型都是SQL标准的一部分。</p>\n<h3 id=\"序数类型\">序数类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%ba%8f%e6%95%b0%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h3><p>smallserial、serial和bigserial类型不是真正的类型，它们只是为了创建唯一标识符列而存在的方便符号（类似其它一些数据库中支持的AUTO_INCREMENT属性）。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5ca45d7\" tabindex=\"0\"><code class=\"language-none\">type_specification ::= SMALLSERIAL |  SERIAL | BIGSERIAL</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>·   序列类型的列会自动增加。</p>\n<p>·   SERIAL 并不意味着在该列上创建了索引。</p>\n<p>在目前的实现中，下面一个语句：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5646344\" tabindex=\"0\"><code class=\"language-none\">CREATE TABLE tablename (\n    colname SERIAL\n);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>等价于以下语句：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"207561e\" tabindex=\"0\"><code class=\"language-none\">CREATE SEQUENCE tablename_colname_seq;\nCREATE TABLE tablename (\n    colname integer NOT NULL DEFAULT nextval('tablename_colname_seq')\n);\nALTER SEQUENCE tablename_colname_seq OWNED BY tablename.colname;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>因此，我们就创建了一个整数列并且把它的缺省值安排为从一个序列发生器取值。应用了一个NOT NULL约束以确保空值不会被插入（在大多数情况下你可能还希望附加一个UNIQUE或者PRIMARY KEY约束避免意外地插入重复的值，但这个不是自动发生的）。最后，该序列被标记为“属于”该列，这样当列或表被删除时该序列也会被删除。</p>\n<p>类型名serial和serial4是等效的： 两个都创建integer列。类型名bigserial和serial8也一样，只不过它们创建一个 bigint列。如果你预计在表的生存期中使用的标识符数目超过 231 个，那么你应该使用bigserial。类型名smallserial和serial2也以相同方式工作，只不过它们创建一个smallint列。</p>\n<p>为一个serial列创建的序列在所属的列被删除的时候自动删除。你可以在不删除列的情况下删除序列，但是这会强制删除该列的默认值表达式。</p>\n<h2 id=\"字符类型\">字符类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%ad%97%e7%ac%a6%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>基于字符的数据类型用于指定Unicode字符字符串的数据。</p>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>1字节的字符串</td>\n</tr>\n<tr>\n<td>char(n)，character(n)</td>\n<td>定长，空格填充的字符串</td>\n</tr>\n<tr>\n<td>character varying(n)、varchar(n)</td>\n<td>长度最大为（n）的变长字符串</td>\n</tr>\n<tr>\n<td>varchar</td>\n<td>可变长度的字符串</td>\n</tr>\n<tr>\n<td>text</td>\n<td>可变长度的字符串</td>\n</tr>\n</tbody>\n</table>\n<p>SQL定义了两种基本的字符类型： character varying(n)和character(n)， 其中n是一个正整数。两种类型都可以存储最多n个字符长的串。试图存储更长的串到这些类型的列里会产生一个错误， 除非超出长度的字符都是空白，这种情况下该串将被截断为最大长度（这个看上去有点怪异的例外是SQL标准要求的）。 如果要存储的串比声明的长度短，类型为character的值将会用空白填满；而类型为character varying的值将只是存储短些的串。</p>\n<p>varchar(n)和char(n)的概念分别是character varying(n)和character(n)的别名。没有长度声明词的character等效于character(1)。如果不带长度说明词使用character varying，那么该类型接受任何长度的串。</p>\n<p>另外，MemFireDB提供text类型，它可以存储任何长度的串。尽管类型text不是SQL标准，但是许多其它 SQL 数据库系统也有它。</p>\n<p>类型character的值物理上都用空白填充到指定的长度n， 并且以这种方式存储和显示。不过，拖尾的空白被当作是没有意义的，并且在比较两个 character类型值时不会考虑它们。在空白有意义的排序规则中，这种行为可能会 产生意料之外的结果，例如<code>SELECT 'a '::CHAR(2) collate \"C\" &lt; E'a\\n'::CHAR(2)</code>会返回真（即便C区域会认为一个空格比新行更大）。当把一个character值转换成其他 字符串类型之一时，拖尾的空白会被移除。请注意，在character varying和text值里， 结尾的空白语意上是有含义的，并且在使用模式匹配（如LIKE和正则表达式）时也会被考虑。</p>\n<p>使用字符串类型</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"ee68fea\" tabindex=\"0\"><code class=\"language-none\">CREATE TABLE test1 (a character(4));\nINSERT INTO test1 VALUES ('ok');\nSELECT a, char_length(a) FROM test1; -- (1)\n\n\n\n  a   | char_length\n------+-------------\n ok   |           2\n\n\nCREATE TABLE test2 (b varchar(5));\nINSERT INTO test2 VALUES ('ok');\nINSERT INTO test2 VALUES ('good      ');\nINSERT INTO test2 VALUES ('too long');\nERROR:  value too long for type character varying(5)\nINSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation\nSELECT b, char_length(b) FROM test2;\n\n   b   | char_length\n-------+-------------\n ok    |           2\n good  |           5\n too l |           5</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>描述</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"185abc1\" tabindex=\"0\"><code class=\"language-none\">text_literal ::= \"'\" [ '' | letter ...] \"'\"</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>·   单引号必须转义为（’’）。</p>\n<p>·   letter是除单引号（[^’]）以外的任何字符。</p>\n<p>·   基于字符的数据类型可以是的一部分PRIMARY KEY。</p>\n<p>·   字符数据类型的值是可转换的，并且可以与非文本数据类型进行比较。</p>\n<h2 id=\"json数据类型\">JSON数据类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#json%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>JavaScript Object Notation（JSON）是用于结构化数据序列化的文本格式，其语法和语义在RFC 7159中定义。JSON用Unicode字符表示，这种表示通常称为document。字符串值和对象键之外的空格是无关紧要的。</p>\n<p>MemFireDB支持两种数据类型来表示JSON文档：json和jsonb。两种数据类型都拒绝任何不符合RFC 7159的jsonJSON文档。它们 几乎接受完全相同的值集合作为输入。主要的实际区别之一是 效率。json数据类型存储输入文本的精准拷贝，处理函数必须在每次执行时必须重新解析该数据。而jsonb数据被存储在一种分解好的二进制格式中，它在输入时要稍慢一些，因为需要做附加的转换。但是 jsonb在处理时要快很多，因为不需要解析。jsonb也支持索引，这也是一个令人瞩目的优势。</p>\n<p>由于json类型存储的是输入文本的准确拷贝，其中可能会保留在语法 上不明显的、存在于记号之间的空格，还有 JSON 对象内部的键的顺序。还有， 如果一个值中的 JSON 对象包含同一个键超过一次，所有的键/值对都会被保留（ 处理函数会把最后的值当作有效值）。相反，jsonb不保留空格、不 保留对象键的顺序并且不保留重复的对象键。如果在输入中指定了重复的键，只有 最后一个值会被保留。</p>\n<p>通常，除非有特别特殊的需要（例如遗留的对象键顺序假设），大多数应用应该更愿意把 JSON 数据存储为jsonb。</p>\n<p>JSON可以表示四种原始数据类型和两种复合数据类型的值。基本数据类型为<code>string，number，boolean和null</code>，无法声明JSON值的数据类型。而是从表示形式的语法中出现的。</p>\n<p><strong>JSON基本类型</strong></p>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th>JSON 基本类型</th>\n<th>PostgreSQL类型</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td>text</td>\n<td>不允许\\u0000，如果数据库编码不是 UTF8，非 ASCII Unicode 转义也是这样</td>\n</tr>\n<tr>\n<td>number</td>\n<td>numeric</td>\n<td>不允许NaN 和 infinity值</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>boolean</td>\n<td>只接受小写true和false拼写</td>\n</tr>\n<tr>\n<td>null</td>\n<td>(无)</td>\n<td>SQL NULL是一个不同的概念</td>\n</tr>\n</tbody>\n</table>\n<p>请注意，除了作为常规格式的字符串值以外，JSON不能表示日期时间值。</p>\n<p>两种复合数据类型是<code>object</code>和<code>array</code>。</p>\n<p>JSON文字在SQL语句或PL / pgSQL程序中由符合RFC 7159的值的加引号::json或::jsonb类型转换text表示。</p>\n<p><strong>JSON字串</strong></p>\n<p>JSON字符串值是由字符括起来的零个，一个或多个Unicode字符的序列\"。以下是一些示例，显示为SQL文字：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"945a3ea\" tabindex=\"0\"><code class=\"language-none\">'\"Dog\"'::jsonb</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>空字符串是合法的，并且不同于JSON null。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"47a974c\" tabindex=\"0\"><code class=\"language-none\">'\"\"'::jsonb</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>大小写和空格很重要。字符串值中的特殊字符需要转义，因此：</p>\n<p>·   退格键：  <em>\\ b</em><br/>\n·   换页：  <em>\\ f</em><br/>\n·   换行符：  <em>\\ n</em><br/>\n·   回车票：  <em>\\ r</em><br/>\n·   制表符：  <em>\\ t</em><br/>\n·   双引号：  <em>“</em><br/>\n·   反斜杠：  <em>\\</em></p>\n<p>例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5d5572c\" tabindex=\"0\"><code class=\"language-none\">'\"\\\"First line\\\"\\n\\\"second line\\\"\"'::jsonb</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>此JSON<em>字符串</em>值很好地说明了-&gt;和-»运算符之间的区别。</p>\n<p><strong>JSON编号</strong></p>\n<p>以下是一些示例，显示为SQL文字：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"693be10\" tabindex=\"0\"><code class=\"language-none\">'17'::jsonb</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>和：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4167b23\" tabindex=\"0\"><code class=\"language-none\">'4.2'::jsonb</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>和：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"197f9b2\" tabindex=\"0\"><code class=\"language-none\">'2.99792E8'::jsonb</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>请注意，JSON在整数和实数之间没有区别。</p>\n<p><strong>JSON布尔值</strong></p>\n<p>这是两个允许的值，显示为SQL文字：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"22dff64\" tabindex=\"0\"><code class=\"language-none\">'true'::jsonb</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>和：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"67228b6\" tabindex=\"0\"><code class=\"language-none\">'false'::jsonb</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>JSON空</strong></p>\n<p>如上所述，null在JSON中是特殊的，因为它是它自己的数据类型，仅允许一个“值”，因此：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"780df51\" tabindex=\"0\"><code class=\"language-none\">'null'::jsonb</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>JSON对象</strong></p>\n<p>一个对象是一组由分离键-值对逗号和包围大括号。顺序微不足道。对象中的值不必具有相同的数据类型。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"278904c\" tabindex=\"0\"><code class=\"language-none\">'{\n  \"a 1\" : \"Abc\",\n  \"a 2\" : 42,\n  \"a 3\" : true,\n  \"a 4\" : null,\n  \"a 5\" : {\"x\" : 1, \"y\": \"Pqr\"}\n}'::jsonb</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>密钥区分大小写，并且此类密钥内的空格很重要。它们甚至可以包含必须转义的字符。但是，如果键确实包含空格和特殊字符，则读取其值所需的语法可能会变得非常复杂。因此，有必要避免利用这种自由。</p>\n<p>一个对象可以包含多个具有相同键的键/值对。不建议这样做，但是结果是明确定义的：最后提到的键值对，按从左到右的顺序，在具有相同键“获胜”的一组键值对中。您可以使用类似的运算符通过读取指定键的值来进行测试-&gt;。</p>\n<p><strong>JSON数组</strong></p>\n<p>一个阵列是未命名JSON的有序列表中的值，换句话说，顺序被定义并且是显著。数组中的值不必具有相同的数据类型。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"990781e\" tabindex=\"0\"><code class=\"language-none\">'[1, 2, \"Abc\", true, false, null, {\"x\": 17, \"y\": 42}]'::jsonb</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>数组中的值从开始0。请参阅-&gt;操作员的帐户。</p>\n<p><strong>复合JSON值示例</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"0fd350d\" tabindex=\"0\"><code class=\"language-none\">{\n  \"given_name\"         : \"Fred\",\n  \"family_name\"        : \"Smith\",\n  \"email_address\"      : \"fred@yb.com\",\n  \"hire_date\"          : \"17-Jan-2015\",\n  \"job\"                : \"sales\",\n  \"base_annual_salary\" : 50000,\n  \"commisission_rate\"  : 0.05,\n  \"phones\"             : [\"+11234567890\", \"+13216540987\"]\n}</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这是一个具有八个字段的JSON对象。前七个是原始字符串或数字值（其中一个常规表示日期），第八个是两个原始字符串值的数组。电话号码的文字表示遵循约定，以+和（可能是）国家/地区代码开头。JSON没有定义此类约定和实施一致性的机制。</p>\n<p>值得注意的是，与XML相反，JSON不是自描述的。而且，JSON不支持注释。但是，这样做的目的是使该语法在直观上应显而易见且易于阅读。</p>\n<p>大多数编程语言都具有与JSON的原始数据类型及其复合对象和数组数据类型直接对应的数据类型。</p>\n<h3 id=\"json的输入输出语法\">Json的输入输出语法 <a aria-hidden=\"true\" class=\"anchor\" href=\"#json%e7%9a%84%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba%e8%af%ad%e6%b3%95\"><i class=\"material-icons align-middle\">link</i></a></h3><p>RFC 7159 中定义了 JSON 数据类型的输入/输出语法。</p>\n<p>下列都是合法的json（或者jsonb）表达式：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"bdb7135\" tabindex=\"0\"><code class=\"language-none\">-- 简单标量/基本值\n-- 基本值可以是数字、带引号的字符串、true、false或者null\nSELECT '5'::json;\n\n-- 有零个或者更多元素的数组（元素不需要为同一类型）\nSELECT '[1, 2, \"foo\", null]'::json;\n\n-- 包含键值对的对象\n-- 注意对象键必须总是带引号的字符串\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\": false}'::json;\n\n-- 数组和对象可以被任意嵌套\nSELECT '{\"foo\": [true, \"bar\"], \"tags\": {\"a\": 1, \"b\": null}}'::json;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>如前所述，当一个 JSON 值被输入并且接着不做任何附加处理就输出时， json会输出和输入完全相同的文本，而jsonb 则不会保留语义上没有意义的细节（例如空格）。例如，注意下面的不同：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"144948c\" tabindex=\"0\"><code class=\"language-none\">SELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::json;\n                      json\n-------------------------------------------------\n {\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}\n(1 row)\n\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::jsonb;\n                      jsonb\n--------------------------------------------------\n {\"bar\": \"baz\", \"active\": false, \"balance\": 7.77}\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>值得一提的一种语义上无意义的细节是，在jsonb中数据会被按照底层 numeric类型的行为来打印。实际上，这意味着用E记号 输入的数字被打印出来时就不会有该记号，例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9c7e637\" tabindex=\"0\"><code class=\"language-none\">SELECT '{\"reading\": 1.230e-5}'::json, '{\"reading\": 1.230e-5}'::jsonb;\n         json          |          jsonb\n-----------------------+-------------------------\n {\"reading\": 1.230e-5} | {\"reading\": 0.00001230}\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>不过，如这个例子所示，jsonb将会保留拖尾的小数点后的零，即便这 对于等值检查等目的来说是语义上无意义的。</p>\n<h3 id=\"jsonb包含和存在\">jsonb包含和存在 <a aria-hidden=\"true\" class=\"anchor\" href=\"#jsonb%e5%8c%85%e5%90%ab%e5%92%8c%e5%ad%98%e5%9c%a8\"><i class=\"material-icons align-middle\">link</i></a></h3><p>测试包含是jsonb的一种重要能力。对 json类型没有平行的功能集。包含测试会测试一个 jsonb文档是否被包含在另一个文档中。除了特别注解 之外，这些例子都会返回真：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"210edd9\" tabindex=\"0\"><code class=\"language-none\">-- 简单的标量/基本值只包含相同的值：\nSELECT '\"foo\"'::jsonb @&gt; '\"foo\"'::jsonb;\n\n-- 右边的数字被包含在左边的数组中：\nSELECT '[1, 2, 3]'::jsonb @&gt; '[1, 3]'::jsonb;\n\n-- 数组元素的顺序没有意义，因此这个例子也返回真：\nSELECT '[1, 2, 3]'::jsonb @&gt; '[3, 1]'::jsonb;\n\n-- 重复的数组元素也没有关系：\nSELECT '[1, 2, 3]'::jsonb @&gt; '[1, 2, 2]'::jsonb;\n\n-- 右边具有一个单一键值对的对象被包含在左边的对象中：\nSELECT '{\"product\": \"PostgreSQL\", \"version\": 9.4, \"jsonb\": true}'::jsonb @&gt; '{\"version\": 9.4}'::jsonb;\n\n-- 右边的数组不会被认为包含在左边的数组中，\n-- 即使其中嵌入了一个相似的数组：\nSELECT '[1, 2, [1, 3]]'::jsonb @&gt; '[1, 3]'::jsonb;  -- 得到假\n\n-- 但是如果同样也有嵌套，包含就成立：\nSELECT '[1, 2, [1, 3]]'::jsonb @&gt; '[[1, 3]]'::jsonb;\n\n-- 类似的，这个例子也不会被认为是包含：\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @&gt; '{\"bar\": \"baz\"}'::jsonb;  -- 得到假\n\n-- 包含一个顶层键和一个空对象：\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @&gt; '{\"foo\": {}}'::jsonb;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>一般原则是被包含的对象必须在结构和数据内容上匹配包含对象，这种匹配 可以是从包含对象中丢弃了不匹配的数组元素或者对象键值对之后成立。但 是记住做包含匹配时数组元素的顺序是没有意义的，并且重复的数组元素实 际也只会考虑一次。</p>\n<p>结构必须匹配的一般原则有一种特殊情况，一个数组可以包含一个基本值：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"972b9ef\" tabindex=\"0\"><code class=\"language-none\">-- 这个数组包含基本字符串值：\nSELECT '[\"foo\", \"bar\"]'::jsonb @&gt; '\"bar\"'::jsonb;\n\n-- 反之不然，下面的例子会报告“不包含”：\nSELECT '\"bar\"'::jsonb @&gt; '[\"bar\"]'::jsonb;  -- 得到假</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>jsonb还有一个存在操作符，它是包含的一种 变体：它测试一个字符串（以一个text值的形式给出）是否出 现在jsonb值顶层的一个对象键或者数组元素中。除非特别注解， 下面这些例子返回真：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"8ad8e7a\" tabindex=\"0\"><code class=\"language-none\">-- 字符串作为一个数组元素存在：\nSELECT '[\"foo\", \"bar\", \"baz\"]'::jsonb ? 'bar';\n\n-- 字符串作为一个对象键存在：\nSELECT '{\"foo\": \"bar\"}'::jsonb ? 'foo';\n\n-- 不考虑对象值：\nSELECT '{\"foo\": \"bar\"}'::jsonb ? 'bar';  -- 得到假\n\n-- 和包含一样，存在必须在顶层匹配：\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb ? 'bar'; -- 得到假\n\n-- 如果一个字符串匹配一个基本 JSON 字符串，它就被认为存在：\nSELECT '\"foo\"'::jsonb ? 'foo';</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>当涉及很多键或元素时，JSON 对象比数组更适合于做包含或存在测试， 因为它们不像数组，进行搜索时会进行内部优化，并且不需要被线性搜索。</p>\n<p><strong>提示</strong>: 由于 JSON 的包含是嵌套的，因此一个恰当的查询可以跳过对子对象的显式选择。 例如，假设我们在顶层有一个doc列包含着对象，大部分对象 包含着tags域，其中有子对象的数组。这个查询会找到其中出现了 同时包含\"term\":“paris\"和\"term”:“food\"的子对象 的项，而忽略任何位于tags数组之外的这类键：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"bf963fc\" tabindex=\"0\"><code class=\"language-none\">SELECT doc-&gt;'site_name' FROM websites\nWHERE doc @&gt; '{\"tags\":[{\"term\":\"paris\"}, {\"term\":\"food\"}]}';</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>可以用下面的查询完成同样的事情：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d501740\" tabindex=\"0\"><code class=\"language-none\">SELECT doc-&gt;'site_name' FROM websites\nWHERE doc-&gt;'tags' @&gt; '[{\"term\":\"paris\"}, {\"term\":\"food\"}]';</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>但是后一种方法灵活性较差，并且常常也效率更低。</p>\n<p>在另一方面，JSON 的存在操作符不是嵌套的：它将只在 JSON 值的顶层 查找指定的键或数组元素。</p>\n<h3 id=\"创建索引\">创建索引 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95\"><i class=\"material-icons align-middle\">link</i></a></h3><p>当将JSON文档插入表中时，该表将只有一个自填充的代理主键列和一个doc数据类型的value列，例如jsonb。与选择相比，选择jsonb允许使用范围更广的运算符和功能，并允许它们更有效地执行json。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"39da0d6\" tabindex=\"0\"><code class=\"language-none\">create table books(k int primary key, doc jsonb not null);\n\ninsert into books(k, doc) values\n\n (1,\n\n '{ \"ISBN\"  : 4582546494267,\n\n   \"title\"  : \"Macbeth\",\n\n   \"author\" : {\"given_name\": \"William\", \"family_name\": \"Shakespeare\"},\n\n   \"year\"  : 1623}'),\n\n (2,\n\n '{ \"ISBN\"  : 8760835734528,\n\n   \"title\"  : \"Hamlet\",\n\n   \"author\" : {\"given_name\": \"William\", \"family_name\": \"Shakespeare\"},\n\n   \"year\"  : 1603,\n\n   \"editors\" : [\"Lysa\", \"Elizabeth\"] }'),\n\n (3,\n\n '{ \"ISBN\"  : 7658956876542,\n\n   \"title\"  : \"Oliver Twist\",\n\n   \"author\" : {\"given_name\": \"Charles\", \"family_name\": \"Dickens\"},\n\n   \"year\"  : 1838,\n\n   \"genre\"  : \"novel\",\n\n   \"editors\" : [\"Mark\", \"Tony\", \"Britney\"] }'),\n\n (4,\n\n '{ \"ISBN\"  : 9874563896457,\n\n   \"title\"  : \"Great Expectations\",\n\n   \"author\" : {\"family_name\": \"Dickens\"},\n\n   \"year\"  : 1950,\n\n   \"genre\"  : \"novel\",\n\n   \"editors\" : [\"Robert\", \"John\", \"Melisa\", \"Elizabeth\"] }'),\n\n (5,\n\n '{ \"ISBN\"  : 8647295405123,\n\n   \"title\"  : \"A Brief History of Time\",\n\n   \"author\" : {\"given_name\": \"Stephen\", \"family_name\": \"Hawking\"},\n\n   \"year\"  : 1988,\n\n   \"genre\"  : \"science\",\n\n   \"editors\" : [\"Melisa\", \"Mark\", \"John\", \"Fred\", \"Jane\"] }'),\n\n (6,\n\n '{\n\n  \"ISBN\"   : 6563973589123,\n\n  \"year\"   : 1989,\n\n  \"genre\"  : \"novel\",\n\n  \"title\"  : \"Joy Luck Club\",\n\n  \"author\"  : {\"given_name\": \"Amy\", \"family_name\": \"Tan\"},\n\n  \"editors\" : [\"Ruilin\", \"Aiping\"]}');</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>一些行缺少一些键。但是具有“ k = 6”的行具有每个键。</p>\n<p>例如，您可能想查看出版年份晚于1850年的书籍的标题和作者。</p>\n<p>当然，那么，您将希望索引支持这些查询。另一种方法是，在巨大的语料库上进行表格扫描，对每个文档进行动态分析以评估选择谓词，这可能会导致执行效果太差。</p>\n<p><strong>检查jsonb列的约束</strong></p>\n<p>坚持每个JSON文档都是一个对象的方法如下：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"7312a9f\" tabindex=\"0\"><code class=\"language-none\">alter table books\n\nadd constraint books_doc_is_object\n\ncheck (jsonb_typeof(doc) = 'object');\n\n坚持ISBN始终是定义的，并且是一个13位正数的方法如下：\n\nalter table books\n\nadd constraint books_isbn_is_positive_13_digit_number\n\ncheck (\n\n (doc-&gt;'ISBN') is not null\n\n  and\n\n jsonb_typeof(doc-&gt;'ISBN') = 'number'\n\n   and\n\n (doc-&gt;&gt;'ISBN')::bigint &gt; 0\n\n  and\n\n length(((doc-&gt;&gt;'ISBN')::bigint)::text) = 13\n\n);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>请注意，如果键“ ISBN”完全丢失，则该表达式<code>doc-&gt;'ISBN'</code>将产生一个真正的SQL NULL。但是文档的制作者可能已经决定用键“ ISBN”的特殊JSON值null表示“没有关于本书ISBN的信息”。（请记住，此特殊值具有其自己的数据类型。）这就是为什么仅测试键“ ISBN”的产生数字（因此不能为null）是不够的，以及为什么还要进行单独的测试。jsonb_typeof()IS NOT NULL</p>\n<p>高层次的观点是，MemFireDB允许您使用可以通过引用单行中的值进行评估的任何表达式来表达约束。该表达式可以包含PL / pgSQL函数。这允许实施约束以坚持JSON对象中的键来自已知列表：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"c15b890\" tabindex=\"0\"><code class=\"language-none\">create function top_level_keys_ok(json_obj in jsonb)\n\n returns boolean\n\n language plpgsql\n\nas\n\n$body$\n\ndeclare\n\n key text;\n\n legal_keys constant varchar(10)[] := array[\n\n  'ISBN', 'title', 'year', 'genre', 'author', 'editors'];\n\nbegin\n\n for key in (\n\n  select\n\n  jsonb_object_keys(json_obj)\n\n  )\n\n loop\n\n  if not (key = any (legal_keys)) then\n\n   return false;\n\n  end if;\n\n end loop;\n\n return true;\n\nend;\n\n$body$;\n\n\n\nalter table books\n\nadd constraint books_doc_keys_OK\n\ncheck (top_level_keys_ok(doc));</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>jsonb列上的索引</strong></p>\n<p>正确的实践要求，当一个表具有代理主键时，它还必须具有唯一的NOT NULL业务键。该books表的明显候选者是“ ISBN”键的值。“ books_isbn_is_positive_13_digit_number”约束NOT NULL已强制执行该规则。唯一性以明显的方式实施：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2223c54\" tabindex=\"0\"><code class=\"language-none\">create unique index books_isbn_unq\n\non books((doc-&gt;&gt;'ISBN') hash);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>您可能需要支持引用“ year”键值的范围查询，如下所示：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"6061e18\" tabindex=\"0\"><code class=\"language-none\">select\n\n (doc-&gt;&gt;'ISBN')::bigint as year,\n\n doc-&gt;&gt;'title'     as title,\n\n (doc-&gt;&gt;'year')::int  as year\n\nfrom books\n\nwhere (doc-&gt;&gt;'year')::int &gt; 1850\n\norder by 3;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>您可能需要使用索引来支持它。而且，如果您意识到相当一部分图书的出版年份是未知的，则您可能希望利用部分索引，因此：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4a9c850\" tabindex=\"0\"><code class=\"language-none\">create index books_year on books ((doc-&gt;&gt;'year') asc)\n\nwhere doc-&gt;&gt;'year' is not null;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"日期类型\">日期类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%97%a5%e6%9c%9f%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>MemFireDB支持<code>date</code>、<code>time</code>、<code>timestamp</code>、<code>interval</code>数据类型。</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>存储尺寸</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>最小值</strong></th>\n<th><strong>最大值</strong></th>\n<th><strong>解析度</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>timestamp [ (p) ] [ without time zone  ]</code></td>\n<td>8字节</td>\n<td>包括日期和时间（无时区）</td>\n<td>4713 BC</td>\n<td>294276 AD</td>\n<td>1微秒</td>\n</tr>\n<tr>\n<td><code>timestamp [ (*p*) ] with time zone</code></td>\n<td>8字节</td>\n<td>包括日期和时间，有时区</td>\n<td>4713 BC</td>\n<td>294276 AD</td>\n<td>1微秒</td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>4字节</td>\n<td>日期（没有一天中的时间）</td>\n<td>4713 BC</td>\n<td>5874897 AD</td>\n<td>1日</td>\n</tr>\n<tr>\n<td><code>time [ (*p*) ] [ without time zone ]</code></td>\n<td>8字节</td>\n<td>一天中的时间（无日期）</td>\n<td><code>00:00:00</code></td>\n<td><code>24:00:00</code></td>\n<td>1微秒</td>\n</tr>\n<tr>\n<td><code>time [ (*p*) ] with time zone</code></td>\n<td>12字节</td>\n<td>仅仅是一天中的时间（没有日期），带有时区</td>\n<td><code>00:00:00 + 1459</code></td>\n<td><code>24:00:00-1459</code></td>\n<td>1微秒</td>\n</tr>\n<tr>\n<td><code>interval [ *fields* ] [ (*p*) ]</code></td>\n<td>16字节</td>\n<td>时间间隔</td>\n<td>-178000000年</td>\n<td>178000000年</td>\n<td>1微秒</td>\n</tr>\n</tbody>\n</table>\n<p>time、timestamp和interval接受一个可选的精度值 p，这个精度值声明在秒域中小数点之后保留位数。缺省情况下，在精度上没有明确的边界。p允许的范围是从 0 到 6。</p>\n<p>interval类型有一个附加选项，它可以通过写下面之一的短语来限制存储的fields的集合：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"0411295\" tabindex=\"0\"><code class=\"language-none\">YEAR\n\nMONTH\n\nDAY\n\nHOUR\n\nMINUTE\n\nSECOND</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4edc92d\" tabindex=\"0\"><code class=\"language-none\">YEAR TO MONTH\nDAY TO HOUR\nDAY TO MINUTE\nDAY TO SECOND\nHOUR TO MINUTE\nHOUR TO SECOND\nMINUTE TO SECOND</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>注意如果fields和p被指定，fields必须包括SECOND，因为精度只应用于秒。</p>\n<p>类型<code>time with time zone</code>是 SQL 标准定义的，但是该定义显示出了一些会影响可用性的性质。在大多数情况下， date、time、timestamp without time zone和timestamp with time zone的组合就应该能提供任何应用所需的全范围的日期/时间功能。</p>\n<h2 id=\"布尔类型\">布尔类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%b8%83%e5%b0%94%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>MemFireDB提供标准的SQL类型boolean。boolean可以有多个状态：“true（真）”、“false（假）”和第三种状态“unknown（未知）”，未知状态由SQL空值表示。</p>\n<table>\n<thead>\n<tr>\n<th><strong>名字</strong></th>\n<th><strong>存储字节</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>1字节</td>\n<td>状态为真或假</td>\n</tr>\n</tbody>\n</table>\n<p>“真”状态的有效文字值是：</p>\n<table>\n<thead>\n<tr>\n<th>TRUE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>’t'</td>\n</tr>\n<tr>\n<td>’true'</td>\n</tr>\n<tr>\n<td>‘y’</td>\n</tr>\n<tr>\n<td>‘yes’</td>\n</tr>\n<tr>\n<td>‘on’</td>\n</tr>\n<tr>\n<td>‘1’</td>\n</tr>\n</tbody>\n</table>\n<p>而对于“假”状态，你可以使用下面这些值：</p>\n<table>\n<thead>\n<tr>\n<th>FALSE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘f’</td>\n</tr>\n<tr>\n<td>‘false’</td>\n</tr>\n<tr>\n<td>’n'</td>\n</tr>\n<tr>\n<td>’no'</td>\n</tr>\n<tr>\n<td>‘off’</td>\n</tr>\n<tr>\n<td>‘0’</td>\n</tr>\n</tbody>\n</table>\n<p>使用字母t和f输出boolean值的例子</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"fc1884e\" tabindex=\"0\"><code class=\"language-none\">CREATE TABLE test1 (a boolean, b text);\nINSERT INTO test1 VALUES (TRUE, 'sic est');\nINSERT INTO test1 VALUES (FALSE, 'non est');\nSELECT * FROM test1;\n a |    b\n---+---------\n t | sic est\n f | non est\n\nSELECT * FROM test1 WHERE a;\n a |    b\n---+---------\n t | sic est\n\nselect * from test5 where a=false;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"二进制类型\">二进制类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%ba%8c%e8%bf%9b%e5%88%b6%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>使用bytea数据类型表示字节的二进制字符串（八位字节）。二进制字符串允许零（0）和不可打印的字节。bytea数据类型允许存储二进制串。</p>\n<p><strong>表 .二进制数据类型</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>名字</strong></th>\n<th><strong>存储尺寸</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bytea</code></td>\n<td>1或4字节外加真正的二进制串</td>\n<td>变长二进制串</td>\n</tr>\n</tbody>\n</table>\n<p>二进制串是一个八位位组（或字节）的序列。 二进制串和字符串的区别有两个： 首先，二进制串明确允许存储零值的字节以及其它“不可打印的”字节（通常是位于十进制范围32到126之外的节）。 字符串不允许零字节，并且也不允许那些对于数据库的选定字符集编码是非法的任何其它字节值或者字节值序列。 第二，对二进制串的操作会处理实际上的字节，而字符串的处理和取决于区域设置。 简单说，二进制字串适用于存储那些程序员认为是“裸字节”的数据，而字符串适合存储文本。</p>\n<p>bytea类型支持两种用于输入和输出的格式：“十六进制”格式和PostgreSQL的历史的“转义”格式。在输入时这两种格式总是会被接受。输出格式则取决于配置参数bytea_output，其默认值为十六进制。<br/>\nSQL标准定义了一种不同的二进制串类型， 叫做BLOB或者BINARY LARGE OBJECT。其输入格式和bytea不同，但是提供的函数和操作符大多一样。</p>\n<p><strong>bytea的十六进制格式</strong></p>\n<p>“十六进制”格式将二进制数据编码为每个字节2个十六进制位，最高有效位在前。整个串以序列\\x开头（用以和转义格式区分）。在某些情景中，开头的反斜线可能需要通过双写来转义。 作为输入，十六进制位可以是大写也可以是小写，在位对之间可以有空白（但是在位对内部以及开头的\\x序列中不能有空白）。十六进制格式和很多外部应用及协议相兼容，并且其转换速度要比转义格式更快，因此人们更愿意用它。</p>\n<p>例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"c2928e4\" tabindex=\"0\"><code class=\"language-none\">SELECT '\\xDEADBEEF';</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>bytea的转义格式</strong></p>\n<p>“转义”格式是bytea类型的传统格式。它采用将二进制串表示成ASCII字符序列的方法，而将那些无法用ASCII字符表示的字节转换成特殊的转义语句。从应用的角度来看，如果将字节表示为字符有意义，那么这种表示将很方便。但是在实际中，这常常是令人困扰的，因为它使二进制串和字符串之间的区别变得模糊，并且这种特别的转义机制也有点难于处理。因此这种格式可能会在大部分新应用中避免使用。</p>\n<p>在转义模式下输入bytea值时，某些值的字节必须被转义，而所有的字节值都可以被转义。通常，要转义一个字节，需要把它转换成与它的三位八进制值， 并且前导一个反斜线。反斜线本身（十进制字节值92）也可以用双写的反斜线表示。表显示了必须被转义的字符，并给出了可以使用的替代转义序列。</p>\n<p><strong>表bytea文字转义字节</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>十进制字节值</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>转义输入表示</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>十六进制表示</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0字节</td>\n<td><code>'\\000'</code></td>\n<td><code>SELECT '\\000'::bytea;</code></td>\n<td><code>\\x00</code></td>\n</tr>\n<tr>\n<td>39</td>\n<td>单引号</td>\n<td><code>''''</code>或<code>'\\047'</code></td>\n<td><code>SELECT ''''::bytea;</code></td>\n<td><code>\\x27</code></td>\n</tr>\n<tr>\n<td>92</td>\n<td>反斜线</td>\n<td><code>'\\\\'</code>或<code>'\\134'</code></td>\n<td><code>SELECT '\\\\'::bytea;</code></td>\n<td><code>\\x5c</code></td>\n</tr>\n<tr>\n<td>0到31和127到255</td>\n<td>“不可打印的”字节</td>\n<td><code>'\\*xxx'*</code>（八进制值）</td>\n<td><code>SELECT '\\001'::bytea;</code></td>\n<td><code>\\x01</code></td>\n</tr>\n</tbody>\n</table>\n<p>转义“不可打印的”字节的要求取决于区域设置。在某些实例中，你可以不理睬它们，让它们保持未转义的状态。</p>\n<p>如表中所示，要求单引号必须写两次的原因对任何SQL命令中的字符串常量都是一样的。 文字解析器消耗最外层的单引号，并缩减成对的单引号为一个普通数据字符。 bytea输入函数看到的只是一个单引号，它将其视为普通数据字符。</p>\n<p>在某些情况下，反斜杠必须加倍，如上所示，因为通用的字符串文字解析器也会 将一对反斜杠减少为一个数据字符。</p>\n<p>Bytea字节默认被输出为hex格式。如果你把bytea_output改为escape，“不可打印的”字节会被转换成与之等效的三位八进制值并且前置一个反斜线。大部分“可打印的”字节被输出为它们在客户端字符集中的标准表示形式，例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"35991b5\" tabindex=\"0\"><code class=\"language-none\">SET bytea_output = 'escape';\n\nSELECT 'abc \\153\\154\\155 \\052\\251\\124'::bytea;\n     bytea\n----------------\n abc klm *\\251T</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>十进制值为92（反斜线）的字节在输出时被双写。</p>\n<p><strong>表 bytea输出转义字节</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>十进制字节值</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>转义的输出表示</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>输出结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>92</td>\n<td>反斜线</td>\n<td><code>\\\\</code></td>\n<td><code>SELECT '\\134'::bytea;</code></td>\n<td><code>\\\\</code></td>\n</tr>\n<tr>\n<td>0到31和127到255</td>\n<td>“不可打印的”字节</td>\n<td><code>\\*xxx*</code>（八进制值）</td>\n<td><code>SELECT '\\001'::bytea;</code></td>\n<td><code>\\001</code></td>\n</tr>\n<tr>\n<td>32到126</td>\n<td>“可打印的”字节</td>\n<td>客户端字符集表示</td>\n<td><code>SELECT '\\176'::bytea;</code></td>\n<td><code>~</code></td>\n</tr>\n</tbody>\n</table>\n<p>根据你使用的MemFireDB前端，你在转义和未转义bytea串方面可能需要做额外的工作。例如，如果你的接口自动翻译换行和回车，你可能也不得不转义它们。</p>\n<h2 id=\"uuid数据类型\">UUID数据类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#uuid%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>UUID数据类型表示通用唯一标识符（UUID）。数据类型uuid存储由RFC 4122、ISO/IEC 9834-8:2005以及相关标准定义的通用唯一标识符（UUID）（某些系统将这种数据类型引用为全局唯一标识符GUID）。这种标识符是一个128位的量，它由一个精心选择的算法产生，该算法能保证在已知空间中任何其他使用相同算法的人能够产生同一个标识符的可能性非常非常小。因此，对于分布式系统，这些标识符相比序列生成器而言提供了一种很好的唯一性保障，序列生成器只能在一个数据库中保证唯一。</p>\n<p>UUID是由32个十六进制数字组成的序列，由128个连字符分隔（8位-4位-4位-4位-12位）。一个标准形式的UUID类似于：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"15e2e1c\" tabindex=\"0\"><code class=\"language-none\">ffffffff-ffff-ffff-ffff-ffffffffffff\n{aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa}\n12341234-1234-1234-1234-123412341234</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>同时支持使用大写位、标准格式被花括号包围、忽略某些或者全部连字符、在任意4位组后面增加一个连字符。</p>\n<h2 id=\"货币类型\">货币类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%b4%a7%e5%b8%81%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>money类型存储固定小数精度的货币数字，可接受的输入格式很多，包括整数和浮点数文字，以及常用的货币格式，如’$1,000.00’。 输出通常是最后一种形式，但和区域相关。</p>\n<p><strong>货币类型</strong></p>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>存储尺寸</th>\n<th>描述</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>money</td>\n<td>8 bytes</td>\n<td>货币额</td>\n<td>-92233720368547758.08到+92233720368547758.07</td>\n</tr>\n</tbody>\n</table>\n<p>由于这种数据类型的输出是区域敏感的，因此将money数据装入到一个具有不同lc_monetary设置的数据库是不起作用的。为了避免这种问题，在恢复一个转储到一个新数据库中之前，应确保新数据库的lc_monetary设置和被转储数据库的相同或者具有等效值。</p>\n<p>数据类型numeric、int和bigint的值可以被造型成money。从数据类型real和double precision的转换可以通过先造型成numeric来实现，例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"524d725\" tabindex=\"0\"><code class=\"language-none\">SELECT '12.34'::float8::numeric::money;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>但是，我们不推荐这样做。浮点数不应该被用来处理货币，因为浮点数可能会有圆整错误。</p>\n<p>一个money值可以在不损失精度的情况下被造型成numeric。转换到其他类型可能会丢失精度，并且必须采用两个阶段完成：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"062f28f\" tabindex=\"0\"><code class=\"language-none\">SELECT '52093.89'::money::numeric::float8;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>一个money值被一个整数值除的除法结果会被截去分数部分。要得到圆整的结果，可以除以一个浮点值，或者在除法之前把money转换成numeric然后在除法之后转回money（如果要避免精度丢失的风险则后者更好）。当一个money值被另一个money值除时，结果是double precision（即一个纯数字，而不是金额），在除法中货币单位被约掉了。</p>\n<h2 id=\"数组\">数组 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e7%bb%84\"><i class=\"material-icons align-middle\">link</i></a></h2><p>MemFireDB允许一个表中的列定义为变长多维数组。可以创建任何内建或用户定义的基类、枚举类型、组合类型或者域的数组。</p>\n<h3 id=\"数组类型的定义\">数组类型的定义 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e7%bb%84%e7%b1%bb%e5%9e%8b%e7%9a%84%e5%ae%9a%e4%b9%89\"><i class=\"material-icons align-middle\">link</i></a></h3><p>为了展示数组类型的使用，我们创建这样一个表：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2653f4b\" tabindex=\"0\"><code class=\"language-none\">CREATE TABLE sal_emp (\n    name            text,\n    pay_by_quarter  integer[],\n    schedule        text[][]\n);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>如上所示，一个数组数据类型可以通过在数组元素的数据类型名称后面加上方括号（[]）来命名。上述命令将创建一个名为sal_emp的表，它有一个类型为text的列（name），一个表示雇员的季度工资的一维integer类型数组（pay_by_quarter），以及一个表示雇员每周日程表的二维text类型数组（schedule）。</p>\n<p>CREATE TABLE的语法允许指定数组的确切大小，例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"b8478e3\" tabindex=\"0\"><code class=\"language-none\">CREATE TABLE tictactoe (\n    squares   integer[3][3]\n);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>然而，当前的实现忽略任何提供的数组尺寸限制，即其行为与未指定长度的数组相同。</p>\n<p>当前的实现也不会强制所声明的维度数。一个特定元素类型的数组全部被当作是相同的类型，而不论其尺寸或维度数。因此，在CREATE TABLE中声明数组的尺寸或维度数仅仅只是文档而已，它并不影响运行时的行为。</p>\n<p>另一种符合SQL标准的语法是使用关键词ARRAY，可以用来定义一维数组。pay_by_quarter可以这样定义：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"910db85\" tabindex=\"0\"><code class=\"language-none\">pay_by_quarter  integer ARRAY[4],</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>或者，不指定数组尺寸：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2ebe3be\" tabindex=\"0\"><code class=\"language-none\">pay_by_quarter  integer ARRAY,</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>但是和前面一样，在任何情况下都不会强制尺寸限制。</p>\n<h3 id=\"数组值输入\">数组值输入 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e7%bb%84%e5%80%bc%e8%be%93%e5%85%a5\"><i class=\"material-icons align-middle\">link</i></a></h3><p>要把一个数组值写成一个文字常数，将元素值用花括号包围并用逗号分隔（如果你懂C，这和初始化结构的C语法没什么两样）。在任意元素值周围可以使用双引号，并且在元素值包含逗号或花括号时必须这样做（更多细节如下所示）。因此，一个数组常量的一般格式如下：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f913ad6\" tabindex=\"0\"><code class=\"language-none\">'{ val1 delim val2 delim ... }'</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这里delim是类型的定界符，记录在类型的pg_type项中。每个val可以是数组元素类型的一个常量，也可以是一个子数组。一个数组常量的例子是：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"263fc14\" tabindex=\"0\"><code class=\"language-none\">'{{1,2,3},{4,5,6},{7,8,9}}'</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>该常量是一个二维的，3乘3数组，它由3个整数子数组构成。</p>\n<p>要设置一个数组常量的一个元素为NULL，在该元素值处写NULL（任何NULL的大写或小写变体都有效）。如果你需要一个真正的字符串值“NULL”，你必须在它两边放上双引号。</p>\n<p>现在我们可以展示一些INSERT语句：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d9cacb8\" tabindex=\"0\"><code class=\"language-none\">INSERT INTO sal_emp\n    VALUES ('Bill',\n    '{10000, 10000, 10000, 10000}',\n    '{{\"meeting\", \"lunch\"}, {\"training\", \"presentation\"}}');\n\nINSERT INTO sal_emp\n    VALUES ('Carol',\n    '{20000, 25000, 25000, 25000}',\n    '{{\"breakfast\", \"consulting\"}, {\"meeting\", \"lunch\"}}');</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>前两个插入的结果看起来像这样：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"b6936e5\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sal_emp;\n name  |      pay_by_quarter       |                 schedule\n-------+---------------------------+-------------------------------------------\n Bill  | {10000,10000,10000,10000} | {{meeting,lunch},{training,presentation}}\n Carol | {20000,25000,25000,25000} | {{breakfast,consulting},{meeting,lunch}}\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>多维数组的每一维都必须有相匹配的长度。不匹配会造成错误，例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"8218061\" tabindex=\"0\"><code class=\"language-none\">INSERT INTO sal_emp\n    VALUES ('Bill',\n    '{10000, 10000, 10000, 10000}',\n    '{{\"meeting\", \"lunch\"}, {\"meeting\"}}');\nERROR:  multidimensional arrays must have array expressions with matching dimensions</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>ARRAY构造器语法也可以被用于：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"861f5cc\" tabindex=\"0\"><code class=\"language-none\">INSERT INTO sal_emp\n    VALUES ('Bill',\n    ARRAY[10000, 10000, 10000, 10000],\n    ARRAY[['meeting', 'lunch'], ['training', 'presentation']]);\n\nINSERT INTO sal_emp\n    VALUES ('Carol',\n    ARRAY[20000, 25000, 25000, 25000],\n    ARRAY[['breakfast', 'consulting'], ['meeting', 'lunch']]);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>注意数组元素是普通SQL常数或表达式，例如，字符串文字使用单引号而不是双引号包围，因为双引号可以出现在一个数组文字中。</p>\n<h3 id=\"访问数组\">访问数组 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%ae%bf%e9%97%ae%e6%95%b0%e7%bb%84\"><i class=\"material-icons align-middle\">link</i></a></h3><p>现在，我们可以在该表上运行一些查询。首先，我们展示如何访问一个数组中的一个元素。下面的查询检索在第二季度工资发生变化的雇员的名字：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2307602\" tabindex=\"0\"><code class=\"language-none\">SELECT name FROM sal_emp WHERE pay_by_quarter[1] &lt;&gt; pay_by_quarter[2];\n\n name\n-------\n Carol\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>数组下标写在方括号内。默认情况下，MemFiresDB为数组使用了一种从1开始的编号习惯，即一个具有n个元素的数组从array[1]开始，结束于array[n]。</p>\n<p>下面的查询检索所有员工第三季度的工资：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"cbad9f1\" tabindex=\"0\"><code class=\"language-none\">SELECT pay_by_quarter[3] FROM sal_emp;\n\n pay_by_quarter\n----------------\n          10000\n          25000\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>我们也可以访问一个数组的任意矩形切片或者子数组。一个数组切片可以通过在一个或多个数组维度上指定下界:上界来定义例如，下面的查询检索Bill在本周头两天日程中的第一项：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1557034\" tabindex=\"0\"><code class=\"language-none\">SELECT schedule[1:2][1:1] FROM sal_emp WHERE name = 'Bill';\n\n        schedule\n------------------------\n {{meeting},{training}}\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>如果任何维度被写成一个切片，即包含一个冒号，那么所有的维度都被看成是切片对待。其中任何只有一个数字（无冒号）的维度被视作是从1到指定的数字。例如，下面例子中的[2]被认为是[1:2]：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"0c5693c\" tabindex=\"0\"><code class=\"language-none\">SELECT schedule[1:2][2] FROM sal_emp WHERE name = 'Bill';\n\n                 schedule\n-------------------------------------------\n {{meeting,lunch},{training,presentation}}\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>为了避免和非切片情况搞混，最好在所有的维度上都使用切片语法，例如[1:2][1:1]而不是[2][1:1]。</p>\n<p>可以省略一个切片说明符的lower-bound或者 upper-bound（亦可两者都省略），缺失的 边界会被数组下标的上下限所替代。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"e1c2062\" tabindex=\"0\"><code class=\"language-none\">SELECT schedule[:2][2:] FROM sal_emp WHERE name = 'Bill';\n\n        schedule\n------------------------\n {{lunch},{presentation}}\n(1 row)\n\nSELECT schedule[:][1:1] FROM sal_emp WHERE name = 'Bill';\n\n        schedule\n------------------------\n {{meeting},{training}}\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>如果数组本身为空或者任何一个下标表达式为空，访问数组下标表达式将会返回空值。如果下标超过了数组边界，下标表达式也会返回空值（这种情况不会抛出错误）。例如，如果schedule目前具有的维度是[1:3][1:2]，那么引用schedule[3][3]将得到NULL。相似地，使用错误的下标号引用一个数组会得到空值而不是错误。</p>\n<p>如果数组本身或者任何一个下标表达式为空，则一个数组切片表达式也会得到空值。但是，在其他情况例如选择一个完全位于当前数组边界之外的切片时，一个切片表达式会得到一个空（零维）数组而不是空值（由于历史原因，这并不符合非切片行为）。 如果所请求的切片和数组边界重叠，那么它会被缩减为重叠的区域而不是返回空。</p>\n<p>任何数组值的当前维度可以使用array_dims函数获得：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f2ef611\" tabindex=\"0\"><code class=\"language-none\">SELECT array_dims(schedule) FROM sal_emp WHERE name = 'Carol';\n\n array_dims\n------------\n [1:2][1:2]\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>array_dims产生一个text结果，它便于人类阅读但是不便于程序读取。 Dimensions can also be retrieved with 也可以通过array_upper和array_lower来获得维度，它们将分别返回一个指定数组的上界和下界：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"365466b\" tabindex=\"0\"><code class=\"language-none\">SELECT array_upper(schedule, 1) FROM sal_emp WHERE name = 'Carol';\n\n array_upper\n-------------\n           2\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>array_length将返回一个指定数组维度的长度：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5813921\" tabindex=\"0\"><code class=\"language-none\">SELECT array_length(schedule, 1) FROM sal_emp WHERE name = 'Carol';\n\n array_length\n--------------\n            2\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>cardinality返回一个数组中在所有维度上的元素总数。 这实际上是调用unnest将会得到的行数：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"0b80724\" tabindex=\"0\"><code class=\"language-none\">SELECT cardinality(schedule) FROM sal_emp WHERE name = 'Carol';\n\n cardinality\n-------------\n           4\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"修改数组\">修改数组 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%bf%ae%e6%94%b9%e6%95%b0%e7%bb%84\"><i class=\"material-icons align-middle\">link</i></a></h3><p>一个数组值可以被整个替换：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2dfb261\" tabindex=\"0\"><code class=\"language-none\">UPDATE sal_emp SET pay_by_quarter = '{25000,25000,27000,27000}'\n  WHERE name = 'Carol';</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>或者使用ARRAY表达式语法：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"81d8a4c\" tabindex=\"0\"><code class=\"language-none\">UPDATE sal_emp SET pay_by_quarter = ARRAY[25000,25000,27000,27000]\n  WHERE name = 'Carol';</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>一个数组也可以在一个元素上被更新：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d06e4f4\" tabindex=\"0\"><code class=\"language-none\">UPDATE sal_emp SET pay_by_quarter[4] = 15000\n  WHERE name = 'Bill';</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>或者在一个切片上被更新：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"6d3e43a\" tabindex=\"0\"><code class=\"language-none\">UPDATE sal_emp SET pay_by_quarter[1:2] = '{27000,27000}'\n  WHERE name = 'Carol';</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>也可以使用省略lower-bound或者 upper-bound的切片语法，但是只能用于 更新一个不是 NULL 或者零维的数组值（否则无法替换现有的下标界线）。</p>\n<p>一个已存储的数组值可以被通过为其还不存在的元素赋值来扩大之。任何位于之前已存在的元素和新元素之间的位置都将被空值填充。例如，如果数组myarray目前有4个元素，在用一个更新对myarray[6]赋值后它将有6个元素，其中myarray[5]为空值。目前，采用这种方式扩大数组只允许使用在一维数组上。</p>\n<p>带下标的赋值方式允许创建下标不是从1开始的数组。例如，我们可以为myarray[-2:7]赋值来创建一个下标值从-2到7的数组。</p>\n<p>新的数组值也可以通过串接操作符||构建：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2409d0e\" tabindex=\"0\"><code class=\"language-none\">SELECT ARRAY[1,2] || ARRAY[3,4];\n ?column?\n-----------\n {1,2,3,4}\n(1 row)\n\nSELECT ARRAY[5,6] || ARRAY[[1,2],[3,4]];\n      ?column?\n---------------------\n {{5,6},{1,2},{3,4}}\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>串接操作符允许把一个单独的元素加入到一个一维数组的开头或末尾。它也能接受两个N维数组，或者一个N维数组和一个N+1维数组。</p>\n<p>当一个单独的元素被加入到一个一维数组的开头或末尾时，其结果是一个和数组操作数具有相同下界下标的新数组。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"de444a6\" tabindex=\"0\"><code class=\"language-none\">SELECT array_dims(1 || '[0:1]={2,3}'::int[]);\n array_dims\n------------\n [0:2]\n(1 row)\n\nSELECT array_dims(ARRAY[1,2] || 3);\n array_dims\n------------\n [1:3]\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>当两个具有相同维度数的数组被串接时，其结果保留左操作数的外维度的下界下标。结果将是一个数组，它由左操作数的每一个元素以及紧接着的右操作数的每一个元素。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4137348\" tabindex=\"0\"><code class=\"language-none\">SELECT array_dims(ARRAY[1,2] || ARRAY[3,4,5]);\n array_dims\n------------\n [1:5]\n(1 row)\n\nSELECT array_dims(ARRAY[[1,2],[3,4]] || ARRAY[[5,6],[7,8],[9,0]]);\n array_dims\n------------\n [1:5][1:2]\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>当一个N维数组被放在另一个N+1维数组的前面或者后面时，结果和上面的例子相似。每一个N维子数组实际上是N+1维数组外维度的一个元素。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"54fc547\" tabindex=\"0\"><code class=\"language-none\">SELECT array_dims(ARRAY[1,2] || ARRAY[[3,4],[5,6]]);\n array_dims\n------------\n [1:3][1:2]\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>一个数组也可以通过使用函数array_prepend、array_append或array_cat构建。前两个函数仅支持一维数组，但array_cat支持多维数组。 一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d6ec845\" tabindex=\"0\"><code class=\"language-none\">SELECT array_prepend(1, ARRAY[2,3]);\n array_prepend\n---------------\n {1,2,3}\n(1 row)\n\nSELECT array_append(ARRAY[1,2], 3);\n array_append\n--------------\n {1,2,3}\n(1 row)\n\nSELECT array_cat(ARRAY[1,2], ARRAY[3,4]);\n array_cat\n-----------\n {1,2,3,4}\n(1 row)\n\nSELECT array_cat(ARRAY[[1,2],[3,4]], ARRAY[5,6]);\n      array_cat\n---------------------\n {{1,2},{3,4},{5,6}}\n(1 row)\n\nSELECT array_cat(ARRAY[5,6], ARRAY[[1,2],[3,4]]);\n      array_cat\n---------------------\n {{5,6},{1,2},{3,4}}</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在简单的情况中，上面讨论的串接操作符比直接使用这些函数更好。不过，由于 串接操作符需要服务于所有三种情况，所以它的负担比较重，在有些情况下使用 这些函数之一有助于避免混淆。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"47ee16f\" tabindex=\"0\"><code class=\"language-none\">SELECT ARRAY[1, 2] || '{3, 4}';  -- 没有指定类型的文字被当做一个数组\n ?column?\n-----------\n {1,2,3,4}\n\nSELECT ARRAY[1, 2] || '7';                 -- 这个也是\nERROR:  malformed array literal: \"7\"\n\nSELECT ARRAY[1, 2] || NULL;                -- 未修饰的 NULL 也是如此\n ?column?\n----------\n {1,2}\n(1 row)\n\nSELECT array_append(ARRAY[1, 2], NULL);    -- 这可能才是想要的意思\n array_append\n--------------\n {1,2,NULL}</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在上面的例子中，解析器看到在串接操作符的一遍看到了一个整数数组，并且在 另一边看到了一个未确定类型的常量。它用来决定该常量类型的启发式规则是假 定它和该操作符的另一个输入具有相同的类型 — 在这种情况中是整数数 组。因此串接操作符表示array_cat而不是 array_append。如果这样做是错误的选择，它可以通过将该常 量造型成数组的元素类型来修复。但是显式地使用array_append 可能是一种最好的方案。</p>\n<h3 id=\"在数组中搜索\">在数组中搜索 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%9c%a8%e6%95%b0%e7%bb%84%e4%b8%ad%e6%90%9c%e7%b4%a2\"><i class=\"material-icons align-middle\">link</i></a></h3><p>要在一个数组中搜索一个值，每一个值都必须被检查。这可以手动完成，但是我们必须知道数组的尺寸。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"375d22d\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sal_emp WHERE pay_by_quarter[1] = 10000 OR\n                          pay_by_quarter[2] = 10000 OR\n                          pay_by_quarter[3] = 10000 OR\n                          pay_by_quarter[4] = 10000;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>但是这对于大型数组来说太过冗长，且在数组尺寸未知时无法使用。上面的查询可以被替换为：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"0a25718\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sal_emp WHERE 10000 = ANY (pay_by_quarter);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>此外，我们还可以查找所有元素值都为10000的数组所在的行：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"adcab1c\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sal_emp WHERE 10000 = ALL (pay_by_quarter);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>另外，generate_subscripts函数也可以用来完成类似的查找。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"539a35d\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM\n  (SELECT pay_by_quarter,\n          generate_subscripts(pay_by_quarter, 1) AS s\n     FROM sal_emp) AS foo\nWHERE pay_by_quarter[s] = 10000;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>我们也可以使用&amp;&amp;操作符来搜索一个数组，它会检查左操作数是否与右操作数重叠。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"aa079d2\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM sal_emp WHERE pay_by_quarter &amp;&amp; ARRAY[10000];</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>你也可以使用array_position和array_positions在一个 数组中搜索特定值。前者返回值在数组中第一次出现的位置的下标。后者返回一个数组， 其中有该值在数组中的所有出现位置的下标。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2ace5ff\" tabindex=\"0\"><code class=\"language-none\">SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon');\n array_positions\n-----------------\n 2\n\nSELECT array_positions(ARRAY[1, 4, 3, 1, 3, 4, 2, 1], 1);\n array_positions\n-----------------\n {1,4,8}</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"数组输入和输出语法\">数组输入和输出语法 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e7%bb%84%e8%be%93%e5%85%a5%e5%92%8c%e8%be%93%e5%87%ba%e8%af%ad%e6%b3%95\"><i class=\"material-icons align-middle\">link</i></a></h3><p>一个数组值的外部文本表现由根据数组元素类型的I/O转换规则解释的项构成，并在其上加上修饰用于指示数组结构。修饰包括数组值周围的花括号（{和}）以及相邻项之间的定界字符。定界字符通常是一个逗号（,），但是也可能是别的：它由数组元素类型的typdelim设置决定。除了box类型使用分号（;）之外，其他都是用逗号。在一个多维数组中，每一个维度（行、平面、方体等）都有其自己的花括号层次，且同层的被花括号限定的相邻实体之间也必须有定界符。</p>\n<p>如果元素值是空字符串、包含花括号、包含定界字符、包含双引号、包含反斜线、包含空白或者匹配词NULL，数组输出例程将在元素值周围放上双引号。嵌在元素值中的双引号以及反斜线将被反斜线转义。对于数字数据类型可以安全地假设双引号绝不会出现，但是对于文本数据类型我们必须准备好处理可能出现亦可能不出现的引号。</p>\n<p>默认情况下，一个数组的一个维度的下界索引值被设置为1。要表示具有其他下界的数组，数组下标的范围应在填充数组内容之前被显式地指定好。这种修饰包括在每个数组维度上下界周围的方括号（[]），以及上下界之间的一个冒号（:）定界符。数组维度修饰后面要跟一个等号（=）。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"bfb74b9\" tabindex=\"0\"><code class=\"language-none\">SELECT f1[1][-2][3] AS e1, f1[1][-1][5] AS e2\n FROM (SELECT '[1:1][-2:-1][3:5]={{{1,2,3},{4,5,6}}}'::int[] AS f1) AS ss;\n\n e1 | e2\n----+----\n  1 |  6\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>只有当数组的维度中有一个或多个的下界不为1时，数组输出例程才会在结果中包括维度。</p>\n<p>如果为一个元素给定的值是NULL（或者是任何变体），该元素将被设置为NULL。任何引号或反斜线的存在将阻止这种行为，而允许为元素值输入“NULL”的字面意思。</p>\n<p>如前所示，在写一个数组值时我们可以在任何单独数组元素周围使用引号。如果元素值可能混淆数组值分析器时，我们必须 这样做。例如，包含花括号、逗号（或者数据类型的定界符）、双引号、反斜线或首尾有空白的元素必须使用双引号。空字符串和匹配单词NULL的字符串也必须使用双引号。要把一个双引号或反斜线放在一个使用了双引号的数组元素值中，需要在它前面放一个反斜线。作为一种选择，我们可以免去使用引号而使用反斜线转义的方式来保护可能被认为是数组语法的所有数据字符。</p>\n<p>我们可以在左括号前面或右括号后面增加空白。我们也可以在任何单独的项之前或之后加上空白。在所有这些情况中空白将被忽略。但是，在被使用了双引号的元素中的空白以及周围有其他非空白字符的空白不会被忽略。</p>\n<h2 id=\"几何类型\">几何类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%87%a0%e4%bd%95%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>几何数据类型表示二维的空间物体。下表展示了MemFireDB中可以用的几何类型。</p>\n<p><strong>表几何类型</strong></p>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>存储尺寸</th>\n<th>表示</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>point</td>\n<td>16字节</td>\n<td>平面上的点</td>\n<td>(x,y)</td>\n</tr>\n<tr>\n<td>line</td>\n<td>32字节</td>\n<td>无限长的线</td>\n<td>{A,B,C}</td>\n</tr>\n<tr>\n<td>lseg</td>\n<td>32字节</td>\n<td>有限线段</td>\n<td>((x1,y1),(x2,y2))</td>\n</tr>\n<tr>\n<td>box</td>\n<td>32字节</td>\n<td>矩形框</td>\n<td>((x1,y1),(x2,y2))</td>\n</tr>\n<tr>\n<td>path</td>\n<td>16+16n字节</td>\n<td>封闭路径（类似于多边形）</td>\n<td>((x1,y1),…)</td>\n</tr>\n<tr>\n<td>path</td>\n<td>16+16n字节</td>\n<td>开放路径</td>\n<td>[(x1,y1),…]</td>\n</tr>\n<tr>\n<td>polygon</td>\n<td>40+16n字节</td>\n<td>多边形（类似于封闭路径）</td>\n<td>((x1,y1),…)</td>\n</tr>\n<tr>\n<td>circle</td>\n<td>24字节</td>\n<td>圆</td>\n<td>&lt;(x,y),r&gt;（中心点和半径）</td>\n</tr>\n</tbody>\n</table>\n<p>我们有一系列丰富的函数和操作符可用来进行各种几何操作， 如缩放、平移、旋转和计算相交等。</p>\n<h3 id=\"点\">点 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%82%b9\"><i class=\"material-icons align-middle\">link</i></a></h3><p>点是几何类型的基本二维构造块。用下面的语法描述point类型的值：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"29cacbb\" tabindex=\"0\"><code class=\"language-none\">( x , y )\nx , y</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>其中x和y分别是坐标，都是浮点数。</p>\n<p>点使用第一种语法输出。</p>\n<h3 id=\"线\">线 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%ba%bf\"><i class=\"material-icons align-middle\">link</i></a></h3><p>线由线性方程Ax + By + C = 0 表示，其中A和B都不为零。类型line 的值采用以下形式输入和输出：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"05b8f88\" tabindex=\"0\"><code class=\"language-none\">{ A, B, C }</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>另外，还可以用下列任一形式输入：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"7872f37\" tabindex=\"0\"><code class=\"language-none\">[ ( x1 , y1 ) , ( x2 , y2 ) ]\n( ( x1 , y1 ) , ( x2 , y2 ) )\n  ( x1 , y1 ) , ( x2 , y2 )\n    x1 , y1   ,   x2 , y2</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>其中 (x1,y1) 和 (x2,y2) 是线上不同的两点。</p>\n<h3 id=\"线段\">线段 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%ba%bf%e6%ae%b5\"><i class=\"material-icons align-middle\">link</i></a></h3><p>线段用一对线段的端点来表示。lseg类型的值用下面的语法声明：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"681357d\" tabindex=\"0\"><code class=\"language-none\">[ ( x1 , y1 ) , ( x2 , y2 ) ]\n( ( x1 , y1 ) , ( x2 , y2 ) )\n  ( x1 , y1 ) , ( x2 , y2 )\n    x1 , y1   ,   x2 , y2</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>其中(x1,y1) 和 (x2,y2) 是线段的端点。</p>\n<p>线段使用第一种语法输出。</p>\n<h3 id=\"方框\">方框 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%96%b9%e6%a1%86\"><i class=\"material-icons align-middle\">link</i></a></h3><p>方框用其对角的点对表示。box类型的值使用下面的语法指定：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"982bca6\" tabindex=\"0\"><code class=\"language-none\">( ( x1 , y1 ) , ( x2 , y2 ) )\n( x1 , y1 ) , ( x2 , y2 )\n  x1 , y1   ,   x2 , y2</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>其中(x1,y1) 和 (x2,y2) 是方框的对角点。</p>\n<p>方框使用第二种语法输出。</p>\n<p>在输入时可以提供任意两个对角，但是值将根据需要被按顺序记录为右上角和左下角。</p>\n<h3 id=\"路径\">路径 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%b7%af%e5%be%84\"><i class=\"material-icons align-middle\">link</i></a></h3><p>路径由一系列连接的点组成。路径可能是开放的，也就是认为列表中第一个点和最后一个点没有被连接起来；也可能是封闭的，这时认为第一个和最后一个点被连接起来。</p>\n<p>path类型的值用下面的语法声明：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"cba896f\" tabindex=\"0\"><code class=\"language-none\">[ ( x1 , y1 ) , ... , ( xn , yn ) ]\n( ( x1 , y1 ) , ... , ( xn , yn ) )\n  ( x1 , y1 ) , ... , ( xn , yn )\n  ( x1 , y1   , ... ,   xn , yn )\n    x1 , y1   , ... ,   xn , yn</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>其中的点是组成路径的线段的端点。方括弧（[]）表示一个开放的路径，圆括弧（()）表示一个封闭的路径。如第三种到第五种语法所示，当最外面的圆括号被忽略时，路径将被假定为封闭。</p>\n<p>路径的输出使用第一种或第二种语法。</p>\n<h3 id=\"多边形\">多边形 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%a4%9a%e8%be%b9%e5%bd%a2\"><i class=\"material-icons align-middle\">link</i></a></h3><p>多边形由一系列点代表（多边形的顶点）。多边形和封闭路径很像，但是存储方式不一样而且有自己的一套支持例程。</p>\n<p>polygon类型的值用下列语法声明：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5fc98b5\" tabindex=\"0\"><code class=\"language-none\">( ( x1 , y1 ) , ... , ( xn , yn ) )\n( x1 , y1 ) , ... , ( xn , yn )\n( x1 , y1   , ... ,   xn , yn )\n  x1 , y1   , ... ,   xn , yn</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>其中的点是组成多边形边界的线段的端点。</p>\n<p>多边形的输出使用第一种语法。</p>\n<h3 id=\"圆\">圆 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%9c%86\"><i class=\"material-icons align-middle\">link</i></a></h3><p>圆由一个圆心和一个半径代表。circle类型的值用下面的语法指定：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"918c484\" tabindex=\"0\"><code class=\"language-none\">&lt; ( x , y ) , r &gt;\n( ( x , y ) , r )\n  ( x , y ) , r\n    x , y   , r</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>其中(x,y)是圆心，而r是圆的半径。</p>\n<p>圆的输出用第一种语法。</p>\n<h2 id=\"网络地址类型\">网络地址类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%bd%91%e7%bb%9c%e5%9c%b0%e5%9d%80%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>MemFireDB提供用于存储 IPv4、IPv6 和 MAC 地址的数据类型。 用这些数据类型存储网络地址比用纯文本类型好，因为这些类型提供输入错误检查以及特殊的操作符和函数（见第 9.12 节）</p>\n<p><strong>表 网络地址类型</strong></p>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>存储尺寸</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cidr</td>\n<td>7或19字节</td>\n<td>IPv4和IPv6网络</td>\n</tr>\n<tr>\n<td>inet</td>\n<td>7或19字节</td>\n<td>IPv4和IPv6主机以及网络</td>\n</tr>\n<tr>\n<td>macaddr</td>\n<td>6字节</td>\n<td>MAC地址</td>\n</tr>\n<tr>\n<td>macaddr8</td>\n<td>8 bytes</td>\n<td>MAC地址（EUI-64格式）</td>\n</tr>\n</tbody>\n</table>\n<p>在对inet或者cidr数据类型进行排序的时候， IPv4 地址将总是排在 IPv6 地址前面，包括那些封装或者是映射在 IPv6 地址里 的 IPv4 地址，例如 <code>::10.2.3.4 </code>或者 <code>::ffff::10.4.3.2</code>。</p>\n<h3 id=\"inet\">inet <a aria-hidden=\"true\" class=\"anchor\" href=\"#inet\"><i class=\"material-icons align-middle\">link</i></a></h3><p>inet在一个数据域里保存一个 IPv4 或 IPv6 主机地址，以及一个可选的它的子网。 子网由主机地址中表示的网络地址位数表示（“网络掩码”）。 如果网络掩码为 32 并且地址是 IPv4 ，那么该值不表示任何子网，只是一台主机。在 IPv6 中地址长度是 128 位，因此 128 位指定一个唯一的主机地址。 请注意如果你想只接受网络地址，你应该使用cidr类型而不是inet。</p>\n<p>该类型的输入格式是地址/y，其中地址是一个 IPv4 或者 IPv6 地址，y是网络掩码的位数。如果/y部分缺失， 则网络掩码对 IPv4 而言是 32，对 IPv6 而言是 128，所以该值表示只有一台主机。在显示时，如果/y部分指定一个单台主机，它将不会被显示出来。</p>\n<h3 id=\"cidr\">cidr <a aria-hidden=\"true\" class=\"anchor\" href=\"#cidr\"><i class=\"material-icons align-middle\">link</i></a></h3><p>cidr类型保存一个 IPv4 或 IPv6 网络地址声明。其输入和输出遵循无类的互联网域路由（Classless Internet Domain Routing）习惯。声明一个网络的格式是地址/y，其中address是 IPv4 或 IPv6 网络地址而y是网络掩码的位数。如果省略y， 那么掩码部分用旧的有类的网络编号系统进行计算，否则它将至少大到足以包括写在输入中的所有字节。声明一个在其指定的掩码右边置了位的网络地址会导致错误。</p>\n<p><strong>表 cidr类型输入例子</strong></p>\n<table>\n<thead>\n<tr>\n<th>cidr输入</th>\n<th>cidr输出</th>\n<th>abbrev(cidr)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>192.168.100.128/25</td>\n<td>192.168.100.128/25</td>\n<td>192.168.100.128/25</td>\n</tr>\n<tr>\n<td>192.168/24</td>\n<td>192.168.0.0/24</td>\n<td>192.168.0/24</td>\n</tr>\n<tr>\n<td>192.168/25</td>\n<td>192.168.0.0/25</td>\n<td>192.168.0.0/25</td>\n</tr>\n<tr>\n<td>192.168.1</td>\n<td>192.168.1.0/24</td>\n<td>192.168.1/24</td>\n</tr>\n<tr>\n<td>192.168</td>\n<td>192.168.0.0/24</td>\n<td>192.168.0/24</td>\n</tr>\n<tr>\n<td>128.1</td>\n<td>128.1.0.0/16</td>\n<td>128.1/16</td>\n</tr>\n<tr>\n<td>128</td>\n<td>128.0.0.0/16</td>\n<td>128.0/16</td>\n</tr>\n<tr>\n<td>128.1.2</td>\n<td>128.1.2.0/24</td>\n<td>128.1.2/24</td>\n</tr>\n<tr>\n<td>10.1.2</td>\n<td>10.1.2.0/24</td>\n<td>10.1.2/24</td>\n</tr>\n<tr>\n<td>10.1</td>\n<td>10.1.0.0/16</td>\n<td>10.1/16</td>\n</tr>\n<tr>\n<td>10</td>\n<td>10.0.0.0/8</td>\n<td>10/8</td>\n</tr>\n<tr>\n<td>10.1.2.3/32</td>\n<td>10.1.2.3/32</td>\n<td>10.1.2.3/32</td>\n</tr>\n<tr>\n<td><code>2001:4f8:3:ba::/64</code></td>\n<td><code>2001:4f8:3:ba::/64 </code></td>\n<td><code>2001:4f8:3:ba::/64 </code></td>\n</tr>\n<tr>\n<td><code>2001:4f8:3:ba:2e0:81ff:fe22:d1f1/128</code></td>\n<td><code>2001:4f8:3:ba:2e0:81ff:fe22:d1f1/128 </code></td>\n<td><code>2001:4f8:3:ba:2e0:81ff:fe22:d1f1</code></td>\n</tr>\n<tr>\n<td><code>::ffff:1.2.3.0/120   </code></td>\n<td><code>::ffff:1.2.3.0/120 </code></td>\n<td><code>::ffff:1.2.3/120</code></td>\n</tr>\n<tr>\n<td><code>::ffff:1.2.3.0/128  </code></td>\n<td><code> ::ffff:1.2.3.0/128</code></td>\n<td><code>::ffff:1.2.3.0/128 </code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"inet-vs-cidr\">inet vs. cidr <a aria-hidden=\"true\" class=\"anchor\" href=\"#inet-vs-cidr\"><i class=\"material-icons align-middle\">link</i></a></h3><p>inet和cidr类型之间的本质区别是inet接受右边有非零位的网络掩码， 而cidr不接受。例如，192.168.0.1/24对inet是有效的，但对cidr是无效的。</p>\n<h3 id=\"macaddr\">macaddr <a aria-hidden=\"true\" class=\"anchor\" href=\"#macaddr\"><i class=\"material-icons align-middle\">link</i></a></h3><p>macaddr类型存储 MAC 地址，也就是以太网卡硬件地址 （尽管 MAC 地址还用于其它用途）。可以接受下列格式的输入：</p>\n<table>\n<thead>\n<tr>\n<th><code>'08:00:2b:01:02:03'</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘08-00-2b-01-02-03’</td>\n</tr>\n<tr>\n<td>‘08002b:010203’</td>\n</tr>\n<tr>\n<td>‘08002b-010203’</td>\n</tr>\n<tr>\n<td>‘0800.2b01.0203’</td>\n</tr>\n<tr>\n<td>‘0800-2b01-0203’</td>\n</tr>\n<tr>\n<td>‘08002b010203’</td>\n</tr>\n</tbody>\n</table>\n<p>这些例子指定的都是同一个地址。对于位a到f，大小写都可以接受。输出总是使用展示的第一种形式。</p>\n<p>IEEE Std 802-2001 指定第二种展示的形式（带有连字符）作为MAC地址的标准形式，并且指定第一种形式（带有分号）作为位翻转的记号，因此<code> 08-00-2b-01-02-03 = 01:00:4D:08:04:0C</code>。这种习惯目前已经被广泛地忽略，并且它只与废弃的网络协议（如令牌环）相关。</p>\n<p>剩下的五种输入格式不属于任何标准。</p>\n<h3 id=\"macaddr8\">macaddr8 <a aria-hidden=\"true\" class=\"anchor\" href=\"#macaddr8\"><i class=\"material-icons align-middle\">link</i></a></h3><p>macaddr8类型以EUI-64格式存储MAC地址，例如以太网卡的硬件地址（尽管MAC地址也被用于其他目的）。这种类型可以接受6字节和8字节长度的MAC地址，并且将它们存储为8字节长度的格式。以6字节格式给出的MAC地址被存储为8字节长度格式的方式是吧第4和第5字节分别设置为FF和FE。 注意IPv6使用一种修改过的EUI-64格式，其中从EUI-48转换过来后的第7位应该被设置为一。函数macaddr8_set7bit被用来做这种修改。 一般而言，任何由16进制数（字节边界上）对构成的输入（可以由’:’、’-‘或者’.‘统一地分隔）都会被接受。16进制数的数量必须是16（8字节）或者12（6字节）。前导和拖尾的空格会被忽略。 下面是可以被接受的输入格式的例子：</p>\n<table>\n<thead>\n<tr>\n<th><code>'08:00:2b:01:02:03:04:05' </code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘08-00-2b-01-02-03-04-05’</td>\n</tr>\n<tr>\n<td>‘08002b:0102030405’</td>\n</tr>\n<tr>\n<td>‘08002b-0102030405’</td>\n</tr>\n<tr>\n<td>‘0800.2b01.0203.0405’</td>\n</tr>\n<tr>\n<td>‘0800-2b01-0203-0405’</td>\n</tr>\n<tr>\n<td>‘08002b01:02030405’</td>\n</tr>\n<tr>\n<td>‘08002b0102030405’</td>\n</tr>\n</tbody>\n</table>\n<p>这些例子都指定相同的地址。数字a到f的大小写形式都被接受。输出总是以上面显示的第一种形式。 上述的后六种输入格式不属于任何标准。 要把EUI-48格式的传统48位MAC地址转换成修改版EUI-64格式（包括在IPv6地址中作为主机部分），可以使用下面的macaddr8_set7bit：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"a178bf7\" tabindex=\"0\"><code class=\"language-none\">SELECT macaddr8_set7bit('08:00:2b:01:02:03');\n\n    macaddr8_set7bit\n-------------------------\n 0a:00:2b:ff:fe:01:02:03\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"文本检索类型\">文本检索类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%96%87%e6%9c%ac%e6%a3%80%e7%b4%a2%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>MemFireDB提供两种数据类型，它们被设计用来支持全文搜索，全文搜索是一种在自然语言的文档集合中搜索以定位那些最匹配一个查询的文档的活动。tsvector类型表示一个为文本搜索优化的形式下的文档，tsquery类型表示一个文本查询。</p>\n<h3 id=\"tsvector\">tsvector <a aria-hidden=\"true\" class=\"anchor\" href=\"#tsvector\"><i class=\"material-icons align-middle\">link</i></a></h3><p>一个tsvector值是一个排序的可区分词位的列表，词位是被正规化合并了同一个词的不同变种的词。排序和去重是在输入期间自动完成的，如下例所示：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"655a740\" tabindex=\"0\"><code class=\"language-none\">SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector;\n                      tsvector\n----------------------------------------------------\n 'a' 'and' 'ate' 'cat' 'fat' 'mat' 'on' 'rat' 'sat'</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>要表示包含空白或标点的词位，将它们用引号包围：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"110b8bf\" tabindex=\"0\"><code class=\"language-none\">SELECT $$the lexeme '    ' contains spaces$$::tsvector;\n                 tsvector\n-------------------------------------------\n '    ' 'contains' 'lexeme' 'spaces' 'the'</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>（我们在这个例子中使用美元符号包围的串文字并且下一个用来避免在文字中包含双引号记号产生的混淆）。嵌入的引号和反斜线必须被双写：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"114d2f0\" tabindex=\"0\"><code class=\"language-none\">SELECT $$the lexeme 'Joe''s' contains a quote$$::tsvector;\n                    tsvector\n------------------------------------------------\n 'Joe''s' 'a' 'contains' 'lexeme' 'quote' 'the'</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>可选的，整数位置可以被附加给词位：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"48d2f5d\" tabindex=\"0\"><code class=\"language-none\">SELECT 'a:1 fat:2 cat:3 sat:4 on:5 a:6 mat:7 and:8 ate:9 a:10 fat:11 rat:12'::tsvector;\n                                  tsvector\n-------------------------------------------------------------------------------\n 'a':1,6,10 'and':8 'ate':9 'cat':3 'fat':2,11 'mat':7 'on':5 'rat':12 'sat':4</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>一个位置通常表示源词在文档中的定位。位置信息可以被用于邻近排名。位置值可以从 1 到 16383，更大的数字会被 16383。对于相同的词位出现的重复位置将被丢弃。</p>\n<p>具有位置的词位可以进一步地被标注一个权重，它可以是A、 B、C或D。 D是默认值并且因此在输出中不会显示：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"28ef752\" tabindex=\"0\"><code class=\"language-none\">SELECT 'a:1A fat:2B,4C cat:5D'::tsvector;\n          tsvector\n----------------------------\n 'a':1A 'cat':5 'fat':2B,4C</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>权重通常被用来反映文档结构，例如将主题词标记成与正文词不同。文本搜索排名函数可以为不同的权重标记器分配不同的优先级。</p>\n<p>了解tsvector类型本身并不执行任何词正规化这一点很重要，它假定给它的词已经被恰当地为应用正规化过。例如，</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"88e9360\" tabindex=\"0\"><code class=\"language-none\">SELECT 'The Fat Rats'::tsvector;\n      tsvector\n--------------------\n 'Fat' 'Rats' 'The'</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>对于大部分英语文本搜索应用，上面的词将会被认为是非正规化的，但是tsvector并不在乎这一点。原始文档文本通常应该经过to_tsvector以恰当地为搜索正规化其中的词：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f95ced3\" tabindex=\"0\"><code class=\"language-none\">SELECT to_tsvector('english', 'The Fat Rats');\n   to_tsvector\n-----------------\n 'fat':2 'rat':3</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>再次地，详情请参阅第 12 章。</p>\n<h3 id=\"tsquery\">tsquery <a aria-hidden=\"true\" class=\"anchor\" href=\"#tsquery\"><i class=\"material-icons align-middle\">link</i></a></h3><p>一个tsquery值存储要用于搜索的词位，并且使用布尔操作符&amp;（AND）、|（OR）和!（NOT）来组合它们，还有短语搜索操作符&lt;-&gt;（FOLLOWED BY）。也有一种 FOLLOWED BY 操作符的变体<n>，其中N是一个整数常量，它指定要搜索的两个词位之间的距离。&lt;-&gt;等效于&lt;1&gt;。</n></p>\n<p>圆括号可以被用来强制对操作符分组。如果没有圆括号，!（NOT）的优先级最高，其次是&lt;-&gt;（FOLLOWED BY），然后是&amp;（AND），最后是|（OR）。</p>\n<p>这里有一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1c524c5\" tabindex=\"0\"><code class=\"language-none\">SELECT 'fat &amp; rat'::tsquery;\n    tsquery\n---------------\n 'fat' &amp; 'rat'\n\nSELECT 'fat &amp; (rat | cat)'::tsquery;\n          tsquery\n---------------------------\n 'fat' &amp; ( 'rat' | 'cat' )\n\nSELECT 'fat &amp; rat &amp; ! cat'::tsquery;\n        tsquery\n------------------------\n 'fat' &amp; 'rat' &amp; !'cat'</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>可选地，一个tsquery中的词位可以被标注一个或多个权重字母，这将限制它们只能和具有那些权重之一的tsvector词位相匹配：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5b500bb\" tabindex=\"0\"><code class=\"language-none\">SELECT 'fat:ab &amp; cat'::tsquery;\n    tsquery\n------------------\n 'fat':AB &amp; 'cat'</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>此外，一个tsquery中的词位可以被标注为*来指定前缀匹配：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"67c52c8\" tabindex=\"0\"><code class=\"language-none\">SELECT 'super:*'::tsquery;\n  tsquery\n-----------\n 'super':*</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这个查询将匹配一个tsvector中以“super”开头的任意词。</p>\n<h2 id=\"范围类型\">范围类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%8c%83%e5%9b%b4%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h2><p>范围类型是表达某种元素类型（称为范围的subtype）的一个值的范围的数据类型。例如，timestamp的范围可以被用来表达一个会议室被保留的时间范围。在这种情况下，数据类型是tsrange（“timestamp range”的简写）而timestamp是 subtype。subtype 必须具有一种总体的顺序，这样对于元素值是在一个范围值之内、之前或之后就是界线清楚的。</p>\n<p>范围类型非常有用，因为它们可以表达一种单一范围值中的多个元素值，并且可以很清晰地表达诸如范围重叠等概念。用于时间安排的时间和日期范围是最清晰的例子；但是价格范围、一种仪器的量程等等也都有用。</p>\n<h3 id=\"内建范围类型\">内建范围类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%86%85%e5%bb%ba%e8%8c%83%e5%9b%b4%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h3><p>MemFireDB 带有下列内建范围类型：</p>\n<p>·   int4range — integer的范围<br/>\n·   int8range — bigint的范围<br/>\n·   numrange — numeric的范围<br/>\n·   tsrange — 不带时区的 timestamp的范围<br/>\n·   tstzrange — 带时区的 timestamp的范围<br/>\n·   daterange — date的范围</p>\n<p>此外，你可以定义自己的范围类型，详见CREATE TYPE。</p>\n<h3 id=\"例子\">例子 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%be%8b%e5%ad%90\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"dac9596\" tabindex=\"0\"><code class=\"language-none\">CREATE TABLE reservation (room int, during tsrange);\nINSERT INTO reservation VALUES\n    (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');\n\n-- 包含\nSELECT int4range(10, 20) @&gt; 3;\n\n-- 重叠\nSELECT numrange(11.1, 22.2) &amp;&amp; numrange(20.0, 30.0);\n\n-- 抽取上界\nSELECT upper(int8range(15, 25));\n\n-- 计算交集\nSELECT int4range(10, 20) * int4range(15, 25);\n\n-- 范围为空吗？\nSELECT isempty(numrange(1, 5));</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"包含和排除边界\">包含和排除边界 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%8c%85%e5%90%ab%e5%92%8c%e6%8e%92%e9%99%a4%e8%be%b9%e7%95%8c\"><i class=\"material-icons align-middle\">link</i></a></h3><p>每一个非空范围都有两个界限，下界和上界。这些值之间的所有点都被包括在范围内。一个包含界限意味着边界点本身也被包括在范围内，而一个排除边界意味着边界点不被包括在范围内。</p>\n<p>在一个范围的文本形式中，一个包含下界被表达为“[”而一个排除下界被表达为“(”。同样，一个包含上界被表达为“]”而一个排除上界被表达为“)”。</p>\n<p>函数lower_inc和upper_inc分别测试一个范围值的上下界。</p>\n<h3 id=\"无限无界范围\">无限（无界）范围 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%97%a0%e9%99%90%e6%97%a0%e7%95%8c%e8%8c%83%e5%9b%b4\"><i class=\"material-icons align-middle\">link</i></a></h3><p>一个范围的下界可以被忽略，意味着所有小于上界的点都被包括在范围中。同样，如果范围的上界被忽略，那么所有比上界大的的都被包括在范围中。如果上下界都被忽略，该元素类型的所有值都被认为在该范围中。</p>\n<p>这等效于把下界当作“负无穷”，或者把上界当作“正无穷”。但是注意这些无穷值绝不是范围的元素类型的值，并且绝不是范围的一部分（因此没有所谓的包含无限界限 — 如果你尝试写一个，它将被自动转换成一个排除界限）。</p>\n<p>还有，有一些元素类型具有一种“无限”概念，但是那只是范围类型机制所关心的之外的另一种值。例如，在时间戳范围中，[today,]意味着与[today,)相同的东西。但是[today,infinity]意味着与[today,infinity)不同的某种东西 — 后者排除了特殊的timestamp值infinity。</p>\n<p>函数lower_inf和upper_inf分别测试一个范围的无限上下界。</p>\n<h3 id=\"范围输入输出\">范围输入/输出 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%8c%83%e5%9b%b4%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba\"><i class=\"material-icons align-middle\">link</i></a></h3><p>一个范围值的输入必须遵循下列模式之一：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4f5a772\" tabindex=\"0\"><code class=\"language-none\">(lower-bound,upper-bound)\n(lower-bound,upper-bound]\n[lower-bound,upper-bound)\n[lower-bound,upper-bound]\nempty</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>圆括号或方括号指示上下界是否为排除的或者包含的。注意最后一个模式是empty，它表示一个空范围（一个不包含点的范围）。</p>\n<p>lower-bound可以是作为 subtype 的合法输入的一个字符串，或者是空表示没有下界。同样，upper-bound可以是作为 subtype 的合法输入的一个字符串，或者是空表示没有上界。</p>\n<p>每个界限值可以使用”（双引号）字符引用。如果界限值包含圆括号、方括号、逗号、双引号或反斜线时，这样做是必须的，因为否则那些字符会被认作范围语法的一部分。要把一个双引号或反斜线放在一个被引用的界限值中，就在它前面放一个反斜线（还有，在一个双引号引用的界限值中的一对双引号表示一个双引号字符，这与 SQL 字符串中的单引号规则类似）。此外，你可以避免引用并且使用反斜线转义来保护所有数据字符，否则它们会被当做返回语法的一部分。还有，要写一个是空字符串的界限值，则可以写成\"\"，因为什么都不写表示一个无限界限。</p>\n<p>范围值前后允许有空格，但是圆括号或方括号之间的任何空格会被当做上下界值的一部分（取决于元素类型，它可能是也可能不是有意义的）。</p>\n<p>例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2c63963\" tabindex=\"0\"><code class=\"language-none\">-- 包括 3，不包括 7，并且包括 3 和 7 之间的所有点\nSELECT '[3,7)'::int4range;\n\n-- 既不包括 3 也不包括 7，但是包括之间的所有点\nSELECT '(3,7)'::int4range;\n\n-- 只包括单独一个点 4\nSELECT '[4,4]'::int4range;\n\n-- 不包括点（并且将被标准化为 '空'）\nSELECT '[4,4)'::int4range;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"构造范围\">构造范围 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%9e%84%e9%80%a0%e8%8c%83%e5%9b%b4\"><i class=\"material-icons align-middle\">link</i></a></h3><p>每一种范围类型都有一个与其同名的构造器函数。使用构造器函数常常比写一个范围文字常数更方便，因为它避免了对界限值的额外引用。构造器函数接受两个或三个参数。两个参数的形式以标准的形式构造一个范围（下界是包含的，上界是排除的），而三个参数的形式按照第三个参数指定的界限形式构造一个范围。第三个参数必须是下列字符串之一： “()”、 “(]”、 “[)”或者 “[]”。 例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"586a574\" tabindex=\"0\"><code class=\"language-none\">-- 完整形式是：下界、上界以及指示界限包含性/排除性的文本参数。\nSELECT numrange(1.0, 14.0, '(]');\n\n-- 如果第三个参数被忽略，则假定为 '[)'。\nSELECT numrange(1.0, 14.0);\n\n-- 尽管这里指定了 '(]'，显示时该值将被转换成标准形式，因为 int8range 是一种离散范围类型（见下文）。\nSELECT int8range(1, 14, '(]');\n\n-- 为一个界限使用 NULL 导致范围在那一边是无界的。\nSELECT numrange(NULL, 2.2);</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"离散范围类型\">离散范围类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%a6%bb%e6%95%a3%e8%8c%83%e5%9b%b4%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h3><p>一种范围的元素类型具有一个良定义的“步长”，例如integer或date。在这些类型中，如果两个元素之间没有合法值，它们可以被说成是相邻。这与连续范围相反，连续范围中总是（或者几乎总是）可以在两个给定值之间标识其他元素值。例如，numeric类型之上的一个范围就是连续的，timestamp上的范围也是（尽管timestamp具有有限的精度，并且在理论上可以被当做离散的，最好认为它是连续的，因为通常并不关心它的步长）。</p>\n<p>另一种考虑离散范围类型的方法是对每一个元素值都有一种清晰的“下一个”或“上一个”值。了解了这种思想之后，通过选择原来给定的下一个或上一个元素值来取代它，就可以在一个范围界限的包含和排除表达之间转换。例如，在一个整数范围类型中，[4,8]和(3,9)表示相同的值集合，但是对于 numeric 上的范围就不是这样。</p>\n<p>一个离散范围类型应该具有一个正规化函数，它知道元素类型期望的步长。正规化函数负责把范围类型的相等值转换成具有相同的表达，特别是与包含或者排除界限一致。如果没有指定一个正规化函数，那么具有不同格式的范围将总是会被当作不等，即使它们实际上是表达相同的一组值。</p>\n<p>内建的范围类型int4range、int8range和daterange都使用一种正规的形式，该形式包括下界并且排除上界，也就是[)。不过，用户定义的范围类型可以使用其他习惯。</p>\n<h3 id=\"定义新的范围类型\">定义新的范围类型 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%ae%9a%e4%b9%89%e6%96%b0%e7%9a%84%e8%8c%83%e5%9b%b4%e7%b1%bb%e5%9e%8b\"><i class=\"material-icons align-middle\">link</i></a></h3><p>用户可以定义他们自己的范围类型。这样做最常见的原因是为了使用内建范围类型中没有提供的 subtype 上的范围。例如，要创建一个 subtype float8的范围类型：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"35678ee\" tabindex=\"0\"><code class=\"language-none\">CREATE TYPE floatrange AS RANGE (\n    subtype = float8,\n    subtype_diff = float8mi\n);\n\nSELECT '[1.234, 5.678]'::floatrange;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>因为float8没有有意义的“步长”，我们在这个例子中没有定义一个正规化函数。</p>\n<p>定义自己的范围类型也允许你指定使用一个不同的子类型 B-树操作符类或者集合， 以便更改排序顺序来决定哪些值会落入到给定的范围中。</p>\n<p>如果 subtype 被认为是具有离散值而不是连续值，CREATE TYPE命令应当指定一个canonical函数。正规化函数接收一个输入的范围值，并且必须返回一个可能具有不同界限和格式的等价的范围值。对于两个表示相同值集合的范围（例如[1, 7]和[1, 8)），正规的输出必须一样。选择哪一种表达作为正规的没有关系，只要两个具有不同格式的等价值总是能被映射到具有相同格式的相同值就行。除了调整包含/排除界限格式外，假使期望的补偿比 subtype 能够存储的要大，一个正规化函数可能会舍入边界值。例如，一个timestamp之上的范围类型可能被定义为具有一个一小时的步长，这样正规化函数可能需要对不是一小时的倍数的界限进行舍入，或者可能直接抛出一个错误。</p>\n<p>另外，任何打算要和 GiST 或 SP-GiST 索引一起使用的范围类型应当定一个 subtype 差异或subtype_diff函数（没有subtype_diff时索引仍然能工作，但是可能效率不如提供了差异函数时高）。subtype 差异函数采用两个 subtype 输入值，并且返回表示为一个float8值的差（即X减Y）。在我们上面的例子中，可以使用常规float8减法操作符之下的函数。但是对于任何其他 subtype，可能需要某种类型转换。还可能需要一些关于如何把差异表达为数字的创新型想法。为了最大的可扩展性，subtype_diff函数应该同意选中的操作符类和排序规则所蕴含的排序顺序，也就是说，只要它的第一个参数根据排序顺序大于第二个参数，它的结果就应该是正值。</p>\n<p>subtype_diff函数的一个不那么过度简化的例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"a8a98f2\" tabindex=\"0\"><code class=\"language-none\">CREATE FUNCTION time_subtype_diff(x time, y time) RETURNS float8 AS\n'SELECT EXTRACT(EPOCH FROM (x - y))' LANGUAGE sql STRICT IMMUTABLE;\n\nCREATE TYPE timerange AS RANGE (\n    subtype = time,\n    subtype_diff = time_subtype_diff\n);\n\nSELECT '[11:10, 23:00]'::timerange;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>更多关于创建范围类型的信息请参考CREATE TYPE。</p>\n</div>\n</div>\n<div><hr class=\"doc-hr\"/>\n<div class=\"d-print-none\" id=\"doc-nav\">\n<div class=\"row flex-xl-nowrap\">\n<div class=\"col-sm-6 pt-2 doc-next\">\n<a href=\"/docs/db/guides/keyword/\">\n<div class=\"card h-100 my-1\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\"><i class=\"material-icons align-middle\">navigate_before</i> 关键字</p>\n</div>\n</div>\n</a>\n</div>\n<div class=\"col-sm-6 pt-2 doc-prev\">\n<a class=\"ms-auto\" href=\"/docs/db/guides/sql-grammar/\">\n<div class=\"card h-100 my-1 text-end\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\">SQL语法 <i class=\"material-icons align-middle\">navigate_next</i></p>\n</div>\n</div>\n</a>\n</div>\n</div>\n</div></div>\n</div>\n</div>\n</div>\n</div>\n\n</main>",
  "markdown": "[MemFireDB备份 6](/)\n\nmenu\n\n[官网](https://memfiredb.com/)\n[论坛](https://community.memfiredb.com/)\n[登录](https://cloud.memfiredb.com/auth/login)\n\nEnable dark mode\n\nEnable light mode\n\n本页\n\n数据类型汇总\n\n# 数据类型\n\n## 数据类型汇总 [*link*](#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e6%b1%87%e6%80%bb)\n\n下表列出了MemFireDB支持的原始和复合数据类型。显示了所有内建的普通数据类型。大部分在“别名”列里列出的可选名字都是因历史原因在内部使用的名字。\n\n**表 数据类型**\n\n| 数据类型 | 别名 | 描述 |\n| --- | --- | --- |\n| bigint | int8 | 有符号8字节整数 |\n| bigserial | serial8 | 自动增长的8字节整数 |\n| `bit [ (n) ]` |  | 定长位串 |\n| `bit varying [ (n) ]` | varbit [ (n) ] | 变长位串 |\n| boolean | bool | 逻辑布尔值（真/假） |\n| `box` |  | 平面上的普通方框 |\n| bytea |  | 二进制数据（“字节数组”） |\n| character [ (n) ] | char [ (n) ] | 定长字符串 |\n| character varying [ (n) ] | varchar [ (n) ] | 变长字符串 |\n| `cidr` |  | IPv4或IPv6网络地址 |\n| `circle` |  | 平面上的圆 |\n| date |  | 日历日期（年、月、日） |\n| double precision | float8 | 双精度浮点数（8字节） |\n| `inet` |  | IPv4或IPv6主机地址 |\n| integer | int， int4 | 有符号4字节整数 |\n| interval [ fields ] [ (p) ] |  | 时间段 |\n| `json` |  | 文本JSON数据 |\n| `jsonb` |  | 二进制JSON数据，已分解 |\n| `line` |  | 平面上的无限长的线 |\n| `lseg` |  | 平面上的线段 |\n| `macaddr` |  | MAC（Media Access Control）地址 |\n| `macaddr8` |  | MAC（Media Access Control）地址（EUI-64格式） |\n| money |  | 货币数量 |\n| numeric [ (p, s) ] | decimal [ (p, s) ] | 可选择精度的精确数字 |\n| `path` |  | 平面上的几何路径 |\n| `pg_lsn` |  | 日志序号 |\n| `point` |  | 平面上的几何点 |\n| `polygon` |  | 平面上的封闭几何路径 |\n| real | float4 | 单精度浮点数（4字节） |\n| smallint | int2 | 有符号2字节整数 |\n| smallserial | serial2 | 自动增长的2字节整数 |\n| serial | serial4 | 自动增长的4字节整数 |\n| text |  | 变长字符串 |\n| time [ (p) ] [ without time zone ] |  | 一天中的时间（无时区） |\n| time [ (p) ] with time zone | timetz | 一天中的时间，包括时区 |\n| timestamp [ (p) ] [ without time zone ] |  | 日期和时间（无时区） |\n| timestamp [ (p) ] with time zone | timestampz | 日期和时间，包括时区 |\n| `tsquery` |  | 文本搜索查询 |\n| `tsvector` |  | 文本搜索文档 |\n| `txid_snapshot` |  | 用户级别事务ID快照 |\n| uuid |  | 通用唯一标识码 |\n\n除了`XML`的数据类型，MemFireDB尚不支持外，兼容PostgreSQL的其他所有数据类型；  \n`颜色`此类型的表列不能是的一部分INDEX KEY。  \n用户可以使用CREATE TYPE命令为 MemFireDB增加新的数据类型；\n\n## 数字类型 [*link*](#%e6%95%b0%e5%ad%97%e7%b1%bb%e5%9e%8b)\n\nMemFireDB支持具有不同值范围和精度的整数、浮点数和定点数。\n\n数字类型由2、4或8字节的整数以及4或8字节的浮点数和可选精度小数组成。下表列出了所有可用类型。\n\n**表** **数字类型**\n\n| 名字 | 存储尺寸 | 描述 | 范围 |\n| --- | --- | --- | --- |\n| smallint | 2字节 | 小范围整数 | -32768 to +32767 |\n| integer | 4字节 | 整数 | -2147483648 to +2147483647 |\n| bigint | 8字节 | 大范围整数 | -9223372036854775808 to +9223372036854775807 |\n| decimal | 可变 | 用户指定精度，精确 | 最高小数点前131072位，以及小数点后16383位 |\n| numeric | 可变 | 用户指定精度，精确 | 最高小数点前131072位，以及小数点后16383位 |\n| real | 4字节 | 可变精度，不精确的浮点数 | 6位十进制精度 |\n| double precision | 8字节 | 可变精度，不精确浮点数 | 15位十进制精度 |\n| smallserial | 2字节 | 自动增加的小整数 | 1到32767 |\n| serial | 4字节 | 自动增加的整数 | 1到2147483647 |\n| bigserial | 8字节 | 自动增长的大整数 | 1到9223372036854775807 |\n| float | 8字节 | 可变精度，不精确的浮点数 |  |\n| numeric |  | 精确的定点数字 | 最高小数点前131072位，以及小数点后16383位 |\n\n### 整数类型 [*link*](#%e6%95%b4%e6%95%b0%e7%b1%bb%e5%9e%8b)\n\n类型smallint、integer和bigint存储各种范围的全部是数字的数，也就是没有小数部分的数字。试图存储超出范围以外的值将导致一个错误。\n\n常用的类型是integer，因为它提供了在范围、存储空间和性能之间的最佳平衡。一般只有在磁盘空间紧张的时候才使用 smallint类型。而只有在integer的范围不够的时候才使用bigint。\n\nSQL只声明了整数类型integer（或int）、smallint和bigint。类型int2、int4和int8都是扩展，也在许多其它SQL数据库系统中使用。\n\n```\ntype_specification ::= SMALLINT | INT |  INTEGER | BIGINT  integer_literal ::= [ + | - ] digit [ { digit  | , } ... ]\n```\n\n· 类型的列`integer`、`int`、`smallint`和`bigint`可以是部分PRIMARY KEY。\n\n· 不同整数数据类型的值是可比较的并且可以相互转换。\n\n· 整数数据类型的值是可转换的，但不能与浮点数相比。\n\n· 当前，浮点数据类型的值不能转换为整数。此限制将在不久的将来取消。\n\n### 浮点数类型 [*link*](#%e6%b5%ae%e7%82%b9%e6%95%b0%e7%b1%bb%e5%9e%8b)\n\n数据类型real、double precision是不准确的、变精度的数字类型。\n\n```\ntype_specification ::= { FLOAT | DOUBLE PRECISION  | REAL }  floating_point_literal ::=  non_integer_fixed_point_literal | \"NaN\" | \"Infinity\" |  \"-Infinity\"\n```\n\n· 类型为`real`、`double precision`和float可以是的一部分PRIMARY KEY。\n\n· 不同的浮点和精确数据类型的值是可比较的并且可以相互转换。\n\n· 浮点类型转换到DECIMAL会引发错误的特殊值NaN，Infinity和-Infinity。\n\n· 浮点类型还有几个特殊值：Infinity、-Infinity、NaN，这些值分别表示 IEEE 754 特殊值“正无穷大”、“负无穷大”以及“不是一个数字”\n\n· 非整数数值数据类型的值既不可比较也不可转换为整数，尽管整数可转换为整数。此限制将被删除。\n\nMemFireDB还支持 SQL 标准表示法float和float(p)用于声明非精确的数字类型。在这里，p指定以二进制位表示的最低可接受精度。 在选取real类型的时候，MemFireDB接受float(1)到float(24)，在选取double precision的时候，接受float(25)到float(53)。在允许范围之外的p值将导致一个错误。没有指定精度的float将被当作是double precision。\n\n### 高精度数值类型 [*link*](#%e9%ab%98%e7%b2%be%e5%ba%a6%e6%95%b0%e5%80%bc%e7%b1%bb%e5%9e%8b)\n\n类型numeric可以存储非常多位的数字。我们特别建议将它用于货币金额和其它要求计算准确的数量。numeric值的计算在可能的情况下会得到准确的结果，例如加法、减法、乘法。不过，numeric类型上的算术运算比整数类型或者浮点数类型要慢很多。\n\n术语：一个numeric的precision（精度）是整个数中有效位的总数，也就是小数点两边的位数。numeric的scale（刻度）是小数部分的数字位数，也就是小数点右边的部分。因此数字 23.5141 的精度为6而刻度为4。\n\nnumeric列的最大精度和最大比例都是可以配置的。要声明一个类型为numeric的列，你可以用下面的语法：\n\n```\nNUMERIC(precision, scale)\n```\n\n以下关键字用于为不同的约束（包括其值范围）指定一列由用户指定的精确精度类型。\n\n```\ntype_specification ::= { DEC | DECIMAL |  NUMERIC }  fixed_point_literal ::= [ + | - ] { digit [  digit ...] '.' [ digit ...] | '.' digit [ digit ...] }\n```\n\n· 类型为DEC，DECIMAL和的列NUMERIC可以是的一部分PRIMARY KEY。\n\n· 不同的浮点和定点数据类型的值是可比较的并且可以相互转换。\n\n· 非整数数值数据类型的值既不可比较也不可转换为整数，尽管整数可转换为整数。此限制将被删除。\n\n类型decimal和numeric是等效的。两种类型都是SQL标准的一部分。\n\n### 序数类型 [*link*](#%e5%ba%8f%e6%95%b0%e7%b1%bb%e5%9e%8b)\n\nsmallserial、serial和bigserial类型不是真正的类型，它们只是为了创建唯一标识符列而存在的方便符号（类似其它一些数据库中支持的AUTO\\_INCREMENT属性）。\n\n```\ntype_specification ::= SMALLSERIAL |  SERIAL | BIGSERIAL\n```\n\n· 序列类型的列会自动增加。\n\n· SERIAL 并不意味着在该列上创建了索引。\n\n在目前的实现中，下面一个语句：\n\n```\nCREATE TABLE tablename (\n    colname SERIAL\n);\n```\n\n等价于以下语句：\n\n```\nCREATE SEQUENCE tablename_colname_seq;\nCREATE TABLE tablename (\n    colname integer NOT NULL DEFAULT nextval('tablename_colname_seq')\n);\nALTER SEQUENCE tablename_colname_seq OWNED BY tablename.colname;\n```\n\n因此，我们就创建了一个整数列并且把它的缺省值安排为从一个序列发生器取值。应用了一个NOT NULL约束以确保空值不会被插入（在大多数情况下你可能还希望附加一个UNIQUE或者PRIMARY KEY约束避免意外地插入重复的值，但这个不是自动发生的）。最后，该序列被标记为“属于”该列，这样当列或表被删除时该序列也会被删除。\n\n类型名serial和serial4是等效的： 两个都创建integer列。类型名bigserial和serial8也一样，只不过它们创建一个 bigint列。如果你预计在表的生存期中使用的标识符数目超过 231 个，那么你应该使用bigserial。类型名smallserial和serial2也以相同方式工作，只不过它们创建一个smallint列。\n\n为一个serial列创建的序列在所属的列被删除的时候自动删除。你可以在不删除列的情况下删除序列，但是这会强制删除该列的默认值表达式。\n\n## 字符类型 [*link*](#%e5%ad%97%e7%ac%a6%e7%b1%bb%e5%9e%8b)\n\n基于字符的数据类型用于指定Unicode字符字符串的数据。\n\n| **数据类型** | **描述** |\n| --- | --- |\n| char | 1字节的字符串 |\n| char(n)，character(n) | 定长，空格填充的字符串 |\n| character varying(n)、varchar(n) | 长度最大为（n）的变长字符串 |\n| varchar | 可变长度的字符串 |\n| text | 可变长度的字符串 |\n\nSQL定义了两种基本的字符类型： character varying(n)和character(n)， 其中n是一个正整数。两种类型都可以存储最多n个字符长的串。试图存储更长的串到这些类型的列里会产生一个错误， 除非超出长度的字符都是空白，这种情况下该串将被截断为最大长度（这个看上去有点怪异的例外是SQL标准要求的）。 如果要存储的串比声明的长度短，类型为character的值将会用空白填满；而类型为character varying的值将只是存储短些的串。\n\nvarchar(n)和char(n)的概念分别是character varying(n)和character(n)的别名。没有长度声明词的character等效于character(1)。如果不带长度说明词使用character varying，那么该类型接受任何长度的串。\n\n另外，MemFireDB提供text类型，它可以存储任何长度的串。尽管类型text不是SQL标准，但是许多其它 SQL 数据库系统也有它。\n\n类型character的值物理上都用空白填充到指定的长度n， 并且以这种方式存储和显示。不过，拖尾的空白被当作是没有意义的，并且在比较两个 character类型值时不会考虑它们。在空白有意义的排序规则中，这种行为可能会 产生意料之外的结果，例如`SELECT 'a '::CHAR(2) collate \"C\" < E'a\\n'::CHAR(2)`会返回真（即便C区域会认为一个空格比新行更大）。当把一个character值转换成其他 字符串类型之一时，拖尾的空白会被移除。请注意，在character varying和text值里， 结尾的空白语意上是有含义的，并且在使用模式匹配（如LIKE和正则表达式）时也会被考虑。\n\n使用字符串类型\n\n```\nCREATE TABLE test1 (a character(4));\nINSERT INTO test1 VALUES ('ok');\nSELECT a, char_length(a) FROM test1; -- (1)\n\n  a   | char_length\n------+-------------\n ok   |           2\n\nCREATE TABLE test2 (b varchar(5));\nINSERT INTO test2 VALUES ('ok');\nINSERT INTO test2 VALUES ('good      ');\nINSERT INTO test2 VALUES ('too long');\nERROR:  value too long for type character varying(5)\nINSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation\nSELECT b, char_length(b) FROM test2;\n\n   b   | char_length\n-------+-------------\n ok    |           2\n good  |           5\n too l |           5\n```\n\n**描述**\n\n```\ntext_literal ::= \"'\" [ '' | letter ...] \"'\"\n```\n\n· 单引号必须转义为（’’）。\n\n· letter是除单引号（[^’]）以外的任何字符。\n\n· 基于字符的数据类型可以是的一部分PRIMARY KEY。\n\n· 字符数据类型的值是可转换的，并且可以与非文本数据类型进行比较。\n\n## JSON数据类型 [*link*](#json%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b)\n\nJavaScript Object Notation（JSON）是用于结构化数据序列化的文本格式，其语法和语义在RFC 7159中定义。JSON用Unicode字符表示，这种表示通常称为document。字符串值和对象键之外的空格是无关紧要的。\n\nMemFireDB支持两种数据类型来表示JSON文档：json和jsonb。两种数据类型都拒绝任何不符合RFC 7159的jsonJSON文档。它们 几乎接受完全相同的值集合作为输入。主要的实际区别之一是 效率。json数据类型存储输入文本的精准拷贝，处理函数必须在每次执行时必须重新解析该数据。而jsonb数据被存储在一种分解好的二进制格式中，它在输入时要稍慢一些，因为需要做附加的转换。但是 jsonb在处理时要快很多，因为不需要解析。jsonb也支持索引，这也是一个令人瞩目的优势。\n\n由于json类型存储的是输入文本的准确拷贝，其中可能会保留在语法 上不明显的、存在于记号之间的空格，还有 JSON 对象内部的键的顺序。还有， 如果一个值中的 JSON 对象包含同一个键超过一次，所有的键/值对都会被保留（ 处理函数会把最后的值当作有效值）。相反，jsonb不保留空格、不 保留对象键的顺序并且不保留重复的对象键。如果在输入中指定了重复的键，只有 最后一个值会被保留。\n\n通常，除非有特别特殊的需要（例如遗留的对象键顺序假设），大多数应用应该更愿意把 JSON 数据存储为jsonb。\n\nJSON可以表示四种原始数据类型和两种复合数据类型的值。基本数据类型为`string，number，boolean和null`，无法声明JSON值的数据类型。而是从表示形式的语法中出现的。\n\n**JSON基本类型**\n\n| JSON 基本类型 | PostgreSQL类型 | 注释 |\n| --- | --- | --- |\n| string | text | 不允许\\u0000，如果数据库编码不是 UTF8，非 ASCII Unicode 转义也是这样 |\n| number | numeric | 不允许NaN 和 infinity值 |\n| boolean | boolean | 只接受小写true和false拼写 |\n| null | (无) | SQL NULL是一个不同的概念 |\n\n请注意，除了作为常规格式的字符串值以外，JSON不能表示日期时间值。\n\n两种复合数据类型是`object`和`array`。\n\nJSON文字在SQL语句或PL / pgSQL程序中由符合RFC 7159的值的加引号::json或::jsonb类型转换text表示。\n\n**JSON字串**\n\nJSON字符串值是由字符括起来的零个，一个或多个Unicode字符的序列\"。以下是一些示例，显示为SQL文字：\n\n```\n'\"Dog\"'::jsonb\n```\n\n空字符串是合法的，并且不同于JSON null。\n\n```\n'\"\"'::jsonb\n```\n\n大小写和空格很重要。字符串值中的特殊字符需要转义，因此：\n\n· 退格键： *\\ b*  \n· 换页： *\\ f*  \n· 换行符： *\\ n*  \n· 回车票： *\\ r*  \n· 制表符： *\\ t*  \n· 双引号： *“*  \n· 反斜杠： *\\*\n\n例如：\n\n```\n'\"\\\"First line\\\"\\n\\\"second line\\\"\"'::jsonb\n```\n\n此JSON*字符串*值很好地说明了->和-»运算符之间的区别。\n\n**JSON编号**\n\n以下是一些示例，显示为SQL文字：\n\n```\n'17'::jsonb\n```\n\n和：\n\n```\n'4.2'::jsonb\n```\n\n和：\n\n```\n'2.99792E8'::jsonb\n```\n\n请注意，JSON在整数和实数之间没有区别。\n\n**JSON布尔值**\n\n这是两个允许的值，显示为SQL文字：\n\n```\n'true'::jsonb\n```\n\n和：\n\n```\n'false'::jsonb\n```\n\n**JSON空**\n\n如上所述，null在JSON中是特殊的，因为它是它自己的数据类型，仅允许一个“值”，因此：\n\n```\n'null'::jsonb\n```\n\n**JSON对象**\n\n一个对象是一组由分离键-值对逗号和包围大括号。顺序微不足道。对象中的值不必具有相同的数据类型。例如：\n\n```\n'{\n  \"a 1\" : \"Abc\",\n  \"a 2\" : 42,\n  \"a 3\" : true,\n  \"a 4\" : null,\n  \"a 5\" : {\"x\" : 1, \"y\": \"Pqr\"}\n}'::jsonb\n```\n\n密钥区分大小写，并且此类密钥内的空格很重要。它们甚至可以包含必须转义的字符。但是，如果键确实包含空格和特殊字符，则读取其值所需的语法可能会变得非常复杂。因此，有必要避免利用这种自由。\n\n一个对象可以包含多个具有相同键的键/值对。不建议这样做，但是结果是明确定义的：最后提到的键值对，按从左到右的顺序，在具有相同键“获胜”的一组键值对中。您可以使用类似的运算符通过读取指定键的值来进行测试->。\n\n**JSON数组**\n\n一个阵列是未命名JSON的有序列表中的值，换句话说，顺序被定义并且是显著。数组中的值不必具有相同的数据类型。例如：\n\n```\n'[1, 2, \"Abc\", true, false, null, {\"x\": 17, \"y\": 42}]'::jsonb\n```\n\n数组中的值从开始0。请参阅->操作员的帐户。\n\n**复合JSON值示例**\n\n```\n{\n  \"given_name\"         : \"Fred\",\n  \"family_name\"        : \"Smith\",\n  \"email_address\"      : \"fred@yb.com\",\n  \"hire_date\"          : \"17-Jan-2015\",\n  \"job\"                : \"sales\",\n  \"base_annual_salary\" : 50000,\n  \"commisission_rate\"  : 0.05,\n  \"phones\"             : [\"+11234567890\", \"+13216540987\"]\n}\n```\n\n这是一个具有八个字段的JSON对象。前七个是原始字符串或数字值（其中一个常规表示日期），第八个是两个原始字符串值的数组。电话号码的文字表示遵循约定，以+和（可能是）国家/地区代码开头。JSON没有定义此类约定和实施一致性的机制。\n\n值得注意的是，与XML相反，JSON不是自描述的。而且，JSON不支持注释。但是，这样做的目的是使该语法在直观上应显而易见且易于阅读。\n\n大多数编程语言都具有与JSON的原始数据类型及其复合对象和数组数据类型直接对应的数据类型。\n\n### Json的输入输出语法 [*link*](#json%e7%9a%84%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba%e8%af%ad%e6%b3%95)\n\nRFC 7159 中定义了 JSON 数据类型的输入/输出语法。\n\n下列都是合法的json（或者jsonb）表达式：\n\n```\n-- 简单标量/基本值\n-- 基本值可以是数字、带引号的字符串、true、false或者null\nSELECT '5'::json;\n\n-- 有零个或者更多元素的数组（元素不需要为同一类型）\nSELECT '[1, 2, \"foo\", null]'::json;\n\n-- 包含键值对的对象\n-- 注意对象键必须总是带引号的字符串\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\": false}'::json;\n\n-- 数组和对象可以被任意嵌套\nSELECT '{\"foo\": [true, \"bar\"], \"tags\": {\"a\": 1, \"b\": null}}'::json;\n```\n\n如前所述，当一个 JSON 值被输入并且接着不做任何附加处理就输出时， json会输出和输入完全相同的文本，而jsonb 则不会保留语义上没有意义的细节（例如空格）。例如，注意下面的不同：\n\n```\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::json;\n                      json\n-------------------------------------------------\n {\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}\n(1 row)\n\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::jsonb;\n                      jsonb\n--------------------------------------------------\n {\"bar\": \"baz\", \"active\": false, \"balance\": 7.77}\n(1 row)\n```\n\n值得一提的一种语义上无意义的细节是，在jsonb中数据会被按照底层 numeric类型的行为来打印。实际上，这意味着用E记号 输入的数字被打印出来时就不会有该记号，例如：\n\n```\nSELECT '{\"reading\": 1.230e-5}'::json, '{\"reading\": 1.230e-5}'::jsonb;\n         json          |          jsonb\n-----------------------+-------------------------\n {\"reading\": 1.230e-5} | {\"reading\": 0.00001230}\n(1 row)\n```\n\n不过，如这个例子所示，jsonb将会保留拖尾的小数点后的零，即便这 对于等值检查等目的来说是语义上无意义的。\n\n### jsonb包含和存在 [*link*](#jsonb%e5%8c%85%e5%90%ab%e5%92%8c%e5%ad%98%e5%9c%a8)\n\n测试包含是jsonb的一种重要能力。对 json类型没有平行的功能集。包含测试会测试一个 jsonb文档是否被包含在另一个文档中。除了特别注解 之外，这些例子都会返回真：\n\n```\n-- 简单的标量/基本值只包含相同的值：\nSELECT '\"foo\"'::jsonb @> '\"foo\"'::jsonb;\n\n-- 右边的数字被包含在左边的数组中：\nSELECT '[1, 2, 3]'::jsonb @> '[1, 3]'::jsonb;\n\n-- 数组元素的顺序没有意义，因此这个例子也返回真：\nSELECT '[1, 2, 3]'::jsonb @> '[3, 1]'::jsonb;\n\n-- 重复的数组元素也没有关系：\nSELECT '[1, 2, 3]'::jsonb @> '[1, 2, 2]'::jsonb;\n\n-- 右边具有一个单一键值对的对象被包含在左边的对象中：\nSELECT '{\"product\": \"PostgreSQL\", \"version\": 9.4, \"jsonb\": true}'::jsonb @> '{\"version\": 9.4}'::jsonb;\n\n-- 右边的数组不会被认为包含在左边的数组中，\n-- 即使其中嵌入了一个相似的数组：\nSELECT '[1, 2, [1, 3]]'::jsonb @> '[1, 3]'::jsonb;  -- 得到假\n\n-- 但是如果同样也有嵌套，包含就成立：\nSELECT '[1, 2, [1, 3]]'::jsonb @> '[[1, 3]]'::jsonb;\n\n-- 类似的，这个例子也不会被认为是包含：\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @> '{\"bar\": \"baz\"}'::jsonb;  -- 得到假\n\n-- 包含一个顶层键和一个空对象：\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @> '{\"foo\": {}}'::jsonb;\n```\n\n一般原则是被包含的对象必须在结构和数据内容上匹配包含对象，这种匹配 可以是从包含对象中丢弃了不匹配的数组元素或者对象键值对之后成立。但 是记住做包含匹配时数组元素的顺序是没有意义的，并且重复的数组元素实 际也只会考虑一次。\n\n结构必须匹配的一般原则有一种特殊情况，一个数组可以包含一个基本值：\n\n```\n-- 这个数组包含基本字符串值：\nSELECT '[\"foo\", \"bar\"]'::jsonb @> '\"bar\"'::jsonb;\n\n-- 反之不然，下面的例子会报告“不包含”：\nSELECT '\"bar\"'::jsonb @> '[\"bar\"]'::jsonb;  -- 得到假\n```\n\njsonb还有一个存在操作符，它是包含的一种 变体：它测试一个字符串（以一个text值的形式给出）是否出 现在jsonb值顶层的一个对象键或者数组元素中。除非特别注解， 下面这些例子返回真：\n\n```\n-- 字符串作为一个数组元素存在：\nSELECT '[\"foo\", \"bar\", \"baz\"]'::jsonb ? 'bar';\n\n-- 字符串作为一个对象键存在：\nSELECT '{\"foo\": \"bar\"}'::jsonb ? 'foo';\n\n-- 不考虑对象值：\nSELECT '{\"foo\": \"bar\"}'::jsonb ? 'bar';  -- 得到假\n\n-- 和包含一样，存在必须在顶层匹配：\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb ? 'bar'; -- 得到假\n\n-- 如果一个字符串匹配一个基本 JSON 字符串，它就被认为存在：\nSELECT '\"foo\"'::jsonb ? 'foo';\n```\n\n当涉及很多键或元素时，JSON 对象比数组更适合于做包含或存在测试， 因为它们不像数组，进行搜索时会进行内部优化，并且不需要被线性搜索。\n\n**提示**: 由于 JSON 的包含是嵌套的，因此一个恰当的查询可以跳过对子对象的显式选择。 例如，假设我们在顶层有一个doc列包含着对象，大部分对象 包含着tags域，其中有子对象的数组。这个查询会找到其中出现了 同时包含\"term\":“paris\"和\"term”:“food\"的子对象 的项，而忽略任何位于tags数组之外的这类键：\n\n```\nSELECT doc->'site_name' FROM websites\nWHERE doc @> '{\"tags\":[{\"term\":\"paris\"}, {\"term\":\"food\"}]}';\n```\n\n可以用下面的查询完成同样的事情：\n\n```\nSELECT doc->'site_name' FROM websites\nWHERE doc->'tags' @> '[{\"term\":\"paris\"}, {\"term\":\"food\"}]';\n```\n\n但是后一种方法灵活性较差，并且常常也效率更低。\n\n在另一方面，JSON 的存在操作符不是嵌套的：它将只在 JSON 值的顶层 查找指定的键或数组元素。\n\n### 创建索引 [*link*](#%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95)\n\n当将JSON文档插入表中时，该表将只有一个自填充的代理主键列和一个doc数据类型的value列，例如jsonb。与选择相比，选择jsonb允许使用范围更广的运算符和功能，并允许它们更有效地执行json。\n\n```\ncreate table books(k int primary key, doc jsonb not null);\n\ninsert into books(k, doc) values\n\n (1,\n\n '{ \"ISBN\"  : 4582546494267,\n\n   \"title\"  : \"Macbeth\",\n\n   \"author\" : {\"given_name\": \"William\", \"family_name\": \"Shakespeare\"},\n\n   \"year\"  : 1623}'),\n\n (2,\n\n '{ \"ISBN\"  : 8760835734528,\n\n   \"title\"  : \"Hamlet\",\n\n   \"author\" : {\"given_name\": \"William\", \"family_name\": \"Shakespeare\"},\n\n   \"year\"  : 1603,\n\n   \"editors\" : [\"Lysa\", \"Elizabeth\"] }'),\n\n (3,\n\n '{ \"ISBN\"  : 7658956876542,\n\n   \"title\"  : \"Oliver Twist\",\n\n   \"author\" : {\"given_name\": \"Charles\", \"family_name\": \"Dickens\"},\n\n   \"year\"  : 1838,\n\n   \"genre\"  : \"novel\",\n\n   \"editors\" : [\"Mark\", \"Tony\", \"Britney\"] }'),\n\n (4,\n\n '{ \"ISBN\"  : 9874563896457,\n\n   \"title\"  : \"Great Expectations\",\n\n   \"author\" : {\"family_name\": \"Dickens\"},\n\n   \"year\"  : 1950,\n\n   \"genre\"  : \"novel\",\n\n   \"editors\" : [\"Robert\", \"John\", \"Melisa\", \"Elizabeth\"] }'),\n\n (5,\n\n '{ \"ISBN\"  : 8647295405123,\n\n   \"title\"  : \"A Brief History of Time\",\n\n   \"author\" : {\"given_name\": \"Stephen\", \"family_name\": \"Hawking\"},\n\n   \"year\"  : 1988,\n\n   \"genre\"  : \"science\",\n\n   \"editors\" : [\"Melisa\", \"Mark\", \"John\", \"Fred\", \"Jane\"] }'),\n\n (6,\n\n '{\n\n  \"ISBN\"   : 6563973589123,\n\n  \"year\"   : 1989,\n\n  \"genre\"  : \"novel\",\n\n  \"title\"  : \"Joy Luck Club\",\n\n  \"author\"  : {\"given_name\": \"Amy\", \"family_name\": \"Tan\"},\n\n  \"editors\" : [\"Ruilin\", \"Aiping\"]}');\n```\n\n一些行缺少一些键。但是具有“ k = 6”的行具有每个键。\n\n例如，您可能想查看出版年份晚于1850年的书籍的标题和作者。\n\n当然，那么，您将希望索引支持这些查询。另一种方法是，在巨大的语料库上进行表格扫描，对每个文档进行动态分析以评估选择谓词，这可能会导致执行效果太差。\n\n**检查jsonb列的约束**\n\n坚持每个JSON文档都是一个对象的方法如下：\n\n```\nalter table books\n\nadd constraint books_doc_is_object\n\ncheck (jsonb_typeof(doc) = 'object');\n\n坚持ISBN始终是定义的，并且是一个13位正数的方法如下：\n\nalter table books\n\nadd constraint books_isbn_is_positive_13_digit_number\n\ncheck (\n\n (doc->'ISBN') is not null\n\n  and\n\n jsonb_typeof(doc->'ISBN') = 'number'\n\n   and\n\n (doc->>'ISBN')::bigint > 0\n\n  and\n\n length(((doc->>'ISBN')::bigint)::text) = 13\n\n);\n```\n\n请注意，如果键“ ISBN”完全丢失，则该表达式`doc->'ISBN'`将产生一个真正的SQL NULL。但是文档的制作者可能已经决定用键“ ISBN”的特殊JSON值null表示“没有关于本书ISBN的信息”。（请记住，此特殊值具有其自己的数据类型。）这就是为什么仅测试键“ ISBN”的产生数字（因此不能为null）是不够的，以及为什么还要进行单独的测试。jsonb\\_typeof()IS NOT NULL\n\n高层次的观点是，MemFireDB允许您使用可以通过引用单行中的值进行评估的任何表达式来表达约束。该表达式可以包含PL / pgSQL函数。这允许实施约束以坚持JSON对象中的键来自已知列表：\n\n```\ncreate function top_level_keys_ok(json_obj in jsonb)\n\n returns boolean\n\n language plpgsql\n\nas\n\n$body$\n\ndeclare\n\n key text;\n\n legal_keys constant varchar(10)[] := array[\n\n  'ISBN', 'title', 'year', 'genre', 'author', 'editors'];\n\nbegin\n\n for key in (\n\n  select\n\n  jsonb_object_keys(json_obj)\n\n  )\n\n loop\n\n  if not (key = any (legal_keys)) then\n\n   return false;\n\n  end if;\n\n end loop;\n\n return true;\n\nend;\n\n$body$;\n\nalter table books\n\nadd constraint books_doc_keys_OK\n\ncheck (top_level_keys_ok(doc));\n```\n\n**jsonb列上的索引**\n\n正确的实践要求，当一个表具有代理主键时，它还必须具有唯一的NOT NULL业务键。该books表的明显候选者是“ ISBN”键的值。“ books\\_isbn\\_is\\_positive\\_13\\_digit\\_number”约束NOT NULL已强制执行该规则。唯一性以明显的方式实施：\n\n```\ncreate unique index books_isbn_unq\n\non books((doc->>'ISBN') hash);\n```\n\n您可能需要支持引用“ year”键值的范围查询，如下所示：\n\n```\nselect\n\n (doc->>'ISBN')::bigint as year,\n\n doc->>'title'     as title,\n\n (doc->>'year')::int  as year\n\nfrom books\n\nwhere (doc->>'year')::int > 1850\n\norder by 3;\n```\n\n您可能需要使用索引来支持它。而且，如果您意识到相当一部分图书的出版年份是未知的，则您可能希望利用部分索引，因此：\n\n```\ncreate index books_year on books ((doc->>'year') asc)\n\nwhere doc->>'year' is not null;\n```\n\n## 日期类型 [*link*](#%e6%97%a5%e6%9c%9f%e7%b1%bb%e5%9e%8b)\n\nMemFireDB支持`date`、`time`、`timestamp`、`interval`数据类型。\n\n| **数据类型** | **存储尺寸** | **描述** | **最小值** | **最大值** | **解析度** |\n| --- | --- | --- | --- | --- | --- |\n| `timestamp [ (p) ] [ without time zone ]` | 8字节 | 包括日期和时间（无时区） | 4713 BC | 294276 AD | 1微秒 |\n| `timestamp [ (*p*) ] with time zone` | 8字节 | 包括日期和时间，有时区 | 4713 BC | 294276 AD | 1微秒 |\n| `date` | 4字节 | 日期（没有一天中的时间） | 4713 BC | 5874897 AD | 1日 |\n| `time [ (*p*) ] [ without time zone ]` | 8字节 | 一天中的时间（无日期） | `00:00:00` | `24:00:00` | 1微秒 |\n| `time [ (*p*) ] with time zone` | 12字节 | 仅仅是一天中的时间（没有日期），带有时区 | `00:00:00 + 1459` | `24:00:00-1459` | 1微秒 |\n| `interval [ *fields* ] [ (*p*) ]` | 16字节 | 时间间隔 | -178000000年 | 178000000年 | 1微秒 |\n\ntime、timestamp和interval接受一个可选的精度值 p，这个精度值声明在秒域中小数点之后保留位数。缺省情况下，在精度上没有明确的边界。p允许的范围是从 0 到 6。\n\ninterval类型有一个附加选项，它可以通过写下面之一的短语来限制存储的fields的集合：\n\n```\nYEAR\n\nMONTH\n\nDAY\n\nHOUR\n\nMINUTE\n\nSECOND\n```\n\n```\nYEAR TO MONTH\nDAY TO HOUR\nDAY TO MINUTE\nDAY TO SECOND\nHOUR TO MINUTE\nHOUR TO SECOND\nMINUTE TO SECOND\n```\n\n注意如果fields和p被指定，fields必须包括SECOND，因为精度只应用于秒。\n\n类型`time with time zone`是 SQL 标准定义的，但是该定义显示出了一些会影响可用性的性质。在大多数情况下， date、time、timestamp without time zone和timestamp with time zone的组合就应该能提供任何应用所需的全范围的日期/时间功能。\n\n## 布尔类型 [*link*](#%e5%b8%83%e5%b0%94%e7%b1%bb%e5%9e%8b)\n\nMemFireDB提供标准的SQL类型boolean。boolean可以有多个状态：“true（真）”、“false（假）”和第三种状态“unknown（未知）”，未知状态由SQL空值表示。\n\n| **名字** | **存储字节** | **描述** |\n| --- | --- | --- |\n| boolean | 1字节 | 状态为真或假 |\n\n“真”状态的有效文字值是：\n\n| TRUE |\n| --- |\n| ’t' |\n| ’true' |\n| ‘y’ |\n| ‘yes’ |\n| ‘on’ |\n| ‘1’ |\n\n而对于“假”状态，你可以使用下面这些值：\n\n| FALSE |\n| --- |\n| ‘f’ |\n| ‘false’ |\n| ’n' |\n| ’no' |\n| ‘off’ |\n| ‘0’ |\n\n使用字母t和f输出boolean值的例子\n\n```\nCREATE TABLE test1 (a boolean, b text);\nINSERT INTO test1 VALUES (TRUE, 'sic est');\nINSERT INTO test1 VALUES (FALSE, 'non est');\nSELECT * FROM test1;\n a |    b\n---+---------\n t | sic est\n f | non est\n\nSELECT * FROM test1 WHERE a;\n a |    b\n---+---------\n t | sic est\n\nselect * from test5 where a=false;\n```\n\n## 二进制类型 [*link*](#%e4%ba%8c%e8%bf%9b%e5%88%b6%e7%b1%bb%e5%9e%8b)\n\n使用bytea数据类型表示字节的二进制字符串（八位字节）。二进制字符串允许零（0）和不可打印的字节。bytea数据类型允许存储二进制串。\n\n**表 .二进制数据类型**\n\n| **名字** | **存储尺寸** | **描述** |\n| --- | --- | --- |\n| `bytea` | 1或4字节外加真正的二进制串 | 变长二进制串 |\n\n二进制串是一个八位位组（或字节）的序列。 二进制串和字符串的区别有两个： 首先，二进制串明确允许存储零值的字节以及其它“不可打印的”字节（通常是位于十进制范围32到126之外的节）。 字符串不允许零字节，并且也不允许那些对于数据库的选定字符集编码是非法的任何其它字节值或者字节值序列。 第二，对二进制串的操作会处理实际上的字节，而字符串的处理和取决于区域设置。 简单说，二进制字串适用于存储那些程序员认为是“裸字节”的数据，而字符串适合存储文本。\n\nbytea类型支持两种用于输入和输出的格式：“十六进制”格式和PostgreSQL的历史的“转义”格式。在输入时这两种格式总是会被接受。输出格式则取决于配置参数bytea\\_output，其默认值为十六进制。  \nSQL标准定义了一种不同的二进制串类型， 叫做BLOB或者BINARY LARGE OBJECT。其输入格式和bytea不同，但是提供的函数和操作符大多一样。\n\n**bytea的十六进制格式**\n\n“十六进制”格式将二进制数据编码为每个字节2个十六进制位，最高有效位在前。整个串以序列\\x开头（用以和转义格式区分）。在某些情景中，开头的反斜线可能需要通过双写来转义。 作为输入，十六进制位可以是大写也可以是小写，在位对之间可以有空白（但是在位对内部以及开头的\\x序列中不能有空白）。十六进制格式和很多外部应用及协议相兼容，并且其转换速度要比转义格式更快，因此人们更愿意用它。\n\n例子：\n\n```\nSELECT '\\xDEADBEEF';\n```\n\n**bytea的转义格式**\n\n“转义”格式是bytea类型的传统格式。它采用将二进制串表示成ASCII字符序列的方法，而将那些无法用ASCII字符表示的字节转换成特殊的转义语句。从应用的角度来看，如果将字节表示为字符有意义，那么这种表示将很方便。但是在实际中，这常常是令人困扰的，因为它使二进制串和字符串之间的区别变得模糊，并且这种特别的转义机制也有点难于处理。因此这种格式可能会在大部分新应用中避免使用。\n\n在转义模式下输入bytea值时，某些值的字节必须被转义，而所有的字节值都可以被转义。通常，要转义一个字节，需要把它转换成与它的三位八进制值， 并且前导一个反斜线。反斜线本身（十进制字节值92）也可以用双写的反斜线表示。表显示了必须被转义的字符，并给出了可以使用的替代转义序列。\n\n**表bytea文字转义字节**\n\n| **十进制字节值** | **描述** | **转义输入表示** | **例子** | **十六进制表示** |\n| --- | --- | --- | --- | --- |\n| 0 | 0字节 | `'\\000'` | `SELECT '\\000'::bytea;` | `\\x00` |\n| 39 | 单引号 | `''''`或`'\\047'` | `SELECT ''''::bytea;` | `\\x27` |\n| 92 | 反斜线 | `'\\\\'`或`'\\134'` | `SELECT '\\\\'::bytea;` | `\\x5c` |\n| 0到31和127到255 | “不可打印的”字节 | `'\\*xxx'*`（八进制值） | `SELECT '\\001'::bytea;` | `\\x01` |\n\n转义“不可打印的”字节的要求取决于区域设置。在某些实例中，你可以不理睬它们，让它们保持未转义的状态。\n\n如表中所示，要求单引号必须写两次的原因对任何SQL命令中的字符串常量都是一样的。 文字解析器消耗最外层的单引号，并缩减成对的单引号为一个普通数据字符。 bytea输入函数看到的只是一个单引号，它将其视为普通数据字符。\n\n在某些情况下，反斜杠必须加倍，如上所示，因为通用的字符串文字解析器也会 将一对反斜杠减少为一个数据字符。\n\nBytea字节默认被输出为hex格式。如果你把bytea\\_output改为escape，“不可打印的”字节会被转换成与之等效的三位八进制值并且前置一个反斜线。大部分“可打印的”字节被输出为它们在客户端字符集中的标准表示形式，例如：\n\n```\nSET bytea_output = 'escape';\n\nSELECT 'abc \\153\\154\\155 \\052\\251\\124'::bytea;\n     bytea\n----------------\n abc klm *\\251T\n```\n\n十进制值为92（反斜线）的字节在输出时被双写。\n\n**表 bytea输出转义字节**\n\n| **十进制字节值** | **描述** | **转义的输出表示** | **例子** | **输出结果** |\n| --- | --- | --- | --- | --- |\n| 92 | 反斜线 | `\\\\` | `SELECT '\\134'::bytea;` | `\\\\` |\n| 0到31和127到255 | “不可打印的”字节 | `\\*xxx*`（八进制值） | `SELECT '\\001'::bytea;` | `\\001` |\n| 32到126 | “可打印的”字节 | 客户端字符集表示 | `SELECT '\\176'::bytea;` | `~` |\n\n根据你使用的MemFireDB前端，你在转义和未转义bytea串方面可能需要做额外的工作。例如，如果你的接口自动翻译换行和回车，你可能也不得不转义它们。\n\n## UUID数据类型 [*link*](#uuid%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b)\n\nUUID数据类型表示通用唯一标识符（UUID）。数据类型uuid存储由RFC 4122、ISO/IEC 9834-8:2005以及相关标准定义的通用唯一标识符（UUID）（某些系统将这种数据类型引用为全局唯一标识符GUID）。这种标识符是一个128位的量，它由一个精心选择的算法产生，该算法能保证在已知空间中任何其他使用相同算法的人能够产生同一个标识符的可能性非常非常小。因此，对于分布式系统，这些标识符相比序列生成器而言提供了一种很好的唯一性保障，序列生成器只能在一个数据库中保证唯一。\n\nUUID是由32个十六进制数字组成的序列，由128个连字符分隔（8位-4位-4位-4位-12位）。一个标准形式的UUID类似于：\n\n```\nffffffff-ffff-ffff-ffff-ffffffffffff\n{aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa}\n12341234-1234-1234-1234-123412341234\n```\n\n同时支持使用大写位、标准格式被花括号包围、忽略某些或者全部连字符、在任意4位组后面增加一个连字符。\n\n## 货币类型 [*link*](#%e8%b4%a7%e5%b8%81%e7%b1%bb%e5%9e%8b)\n\nmoney类型存储固定小数精度的货币数字，可接受的输入格式很多，包括整数和浮点数文字，以及常用的货币格式，如’$1,000.00’。 输出通常是最后一种形式，但和区域相关。\n\n**货币类型**\n\n| 名字 | 存储尺寸 | 描述 | 范围 |\n| --- | --- | --- | --- |\n| money | 8 bytes | 货币额 | -92233720368547758.08到+92233720368547758.07 |\n\n由于这种数据类型的输出是区域敏感的，因此将money数据装入到一个具有不同lc\\_monetary设置的数据库是不起作用的。为了避免这种问题，在恢复一个转储到一个新数据库中之前，应确保新数据库的lc\\_monetary设置和被转储数据库的相同或者具有等效值。\n\n数据类型numeric、int和bigint的值可以被造型成money。从数据类型real和double precision的转换可以通过先造型成numeric来实现，例如：\n\n```\nSELECT '12.34'::float8::numeric::money;\n```\n\n但是，我们不推荐这样做。浮点数不应该被用来处理货币，因为浮点数可能会有圆整错误。\n\n一个money值可以在不损失精度的情况下被造型成numeric。转换到其他类型可能会丢失精度，并且必须采用两个阶段完成：\n\n```\nSELECT '52093.89'::money::numeric::float8;\n```\n\n一个money值被一个整数值除的除法结果会被截去分数部分。要得到圆整的结果，可以除以一个浮点值，或者在除法之前把money转换成numeric然后在除法之后转回money（如果要避免精度丢失的风险则后者更好）。当一个money值被另一个money值除时，结果是double precision（即一个纯数字，而不是金额），在除法中货币单位被约掉了。\n\n## 数组 [*link*](#%e6%95%b0%e7%bb%84)\n\nMemFireDB允许一个表中的列定义为变长多维数组。可以创建任何内建或用户定义的基类、枚举类型、组合类型或者域的数组。\n\n### 数组类型的定义 [*link*](#%e6%95%b0%e7%bb%84%e7%b1%bb%e5%9e%8b%e7%9a%84%e5%ae%9a%e4%b9%89)\n\n为了展示数组类型的使用，我们创建这样一个表：\n\n```\nCREATE TABLE sal_emp (\n    name            text,\n    pay_by_quarter  integer[],\n    schedule        text[][]\n);\n```\n\n如上所示，一个数组数据类型可以通过在数组元素的数据类型名称后面加上方括号（[]）来命名。上述命令将创建一个名为sal\\_emp的表，它有一个类型为text的列（name），一个表示雇员的季度工资的一维integer类型数组（pay\\_by\\_quarter），以及一个表示雇员每周日程表的二维text类型数组（schedule）。\n\nCREATE TABLE的语法允许指定数组的确切大小，例如：\n\n```\nCREATE TABLE tictactoe (\n    squares   integer[3][3]\n);\n```\n\n然而，当前的实现忽略任何提供的数组尺寸限制，即其行为与未指定长度的数组相同。\n\n当前的实现也不会强制所声明的维度数。一个特定元素类型的数组全部被当作是相同的类型，而不论其尺寸或维度数。因此，在CREATE TABLE中声明数组的尺寸或维度数仅仅只是文档而已，它并不影响运行时的行为。\n\n另一种符合SQL标准的语法是使用关键词ARRAY，可以用来定义一维数组。pay\\_by\\_quarter可以这样定义：\n\n```\npay_by_quarter  integer ARRAY[4],\n```\n\n或者，不指定数组尺寸：\n\n```\npay_by_quarter  integer ARRAY,\n```\n\n但是和前面一样，在任何情况下都不会强制尺寸限制。\n\n### 数组值输入 [*link*](#%e6%95%b0%e7%bb%84%e5%80%bc%e8%be%93%e5%85%a5)\n\n要把一个数组值写成一个文字常数，将元素值用花括号包围并用逗号分隔（如果你懂C，这和初始化结构的C语法没什么两样）。在任意元素值周围可以使用双引号，并且在元素值包含逗号或花括号时必须这样做（更多细节如下所示）。因此，一个数组常量的一般格式如下：\n\n```\n'{ val1 delim val2 delim ... }'\n```\n\n这里delim是类型的定界符，记录在类型的pg\\_type项中。每个val可以是数组元素类型的一个常量，也可以是一个子数组。一个数组常量的例子是：\n\n```\n'{{1,2,3},{4,5,6},{7,8,9}}'\n```\n\n该常量是一个二维的，3乘3数组，它由3个整数子数组构成。\n\n要设置一个数组常量的一个元素为NULL，在该元素值处写NULL（任何NULL的大写或小写变体都有效）。如果你需要一个真正的字符串值“NULL”，你必须在它两边放上双引号。\n\n现在我们可以展示一些INSERT语句：\n\n```\nINSERT INTO sal_emp\n    VALUES ('Bill',\n    '{10000, 10000, 10000, 10000}',\n    '{{\"meeting\", \"lunch\"}, {\"training\", \"presentation\"}}');\n\nINSERT INTO sal_emp\n    VALUES ('Carol',\n    '{20000, 25000, 25000, 25000}',\n    '{{\"breakfast\", \"consulting\"}, {\"meeting\", \"lunch\"}}');\n```\n\n前两个插入的结果看起来像这样：\n\n```\nSELECT * FROM sal_emp;\n name  |      pay_by_quarter       |                 schedule\n-------+---------------------------+-------------------------------------------\n Bill  | {10000,10000,10000,10000} | {{meeting,lunch},{training,presentation}}\n Carol | {20000,25000,25000,25000} | {{breakfast,consulting},{meeting,lunch}}\n(2 rows)\n```\n\n多维数组的每一维都必须有相匹配的长度。不匹配会造成错误，例如：\n\n```\nINSERT INTO sal_emp\n    VALUES ('Bill',\n    '{10000, 10000, 10000, 10000}',\n    '{{\"meeting\", \"lunch\"}, {\"meeting\"}}');\nERROR:  multidimensional arrays must have array expressions with matching dimensions\n```\n\nARRAY构造器语法也可以被用于：\n\n```\nINSERT INTO sal_emp\n    VALUES ('Bill',\n    ARRAY[10000, 10000, 10000, 10000],\n    ARRAY[['meeting', 'lunch'], ['training', 'presentation']]);\n\nINSERT INTO sal_emp\n    VALUES ('Carol',\n    ARRAY[20000, 25000, 25000, 25000],\n    ARRAY[['breakfast', 'consulting'], ['meeting', 'lunch']]);\n```\n\n注意数组元素是普通SQL常数或表达式，例如，字符串文字使用单引号而不是双引号包围，因为双引号可以出现在一个数组文字中。\n\n### 访问数组 [*link*](#%e8%ae%bf%e9%97%ae%e6%95%b0%e7%bb%84)\n\n现在，我们可以在该表上运行一些查询。首先，我们展示如何访问一个数组中的一个元素。下面的查询检索在第二季度工资发生变化的雇员的名字：\n\n```\nSELECT name FROM sal_emp WHERE pay_by_quarter[1] <> pay_by_quarter[2];\n\n name\n-------\n Carol\n(1 row)\n```\n\n数组下标写在方括号内。默认情况下，MemFiresDB为数组使用了一种从1开始的编号习惯，即一个具有n个元素的数组从array[1]开始，结束于array[n]。\n\n下面的查询检索所有员工第三季度的工资：\n\n```\nSELECT pay_by_quarter[3] FROM sal_emp;\n\n pay_by_quarter\n----------------\n          10000\n          25000\n(2 rows)\n```\n\n我们也可以访问一个数组的任意矩形切片或者子数组。一个数组切片可以通过在一个或多个数组维度上指定下界:上界来定义例如，下面的查询检索Bill在本周头两天日程中的第一项：\n\n```\nSELECT schedule[1:2][1:1] FROM sal_emp WHERE name = 'Bill';\n\n        schedule\n------------------------\n {{meeting},{training}}\n(1 row)\n```\n\n如果任何维度被写成一个切片，即包含一个冒号，那么所有的维度都被看成是切片对待。其中任何只有一个数字（无冒号）的维度被视作是从1到指定的数字。例如，下面例子中的[2]被认为是[1:2]：\n\n```\nSELECT schedule[1:2][2] FROM sal_emp WHERE name = 'Bill';\n\n                 schedule\n-------------------------------------------\n {{meeting,lunch},{training,presentation}}\n(1 row)\n```\n\n为了避免和非切片情况搞混，最好在所有的维度上都使用切片语法，例如[1:2][1:1]而不是[2][1:1]。\n\n可以省略一个切片说明符的lower-bound或者 upper-bound（亦可两者都省略），缺失的 边界会被数组下标的上下限所替代。例如：\n\n```\nSELECT schedule[:2][2:] FROM sal_emp WHERE name = 'Bill';\n\n        schedule\n------------------------\n {{lunch},{presentation}}\n(1 row)\n\nSELECT schedule[:][1:1] FROM sal_emp WHERE name = 'Bill';\n\n        schedule\n------------------------\n {{meeting},{training}}\n(1 row)\n```\n\n如果数组本身为空或者任何一个下标表达式为空，访问数组下标表达式将会返回空值。如果下标超过了数组边界，下标表达式也会返回空值（这种情况不会抛出错误）。例如，如果schedule目前具有的维度是[1:3][1:2]，那么引用schedule[3][3]将得到NULL。相似地，使用错误的下标号引用一个数组会得到空值而不是错误。\n\n如果数组本身或者任何一个下标表达式为空，则一个数组切片表达式也会得到空值。但是，在其他情况例如选择一个完全位于当前数组边界之外的切片时，一个切片表达式会得到一个空（零维）数组而不是空值（由于历史原因，这并不符合非切片行为）。 如果所请求的切片和数组边界重叠，那么它会被缩减为重叠的区域而不是返回空。\n\n任何数组值的当前维度可以使用array\\_dims函数获得：\n\n```\nSELECT array_dims(schedule) FROM sal_emp WHERE name = 'Carol';\n\n array_dims\n------------\n [1:2][1:2]\n(1 row)\n```\n\narray\\_dims产生一个text结果，它便于人类阅读但是不便于程序读取。 Dimensions can also be retrieved with 也可以通过array\\_upper和array\\_lower来获得维度，它们将分别返回一个指定数组的上界和下界：\n\n```\nSELECT array_upper(schedule, 1) FROM sal_emp WHERE name = 'Carol';\n\n array_upper\n-------------\n           2\n(1 row)\n```\n\narray\\_length将返回一个指定数组维度的长度：\n\n```\nSELECT array_length(schedule, 1) FROM sal_emp WHERE name = 'Carol';\n\n array_length\n--------------\n            2\n(1 row)\n```\n\ncardinality返回一个数组中在所有维度上的元素总数。 这实际上是调用unnest将会得到的行数：\n\n```\nSELECT cardinality(schedule) FROM sal_emp WHERE name = 'Carol';\n\n cardinality\n-------------\n           4\n(1 row)\n```\n\n### 修改数组 [*link*](#%e4%bf%ae%e6%94%b9%e6%95%b0%e7%bb%84)\n\n一个数组值可以被整个替换：\n\n```\nUPDATE sal_emp SET pay_by_quarter = '{25000,25000,27000,27000}'\n  WHERE name = 'Carol';\n```\n\n或者使用ARRAY表达式语法：\n\n```\nUPDATE sal_emp SET pay_by_quarter = ARRAY[25000,25000,27000,27000]\n  WHERE name = 'Carol';\n```\n\n一个数组也可以在一个元素上被更新：\n\n```\nUPDATE sal_emp SET pay_by_quarter[4] = 15000\n  WHERE name = 'Bill';\n```\n\n或者在一个切片上被更新：\n\n```\nUPDATE sal_emp SET pay_by_quarter[1:2] = '{27000,27000}'\n  WHERE name = 'Carol';\n```\n\n也可以使用省略lower-bound或者 upper-bound的切片语法，但是只能用于 更新一个不是 NULL 或者零维的数组值（否则无法替换现有的下标界线）。\n\n一个已存储的数组值可以被通过为其还不存在的元素赋值来扩大之。任何位于之前已存在的元素和新元素之间的位置都将被空值填充。例如，如果数组myarray目前有4个元素，在用一个更新对myarray[6]赋值后它将有6个元素，其中myarray[5]为空值。目前，采用这种方式扩大数组只允许使用在一维数组上。\n\n带下标的赋值方式允许创建下标不是从1开始的数组。例如，我们可以为myarray[-2:7]赋值来创建一个下标值从-2到7的数组。\n\n新的数组值也可以通过串接操作符||构建：\n\n```\nSELECT ARRAY[1,2] || ARRAY[3,4];\n ?column?\n-----------\n {1,2,3,4}\n(1 row)\n\nSELECT ARRAY[5,6] || ARRAY[[1,2],[3,4]];\n      ?column?\n---------------------\n {{5,6},{1,2},{3,4}}\n(1 row)\n```\n\n串接操作符允许把一个单独的元素加入到一个一维数组的开头或末尾。它也能接受两个N维数组，或者一个N维数组和一个N+1维数组。\n\n当一个单独的元素被加入到一个一维数组的开头或末尾时，其结果是一个和数组操作数具有相同下界下标的新数组。例如：\n\n```\nSELECT array_dims(1 || '[0:1]={2,3}'::int[]);\n array_dims\n------------\n [0:2]\n(1 row)\n\nSELECT array_dims(ARRAY[1,2] || 3);\n array_dims\n------------\n [1:3]\n(1 row)\n```\n\n当两个具有相同维度数的数组被串接时，其结果保留左操作数的外维度的下界下标。结果将是一个数组，它由左操作数的每一个元素以及紧接着的右操作数的每一个元素。例如：\n\n```\nSELECT array_dims(ARRAY[1,2] || ARRAY[3,4,5]);\n array_dims\n------------\n [1:5]\n(1 row)\n\nSELECT array_dims(ARRAY[[1,2],[3,4]] || ARRAY[[5,6],[7,8],[9,0]]);\n array_dims\n------------\n [1:5][1:2]\n(1 row)\n```\n\n当一个N维数组被放在另一个N+1维数组的前面或者后面时，结果和上面的例子相似。每一个N维子数组实际上是N+1维数组外维度的一个元素。例如：\n\n```\nSELECT array_dims(ARRAY[1,2] || ARRAY[[3,4],[5,6]]);\n array_dims\n------------\n [1:3][1:2]\n(1 row)\n```\n\n一个数组也可以通过使用函数array\\_prepend、array\\_append或array\\_cat构建。前两个函数仅支持一维数组，但array\\_cat支持多维数组。 一些例子：\n\n```\nSELECT array_prepend(1, ARRAY[2,3]);\n array_prepend\n---------------\n {1,2,3}\n(1 row)\n\nSELECT array_append(ARRAY[1,2], 3);\n array_append\n--------------\n {1,2,3}\n(1 row)\n\nSELECT array_cat(ARRAY[1,2], ARRAY[3,4]);\n array_cat\n-----------\n {1,2,3,4}\n(1 row)\n\nSELECT array_cat(ARRAY[[1,2],[3,4]], ARRAY[5,6]);\n      array_cat\n---------------------\n {{1,2},{3,4},{5,6}}\n(1 row)\n\nSELECT array_cat(ARRAY[5,6], ARRAY[[1,2],[3,4]]);\n      array_cat\n---------------------\n {{5,6},{1,2},{3,4}}\n```\n\n在简单的情况中，上面讨论的串接操作符比直接使用这些函数更好。不过，由于 串接操作符需要服务于所有三种情况，所以它的负担比较重，在有些情况下使用 这些函数之一有助于避免混淆。例如：\n\n```\nSELECT ARRAY[1, 2] || '{3, 4}';  -- 没有指定类型的文字被当做一个数组\n ?column?\n-----------\n {1,2,3,4}\n\nSELECT ARRAY[1, 2] || '7';                 -- 这个也是\nERROR:  malformed array literal: \"7\"\n\nSELECT ARRAY[1, 2] || NULL;                -- 未修饰的 NULL 也是如此\n ?column?\n----------\n {1,2}\n(1 row)\n\nSELECT array_append(ARRAY[1, 2], NULL);    -- 这可能才是想要的意思\n array_append\n--------------\n {1,2,NULL}\n```\n\n在上面的例子中，解析器看到在串接操作符的一遍看到了一个整数数组，并且在 另一边看到了一个未确定类型的常量。它用来决定该常量类型的启发式规则是假 定它和该操作符的另一个输入具有相同的类型 — 在这种情况中是整数数 组。因此串接操作符表示array\\_cat而不是 array\\_append。如果这样做是错误的选择，它可以通过将该常 量造型成数组的元素类型来修复。但是显式地使用array\\_append 可能是一种最好的方案。\n\n### 在数组中搜索 [*link*](#%e5%9c%a8%e6%95%b0%e7%bb%84%e4%b8%ad%e6%90%9c%e7%b4%a2)\n\n要在一个数组中搜索一个值，每一个值都必须被检查。这可以手动完成，但是我们必须知道数组的尺寸。例如：\n\n```\nSELECT * FROM sal_emp WHERE pay_by_quarter[1] = 10000 OR\n                          pay_by_quarter[2] = 10000 OR\n                          pay_by_quarter[3] = 10000 OR\n                          pay_by_quarter[4] = 10000;\n```\n\n但是这对于大型数组来说太过冗长，且在数组尺寸未知时无法使用。上面的查询可以被替换为：\n\n```\nSELECT * FROM sal_emp WHERE 10000 = ANY (pay_by_quarter);\n```\n\n此外，我们还可以查找所有元素值都为10000的数组所在的行：\n\n```\nSELECT * FROM sal_emp WHERE 10000 = ALL (pay_by_quarter);\n```\n\n另外，generate\\_subscripts函数也可以用来完成类似的查找。例如：\n\n```\nSELECT * FROM\n  (SELECT pay_by_quarter,\n          generate_subscripts(pay_by_quarter, 1) AS s\n     FROM sal_emp) AS foo\nWHERE pay_by_quarter[s] = 10000;\n```\n\n我们也可以使用&&操作符来搜索一个数组，它会检查左操作数是否与右操作数重叠。例如：\n\n```\nSELECT * FROM sal_emp WHERE pay_by_quarter && ARRAY[10000];\n```\n\n你也可以使用array\\_position和array\\_positions在一个 数组中搜索特定值。前者返回值在数组中第一次出现的位置的下标。后者返回一个数组， 其中有该值在数组中的所有出现位置的下标。例如：\n\n```\nSELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon');\n array_positions\n-----------------\n 2\n\nSELECT array_positions(ARRAY[1, 4, 3, 1, 3, 4, 2, 1], 1);\n array_positions\n-----------------\n {1,4,8}\n```\n\n### 数组输入和输出语法 [*link*](#%e6%95%b0%e7%bb%84%e8%be%93%e5%85%a5%e5%92%8c%e8%be%93%e5%87%ba%e8%af%ad%e6%b3%95)\n\n一个数组值的外部文本表现由根据数组元素类型的I/O转换规则解释的项构成，并在其上加上修饰用于指示数组结构。修饰包括数组值周围的花括号（{和}）以及相邻项之间的定界字符。定界字符通常是一个逗号（,），但是也可能是别的：它由数组元素类型的typdelim设置决定。除了box类型使用分号（;）之外，其他都是用逗号。在一个多维数组中，每一个维度（行、平面、方体等）都有其自己的花括号层次，且同层的被花括号限定的相邻实体之间也必须有定界符。\n\n如果元素值是空字符串、包含花括号、包含定界字符、包含双引号、包含反斜线、包含空白或者匹配词NULL，数组输出例程将在元素值周围放上双引号。嵌在元素值中的双引号以及反斜线将被反斜线转义。对于数字数据类型可以安全地假设双引号绝不会出现，但是对于文本数据类型我们必须准备好处理可能出现亦可能不出现的引号。\n\n默认情况下，一个数组的一个维度的下界索引值被设置为1。要表示具有其他下界的数组，数组下标的范围应在填充数组内容之前被显式地指定好。这种修饰包括在每个数组维度上下界周围的方括号（[]），以及上下界之间的一个冒号（:）定界符。数组维度修饰后面要跟一个等号（=）。例如：\n\n```\nSELECT f1[1][-2][3] AS e1, f1[1][-1][5] AS e2\n FROM (SELECT '[1:1][-2:-1][3:5]={{{1,2,3},{4,5,6}}}'::int[] AS f1) AS ss;\n\n e1 | e2\n----+----\n  1 |  6\n(1 row)\n```\n\n只有当数组的维度中有一个或多个的下界不为1时，数组输出例程才会在结果中包括维度。\n\n如果为一个元素给定的值是NULL（或者是任何变体），该元素将被设置为NULL。任何引号或反斜线的存在将阻止这种行为，而允许为元素值输入“NULL”的字面意思。\n\n如前所示，在写一个数组值时我们可以在任何单独数组元素周围使用引号。如果元素值可能混淆数组值分析器时，我们必须 这样做。例如，包含花括号、逗号（或者数据类型的定界符）、双引号、反斜线或首尾有空白的元素必须使用双引号。空字符串和匹配单词NULL的字符串也必须使用双引号。要把一个双引号或反斜线放在一个使用了双引号的数组元素值中，需要在它前面放一个反斜线。作为一种选择，我们可以免去使用引号而使用反斜线转义的方式来保护可能被认为是数组语法的所有数据字符。\n\n我们可以在左括号前面或右括号后面增加空白。我们也可以在任何单独的项之前或之后加上空白。在所有这些情况中空白将被忽略。但是，在被使用了双引号的元素中的空白以及周围有其他非空白字符的空白不会被忽略。\n\n## 几何类型 [*link*](#%e5%87%a0%e4%bd%95%e7%b1%bb%e5%9e%8b)\n\n几何数据类型表示二维的空间物体。下表展示了MemFireDB中可以用的几何类型。\n\n**表几何类型**\n\n| 名字 | 存储尺寸 | 表示 | 描述 |\n| --- | --- | --- | --- |\n| point | 16字节 | 平面上的点 | (x,y) |\n| line | 32字节 | 无限长的线 | {A,B,C} |\n| lseg | 32字节 | 有限线段 | ((x1,y1),(x2,y2)) |\n| box | 32字节 | 矩形框 | ((x1,y1),(x2,y2)) |\n| path | 16+16n字节 | 封闭路径（类似于多边形） | ((x1,y1),…) |\n| path | 16+16n字节 | 开放路径 | [(x1,y1),…] |\n| polygon | 40+16n字节 | 多边形（类似于封闭路径） | ((x1,y1),…) |\n| circle | 24字节 | 圆 | <(x,y),r>（中心点和半径） |\n\n我们有一系列丰富的函数和操作符可用来进行各种几何操作， 如缩放、平移、旋转和计算相交等。\n\n### 点 [*link*](#%e7%82%b9)\n\n点是几何类型的基本二维构造块。用下面的语法描述point类型的值：\n\n```\n( x , y )\nx , y\n```\n\n其中x和y分别是坐标，都是浮点数。\n\n点使用第一种语法输出。\n\n### 线 [*link*](#%e7%ba%bf)\n\n线由线性方程Ax + By + C = 0 表示，其中A和B都不为零。类型line 的值采用以下形式输入和输出：\n\n```\n{ A, B, C }\n```\n\n另外，还可以用下列任一形式输入：\n\n```\n[ ( x1 , y1 ) , ( x2 , y2 ) ]\n( ( x1 , y1 ) , ( x2 , y2 ) )\n  ( x1 , y1 ) , ( x2 , y2 )\n    x1 , y1   ,   x2 , y2\n```\n\n其中 (x1,y1) 和 (x2,y2) 是线上不同的两点。\n\n### 线段 [*link*](#%e7%ba%bf%e6%ae%b5)\n\n线段用一对线段的端点来表示。lseg类型的值用下面的语法声明：\n\n```\n[ ( x1 , y1 ) , ( x2 , y2 ) ]\n( ( x1 , y1 ) , ( x2 , y2 ) )\n  ( x1 , y1 ) , ( x2 , y2 )\n    x1 , y1   ,   x2 , y2\n```\n\n其中(x1,y1) 和 (x2,y2) 是线段的端点。\n\n线段使用第一种语法输出。\n\n### 方框 [*link*](#%e6%96%b9%e6%a1%86)\n\n方框用其对角的点对表示。box类型的值使用下面的语法指定：\n\n```\n( ( x1 , y1 ) , ( x2 , y2 ) )\n( x1 , y1 ) , ( x2 , y2 )\n  x1 , y1   ,   x2 , y2\n```\n\n其中(x1,y1) 和 (x2,y2) 是方框的对角点。\n\n方框使用第二种语法输出。\n\n在输入时可以提供任意两个对角，但是值将根据需要被按顺序记录为右上角和左下角。\n\n### 路径 [*link*](#%e8%b7%af%e5%be%84)\n\n路径由一系列连接的点组成。路径可能是开放的，也就是认为列表中第一个点和最后一个点没有被连接起来；也可能是封闭的，这时认为第一个和最后一个点被连接起来。\n\npath类型的值用下面的语法声明：\n\n```\n[ ( x1 , y1 ) , ... , ( xn , yn ) ]\n( ( x1 , y1 ) , ... , ( xn , yn ) )\n  ( x1 , y1 ) , ... , ( xn , yn )\n  ( x1 , y1   , ... ,   xn , yn )\n    x1 , y1   , ... ,   xn , yn\n```\n\n其中的点是组成路径的线段的端点。方括弧（[]）表示一个开放的路径，圆括弧（()）表示一个封闭的路径。如第三种到第五种语法所示，当最外面的圆括号被忽略时，路径将被假定为封闭。\n\n路径的输出使用第一种或第二种语法。\n\n### 多边形 [*link*](#%e5%a4%9a%e8%be%b9%e5%bd%a2)\n\n多边形由一系列点代表（多边形的顶点）。多边形和封闭路径很像，但是存储方式不一样而且有自己的一套支持例程。\n\npolygon类型的值用下列语法声明：\n\n```\n( ( x1 , y1 ) , ... , ( xn , yn ) )\n( x1 , y1 ) , ... , ( xn , yn )\n( x1 , y1   , ... ,   xn , yn )\n  x1 , y1   , ... ,   xn , yn\n```\n\n其中的点是组成多边形边界的线段的端点。\n\n多边形的输出使用第一种语法。\n\n### 圆 [*link*](#%e5%9c%86)\n\n圆由一个圆心和一个半径代表。circle类型的值用下面的语法指定：\n\n```\n< ( x , y ) , r >\n( ( x , y ) , r )\n  ( x , y ) , r\n    x , y   , r\n```\n\n其中(x,y)是圆心，而r是圆的半径。\n\n圆的输出用第一种语法。\n\n## 网络地址类型 [*link*](#%e7%bd%91%e7%bb%9c%e5%9c%b0%e5%9d%80%e7%b1%bb%e5%9e%8b)\n\nMemFireDB提供用于存储 IPv4、IPv6 和 MAC 地址的数据类型。 用这些数据类型存储网络地址比用纯文本类型好，因为这些类型提供输入错误检查以及特殊的操作符和函数（见第 9.12 节）\n\n**表 网络地址类型**\n\n| 名字 | 存储尺寸 | 描述 |\n| --- | --- | --- |\n| cidr | 7或19字节 | IPv4和IPv6网络 |\n| inet | 7或19字节 | IPv4和IPv6主机以及网络 |\n| macaddr | 6字节 | MAC地址 |\n| macaddr8 | 8 bytes | MAC地址（EUI-64格式） |\n\n在对inet或者cidr数据类型进行排序的时候， IPv4 地址将总是排在 IPv6 地址前面，包括那些封装或者是映射在 IPv6 地址里 的 IPv4 地址，例如 `::10.2.3.4` 或者 `::ffff::10.4.3.2`。\n\n### inet [*link*](#inet)\n\ninet在一个数据域里保存一个 IPv4 或 IPv6 主机地址，以及一个可选的它的子网。 子网由主机地址中表示的网络地址位数表示（“网络掩码”）。 如果网络掩码为 32 并且地址是 IPv4 ，那么该值不表示任何子网，只是一台主机。在 IPv6 中地址长度是 128 位，因此 128 位指定一个唯一的主机地址。 请注意如果你想只接受网络地址，你应该使用cidr类型而不是inet。\n\n该类型的输入格式是地址/y，其中地址是一个 IPv4 或者 IPv6 地址，y是网络掩码的位数。如果/y部分缺失， 则网络掩码对 IPv4 而言是 32，对 IPv6 而言是 128，所以该值表示只有一台主机。在显示时，如果/y部分指定一个单台主机，它将不会被显示出来。\n\n### cidr [*link*](#cidr)\n\ncidr类型保存一个 IPv4 或 IPv6 网络地址声明。其输入和输出遵循无类的互联网域路由（Classless Internet Domain Routing）习惯。声明一个网络的格式是地址/y，其中address是 IPv4 或 IPv6 网络地址而y是网络掩码的位数。如果省略y， 那么掩码部分用旧的有类的网络编号系统进行计算，否则它将至少大到足以包括写在输入中的所有字节。声明一个在其指定的掩码右边置了位的网络地址会导致错误。\n\n**表 cidr类型输入例子**\n\n| cidr输入 | cidr输出 | abbrev(cidr) |\n| --- | --- | --- |\n| 192.168.100.128/25 | 192.168.100.128/25 | 192.168.100.128/25 |\n| 192.168/24 | 192.168.0.0/24 | 192.168.0/24 |\n| 192.168/25 | 192.168.0.0/25 | 192.168.0.0/25 |\n| 192.168.1 | 192.168.1.0/24 | 192.168.1/24 |\n| 192.168 | 192.168.0.0/24 | 192.168.0/24 |\n| 128.1 | 128.1.0.0/16 | 128.1/16 |\n| 128 | 128.0.0.0/16 | 128.0/16 |\n| 128.1.2 | 128.1.2.0/24 | 128.1.2/24 |\n| 10.1.2 | 10.1.2.0/24 | 10.1.2/24 |\n| 10.1 | 10.1.0.0/16 | 10.1/16 |\n| 10 | 10.0.0.0/8 | 10/8 |\n| 10.1.2.3/32 | 10.1.2.3/32 | 10.1.2.3/32 |\n| `2001:4f8:3:ba::/64` | `2001:4f8:3:ba::/64` | `2001:4f8:3:ba::/64` |\n| `2001:4f8:3:ba:2e0:81ff:fe22:d1f1/128` | `2001:4f8:3:ba:2e0:81ff:fe22:d1f1/128` | `2001:4f8:3:ba:2e0:81ff:fe22:d1f1` |\n| `::ffff:1.2.3.0/120` | `::ffff:1.2.3.0/120` | `::ffff:1.2.3/120` |\n| `::ffff:1.2.3.0/128` | `::ffff:1.2.3.0/128` | `::ffff:1.2.3.0/128` |\n\n### inet vs. cidr [*link*](#inet-vs-cidr)\n\ninet和cidr类型之间的本质区别是inet接受右边有非零位的网络掩码， 而cidr不接受。例如，192.168.0.1/24对inet是有效的，但对cidr是无效的。\n\n### macaddr [*link*](#macaddr)\n\nmacaddr类型存储 MAC 地址，也就是以太网卡硬件地址 （尽管 MAC 地址还用于其它用途）。可以接受下列格式的输入：\n\n| `'08:00:2b:01:02:03'` |\n| --- |\n| ‘08-00-2b-01-02-03’ |\n| ‘08002b:010203’ |\n| ‘08002b-010203’ |\n| ‘0800.2b01.0203’ |\n| ‘0800-2b01-0203’ |\n| ‘08002b010203’ |\n\n这些例子指定的都是同一个地址。对于位a到f，大小写都可以接受。输出总是使用展示的第一种形式。\n\nIEEE Std 802-2001 指定第二种展示的形式（带有连字符）作为MAC地址的标准形式，并且指定第一种形式（带有分号）作为位翻转的记号，因此 `08-00-2b-01-02-03 = 01:00:4D:08:04:0C`。这种习惯目前已经被广泛地忽略，并且它只与废弃的网络协议（如令牌环）相关。\n\n剩下的五种输入格式不属于任何标准。\n\n### macaddr8 [*link*](#macaddr8)\n\nmacaddr8类型以EUI-64格式存储MAC地址，例如以太网卡的硬件地址（尽管MAC地址也被用于其他目的）。这种类型可以接受6字节和8字节长度的MAC地址，并且将它们存储为8字节长度的格式。以6字节格式给出的MAC地址被存储为8字节长度格式的方式是吧第4和第5字节分别设置为FF和FE。 注意IPv6使用一种修改过的EUI-64格式，其中从EUI-48转换过来后的第7位应该被设置为一。函数macaddr8\\_set7bit被用来做这种修改。 一般而言，任何由16进制数（字节边界上）对构成的输入（可以由’:’、’-‘或者’.‘统一地分隔）都会被接受。16进制数的数量必须是16（8字节）或者12（6字节）。前导和拖尾的空格会被忽略。 下面是可以被接受的输入格式的例子：\n\n| `'08:00:2b:01:02:03:04:05'` |\n| --- |\n| ‘08-00-2b-01-02-03-04-05’ |\n| ‘08002b:0102030405’ |\n| ‘08002b-0102030405’ |\n| ‘0800.2b01.0203.0405’ |\n| ‘0800-2b01-0203-0405’ |\n| ‘08002b01:02030405’ |\n| ‘08002b0102030405’ |\n\n这些例子都指定相同的地址。数字a到f的大小写形式都被接受。输出总是以上面显示的第一种形式。 上述的后六种输入格式不属于任何标准。 要把EUI-48格式的传统48位MAC地址转换成修改版EUI-64格式（包括在IPv6地址中作为主机部分），可以使用下面的macaddr8\\_set7bit：\n\n```\nSELECT macaddr8_set7bit('08:00:2b:01:02:03');\n\n    macaddr8_set7bit\n-------------------------\n 0a:00:2b:ff:fe:01:02:03\n(1 row)\n```\n\n## 文本检索类型 [*link*](#%e6%96%87%e6%9c%ac%e6%a3%80%e7%b4%a2%e7%b1%bb%e5%9e%8b)\n\nMemFireDB提供两种数据类型，它们被设计用来支持全文搜索，全文搜索是一种在自然语言的文档集合中搜索以定位那些最匹配一个查询的文档的活动。tsvector类型表示一个为文本搜索优化的形式下的文档，tsquery类型表示一个文本查询。\n\n### tsvector [*link*](#tsvector)\n\n一个tsvector值是一个排序的可区分词位的列表，词位是被正规化合并了同一个词的不同变种的词。排序和去重是在输入期间自动完成的，如下例所示：\n\n```\nSELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector;\n                      tsvector\n----------------------------------------------------\n 'a' 'and' 'ate' 'cat' 'fat' 'mat' 'on' 'rat' 'sat'\n```\n\n要表示包含空白或标点的词位，将它们用引号包围：\n\n```\nSELECT $$the lexeme '    ' contains spaces$$::tsvector;\n                 tsvector\n-------------------------------------------\n '    ' 'contains' 'lexeme' 'spaces' 'the'\n```\n\n（我们在这个例子中使用美元符号包围的串文字并且下一个用来避免在文字中包含双引号记号产生的混淆）。嵌入的引号和反斜线必须被双写：\n\n```\nSELECT $$the lexeme 'Joe''s' contains a quote$$::tsvector;\n                    tsvector\n------------------------------------------------\n 'Joe''s' 'a' 'contains' 'lexeme' 'quote' 'the'\n```\n\n可选的，整数位置可以被附加给词位：\n\n```\nSELECT 'a:1 fat:2 cat:3 sat:4 on:5 a:6 mat:7 and:8 ate:9 a:10 fat:11 rat:12'::tsvector;\n                                  tsvector\n-------------------------------------------------------------------------------\n 'a':1,6,10 'and':8 'ate':9 'cat':3 'fat':2,11 'mat':7 'on':5 'rat':12 'sat':4\n```\n\n一个位置通常表示源词在文档中的定位。位置信息可以被用于邻近排名。位置值可以从 1 到 16383，更大的数字会被 16383。对于相同的词位出现的重复位置将被丢弃。\n\n具有位置的词位可以进一步地被标注一个权重，它可以是A、 B、C或D。 D是默认值并且因此在输出中不会显示：\n\n```\nSELECT 'a:1A fat:2B,4C cat:5D'::tsvector;\n          tsvector\n----------------------------\n 'a':1A 'cat':5 'fat':2B,4C\n```\n\n权重通常被用来反映文档结构，例如将主题词标记成与正文词不同。文本搜索排名函数可以为不同的权重标记器分配不同的优先级。\n\n了解tsvector类型本身并不执行任何词正规化这一点很重要，它假定给它的词已经被恰当地为应用正规化过。例如，\n\n```\nSELECT 'The Fat Rats'::tsvector;\n      tsvector\n--------------------\n 'Fat' 'Rats' 'The'\n```\n\n对于大部分英语文本搜索应用，上面的词将会被认为是非正规化的，但是tsvector并不在乎这一点。原始文档文本通常应该经过to\\_tsvector以恰当地为搜索正规化其中的词：\n\n```\nSELECT to_tsvector('english', 'The Fat Rats');\n   to_tsvector\n-----------------\n 'fat':2 'rat':3\n```\n\n再次地，详情请参阅第 12 章。\n\n### tsquery [*link*](#tsquery)\n\n一个tsquery值存储要用于搜索的词位，并且使用布尔操作符&（AND）、|（OR）和!（NOT）来组合它们，还有短语搜索操作符<->（FOLLOWED BY）。也有一种 FOLLOWED BY 操作符的变体，其中N是一个整数常量，它指定要搜索的两个词位之间的距离。<->等效于<1>。\n\n圆括号可以被用来强制对操作符分组。如果没有圆括号，!（NOT）的优先级最高，其次是<->（FOLLOWED BY），然后是&（AND），最后是|（OR）。\n\n这里有一些例子：\n\n```\nSELECT 'fat & rat'::tsquery;\n    tsquery\n---------------\n 'fat' & 'rat'\n\nSELECT 'fat & (rat | cat)'::tsquery;\n          tsquery\n---------------------------\n 'fat' & ( 'rat' | 'cat' )\n\nSELECT 'fat & rat & ! cat'::tsquery;\n        tsquery\n------------------------\n 'fat' & 'rat' & !'cat'\n```\n\n可选地，一个tsquery中的词位可以被标注一个或多个权重字母，这将限制它们只能和具有那些权重之一的tsvector词位相匹配：\n\n```\nSELECT 'fat:ab & cat'::tsquery;\n    tsquery\n------------------\n 'fat':AB & 'cat'\n```\n\n此外，一个tsquery中的词位可以被标注为\\*来指定前缀匹配：\n\n```\nSELECT 'super:*'::tsquery;\n  tsquery\n-----------\n 'super':*\n```\n\n这个查询将匹配一个tsvector中以“super”开头的任意词。\n\n## 范围类型 [*link*](#%e8%8c%83%e5%9b%b4%e7%b1%bb%e5%9e%8b)\n\n范围类型是表达某种元素类型（称为范围的subtype）的一个值的范围的数据类型。例如，timestamp的范围可以被用来表达一个会议室被保留的时间范围。在这种情况下，数据类型是tsrange（“timestamp range”的简写）而timestamp是 subtype。subtype 必须具有一种总体的顺序，这样对于元素值是在一个范围值之内、之前或之后就是界线清楚的。\n\n范围类型非常有用，因为它们可以表达一种单一范围值中的多个元素值，并且可以很清晰地表达诸如范围重叠等概念。用于时间安排的时间和日期范围是最清晰的例子；但是价格范围、一种仪器的量程等等也都有用。\n\n### 内建范围类型 [*link*](#%e5%86%85%e5%bb%ba%e8%8c%83%e5%9b%b4%e7%b1%bb%e5%9e%8b)\n\nMemFireDB 带有下列内建范围类型：\n\n· int4range — integer的范围  \n· int8range — bigint的范围  \n· numrange — numeric的范围  \n· tsrange — 不带时区的 timestamp的范围  \n· tstzrange — 带时区的 timestamp的范围  \n· daterange — date的范围\n\n此外，你可以定义自己的范围类型，详见CREATE TYPE。\n\n### 例子 [*link*](#%e4%be%8b%e5%ad%90)\n\n```\nCREATE TABLE reservation (room int, during tsrange);\nINSERT INTO reservation VALUES\n    (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');\n\n-- 包含\nSELECT int4range(10, 20) @> 3;\n\n-- 重叠\nSELECT numrange(11.1, 22.2) && numrange(20.0, 30.0);\n\n-- 抽取上界\nSELECT upper(int8range(15, 25));\n\n-- 计算交集\nSELECT int4range(10, 20) * int4range(15, 25);\n\n-- 范围为空吗？\nSELECT isempty(numrange(1, 5));\n```\n\n### 包含和排除边界 [*link*](#%e5%8c%85%e5%90%ab%e5%92%8c%e6%8e%92%e9%99%a4%e8%be%b9%e7%95%8c)\n\n每一个非空范围都有两个界限，下界和上界。这些值之间的所有点都被包括在范围内。一个包含界限意味着边界点本身也被包括在范围内，而一个排除边界意味着边界点不被包括在范围内。\n\n在一个范围的文本形式中，一个包含下界被表达为“[”而一个排除下界被表达为“(”。同样，一个包含上界被表达为“]”而一个排除上界被表达为“)”。\n\n函数lower\\_inc和upper\\_inc分别测试一个范围值的上下界。\n\n### 无限（无界）范围 [*link*](#%e6%97%a0%e9%99%90%e6%97%a0%e7%95%8c%e8%8c%83%e5%9b%b4)\n\n一个范围的下界可以被忽略，意味着所有小于上界的点都被包括在范围中。同样，如果范围的上界被忽略，那么所有比上界大的的都被包括在范围中。如果上下界都被忽略，该元素类型的所有值都被认为在该范围中。\n\n这等效于把下界当作“负无穷”，或者把上界当作“正无穷”。但是注意这些无穷值绝不是范围的元素类型的值，并且绝不是范围的一部分（因此没有所谓的包含无限界限 — 如果你尝试写一个，它将被自动转换成一个排除界限）。\n\n还有，有一些元素类型具有一种“无限”概念，但是那只是范围类型机制所关心的之外的另一种值。例如，在时间戳范围中，[today,]意味着与[today,)相同的东西。但是[today,infinity]意味着与[today,infinity)不同的某种东西 — 后者排除了特殊的timestamp值infinity。\n\n函数lower\\_inf和upper\\_inf分别测试一个范围的无限上下界。\n\n### 范围输入/输出 [*link*](#%e8%8c%83%e5%9b%b4%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba)\n\n一个范围值的输入必须遵循下列模式之一：\n\n```\n(lower-bound,upper-bound)\n(lower-bound,upper-bound]\n[lower-bound,upper-bound)\n[lower-bound,upper-bound]\nempty\n```\n\n圆括号或方括号指示上下界是否为排除的或者包含的。注意最后一个模式是empty，它表示一个空范围（一个不包含点的范围）。\n\nlower-bound可以是作为 subtype 的合法输入的一个字符串，或者是空表示没有下界。同样，upper-bound可以是作为 subtype 的合法输入的一个字符串，或者是空表示没有上界。\n\n每个界限值可以使用”（双引号）字符引用。如果界限值包含圆括号、方括号、逗号、双引号或反斜线时，这样做是必须的，因为否则那些字符会被认作范围语法的一部分。要把一个双引号或反斜线放在一个被引用的界限值中，就在它前面放一个反斜线（还有，在一个双引号引用的界限值中的一对双引号表示一个双引号字符，这与 SQL 字符串中的单引号规则类似）。此外，你可以避免引用并且使用反斜线转义来保护所有数据字符，否则它们会被当做返回语法的一部分。还有，要写一个是空字符串的界限值，则可以写成\"\"，因为什么都不写表示一个无限界限。\n\n范围值前后允许有空格，但是圆括号或方括号之间的任何空格会被当做上下界值的一部分（取决于元素类型，它可能是也可能不是有意义的）。\n\n例子：\n\n```\n-- 包括 3，不包括 7，并且包括 3 和 7 之间的所有点\nSELECT '[3,7)'::int4range;\n\n-- 既不包括 3 也不包括 7，但是包括之间的所有点\nSELECT '(3,7)'::int4range;\n\n-- 只包括单独一个点 4\nSELECT '[4,4]'::int4range;\n\n-- 不包括点（并且将被标准化为 '空'）\nSELECT '[4,4)'::int4range;\n```\n\n### 构造范围 [*link*](#%e6%9e%84%e9%80%a0%e8%8c%83%e5%9b%b4)\n\n每一种范围类型都有一个与其同名的构造器函数。使用构造器函数常常比写一个范围文字常数更方便，因为它避免了对界限值的额外引用。构造器函数接受两个或三个参数。两个参数的形式以标准的形式构造一个范围（下界是包含的，上界是排除的），而三个参数的形式按照第三个参数指定的界限形式构造一个范围。第三个参数必须是下列字符串之一： “()”、 “(]”、 “[)”或者 “[]”。 例如：\n\n```\n-- 完整形式是：下界、上界以及指示界限包含性/排除性的文本参数。\nSELECT numrange(1.0, 14.0, '(]');\n\n-- 如果第三个参数被忽略，则假定为 '[)'。\nSELECT numrange(1.0, 14.0);\n\n-- 尽管这里指定了 '(]'，显示时该值将被转换成标准形式，因为 int8range 是一种离散范围类型（见下文）。\nSELECT int8range(1, 14, '(]');\n\n-- 为一个界限使用 NULL 导致范围在那一边是无界的。\nSELECT numrange(NULL, 2.2);\n```\n\n### 离散范围类型 [*link*](#%e7%a6%bb%e6%95%a3%e8%8c%83%e5%9b%b4%e7%b1%bb%e5%9e%8b)\n\n一种范围的元素类型具有一个良定义的“步长”，例如integer或date。在这些类型中，如果两个元素之间没有合法值，它们可以被说成是相邻。这与连续范围相反，连续范围中总是（或者几乎总是）可以在两个给定值之间标识其他元素值。例如，numeric类型之上的一个范围就是连续的，timestamp上的范围也是（尽管timestamp具有有限的精度，并且在理论上可以被当做离散的，最好认为它是连续的，因为通常并不关心它的步长）。\n\n另一种考虑离散范围类型的方法是对每一个元素值都有一种清晰的“下一个”或“上一个”值。了解了这种思想之后，通过选择原来给定的下一个或上一个元素值来取代它，就可以在一个范围界限的包含和排除表达之间转换。例如，在一个整数范围类型中，[4,8]和(3,9)表示相同的值集合，但是对于 numeric 上的范围就不是这样。\n\n一个离散范围类型应该具有一个正规化函数，它知道元素类型期望的步长。正规化函数负责把范围类型的相等值转换成具有相同的表达，特别是与包含或者排除界限一致。如果没有指定一个正规化函数，那么具有不同格式的范围将总是会被当作不等，即使它们实际上是表达相同的一组值。\n\n内建的范围类型int4range、int8range和daterange都使用一种正规的形式，该形式包括下界并且排除上界，也就是[)。不过，用户定义的范围类型可以使用其他习惯。\n\n### 定义新的范围类型 [*link*](#%e5%ae%9a%e4%b9%89%e6%96%b0%e7%9a%84%e8%8c%83%e5%9b%b4%e7%b1%bb%e5%9e%8b)\n\n用户可以定义他们自己的范围类型。这样做最常见的原因是为了使用内建范围类型中没有提供的 subtype 上的范围。例如，要创建一个 subtype float8的范围类型：\n\n```\nCREATE TYPE floatrange AS RANGE (\n    subtype = float8,\n    subtype_diff = float8mi\n);\n\nSELECT '[1.234, 5.678]'::floatrange;\n```\n\n因为float8没有有意义的“步长”，我们在这个例子中没有定义一个正规化函数。\n\n定义自己的范围类型也允许你指定使用一个不同的子类型 B-树操作符类或者集合， 以便更改排序顺序来决定哪些值会落入到给定的范围中。\n\n如果 subtype 被认为是具有离散值而不是连续值，CREATE TYPE命令应当指定一个canonical函数。正规化函数接收一个输入的范围值，并且必须返回一个可能具有不同界限和格式的等价的范围值。对于两个表示相同值集合的范围（例如[1, 7]和[1, 8)），正规的输出必须一样。选择哪一种表达作为正规的没有关系，只要两个具有不同格式的等价值总是能被映射到具有相同格式的相同值就行。除了调整包含/排除界限格式外，假使期望的补偿比 subtype 能够存储的要大，一个正规化函数可能会舍入边界值。例如，一个timestamp之上的范围类型可能被定义为具有一个一小时的步长，这样正规化函数可能需要对不是一小时的倍数的界限进行舍入，或者可能直接抛出一个错误。\n\n另外，任何打算要和 GiST 或 SP-GiST 索引一起使用的范围类型应当定一个 subtype 差异或subtype\\_diff函数（没有subtype\\_diff时索引仍然能工作，但是可能效率不如提供了差异函数时高）。subtype 差异函数采用两个 subtype 输入值，并且返回表示为一个float8值的差（即X减Y）。在我们上面的例子中，可以使用常规float8减法操作符之下的函数。但是对于任何其他 subtype，可能需要某种类型转换。还可能需要一些关于如何把差异表达为数字的创新型想法。为了最大的可扩展性，subtype\\_diff函数应该同意选中的操作符类和排序规则所蕴含的排序顺序，也就是说，只要它的第一个参数根据排序顺序大于第二个参数，它的结果就应该是正值。\n\nsubtype\\_diff函数的一个不那么过度简化的例子：\n\n```\nCREATE FUNCTION time_subtype_diff(x time, y time) RETURNS float8 AS\n'SELECT EXTRACT(EPOCH FROM (x - y))' LANGUAGE sql STRICT IMMUTABLE;\n\nCREATE TYPE timerange AS RANGE (\n    subtype = time,\n    subtype_diff = time_subtype_diff\n);\n\nSELECT '[11:10, 23:00]'::timerange;\n```\n\n更多关于创建范围类型的信息请参考CREATE TYPE。\n\n---\n\n[*navigate\\_before* 关键字](/docs/db/guides/keyword/)\n\n[SQL语法 *navigate\\_next*](/docs/db/guides/sql-grammar/)"
}