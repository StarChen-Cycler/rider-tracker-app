{
  "url": "https://docs.memfiredb.com/docs/app/development_guide/functions/code-development/",
  "title": "代码开发 | MemFire Cloud在线文档",
  "depth": 1,
  "timestamp": "2025-08-12 17:48:38",
  "html": "<main class=\"page-content bg-transparent\">\n<div class=\"top-header d-print-none\" id=\"top-header\">\n<div class=\"header-bar d-flex justify-content-between\">\n<div class=\"d-flex align-items-center\">\n<a alt=\"HomePage\" aria-label=\"HomePage\" class=\"logo-icon me-3\" href=\"/\">\n<div class=\"small\">\n<!--?xml version=\"1.0\" encoding=\"UTF-8\"?-->\n<svg height=\"112px\" version=\"1.1\" viewbox=\"0 0 99 112\" width=\"99px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<title>MemFireDB备份 6</title>\n<defs>\n<lineargradient id=\"linearGradient-1\" x1=\"49.9999885%\" x2=\"49.9999885%\" y1=\"98.082503%\" y2=\"0.766550128%\">\n<stop offset=\"0%\" stop-color=\"#ED1C23\"></stop>\n<stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop>\n</lineargradient>\n</defs>\n<g fill=\"none\" fill-rule=\"evenodd\" id=\"定稿\" stroke=\"none\" stroke-width=\"1\">\n<g id=\"MemFireDB备份-6\">\n<polygon fill=\"#F9AE7C\" id=\"Fill-1\" points=\"25.9728553 40.7912363 47.4268317 0.00591833831 1.15453123 26.7215251\"></polygon>\n<polygon fill=\"#F9AE7C\" id=\"Fill-3\" points=\"97.4213117 26.7267606 51.1285247 0.000910513587 72.4242993 40.8351686\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-5\" points=\"24.8347133 42.7618153 0.000455256793 28.682999 0.000455256793 82.1608764\"></polygon>\n<polygon fill=\"url(#linearGradient-1)\" id=\"Fill-7\" points=\"27.6634514 42.4662399 49.279044 109.05096 70.7296059 42.507213 49.2779058 1.3747617\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-9\" points=\"98.5660549 28.6951771 73.5622137 42.8047233 98.5660549 82.1719163\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-13\" points=\"72.2987623 45.061545 50.7514582 111.900071 97.579172 84.8646465\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-15\" points=\"26.1006687 45.0226206 0.987565799 84.8644188 47.8095888 111.898705\"></polygon>\n<path d=\"M60.0737516,38.507213 C59.3168872,35.669825 57.0462939,33.3514298 57.0462939,33.3514298 C57.0462939,33.3514298 57.0804382,35.8849338 56.2894295,37.513615 C55.4847631,39.1696116 53.8765685,40.3054773 53.8765685,40.3054773 C53.8765685,40.3054773 56.1016361,33.8840802 54.2715038,30.1247973 C52.0259496,25.5073552 49.1771803,23.3357803 49.1771803,23.3357803 C49.1771803,23.3357803 50.1070423,28.1319107 48.6240432,31.5065016 C47.1672215,34.8264618 42.8058614,36.7260208 40.7241997,38.7132167 C39.1865699,40.1791435 38.0814341,43.0711623 37.6068289,44.4847347 C37.5715465,44.5883056 37.560165,44.6918765 37.5533362,44.7943093 C37.584066,43.9816759 37.8890881,39.8024186 40.9654858,37.4293925 C43.8404325,35.2111538 41.2431925,30.3478731 41.2431925,30.3478731 C41.2431925,30.3478731 41.7212121,32.5638355 40.9939394,34.1401622 C40.2655285,35.7153507 38.7187936,36.5962726 38.0154218,38.259098 C37.3883056,39.7409589 37.5203301,44.1432921 37.5453692,44.8409731 C37.5453692,44.8591834 37.5476455,44.8762555 37.5476455,44.8921895 C37.5476455,44.9263338 37.5487836,44.9456822 37.5487836,44.9456822 L37.5487836,44.9115379 C37.5590269,45.2655001 37.7138142,45.6080808 37.9972116,45.8448143 L48.3713757,55.6442168 C48.8380139,56.0323232 49.5163466,56.0334614 49.9841229,55.6476312 L60.5938825,45.7105136 C60.9034571,45.4544316 61.0719021,45.0686015 61.0457249,44.6656992 C60.9546735,43.2282259 60.5699815,40.3692133 60.0737516,38.507213\" fill=\"#FFFFFF\" id=\"Fill-17\"></path>\n</g>\n</g>\n</svg>\n</div>\n<div class=\"big\">\n<svg height=\"20\" width=\"232\" xmlns=\"http://www.w3.org/2000/svg\"><defs><lineargradient id=\"a\" x1=\"50%\" x2=\"50%\" y1=\"98.083%\" y2=\".767%\"><stop offset=\"0%\" stop-color=\"#ED1C23\"></stop><stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop></lineargradient></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M78.622 12.384l1.596 21.94H77.49l-.847-14.154-8.98 15.523-4.899-15.53-4.416 14.162H55.6l7.085-21.871 5.712 17.174 10.224-17.244zm99.46.382l.324.01.454.036c.085.008.175.018.269.03l.61.096c1.09.203 2.518.644 3.883 1.596l.515.383-.46 3.694-.413-.62-.154-.195-.255-.285c-.765-.802-2.485-2.188-5.23-2.188-4.55 0-8.723 3.809-9.3 8.491-.287 2.311.334 4.469 1.755 6.077 1.342 1.517 3.257 2.354 5.39 2.354 2.606 0 4.58-1.225 5.606-2.04l.359-.3.424-.408.507-.552-.466 3.766-.093.06a12.622 12.622 0 01-4.577 1.842l-.629.1-.53.058-.418.027-.444.003c-2.918-.002-5.532-1.142-7.36-3.21-1.851-2.096-2.67-4.88-2.305-7.837.73-5.88 5.964-10.696 11.806-10.974l.732-.014zm18.174 9.018c1.724 0 3.344.713 4.443 1.956 1.101 1.248 1.59 2.88 1.377 4.596-.432 3.504-3.808 6.466-7.375 6.466-1.728 0-3.348-.715-4.45-1.96-1.096-1.242-1.583-2.864-1.377-4.563.44-3.52 3.818-6.495 7.382-6.495zm19.446.535l-1.486 12.02h-2.558l.16-1.292c-.936.93-2.462 1.755-4.173 1.755-1.318 0-2.48-.492-3.267-1.385-.804-.91-1.168-2.184-1.008-3.497l.9-7.274 2.597-.327-.914 7.402c-.101.785.084 1.466.525 1.968.49.552 1.27.845 2.25.845 1.526 0 3.3-1.155 3.51-2.873l.87-7.015 2.594-.327zm-63.587-.547c1.77 0 3.21.58 4.164 1.678 1.047 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.806 0 2.878-.434 3.868-.961l1.119-.623-.312 2.522-.106.06c-1.224.687-2.604 1.356-4.8 1.356-2.092 0-3.873-.708-5.006-1.992-.991-1.12-1.404-2.599-1.198-4.272.548-4.433 4.001-6.751 7.124-6.751zm-62.717 0c1.771 0 3.211.58 4.164 1.678 1.048 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.622 0 2.652-.35 3.563-.803l.594-.315.83-.466-.312 2.522-.105.06c-1.224.687-2.604 1.356-4.8 1.356-2.093 0-3.874-.708-5.007-1.992-.99-1.12-1.404-2.599-1.197-4.272.547-4.433 4-6.751 7.123-6.751zM231.476 12l-2.767 22.34h-2.556l.197-1.59c-1.104 1.191-2.882 2.021-4.471 2.021-1.781 0-3.24-.583-4.217-1.69-1.02-1.151-1.452-2.817-1.222-4.686.485-3.908 3.43-6.636 7.167-6.636 1.565 0 3.065.832 3.852 2.064l1.356-10.968 2.661-.855zm-42.07.002L186.64 34.34h-2.556l2.664-21.483 2.66-.854zm-56.632 1.268l-1.166 2.527h-9.586l-.85 6.867h6.627v.48h-.12l-.883 1.778v.24h-5.933l-1.138 9.163h-2.729l2.612-21.055h13.166zm2.715 9.038l-1.497 12.017h-2.559l1.455-11.722 2.601-.295zm-24.427-.537c1 0 1.93.427 2.616 1.204.84.95 1.224 2.29 1.053 3.677l-.955 7.673h-2.527l.922-7.445c.13-1.017-.027-1.81-.45-2.287-.326-.367-.815-.554-1.458-.554-1.954 0-3.178 1.346-3.332 2.613l-.955 7.673h-2.556l.922-7.445c.127-1.03-.024-1.826-.442-2.297-.319-.362-.801-.544-1.437-.544-1.522 0-3.3 1.166-3.516 2.901l-.912 7.385h-2.559l1.455-11.722 2.594-.295-.146 1.164c1.027-1.077 2.419-1.701 3.854-1.701 1.375 0 2.58.79 3.226 2.083.914-1.13 2.05-2.083 4.603-2.083zm29.487.532l-.206 1.73c1.082-.978 2.932-1.7 4.514-1.7h.269l-.271 2.282h-.214c-1.814 0-4.469.837-4.7 2.7l-.866 7.01h-2.558l1.45-11.693 2.582-.329zm55.47 1.865c-2.31 0-4.27 1.792-4.563 4.168-.144 1.145.15 2.196.824 2.957.64.725 1.586 1.126 2.656 1.126 2.292 0 4.241-1.78 4.532-4.14.146-1.169-.144-2.237-.821-3.003-.634-.715-1.567-1.108-2.628-1.108zm27.497-.029c-2.278 0-4.15 1.752-4.45 4.17-.149 1.187.137 2.255.8 3.006.611.692 1.526 1.076 2.57 1.076 2.294 0 4.173-1.743 4.468-4.143.152-1.21-.13-2.285-.79-3.033-.623-.704-1.52-1.076-2.598-1.076zm-134.356.045c-1.89 0-3.372 1.094-4.015 2.947h7.164a2.853 2.853 0 00-.71-1.956c-.574-.648-1.416-.991-2.439-.991zm62.715 0c-1.892 0-3.37 1.094-4.013 2.947h7.166a2.867 2.867 0 00-.713-1.956c-.573-.648-1.416-.991-2.44-.991zm-17.267-7.614c.919 0 1.706.748 1.754 1.668a1.587 1.587 0 01-1.603 1.692c-.917 0-1.704-.75-1.754-1.668a1.593 1.593 0 011.603-1.692z\" fill=\"#116\"></path><path d=\"M11.131 17.482L20.326.002.495 11.453zm30.621-6.028L21.912 0l9.127 17.5z\" fill=\"#F9AE7C\"></path><path d=\"M10.643 18.326L0 12.293v22.919z\" fill=\"#F9904A\"></path><path d=\"M11.856 18.2l9.264 28.536 9.193-28.519L21.119.59z\" fill=\"url(#a)\"></path><path d=\"M42.243 12.298l-10.716 6.047 10.716 16.872z\" fill=\"#F9904A\"></path><path d=\"M30.985 19.312l-9.234 28.645L41.82 36.371zm-19.799-.017L.423 36.37 20.49 47.957z\" fill=\"#FB6D33\"></path><path d=\"M25.746 16.503c-.324-1.216-1.298-2.21-1.298-2.21s.015 1.086-.324 1.784c-.345.71-1.034 1.197-1.034 1.197s.954-2.752.17-4.363c-.963-1.98-2.184-2.91-2.184-2.91s.398 2.056-.237 3.502c-.624 1.423-2.494 2.237-3.386 3.088-.659.629-1.132 1.868-1.336 2.474a.509.509 0 00-.023.133c.013-.349.144-2.14 1.463-3.157 1.232-.95.119-3.035.119-3.035s.205.95-.107 1.625c-.312.676-.975 1.053-1.277 1.766-.268.635-.212 2.522-.201 2.82v.023l.001.022v-.014a.54.54 0 00.193.4l4.446 4.2c.2.166.49.166.69.001l4.548-4.259a.535.535 0 00.193-.448c-.039-.616-.203-1.84-.416-2.639\" fill=\"#FFF\"></path></g></svg>\n</div>\n</a>\n<button class=\"btn btn-icon btn-soft\" id=\"close-sidebar\">\n<span class=\"material-icons size-20 menu-icon align-middle\">menu</span>\n</button>\n</div>\n<div class=\"d-flex align-items-center\">\n<ul class=\"list-unstyled mb-0\">\n</ul>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://memfiredb.com/\" target=\"_blank\" type=\"button\">官网</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://community.memfiredb.com/\" target=\"_blank\" type=\"button\">论坛</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://cloud.memfiredb.com/auth/login\" target=\"_blank\" type=\"button\">登录</a>\n<button aria-label=\"Toggle user interface mode\" class=\"btn btn-icon btn-default ms-2\" id=\"mode\" type=\"button\">\n<span class=\"toggle-dark\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable dark mode</title>\n<path d=\"M24 42q-7.5 0-12.75-5.25T6 24q0-7.5 5.25-12.75T24 6q.4 0 .85.025.45.025 1.15.075-1.8 1.6-2.8 3.95-1 2.35-1 4.95 0 4.5 3.15 7.65Q28.5 25.8 33 25.8q2.6 0 4.95-.925T41.9 22.3q.05.6.075.975Q42 23.65 42 24q0 7.5-5.25 12.75T24 42Zm0-3q5.45 0 9.5-3.375t5.05-7.925q-1.25.55-2.675.825Q34.45 28.8 33 28.8q-5.75 0-9.775-4.025T19.2 15q0-1.2.25-2.575.25-1.375.9-3.125-4.9 1.35-8.125 5.475Q9 18.9 9 24q0 6.25 4.375 10.625T24 39Zm-.2-14.85Z\"></path>\n</svg>\n</span>\n<span class=\"toggle-light\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable light mode</title>\n<path d=\"M24 31q2.9 0 4.95-2.05Q31 26.9 31 24q0-2.9-2.05-4.95Q26.9 17 24 17q-2.9 0-4.95 2.05Q17 21.1 17 24q0 2.9 2.05 4.95Q21.1 31 24 31Zm0 3q-4.15 0-7.075-2.925T14 24q0-4.15 2.925-7.075T24 14q4.15 0 7.075 2.925T34 24q0 4.15-2.925 7.075T24 34ZM3.5 25.5q-.65 0-1.075-.425Q2 24.65 2 24q0-.65.425-1.075Q2.85 22.5 3.5 22.5h5q.65 0 1.075.425Q10 23.35 10 24q0 .65-.425 1.075-.425.425-1.075.425Zm36 0q-.65 0-1.075-.425Q38 24.65 38 24q0-.65.425-1.075.425-.425 1.075-.425h5q.65 0 1.075.425Q46 23.35 46 24q0 .65-.425 1.075-.425.425-1.075.425ZM24 10q-.65 0-1.075-.425Q22.5 9.15 22.5 8.5v-5q0-.65.425-1.075Q23.35 2 24 2q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 10 24 10Zm0 36q-.65 0-1.075-.425-.425-.425-.425-1.075v-5q0-.65.425-1.075Q23.35 38 24 38q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 46 24 46ZM12 14.1l-2.85-2.8q-.45-.45-.425-1.075.025-.625.425-1.075.45-.45 1.075-.45t1.075.45L14.1 12q.4.45.4 1.05 0 .6-.4 1-.4.45-1.025.45-.625 0-1.075-.4Zm24.7 24.75L33.9 36q-.4-.45-.4-1.075t.45-1.025q.4-.45 1-.45t1.05.45l2.85 2.8q.45.45.425 1.075-.025.625-.425 1.075-.45.45-1.075.45t-1.075-.45ZM33.9 14.1q-.45-.45-.45-1.05 0-.6.45-1.05l2.8-2.85q.45-.45 1.075-.425.625.025 1.075.425.45.45.45 1.075t-.45 1.075L36 14.1q-.4.4-1.025.4-.625 0-1.075-.4ZM9.15 38.85q-.45-.45-.45-1.075t.45-1.075L12 33.9q.45-.45 1.05-.45.6 0 1.05.45.45.45.45 1.05 0 .6-.45 1.05l-2.8 2.85q-.45.45-1.075.425-.625-.025-1.075-.425ZM24 24Z\"></path>\n</svg>\n</span>\n</button>\n</div>\n</div>\n</div>\n<div class=\"container-fluid\">\n<div class=\"layout-spacing\">\n<div class=\"d-md-flex justify-content-between align-items-center\"></div>\n<div class=\"row flex-xl-nowrap\">\n<div class=\"docs-toc col-xl-3 d-xl-block\"><toc>\n<div class=\"fw-bold text-uppercase mb-2\">本页</div>\n\n</toc></div>\n<div class=\"docs-toc-mobile d-print-none d-xl-none\">\n<button aria-expanded=\"false\" class=\"btn-secondary dropdown-toggle\" data-bs-offset=\"0,0\" data-bs-toggle=\"dropdown\" id=\"toc-dropdown-btn\" type=\"button\"><strong>请求处理程序</strong></button>\n</div>\n<div class=\"docs-content col-12 col-xl-9 mt-0\">\n<div class=\"mb-0 d-flex\">\n<h1 class=\"content-title mb-0\">\n                                                    代码开发\n                                                    \n                                                </h1>\n</div>\n<div class=\"main-content\" data-bs-root-margin=\"0px 0px -65%\" data-bs-spy=\"scroll\" data-bs-target=\"#toc-mobile\" id=\"content\">\n<div data-prismjs-copy=\"\" data-prismjs-copy-error=\"\" data-prismjs-copy-success=\"\">\n<p>本文介绍使用云函数编写代码的相关基础概念，包括请求处理函数、函数实例生命周期回调方法等。</p>\n<h2 id=\"请求处理程序\"><strong>请求处理程序</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%af%b7%e6%b1%82%e5%a4%84%e7%90%86%e7%a8%8b%e5%ba%8f\"><i class=\"material-icons align-middle\">link</i></a></h2><p>MemFire Cloud云函数的请求处理程序，是函数代码中处理请求的方法。当您的云函数被调用时，会运行您提供的Handler方法处理请求。对于Node.js语言的云函数而言，函数入口为 [文件名].[函数名]，默认为index.handler；</p>\n<p>您可以使用HTTP请求处理程序更方便地处理HTTP请求。当调用函数时，MemFire Cloud云函数使用您提供的执行方法来处理HTTP请求。</p>\n<h3 id=\"http-handler签名\"><strong>HTTP Handler签名</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#http-handler%e7%ad%be%e5%90%8d\"><i class=\"material-icons align-middle\">link</i></a></h3><p>Node.js的HTTP Handler的签名如下。您只需实现一个函数，就能响应HTTP请求。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-javascript\" id=\"5b600f1\" tabindex=\"0\"><code class=\"language-javascript\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"receive body: \"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    resp<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    resp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;h1&gt;Hello, world!&lt;/h1&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>示例解析如下：</p>\n<ul>\n<li><code>handler</code>：HTTP Handler名称。</li>\n<li><code>req</code>：HTTP请求结构体。</li>\n<li><code>resp</code>：HTTP返回结构体。</li>\n<li><code>context</code>：上下文信息。</li>\n</ul>\n<h3 id=\"http请求结构体\"><strong>HTTP请求结构体</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#http%e8%af%b7%e6%b1%82%e7%bb%93%e6%9e%84%e4%bd%93\"><i class=\"material-icons align-middle\">link</i></a></h3><p>\n</p><table class=\"table table-striped-columns\">\n<thead>\n<tr>\n<th><strong>字段</strong></th>\n<th><strong>类型</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>headers</td>\n<td>Object</td>\n<td>存放来自HTTP客户端的键值对。</td>\n</tr>\n<tr>\n<td>path</td>\n<td>String</td>\n<td>表示HTTP路径。</td>\n</tr>\n<tr>\n<td>queries</td>\n<td>Object</td>\n<td>存放来自HTTP路径中的查询部分的键值对，值的类型可以为字符串或数组。</td>\n</tr>\n<tr>\n<td>method</td>\n<td>String</td>\n<td>表示HTTP方法。</td>\n</tr>\n<tr>\n<td>clientIP</td>\n<td>String</td>\n<td>客户端的IP地址。</td>\n</tr>\n<tr>\n<td>url</td>\n<td>String</td>\n<td>请求的地址。</td>\n</tr>\n</tbody>\n</table>\n<strong>说明</strong> Headers键值对中的<code>key</code>中包含以下字段或以<code>x-fc-</code>开头的<code>key</code>均会被忽略，因此，不支持自定义。<p></p>\n<ul>\n<li>connection</li>\n<li>keep-alive</li>\n</ul>\n<h3 id=\"http响应结构体\"><strong>HTTP响应结构体</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#http%e5%93%8d%e5%ba%94%e7%bb%93%e6%9e%84%e4%bd%93\"><i class=\"material-icons align-middle\">link</i></a></h3><p>\n</p><table class=\"table table-striped-columns\">\n<thead>\n<tr>\n<th><strong>字段</strong></th>\n<th><strong>类型</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>response.setStatusCode(statusCode)</td>\n<td>interger</td>\n<td>设置状态码。</td>\n</tr>\n<tr>\n<td>response.setHeader(headerKey, headerValue)</td>\n<td>String，String</td>\n<td>设置响应头。</td>\n</tr>\n<tr>\n<td>response.deleteHeader(headerKey)</td>\n<td>String</td>\n<td>删除响应头。</td>\n</tr>\n<tr>\n<td>response.send(body)</td>\n<td>Buffer，String，Stream.Readable</td>\n<td>发送响应体。</td>\n</tr>\n</tbody>\n</table>\n<strong>重要</strong><p></p>\n<p><code>headerKey</code>中包含以下字段或以<code>x-fc-</code>开头的<code>headerKey</code>均会被忽略，因此，不支持自定义。</p>\n<ul>\n<li>connection</li>\n<li>content-length</li>\n<li>date</li>\n<li>keep-alive</li>\n<li>server</li>\n<li>upgrade</li>\n</ul>\n<h3 id=\"限制说明\"><strong>限制说明</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e9%99%90%e5%88%b6%e8%af%b4%e6%98%8e\"><i class=\"material-icons align-middle\">link</i></a></h3><ul>\n<li>请求限制</li>\n<li>如果超过以下限制，会返回<strong>400</strong>状态码和<strong>InvalidArgument</strong>错误码。\n\n\n\n\n\n\n\n<table class=\"table table-striped-columns\">\n<thead>\n<tr>\n<th><strong>字段</strong></th>\n<th><strong>限制说明</strong></th>\n<th><strong>HTTP状态码</strong></th>\n<th><strong>错误码</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>headers</td>\n<td>请求头中的所有键和值的总大小不能超过4 KB。</td>\n<td>400</td>\n<td>InvalidArgument</td>\n</tr>\n<tr>\n<td>path</td>\n<td>请求路径以及所有查询参数的总大小不能超过4 KB。</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>body</td>\n<td>同步调用请求的Body的总大小不能超过16 MB，异步调用请求的Body的总大小不能超过128 KB。</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>响应限制</li>\n<li>如果超过以下限制，会返回<strong>502</strong>状态码和<strong>BadResponse</strong>错误码。\n\n\n\n\n\n\n\n<table class=\"table table-striped-columns\">\n<thead>\n<tr>\n<th><strong>字段</strong></th>\n<th><strong>限制说明</strong></th>\n<th><strong>HTTP状态码</strong></th>\n<th><strong>错误码</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>headers</td>\n<td>响应头中的所有键和值对的大小不能超过4 KB。</td>\n<td>502</td>\n<td>BadResponse</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h3 id=\"示例获取http请求详细信息并返回body\"><strong>示例：获取HTTP请求详细信息并返回Body</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%a4%ba%e4%be%8b%e8%8e%b7%e5%8f%96http%e8%af%b7%e6%b1%82%e8%af%a6%e7%bb%86%e4%bf%a1%e6%81%af%e5%b9%b6%e8%bf%94%e5%9b%9ebody\"><i class=\"material-icons align-middle\">link</i></a></h3><h4 id=\"示例代码\"><strong>示例代码</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81\"><i class=\"material-icons align-middle\">link</i></a></h4>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-java\" id=\"91ed4ce\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">exports</span><span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> function <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// get requset headervar reqHeader = request.headers</span>\n    <span class=\"token keyword\">var</span> headerStr <span class=\"token operator\">=</span> <span class=\"token char\">' '</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key in reqHeader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        headerStr <span class=\"token operator\">+=</span> key <span class=\"token operator\">+</span> <span class=\"token char\">':'</span> <span class=\"token operator\">+</span> reqHeader<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token char\">'  '</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// get request infovar url = request.url</span>\n    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>path\n    <span class=\"token keyword\">var</span> queries <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>queries\n    <span class=\"token keyword\">var</span> queryStr <span class=\"token operator\">=</span> ''<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> param in queries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        queryStr <span class=\"token operator\">+=</span> param <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> queries<span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token char\">'  '</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>method\n    <span class=\"token keyword\">var</span> clientIP <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>clientIP\n    <span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n    <span class=\"token keyword\">var</span> respBody <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span>'requestHeader<span class=\"token operator\">:</span>' <span class=\"token operator\">+</span> headerStr <span class=\"token operator\">+</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">+</span> <span class=\"token char\">'url: '</span> <span class=\"token operator\">+</span> url <span class=\"token operator\">+</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">+</span> <span class=\"token char\">'path: '</span> <span class=\"token operator\">+</span> path <span class=\"token operator\">+</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">+</span> 'queries<span class=\"token operator\">:</span> ' <span class=\"token operator\">+</span> queryStr <span class=\"token operator\">+</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">+</span> 'method<span class=\"token operator\">:</span> ' <span class=\"token operator\">+</span> method <span class=\"token operator\">+</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">+</span> 'clientIP<span class=\"token operator\">:</span> ' <span class=\"token operator\">+</span> clientIP <span class=\"token operator\">+</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">+</span> <span class=\"token char\">'body: '</span> <span class=\"token operator\">+</span> body <span class=\"token operator\">+</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span>'content<span class=\"token operator\">-</span>type<span class=\"token char\">', '</span>application<span class=\"token operator\">/</span>json'<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>respBody<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"函数实例生命周期回调方法\"><strong>函数实例生命周期回调方法</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%87%bd%e6%95%b0%e5%ae%9e%e4%be%8b%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f%e5%9b%9e%e8%b0%83%e6%96%b9%e6%b3%95\"><i class=\"material-icons align-middle\">link</i></a></h2><p>MemFire Cloud云函数支持Initializer生命周期回调方法。</p>\n<h3 id=\"initializer回调\"><strong>Initializer回调</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#initializer%e5%9b%9e%e8%b0%83\"><i class=\"material-icons align-middle\">link</i></a></h3><p>您可以将数据库场景下连接池构建、函数依赖库加载等耗时较长的业务逻辑放到Initializer回调中，避免每次运行函数都会做重复的操作，降低函数延时。</p>\n<p>初始化回调程序（Initializer回调）在函数实例启动成功之后，运行请求处理程序（Handler）之前执行。函数计算保证在一个实例生命周期内，成功且最多成功执行一次Initializer回调。例如，您的Initializer回调第一次执行失败后系统会重试，直到成功为止，然后再执行您的请求处理程序。</p>\n<p>Initializer回调只有一个<strong>context</strong>输入参数，使用方法和事件请求处理程序一样。</p>\n<p>一个最简单的Initializer回调如下所示。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-javascript\" id=\"cafce74\" tabindex=\"0\"><code class=\"language-javascript\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">initialize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'initializer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>MemFire Cloud平台默认的<strong>Initializer 回调程序</strong>为<code>index.initialize</code>，那么云函数在配置Initializer属性后会去加载<code>index.js</code>中定义的<code>initialize</code>方法。</p>\n<h3 id=\"方法签名\"><strong>方法签名</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%96%b9%e6%b3%95%e7%ad%be%e5%90%8d\"><i class=\"material-icons align-middle\">link</i></a></h3><ul>\n<li>输入参数只有<code>context</code>，为您的云函数调用提供在调用时的运行上下文信息。</li>\n<li>无返回值。</li>\n</ul>\n<h3 id=\"函数调用说明\">函数调用说明 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%87%bd%e6%95%b0%e8%b0%83%e7%94%a8%e8%af%b4%e6%98%8e\"><i class=\"material-icons align-middle\">link</i></a></h3><ul>\n<li><strong>前提</strong>：当用户想通过路由传输类似于/a/b这样的path信息时，那么我们建议使用查询参数（query parameter）来实现这一目的。</li>\n<li><strong>使用</strong>：在该场景下，用户应该将路径信息改为/a，并在该路径后添加查询参数?action=b，以便服务器可以正确地解析和处理请求。</li>\n</ul>\n</div>\n</div>\n<div><hr class=\"doc-hr\"/>\n<div class=\"d-print-none\" id=\"doc-nav\">\n<div class=\"row flex-xl-nowrap\">\n<div class=\"col-sm-6 pt-2 doc-next\">\n<a href=\"/docs/app/development_guide/functions/function-management/\">\n<div class=\"card h-100 my-1\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\"><i class=\"material-icons align-middle\">navigate_before</i> 管理函数</p>\n</div>\n</div>\n</a>\n</div>\n<div class=\"col-sm-6 pt-2 doc-prev\">\n<a class=\"ms-auto\" href=\"/docs/app/development_guide/functions/fn-local-test/\">\n<div class=\"card h-100 my-1 text-end\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\">云函数本地调试 <i class=\"material-icons align-middle\">navigate_next</i></p>\n</div>\n</div>\n</a>\n</div>\n</div>\n</div></div>\n</div>\n</div>\n</div>\n</div>\n\n</main>",
  "markdown": "[MemFireDB备份 6](/)\n\nmenu\n\n[官网](https://memfiredb.com/)\n[论坛](https://community.memfiredb.com/)\n[登录](https://cloud.memfiredb.com/auth/login)\n\nEnable dark mode\n\nEnable light mode\n\n本页\n\n**请求处理程序**\n\n# 代码开发\n\n本文介绍使用云函数编写代码的相关基础概念，包括请求处理函数、函数实例生命周期回调方法等。\n\n## **请求处理程序** [*link*](#%e8%af%b7%e6%b1%82%e5%a4%84%e7%90%86%e7%a8%8b%e5%ba%8f)\n\nMemFire Cloud云函数的请求处理程序，是函数代码中处理请求的方法。当您的云函数被调用时，会运行您提供的Handler方法处理请求。对于Node.js语言的云函数而言，函数入口为 [文件名].[函数名]，默认为index.handler；\n\n您可以使用HTTP请求处理程序更方便地处理HTTP请求。当调用函数时，MemFire Cloud云函数使用您提供的执行方法来处理HTTP请求。\n\n### **HTTP Handler签名** [*link*](#http-handler%e7%ad%be%e5%90%8d)\n\nNode.js的HTTP Handler的签名如下。您只需实现一个函数，就能响应HTTP请求。\n\n```\nexports.handler = (req, resp, context) => {\n    console.log(\"receive body: \", req.body.toString());\n    resp.setHeader(\"Content-Type\", \"text/plain\");\n    resp.send('<h1>Hello, world!</h1>');\n}\n```\n\n示例解析如下：\n\n* `handler`：HTTP Handler名称。\n* `req`：HTTP请求结构体。\n* `resp`：HTTP返回结构体。\n* `context`：上下文信息。\n\n### **HTTP请求结构体** [*link*](#http%e8%af%b7%e6%b1%82%e7%bb%93%e6%9e%84%e4%bd%93)\n\n| **字段** | **类型** | **描述** |\n| --- | --- | --- |\n| headers | Object | 存放来自HTTP客户端的键值对。 |\n| path | String | 表示HTTP路径。 |\n| queries | Object | 存放来自HTTP路径中的查询部分的键值对，值的类型可以为字符串或数组。 |\n| method | String | 表示HTTP方法。 |\n| clientIP | String | 客户端的IP地址。 |\n| url | String | 请求的地址。 |\n\n**说明** Headers键值对中的`key`中包含以下字段或以`x-fc-`开头的`key`均会被忽略，因此，不支持自定义。\n\n* connection\n* keep-alive\n\n### **HTTP响应结构体** [*link*](#http%e5%93%8d%e5%ba%94%e7%bb%93%e6%9e%84%e4%bd%93)\n\n| **字段** | **类型** | **描述** |\n| --- | --- | --- |\n| response.setStatusCode(statusCode) | interger | 设置状态码。 |\n| response.setHeader(headerKey, headerValue) | String，String | 设置响应头。 |\n| response.deleteHeader(headerKey) | String | 删除响应头。 |\n| response.send(body) | Buffer，String，Stream.Readable | 发送响应体。 |\n\n**重要**\n\n`headerKey`中包含以下字段或以`x-fc-`开头的`headerKey`均会被忽略，因此，不支持自定义。\n\n* connection\n* content-length\n* date\n* keep-alive\n* server\n* upgrade\n\n### **限制说明** [*link*](#%e9%99%90%e5%88%b6%e8%af%b4%e6%98%8e)\n\n* 请求限制\n* 如果超过以下限制，会返回**400**状态码和**InvalidArgument**错误码。\n\n  | **字段** | **限制说明** | **HTTP状态码** | **错误码** |\n  | --- | --- | --- | --- |\n  | headers | 请求头中的所有键和值的总大小不能超过4 KB。 | 400 | InvalidArgument |\n  | path | 请求路径以及所有查询参数的总大小不能超过4 KB。 |  |  |\n  | body | 同步调用请求的Body的总大小不能超过16 MB，异步调用请求的Body的总大小不能超过128 KB。 |  |  |\n* 响应限制\n* 如果超过以下限制，会返回**502**状态码和**BadResponse**错误码。\n\n  | **字段** | **限制说明** | **HTTP状态码** | **错误码** |\n  | --- | --- | --- | --- |\n  | headers | 响应头中的所有键和值对的大小不能超过4 KB。 | 502 | BadResponse |\n\n### **示例：获取HTTP请求详细信息并返回Body** [*link*](#%e7%a4%ba%e4%be%8b%e8%8e%b7%e5%8f%96http%e8%af%b7%e6%b1%82%e8%af%a6%e7%bb%86%e4%bf%a1%e6%81%af%e5%b9%b6%e8%bf%94%e5%9b%9ebody)\n\n#### **示例代码** [*link*](#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81)\n\n```\nmodule.exports.handler = function (request, response, context) {\n    // get requset headervar reqHeader = request.headers\n    var headerStr = ' 'for (var key in reqHeader) {\n        headerStr += key + ':' + reqHeader[key] + '  '\n    };\n\n    // get request infovar url = request.url\n    var path = request.path\n    var queries = request.queries\n    var queryStr = ''for (var param in queries) {\n        queryStr += param + \"=\" + queries[param] + '  '\n    };\n    var method = request.method\n    var clientIP = request.clientIP\n    var body = request.body\n    var respBody = new Buffer('requestHeader:' + headerStr + '\\n' + 'url: ' + url + '\\n' + 'path: ' + path + '\\n' + 'queries: ' + queryStr + '\\n' + 'method: ' + method + '\\n' + 'clientIP: ' + clientIP + '\\n' + 'body: ' + body + '\\n')\n    response.setStatusCode(200)\n    response.setHeader('content-type', 'application/json')\n    response.send(respBody)\n};\n```\n\n## **函数实例生命周期回调方法** [*link*](#%e5%87%bd%e6%95%b0%e5%ae%9e%e4%be%8b%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f%e5%9b%9e%e8%b0%83%e6%96%b9%e6%b3%95)\n\nMemFire Cloud云函数支持Initializer生命周期回调方法。\n\n### **Initializer回调** [*link*](#initializer%e5%9b%9e%e8%b0%83)\n\n您可以将数据库场景下连接池构建、函数依赖库加载等耗时较长的业务逻辑放到Initializer回调中，避免每次运行函数都会做重复的操作，降低函数延时。\n\n初始化回调程序（Initializer回调）在函数实例启动成功之后，运行请求处理程序（Handler）之前执行。函数计算保证在一个实例生命周期内，成功且最多成功执行一次Initializer回调。例如，您的Initializer回调第一次执行失败后系统会重试，直到成功为止，然后再执行您的请求处理程序。\n\nInitializer回调只有一个**context**输入参数，使用方法和事件请求处理程序一样。\n\n一个最简单的Initializer回调如下所示。\n\n```\nexports.initialize = function(context, callback) {\n  console.log('initializer');\n  callback(null, \"\");\n};\n```\n\nMemFire Cloud平台默认的**Initializer 回调程序**为`index.initialize`，那么云函数在配置Initializer属性后会去加载`index.js`中定义的`initialize`方法。\n\n### **方法签名** [*link*](#%e6%96%b9%e6%b3%95%e7%ad%be%e5%90%8d)\n\n* 输入参数只有`context`，为您的云函数调用提供在调用时的运行上下文信息。\n* 无返回值。\n\n### 函数调用说明 [*link*](#%e5%87%bd%e6%95%b0%e8%b0%83%e7%94%a8%e8%af%b4%e6%98%8e)\n\n* **前提**：当用户想通过路由传输类似于/a/b这样的path信息时，那么我们建议使用查询参数（query parameter）来实现这一目的。\n* **使用**：在该场景下，用户应该将路径信息改为/a，并在该路径后添加查询参数?action=b，以便服务器可以正确地解析和处理请求。\n\n---\n\n[*navigate\\_before* 管理函数](/docs/app/development_guide/functions/function-management/)\n\n[云函数本地调试 *navigate\\_next*](/docs/app/development_guide/functions/fn-local-test/)"
}