{
  "url": "https://docs.memfiredb.com/docs/db/guides/functions-and-operations/",
  "title": "函数与操作 | MemFire Cloud在线文档",
  "depth": 1,
  "timestamp": "2025-08-12 17:52:03",
  "html": "<main class=\"page-content bg-transparent\">\n<div class=\"top-header d-print-none\" id=\"top-header\">\n<div class=\"header-bar d-flex justify-content-between\">\n<div class=\"d-flex align-items-center\">\n<a alt=\"HomePage\" aria-label=\"HomePage\" class=\"logo-icon me-3\" href=\"/\">\n<div class=\"small\">\n<!--?xml version=\"1.0\" encoding=\"UTF-8\"?-->\n<svg height=\"112px\" version=\"1.1\" viewbox=\"0 0 99 112\" width=\"99px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<title>MemFireDB备份 6</title>\n<defs>\n<lineargradient id=\"linearGradient-1\" x1=\"49.9999885%\" x2=\"49.9999885%\" y1=\"98.082503%\" y2=\"0.766550128%\">\n<stop offset=\"0%\" stop-color=\"#ED1C23\"></stop>\n<stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop>\n</lineargradient>\n</defs>\n<g fill=\"none\" fill-rule=\"evenodd\" id=\"定稿\" stroke=\"none\" stroke-width=\"1\">\n<g id=\"MemFireDB备份-6\">\n<polygon fill=\"#F9AE7C\" id=\"Fill-1\" points=\"25.9728553 40.7912363 47.4268317 0.00591833831 1.15453123 26.7215251\"></polygon>\n<polygon fill=\"#F9AE7C\" id=\"Fill-3\" points=\"97.4213117 26.7267606 51.1285247 0.000910513587 72.4242993 40.8351686\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-5\" points=\"24.8347133 42.7618153 0.000455256793 28.682999 0.000455256793 82.1608764\"></polygon>\n<polygon fill=\"url(#linearGradient-1)\" id=\"Fill-7\" points=\"27.6634514 42.4662399 49.279044 109.05096 70.7296059 42.507213 49.2779058 1.3747617\"></polygon>\n<polygon fill=\"#F9904A\" id=\"Fill-9\" points=\"98.5660549 28.6951771 73.5622137 42.8047233 98.5660549 82.1719163\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-13\" points=\"72.2987623 45.061545 50.7514582 111.900071 97.579172 84.8646465\"></polygon>\n<polygon fill=\"#FB6D33\" id=\"Fill-15\" points=\"26.1006687 45.0226206 0.987565799 84.8644188 47.8095888 111.898705\"></polygon>\n<path d=\"M60.0737516,38.507213 C59.3168872,35.669825 57.0462939,33.3514298 57.0462939,33.3514298 C57.0462939,33.3514298 57.0804382,35.8849338 56.2894295,37.513615 C55.4847631,39.1696116 53.8765685,40.3054773 53.8765685,40.3054773 C53.8765685,40.3054773 56.1016361,33.8840802 54.2715038,30.1247973 C52.0259496,25.5073552 49.1771803,23.3357803 49.1771803,23.3357803 C49.1771803,23.3357803 50.1070423,28.1319107 48.6240432,31.5065016 C47.1672215,34.8264618 42.8058614,36.7260208 40.7241997,38.7132167 C39.1865699,40.1791435 38.0814341,43.0711623 37.6068289,44.4847347 C37.5715465,44.5883056 37.560165,44.6918765 37.5533362,44.7943093 C37.584066,43.9816759 37.8890881,39.8024186 40.9654858,37.4293925 C43.8404325,35.2111538 41.2431925,30.3478731 41.2431925,30.3478731 C41.2431925,30.3478731 41.7212121,32.5638355 40.9939394,34.1401622 C40.2655285,35.7153507 38.7187936,36.5962726 38.0154218,38.259098 C37.3883056,39.7409589 37.5203301,44.1432921 37.5453692,44.8409731 C37.5453692,44.8591834 37.5476455,44.8762555 37.5476455,44.8921895 C37.5476455,44.9263338 37.5487836,44.9456822 37.5487836,44.9456822 L37.5487836,44.9115379 C37.5590269,45.2655001 37.7138142,45.6080808 37.9972116,45.8448143 L48.3713757,55.6442168 C48.8380139,56.0323232 49.5163466,56.0334614 49.9841229,55.6476312 L60.5938825,45.7105136 C60.9034571,45.4544316 61.0719021,45.0686015 61.0457249,44.6656992 C60.9546735,43.2282259 60.5699815,40.3692133 60.0737516,38.507213\" fill=\"#FFFFFF\" id=\"Fill-17\"></path>\n</g>\n</g>\n</svg>\n</div>\n<div class=\"big\">\n<svg height=\"20\" width=\"232\" xmlns=\"http://www.w3.org/2000/svg\"><defs><lineargradient id=\"a\" x1=\"50%\" x2=\"50%\" y1=\"98.083%\" y2=\".767%\"><stop offset=\"0%\" stop-color=\"#ED1C23\"></stop><stop offset=\"100%\" stop-color=\"#FBAF3B\"></stop></lineargradient></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M78.622 12.384l1.596 21.94H77.49l-.847-14.154-8.98 15.523-4.899-15.53-4.416 14.162H55.6l7.085-21.871 5.712 17.174 10.224-17.244zm99.46.382l.324.01.454.036c.085.008.175.018.269.03l.61.096c1.09.203 2.518.644 3.883 1.596l.515.383-.46 3.694-.413-.62-.154-.195-.255-.285c-.765-.802-2.485-2.188-5.23-2.188-4.55 0-8.723 3.809-9.3 8.491-.287 2.311.334 4.469 1.755 6.077 1.342 1.517 3.257 2.354 5.39 2.354 2.606 0 4.58-1.225 5.606-2.04l.359-.3.424-.408.507-.552-.466 3.766-.093.06a12.622 12.622 0 01-4.577 1.842l-.629.1-.53.058-.418.027-.444.003c-2.918-.002-5.532-1.142-7.36-3.21-1.851-2.096-2.67-4.88-2.305-7.837.73-5.88 5.964-10.696 11.806-10.974l.732-.014zm18.174 9.018c1.724 0 3.344.713 4.443 1.956 1.101 1.248 1.59 2.88 1.377 4.596-.432 3.504-3.808 6.466-7.375 6.466-1.728 0-3.348-.715-4.45-1.96-1.096-1.242-1.583-2.864-1.377-4.563.44-3.52 3.818-6.495 7.382-6.495zm19.446.535l-1.486 12.02h-2.558l.16-1.292c-.936.93-2.462 1.755-4.173 1.755-1.318 0-2.48-.492-3.267-1.385-.804-.91-1.168-2.184-1.008-3.497l.9-7.274 2.597-.327-.914 7.402c-.101.785.084 1.466.525 1.968.49.552 1.27.845 2.25.845 1.526 0 3.3-1.155 3.51-2.873l.87-7.015 2.594-.327zm-63.587-.547c1.77 0 3.21.58 4.164 1.678 1.047 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.806 0 2.878-.434 3.868-.961l1.119-.623-.312 2.522-.106.06c-1.224.687-2.604 1.356-4.8 1.356-2.092 0-3.873-.708-5.006-1.992-.991-1.12-1.404-2.599-1.198-4.272.548-4.433 4.001-6.751 7.124-6.751zm-62.717 0c1.771 0 3.211.58 4.164 1.678 1.048 1.207 1.48 3.01 1.263 5.233l-.097.771h-9.914c.16 1.896 1.567 2.979 3.895 2.979 1.622 0 2.652-.35 3.563-.803l.594-.315.83-.466-.312 2.522-.105.06c-1.224.687-2.604 1.356-4.8 1.356-2.093 0-3.874-.708-5.007-1.992-.99-1.12-1.404-2.599-1.197-4.272.547-4.433 4-6.751 7.123-6.751zM231.476 12l-2.767 22.34h-2.556l.197-1.59c-1.104 1.191-2.882 2.021-4.471 2.021-1.781 0-3.24-.583-4.217-1.69-1.02-1.151-1.452-2.817-1.222-4.686.485-3.908 3.43-6.636 7.167-6.636 1.565 0 3.065.832 3.852 2.064l1.356-10.968 2.661-.855zm-42.07.002L186.64 34.34h-2.556l2.664-21.483 2.66-.854zm-56.632 1.268l-1.166 2.527h-9.586l-.85 6.867h6.627v.48h-.12l-.883 1.778v.24h-5.933l-1.138 9.163h-2.729l2.612-21.055h13.166zm2.715 9.038l-1.497 12.017h-2.559l1.455-11.722 2.601-.295zm-24.427-.537c1 0 1.93.427 2.616 1.204.84.95 1.224 2.29 1.053 3.677l-.955 7.673h-2.527l.922-7.445c.13-1.017-.027-1.81-.45-2.287-.326-.367-.815-.554-1.458-.554-1.954 0-3.178 1.346-3.332 2.613l-.955 7.673h-2.556l.922-7.445c.127-1.03-.024-1.826-.442-2.297-.319-.362-.801-.544-1.437-.544-1.522 0-3.3 1.166-3.516 2.901l-.912 7.385h-2.559l1.455-11.722 2.594-.295-.146 1.164c1.027-1.077 2.419-1.701 3.854-1.701 1.375 0 2.58.79 3.226 2.083.914-1.13 2.05-2.083 4.603-2.083zm29.487.532l-.206 1.73c1.082-.978 2.932-1.7 4.514-1.7h.269l-.271 2.282h-.214c-1.814 0-4.469.837-4.7 2.7l-.866 7.01h-2.558l1.45-11.693 2.582-.329zm55.47 1.865c-2.31 0-4.27 1.792-4.563 4.168-.144 1.145.15 2.196.824 2.957.64.725 1.586 1.126 2.656 1.126 2.292 0 4.241-1.78 4.532-4.14.146-1.169-.144-2.237-.821-3.003-.634-.715-1.567-1.108-2.628-1.108zm27.497-.029c-2.278 0-4.15 1.752-4.45 4.17-.149 1.187.137 2.255.8 3.006.611.692 1.526 1.076 2.57 1.076 2.294 0 4.173-1.743 4.468-4.143.152-1.21-.13-2.285-.79-3.033-.623-.704-1.52-1.076-2.598-1.076zm-134.356.045c-1.89 0-3.372 1.094-4.015 2.947h7.164a2.853 2.853 0 00-.71-1.956c-.574-.648-1.416-.991-2.439-.991zm62.715 0c-1.892 0-3.37 1.094-4.013 2.947h7.166a2.867 2.867 0 00-.713-1.956c-.573-.648-1.416-.991-2.44-.991zm-17.267-7.614c.919 0 1.706.748 1.754 1.668a1.587 1.587 0 01-1.603 1.692c-.917 0-1.704-.75-1.754-1.668a1.593 1.593 0 011.603-1.692z\" fill=\"#116\"></path><path d=\"M11.131 17.482L20.326.002.495 11.453zm30.621-6.028L21.912 0l9.127 17.5z\" fill=\"#F9AE7C\"></path><path d=\"M10.643 18.326L0 12.293v22.919z\" fill=\"#F9904A\"></path><path d=\"M11.856 18.2l9.264 28.536 9.193-28.519L21.119.59z\" fill=\"url(#a)\"></path><path d=\"M42.243 12.298l-10.716 6.047 10.716 16.872z\" fill=\"#F9904A\"></path><path d=\"M30.985 19.312l-9.234 28.645L41.82 36.371zm-19.799-.017L.423 36.37 20.49 47.957z\" fill=\"#FB6D33\"></path><path d=\"M25.746 16.503c-.324-1.216-1.298-2.21-1.298-2.21s.015 1.086-.324 1.784c-.345.71-1.034 1.197-1.034 1.197s.954-2.752.17-4.363c-.963-1.98-2.184-2.91-2.184-2.91s.398 2.056-.237 3.502c-.624 1.423-2.494 2.237-3.386 3.088-.659.629-1.132 1.868-1.336 2.474a.509.509 0 00-.023.133c.013-.349.144-2.14 1.463-3.157 1.232-.95.119-3.035.119-3.035s.205.95-.107 1.625c-.312.676-.975 1.053-1.277 1.766-.268.635-.212 2.522-.201 2.82v.023l.001.022v-.014a.54.54 0 00.193.4l4.446 4.2c.2.166.49.166.69.001l4.548-4.259a.535.535 0 00.193-.448c-.039-.616-.203-1.84-.416-2.639\" fill=\"#FFF\"></path></g></svg>\n</div>\n</a>\n<button class=\"btn btn-icon btn-soft\" id=\"close-sidebar\">\n<span class=\"material-icons size-20 menu-icon align-middle\">menu</span>\n</button>\n</div>\n<div class=\"d-flex align-items-center\">\n<ul class=\"list-unstyled mb-0\">\n</ul>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://memfiredb.com/\" target=\"_blank\" type=\"button\">官网</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://community.memfiredb.com/\" target=\"_blank\" type=\"button\">论坛</a>\n<a class=\"btn btn-icon btn-default ms-4\" href=\"https://cloud.memfiredb.com/auth/login\" target=\"_blank\" type=\"button\">登录</a>\n<button aria-label=\"Toggle user interface mode\" class=\"btn btn-icon btn-default ms-2\" id=\"mode\" type=\"button\">\n<span class=\"toggle-dark\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable dark mode</title>\n<path d=\"M24 42q-7.5 0-12.75-5.25T6 24q0-7.5 5.25-12.75T24 6q.4 0 .85.025.45.025 1.15.075-1.8 1.6-2.8 3.95-1 2.35-1 4.95 0 4.5 3.15 7.65Q28.5 25.8 33 25.8q2.6 0 4.95-.925T41.9 22.3q.05.6.075.975Q42 23.65 42 24q0 7.5-5.25 12.75T24 42Zm0-3q5.45 0 9.5-3.375t5.05-7.925q-1.25.55-2.675.825Q34.45 28.8 33 28.8q-5.75 0-9.775-4.025T19.2 15q0-1.2.25-2.575.25-1.375.9-3.125-4.9 1.35-8.125 5.475Q9 18.9 9 24q0 6.25 4.375 10.625T24 39Zm-.2-14.85Z\"></path>\n</svg>\n</span>\n<span class=\"toggle-light\">\n<svg fill=\"currentColor\" height=\"30\" viewbox=\"0 0 48 48\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\n<title>Enable light mode</title>\n<path d=\"M24 31q2.9 0 4.95-2.05Q31 26.9 31 24q0-2.9-2.05-4.95Q26.9 17 24 17q-2.9 0-4.95 2.05Q17 21.1 17 24q0 2.9 2.05 4.95Q21.1 31 24 31Zm0 3q-4.15 0-7.075-2.925T14 24q0-4.15 2.925-7.075T24 14q4.15 0 7.075 2.925T34 24q0 4.15-2.925 7.075T24 34ZM3.5 25.5q-.65 0-1.075-.425Q2 24.65 2 24q0-.65.425-1.075Q2.85 22.5 3.5 22.5h5q.65 0 1.075.425Q10 23.35 10 24q0 .65-.425 1.075-.425.425-1.075.425Zm36 0q-.65 0-1.075-.425Q38 24.65 38 24q0-.65.425-1.075.425-.425 1.075-.425h5q.65 0 1.075.425Q46 23.35 46 24q0 .65-.425 1.075-.425.425-1.075.425ZM24 10q-.65 0-1.075-.425Q22.5 9.15 22.5 8.5v-5q0-.65.425-1.075Q23.35 2 24 2q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 10 24 10Zm0 36q-.65 0-1.075-.425-.425-.425-.425-1.075v-5q0-.65.425-1.075Q23.35 38 24 38q.65 0 1.075.425.425.425.425 1.075v5q0 .65-.425 1.075Q24.65 46 24 46ZM12 14.1l-2.85-2.8q-.45-.45-.425-1.075.025-.625.425-1.075.45-.45 1.075-.45t1.075.45L14.1 12q.4.45.4 1.05 0 .6-.4 1-.4.45-1.025.45-.625 0-1.075-.4Zm24.7 24.75L33.9 36q-.4-.45-.4-1.075t.45-1.025q.4-.45 1-.45t1.05.45l2.85 2.8q.45.45.425 1.075-.025.625-.425 1.075-.45.45-1.075.45t-1.075-.45ZM33.9 14.1q-.45-.45-.45-1.05 0-.6.45-1.05l2.8-2.85q.45-.45 1.075-.425.625.025 1.075.425.45.45.45 1.075t-.45 1.075L36 14.1q-.4.4-1.025.4-.625 0-1.075-.4ZM9.15 38.85q-.45-.45-.45-1.075t.45-1.075L12 33.9q.45-.45 1.05-.45.6 0 1.05.45.45.45.45 1.05 0 .6-.45 1.05l-2.8 2.85q-.45.45-1.075.425-.625-.025-1.075-.425ZM24 24Z\"></path>\n</svg>\n</span>\n</button>\n</div>\n</div>\n</div>\n<div class=\"container-fluid\">\n<div class=\"layout-spacing\">\n<div class=\"d-md-flex justify-content-between align-items-center\"></div>\n<div class=\"row flex-xl-nowrap\">\n<div class=\"docs-toc col-xl-3 d-xl-block\"><toc>\n<div class=\"fw-bold text-uppercase mb-2\">本页</div>\n\n</toc></div>\n<div class=\"docs-toc-mobile d-print-none d-xl-none\">\n<button aria-expanded=\"false\" class=\"btn-secondary dropdown-toggle\" data-bs-offset=\"0,0\" data-bs-toggle=\"dropdown\" id=\"toc-dropdown-btn\" type=\"button\">逻辑操作符</button>\n</div>\n<div class=\"docs-content col-12 col-xl-9 mt-0\">\n<div class=\"mb-0 d-flex\">\n<h1 class=\"content-title mb-0\">\n                                                    函数与操作\n                                                    \n                                                </h1>\n</div>\n<div class=\"main-content\" data-bs-root-margin=\"0px 0px -65%\" data-bs-spy=\"scroll\" data-bs-target=\"#toc-mobile\" id=\"content\">\n<div data-prismjs-copy=\"\" data-prismjs-copy-error=\"\" data-prismjs-copy-success=\"\">\n<h1 id=\"逻辑操作符\">逻辑操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e9%80%bb%e8%be%91%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h1><p>常用的逻辑操作符有：\n\n\n\n\n\n\n\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>AND</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OR</td>\n</tr>\n<tr>\n<td>NOT</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>SQL使用三值的逻辑系统，包括真、假和null，null表示“未知”。观察下面的真值表：\n\n\n\n\n\n\n\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>a</th>\n<th>b</th>\n<th>a AND b</th>\n<th>a OR b</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TRUE</td>\n<td>TRUE</td>\n<td>TRUE</td>\n<td>TRUE</td>\n</tr>\n<tr>\n<td>TRUE</td>\n<td>FALSE</td>\n<td>FALSE</td>\n<td>TRUE</td>\n</tr>\n<tr>\n<td>TRUE</td>\n<td>NULL</td>\n<td>NULL</td>\n<td>TRUE</td>\n</tr>\n<tr>\n<td>FALSE</td>\n<td>FALSE</td>\n<td>FALSE</td>\n<td>FALSE</td>\n</tr>\n<tr>\n<td>FALSE</td>\n<td>NULL</td>\n<td>FALSE</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>NULL</td>\n<td>NULL</td>\n<td>NULL</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th>a</th>\n<th>NOT a</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TRUE</td>\n<td>FALSE</td>\n</tr>\n<tr>\n<td>FALSE</td>\n<td>TRUE</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>NULL</td>\n</tr>\n</tbody>\n</table>\n<p>操作符AND和OR是可交换的，也就是说，你可以交换左右操作数而不影响结果。</p>\n<h2 id=\"比较函数与操作符\">比较函数与操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%af%94%e8%be%83%e5%87%bd%e6%95%b0%e4%b8%8e%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>比较操作符可以用于所有可以比较的数据类型。所有比较操作符都是双目操作符，它们返回boolean类型；类似于1 &lt; 2 &lt; 3的表达式是非法的（因为没有&lt;操作符可以比较一个布尔值和3）。</p>\n<p>常见的比较操作符都可用，如表所示。</p>\n<p><strong>表.比较操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;&gt; or !=</td>\n<td>不等于</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>注意</p>\n<p>!=操作符在分析器阶段被转换成&lt;&gt;。不能把!=和&lt;&gt;操作符实现为做不同的事。</p>\n<p>如表所示，也有一些比较谓词。它们的行为和操作符很像，但是具有 SQL 标准所要求的特殊语法。</p>\n<p><strong>表.比较谓词</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>谓词</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a BETWEEN x AND y</td>\n<td>在x和y之间</td>\n</tr>\n<tr>\n<td>a NOT BETWEEN x AND y</td>\n<td>不在x和y之间</td>\n</tr>\n<tr>\n<td>a BETWEEN  SYMMETRIC x AND y</td>\n<td>在对比较值排序后位于x和y之间</td>\n</tr>\n<tr>\n<td>a NOT BETWEEN  SYMMETRIC x AND y</td>\n<td>在对比较值排序后不位于x和y之间</td>\n</tr>\n<tr>\n<td>a IS DISTINCT FROM b</td>\n<td>不等于，空值被当做一个普通值</td>\n</tr>\n<tr>\n<td>a IS NOT DISTINCT FROM b</td>\n<td>等于，空值被当做一个普通值</td>\n</tr>\n<tr>\n<td>expression IS NULL</td>\n<td>是空值</td>\n</tr>\n<tr>\n<td>expression IS NOT NULL</td>\n<td>不是空值</td>\n</tr>\n<tr>\n<td>expression ISNULL</td>\n<td>是空值（非标准语法）</td>\n</tr>\n<tr>\n<td>expression NOTNULL</td>\n<td>不是空值（非标准语法）</td>\n</tr>\n<tr>\n<td>boolean_expression IS TRUE</td>\n<td>为真</td>\n</tr>\n<tr>\n<td>boolean_expression IS NOT TRUE</td>\n<td>为假或未知</td>\n</tr>\n<tr>\n<td>boolean_expression IS FALSE</td>\n<td>为假</td>\n</tr>\n<tr>\n<td>boolean_expression IS NOT FALSE</td>\n<td>为真或者未知</td>\n</tr>\n<tr>\n<td>boolean_expression IS UNKNOWN</td>\n<td>值为未知</td>\n</tr>\n<tr>\n<td>boolean_expression IS NOT UNKNOWN</td>\n<td>为真或者为假</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>BETWEEN谓词可以简化范围测试：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"05b5a96\" tabindex=\"0\"><code class=\"language-sql\">a <span class=\"token operator\">BETWEEN</span> x <span class=\"token operator\">AND</span> y</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>等效于</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"0a45624\" tabindex=\"0\"><code class=\"language-sql\">a <span class=\"token operator\">&gt;=</span> x <span class=\"token operator\">AND</span> a <span class=\"token operator\">&lt;=</span> y</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>注意BETWEEN认为终点值是包含在范围内的。 NOT BETWEEN可以做相反比较：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"3ae4806\" tabindex=\"0\"><code class=\"language-sql\">a <span class=\"token operator\">NOT</span> <span class=\"token operator\">BETWEEN</span> x <span class=\"token operator\">AND</span> y</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>等效于</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"358d218\" tabindex=\"0\"><code class=\"language-sql\">a <span class=\"token operator\">&lt;</span> x <span class=\"token operator\">OR</span> a <span class=\"token operator\">&gt;</span> y</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>BETWEEN SYMMETRIC和BETWEEN相似，不过BETWEEN SYMMETRIC不要求AND左边的参数小于或等于右边的参数。如果左参数不是小于等于右参数，这两个参数会自动被交换，这样总是会应用一个非空范围。</p>\n<p>当有一个输入为空时，普通的比较操作符会得到空（表示“未知”），而不是真或假。例如，7 = NULL得到空，7 &lt;&gt; NULL也一样。如果这种行为不合适，可以使用IS [ NOT ] DISTINCT FROM谓词：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"69f8de2\" tabindex=\"0\"><code class=\"language-sql\">a <span class=\"token operator\">IS</span> <span class=\"token keyword\">DISTINCT</span> <span class=\"token keyword\">FROM</span> b\na <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">DISTINCT</span> <span class=\"token keyword\">FROM</span> b</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>对于非空输入，IS DISTINCT FROM和&lt;&gt;操作符一样。不过，如果两个输入都为空，它会返回假。而如果只有一个输入为空，它会返回真。类似地，IS NOT DISTINCT FROM对于非空输入的行为与=相同，但是当两个输入都为空时它返回真，并且当只有一个输入为空时返回假。因此，这些谓词实际上把空值当作一种普通数据值而不是“unknown”。</p>\n<p>要检查一个值是否为空，使用下面的谓词：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"5c36f76\" tabindex=\"0\"><code class=\"language-sql\">expression <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span>\nexpression <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>或者等效，但并不标准的谓词：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"4d9b963\" tabindex=\"0\"><code class=\"language-sql\">expression ISNULL\nexpression NOTNULL</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>不要写expression = NULL，因为NULL是不“等于”NULL的（控制代表一个未知的值，因此我们无法知道两个未知的数值是否相等）。</p>\n<p>如果expression是行值，那么当行表达式本身为非空值或者行的所有域为非空时IS NULL为真。由于这种行为，IS NULL和IS NOT NULL并不总是为行值表达式返回反转的结果，特别是，一个同时包含 NULL 和非空值的域将会对两种测试都返回假。在某些情况下，写成row IS DISTINCT FROM NULL或者row IS NOT DISTINCT FROM NULL会更好，它们只会检查整个行值是否为空而不需要在行的域上做额外的测试。</p>\n<p>布尔值也可以使用下列谓词进行测试：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"b7d203b\" tabindex=\"0\"><code class=\"language-sql\">boolean_expression <span class=\"token operator\">IS</span> <span class=\"token boolean\">TRUE</span>\nboolean_expression <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">TRUE</span>\nboolean_expression <span class=\"token operator\">IS</span> <span class=\"token boolean\">FALSE</span>\nboolean_expression <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">FALSE</span>\nboolean_expression <span class=\"token operator\">IS</span> UNKNOWN\nboolean_expression <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> UNKNOWN</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这些谓词将总是返回真或假，从来不返回空值，即使操作数是空也如此。空值输入被当做逻辑值“未知”。 请注意实际上IS UNKNOWN和IS NOT UNKNOWN分别与IS NULL和IS NOT NULL相同， 只是输入表达式必须是布尔类型。</p>\n<p>如表中所示，也有一些比较相关的函数可用。</p>\n<p><strong>表.比较函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n<th>例子</th>\n<th>例子结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>num_nonnulls(VARIADIC “any”)</td>\n<td>返回非空参数的数量</td>\n<td>num_nonnulls(1, NULL, 2)</td>\n<td>2</td>\n</tr>\n<tr>\n<td>num_nulls(VARIADIC “any”)</td>\n<td>返回空参数的数量</td>\n<td>num_nulls(1, NULL, 2)</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h2 id=\"数学函数和操作符\">数学函数和操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e5%ad%a6%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>MemFireDB为很多类型提供了数学操作符。对于那些没有标准数学表达的类型（如日期/时间类型），我们将在后续小节中描述实际的行为。</p>\n<h3 id=\"数学操作符\">数学操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e5%ad%a6%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h3><p>下表展示了所有可用的数学操作符。</p>\n<p><strong>表.数学操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>操作符</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>2 + 3</td>\n<td>5</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>2 - 3</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>2 * 3</td>\n<td>6</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除（整数除法截断结果）</td>\n<td>4 / 2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>模（取余）</td>\n<td>5 % 4</td>\n<td>1</td>\n</tr>\n<tr>\n<td>^</td>\n<td>指数（从左至右结合）</td>\n<td>2.0 ^ 3.0</td>\n<td>8</td>\n</tr>\n<tr>\n<td>|/</td>\n<td>平方根</td>\n<td>|/ 25.0</td>\n<td>5</td>\n</tr>\n<tr>\n<td>||/</td>\n<td>立方根</td>\n<td>||/ 27.0</td>\n<td>3</td>\n</tr>\n<tr>\n<td>!</td>\n<td>阶乘</td>\n<td>5 !</td>\n<td>120</td>\n</tr>\n<tr>\n<td>!!</td>\n<td>阶乘（前缀操作符）</td>\n<td>!! 5</td>\n<td>120</td>\n</tr>\n<tr>\n<td>@</td>\n<td>绝对值</td>\n<td>@ -5.0</td>\n<td>5</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>按位与</td>\n<td>91 &amp; 15</td>\n<td>11</td>\n</tr>\n<tr>\n<td>|</td>\n<td>按位或</td>\n<td>32 | 3</td>\n<td>35</td>\n</tr>\n<tr>\n<td>#</td>\n<td>按位异或</td>\n<td>17 # 5</td>\n<td>20</td>\n</tr>\n<tr>\n<td>~</td>\n<td>按位求反</td>\n<td>~1</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>«</td>\n<td>按位左移</td>\n<td>1 « 4</td>\n<td>16</td>\n</tr>\n<tr>\n<td>»</td>\n<td>按位右移</td>\n<td>8 » 2</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>按位操作操作符只能用于整数数据类型，而其它的操作符可以用于全部数字数据类型。按位操作的操作符还可以用于位串类型bit和bit varying。</p>\n<p>上表显示了可用的数学函数。在该表中，dp表示double precision。这些函数中有许多都有多种不同的形式，区别是参数不同。除非特别指明，任何特定形式的函数都返回和它的参数相同的数据类型。 处理double precision数据的函数大多数是在宿主系统的 C 库基础上实现的；因此，边界情况下的准确度和行为是根据宿主系统而变化的。</p>\n<h3 id=\"数学函数\">数学函数 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e5%ad%a6%e5%87%bd%e6%95%b0\"><i class=\"material-icons align-middle\">link</i></a></h3><p><strong>表.数学函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>abs(x)</td>\n<td>（和输入相同）</td>\n<td>绝对值</td>\n<td>abs(-17.4)</td>\n<td>17.4</td>\n</tr>\n<tr>\n<td>cbrt(dp)</td>\n<td>dp</td>\n<td>立方根</td>\n<td>cbrt(27.0)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>ceil(dp or numeric)</td>\n<td>（和输入相同）</td>\n<td>不小于参数的最近的整数</td>\n<td>ceil(-42.8)</td>\n<td>-42</td>\n</tr>\n<tr>\n<td>ceiling(dp or numeric)</td>\n<td>（和输入相同）</td>\n<td>不小于参数的最近的整数（ceil的别名）</td>\n<td>ceiling(-95.3)</td>\n<td>-95</td>\n</tr>\n<tr>\n<td>degrees(dp)</td>\n<td>dp</td>\n<td>把弧度转为角度</td>\n<td>degrees(0.5)</td>\n<td>28.6478897565412</td>\n</tr>\n<tr>\n<td>div(y numeric, x numeric)</td>\n<td>numeric</td>\n<td>y/x的整数商</td>\n<td>div(9,4)</td>\n<td>2</td>\n</tr>\n<tr>\n<td>exp(dp or numeric)</td>\n<td>（和输入相同）</td>\n<td>指数</td>\n<td>exp(1.0)</td>\n<td>2.71828182845905</td>\n</tr>\n<tr>\n<td>floor(dp or numeric)</td>\n<td>（和输入相同）</td>\n<td>不大于参数的最近的整数</td>\n<td>floor(-42.8)</td>\n<td>-43</td>\n</tr>\n<tr>\n<td>ln(dp or numeric)</td>\n<td>（和输入相同）</td>\n<td>自然对数</td>\n<td>ln(2.0)</td>\n<td>0.693147180559945</td>\n</tr>\n<tr>\n<td>log(dp or numeric)</td>\n<td>（和输入相同）</td>\n<td>以10为底的对数</td>\n<td>log(100.0)</td>\n<td>2</td>\n</tr>\n<tr>\n<td>log(b numeric, x numeric)</td>\n<td>numeric</td>\n<td>以b为底的对数</td>\n<td>log(2.0, 64.0)</td>\n<td>6.0000000000</td>\n</tr>\n<tr>\n<td>mod(y, x)</td>\n<td>（和参数类型相同）</td>\n<td>y/x的余数</td>\n<td>mod(9,4)</td>\n<td>1</td>\n</tr>\n<tr>\n<td>pi()</td>\n<td>dp</td>\n<td>“π”常数</td>\n<td>pi()</td>\n<td>3.14159265358979</td>\n</tr>\n<tr>\n<td>power(a dp, b dp)</td>\n<td>dp</td>\n<td>求a的b次幂</td>\n<td>power(9.0, 3.0)</td>\n<td>729</td>\n</tr>\n<tr>\n<td>power(a numeric, b numeric)</td>\n<td>numeric</td>\n<td>求a的b次幂</td>\n<td>power(9.0, 3.0)</td>\n<td>729</td>\n</tr>\n<tr>\n<td>radians(dp)</td>\n<td>dp</td>\n<td>把角度转为弧度</td>\n<td>radians(45.0)</td>\n<td>0.785398163397448</td>\n</tr>\n<tr>\n<td>round(dp or numeric)</td>\n<td>（和输入相同）</td>\n<td>圆整为最接近的整数</td>\n<td>round(42.4)</td>\n<td>42</td>\n</tr>\n<tr>\n<td>round(v numeric, s int)</td>\n<td>numeric</td>\n<td>圆整为s位小数数字</td>\n<td>round(42.4382, 2)</td>\n<td>42.44</td>\n</tr>\n<tr>\n<td>scale(numeric)</td>\n<td>integer</td>\n<td>参数的精度（小数点后的位数）</td>\n<td>scale(8.41)</td>\n<td>2</td>\n</tr>\n<tr>\n<td>sign(dp or numeric)</td>\n<td>（和输入相同）</td>\n<td>参数的符号（-1, 0, +1）</td>\n<td>sign(-8.4)</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>sqrt(dp or numeric)</td>\n<td>（和输入相同）</td>\n<td>平方根</td>\n<td>sqrt(2.0)</td>\n<td>1.4142135623731</td>\n</tr>\n<tr>\n<td>trunc(dp or numeric)</td>\n<td>（和输入相同）</td>\n<td>截断（向零靠近）</td>\n<td>trunc(42.8)</td>\n<td>42</td>\n</tr>\n<tr>\n<td>trunc(v numeric, s int)</td>\n<td>numeric</td>\n<td>截断为s位小数位置的数字</td>\n<td>trunc(42.4382, 2)</td>\n<td>42.43</td>\n</tr>\n<tr>\n<td>width_bucket(op dp, b1 dp, b2 dp, count int)</td>\n<td>int</td>\n<td>返回一个桶号，这个桶是在一个柱状图中operand将被分配的那个桶，该柱状图有count个散布在范围b1到b2上的等宽桶。对于超过该范围的输入，将返回0或者count+1</td>\n<td>width_bucket(5.35, 0.024, 10.06, 5)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>width_bucket(op numeric, b1 numeric, b2 numeric, count int)</td>\n<td>int</td>\n<td>返回一个桶号，这个桶是在一个柱状图中operand将被分配的那个桶，该柱状图有count个散布在范围b1到b2上的等宽桶。对于超过该范围的输入，将返回0或者count+1</td>\n<td>width_bucket(5.35, 0.024, 10.06, 5)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>width_bucket(operand anyelement, thresholds anyarray)</td>\n<td>int</td>\n<td>返回一个桶号，这个桶是在给定数组中operand 将被分配的桶，该数组列出了桶的下界。对于一个低于第一个下界的输入返回 0。thresholds数组<em>必须被排好序</em>， 最小的排在最前面，否则将会得到意想不到的结果</td>\n<td>width_bucket(now(), array[‘yesterday’,  ’today’, ’tomorrow’]::timestamptz[])</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h3 id=\"随机函数\">随机函数 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e9%9a%8f%e6%9c%ba%e5%87%bd%e6%95%b0\"><i class=\"material-icons align-middle\">link</i></a></h3><p>下表展示了用于产生随机数的函数。</p>\n<p><strong>表.随机函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>random()</td>\n<td>dp</td>\n<td>范围 0.0 &lt;= x &lt; 1.0 中的随机值</td>\n</tr>\n<tr>\n<td>setseed(dp)</td>\n<td>void</td>\n<td>为后续的random()调用设置种子（值为于 -1.0 和 1.0 之间，包括边界值）</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>random()返回的值的特征取决于系统实现。 它不适合用于加密应用，如果需要用于加密应用请参考pgcrypto模块。</p>\n<p>最后，表显示了可用的三角函数。所有三角函数都有类型为double precision的参数和返回类型。每一种三角函数都有两个变体，一个以弧度度量角，另一个以角度度量角。</p>\n<h3 id=\"三角函数\">三角函数 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%b8%89%e8%a7%92%e5%87%bd%e6%95%b0\"><i class=\"material-icons align-middle\">link</i></a></h3><p><strong>表.三角函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数（弧度）</th>\n<th>函数（角度）</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>acos(x)</td>\n<td>acosd(x)</td>\n<td>反余弦</td>\n</tr>\n<tr>\n<td>asin(x)</td>\n<td>asind(x)</td>\n<td>反正弦</td>\n</tr>\n<tr>\n<td>atan(x)</td>\n<td>atand(x)</td>\n<td>反正切</td>\n</tr>\n<tr>\n<td>atan2(y, x)</td>\n<td>atan2d(y, x)</td>\n<td>y/x的反正切</td>\n</tr>\n<tr>\n<td>cos(x)</td>\n<td>cosd(x)</td>\n<td>余弦</td>\n</tr>\n<tr>\n<td>cot(x)</td>\n<td>cotd(x)</td>\n<td>余切</td>\n</tr>\n<tr>\n<td>sin(x)</td>\n<td>sind(x)</td>\n<td>正弦</td>\n</tr>\n<tr>\n<td>tan(x)</td>\n<td>tand(x)</td>\n<td>正切</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h2 id=\"字符串函数和操作符\">字符串函数和操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>本节描述了用于检查和操作字符串值的函数和操作符。在这个环境中的串包括所有类型character、character varying和text的值。除非另外说明，所有下面列出的函数都可以处理这些类型，不过要小心的是，在使用character类型的时候， 它有自动填充空白的潜在影响。有些函数还可以处理位串类型。</p>\n<p>SQL定义了一些字符串函数，它们使用关键字，而不是逗号来分隔参数。MemFireDB也提供了这些函数使用正常函数调用语法的版本。</p>\n<p><strong>表.SQL字符串函数和操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string || string</td>\n<td>text</td>\n<td>串接</td>\n<td>‘Post’ || ‘greSQL’</td>\n<td>PostgreSQL</td>\n</tr>\n<tr>\n<td>string || non-string or non-string || string</td>\n<td>text</td>\n<td>使用一个非字符串输入的串接</td>\n<td>‘Value: ’ || 42</td>\n<td>Value: 42</td>\n</tr>\n<tr>\n<td>bit_length(string)</td>\n<td>int</td>\n<td>串中的位数</td>\n<td>bit_length(‘jose’)</td>\n<td>32</td>\n</tr>\n<tr>\n<td>char_length(string) or character_length(string)</td>\n<td>int</td>\n<td>串中字符数</td>\n<td>char_length(‘jose’)</td>\n<td>4</td>\n</tr>\n<tr>\n<td>lower(string)</td>\n<td>text</td>\n<td>将字符串转换为小写形式</td>\n<td>lower(‘TOM’)</td>\n<td>tom</td>\n</tr>\n<tr>\n<td>octet_length(string)</td>\n<td>int</td>\n<td>串中的字节数</td>\n<td>octet_length(‘jose’)</td>\n<td>4</td>\n</tr>\n<tr>\n<td>overlay(string placing string from int [for int])</td>\n<td>text</td>\n<td>替换子串</td>\n<td>overlay(‘Txxxxas’ placing ‘hom’ from 2 for 4)</td>\n<td>Thomas</td>\n</tr>\n<tr>\n<td>position(substring in string)</td>\n<td>int</td>\n<td>定位指定子串</td>\n<td>position(‘om’ in ‘Thomas’)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>substring(string [from int]  [for int])</td>\n<td>text</td>\n<td>提取子串</td>\n<td>substring(‘Thomas’ from 2 for 3)</td>\n<td>hom</td>\n</tr>\n<tr>\n<td>substring(string from pattern)</td>\n<td>text</td>\n<td>提取匹配POSIX正则表达式的子串。模式匹配。</td>\n<td>substring(‘Thomas’ from ‘…$’)</td>\n<td>mas</td>\n</tr>\n<tr>\n<td>substring(string from pattern for escape)</td>\n<td>text</td>\n<td>提取匹配SQL正则表达式的子串。</td>\n<td>substring(‘Thomas’ from ‘%#“o_a#”_’  for ‘#’)</td>\n<td>oma</td>\n</tr>\n<tr>\n<td>trim([leading | trailing | both] [characters]  from string)</td>\n<td>text</td>\n<td>从string的开头、结尾或者两端（both是默认值）移除只包含characters（默认是一个空格）中字符的最长字符串</td>\n<td>trim(both ‘xyz’ from ‘yxTomxx’)</td>\n<td>Tom</td>\n</tr>\n<tr>\n<td>trim([leading | trailing | both]  [from] string [, characters] )</td>\n<td>text</td>\n<td>trim()的非标准版本</td>\n<td>trim(both from ‘xTomxx’, ‘x’)</td>\n<td>Tom</td>\n</tr>\n<tr>\n<td>upper(string)</td>\n<td>text</td>\n<td>将字符串转换成大写形式</td>\n<td>upper(’tom’)</td>\n<td>TOM</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>还有额外的串操作函数可以用，它们在下表中列出。它们有些在内部用于实现表 列出的SQL标准字符串函数。</p>\n<p><strong>表.其他字符串函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ascii(string)</td>\n<td>int</td>\n<td>参数第一个字符的ASCII代码。对于UTF8返回该字符的Unicode代码点。对于其他多字节编码，该参数必须是一个ASCII字符。</td>\n<td>ascii(‘x’)</td>\n<td>120</td>\n</tr>\n<tr>\n<td>btrim(string text [, characters text])</td>\n<td>text</td>\n<td>从string的开头或结尾删除最长的只包含characters（默认是一个空格）的串</td>\n<td>btrim(‘xyxtrimyyx’, ‘xyz’)</td>\n<td>trim</td>\n</tr>\n<tr>\n<td>chr(int)</td>\n<td>text</td>\n<td>给定代码的字符。对于UTF8该参数被视作一个Unicode代码点。对于其他多字节编码该参数必须指定一个ASCII字符。NULL (0) 字符不被允许，因为文本数据类型不能存储这种字节。</td>\n<td>chr(65)</td>\n<td>A</td>\n</tr>\n<tr>\n<td>concat(str “any” [, str “any” [,  …] ])</td>\n<td>text</td>\n<td>串接所有参数的文本表示。NULL 参数被忽略。</td>\n<td>concat(‘abcde’, 2, NULL, 22)</td>\n<td>abcde222</td>\n</tr>\n<tr>\n<td>concat_ws(sep text, str “any” [, str “any” [,  …] ])</td>\n<td>text</td>\n<td>将除了第一个参数外的其他参数用分隔符串接在一起。第一个参数被用作分隔符字符串。NULL 参数被忽略。</td>\n<td>concat_ws(’,’, ‘abcde’, 2, NULL, 22)</td>\n<td>abcde,2,22</td>\n</tr>\n<tr>\n<td>decode(string text, format text)</td>\n<td>bytea</td>\n<td>从string中的文本表达解码二进制数据。format的选项和encode中的一样。</td>\n<td>decode(‘MTIzAAE=’, ‘base64’)</td>\n<td>\\x3132330001</td>\n</tr>\n<tr>\n<td>encode(data bytea, format text)</td>\n<td>text</td>\n<td>将二进制数据编码成一个文本表达。支持的格式有：base64、hex、escape。escape将零字节和高位组字节转换为八进制序列（\\nnn）和双写的反斜线。</td>\n<td>encode(‘123\\000\\001’, ‘base64’)</td>\n<td>MTIzAAE=</td>\n</tr>\n<tr>\n<td>format(formatstr text [, formatarg “any” [,  …] ])</td>\n<td>text</td>\n<td>根据一个格式字符串格式化参数。该函数和C函数sprintf相似。</td>\n<td>format(‘Hello %s, %1$s’, ‘World’)</td>\n<td>Hello World, World</td>\n</tr>\n<tr>\n<td>initcap(string)</td>\n<td>text</td>\n<td>将每一个词的第一个字母转换为大写形式并把剩下的字母转换为小写形式。词是由非字母数字字符分隔的字母数字字符的序列。</td>\n<td>initcap(‘hi THOMAS’)</td>\n<td>Hi Thomas</td>\n</tr>\n<tr>\n<td>left(str text, n int)</td>\n<td>text</td>\n<td>返回字符串中的前n个字符。当n为负时，将返回除了最后|n|个字符之外的所有字符。</td>\n<td>left(‘abcde’, 2)</td>\n<td>ab</td>\n</tr>\n<tr>\n<td>length(string)</td>\n<td>int</td>\n<td>string中的字符数</td>\n<td>length(‘jose’)</td>\n<td>4</td>\n</tr>\n<tr>\n<td>length(string bytea, encoding name )</td>\n<td>int</td>\n<td>string在给定编码中的字符数。string必须在这个编码中有效。</td>\n<td>length(‘jose’, ‘UTF8’)</td>\n<td>4</td>\n</tr>\n<tr>\n<td>lpad(string text, length int [, fill text])</td>\n<td>text</td>\n<td>将string通过前置字符fill（默认是一个空格）填充到长度length。如果string已经长于length，则它被（从右边）截断。</td>\n<td>lpad(‘hi’, 5, ‘xy’)</td>\n<td>xyxhi</td>\n</tr>\n<tr>\n<td>ltrim(string text [, characters text])</td>\n<td>text</td>\n<td>从string的开头删除最长的只包含characters（默认是一个空格）的串</td>\n<td>ltrim(‘zzzytest’, ‘xyz’)</td>\n<td>test</td>\n</tr>\n<tr>\n<td>md5(string)</td>\n<td>text</td>\n<td>计算string的 MD5 哈希，返回十六进制的结果</td>\n<td>md5(‘abc’)</td>\n<td>900150983cd24fb0 d6963f7d28e17f72</td>\n</tr>\n<tr>\n<td>parse_ident(qualified_identifier text [, strictmode boolean DEFAULT  true ] )</td>\n<td>text[]</td>\n<td>把qualified_identifier分成一个标识符数组，移除单个标识符上的任何引号。默认情况下，最后一个标识符后面的多余字符会被当做错误。但是如果第二个参数为false，那么这一类多余的字符会被忽略（这种行为对于解析函数之类的对象名称有用）。注意这个函数不会截断超长标识符。如果想要进行截断，可以把结果转换成name[]。</td>\n<td>parse_ident(’“SomeSchema”.someTable’)</td>\n<td>{SomeSchema,sometable}</td>\n</tr>\n<tr>\n<td>pg_client_encoding()</td>\n<td>name</td>\n<td>当前的客户端编码名字</td>\n<td>pg_client_encoding()</td>\n<td>SQL_ASCII</td>\n</tr>\n<tr>\n<td>quote_ident(string text)</td>\n<td>text</td>\n<td>将给定字符串返回成合适的引用形式，使它可以在一个SQL语句字符串中被用作一个标识符。只有需要时才会加上引号（即，如果字符串包含非标识符字符或可能是大小写折叠的）。嵌入的引号会被正确地双写。</td>\n<td>quote_ident(‘Foo bar’)</td>\n<td>“Foo bar”</td>\n</tr>\n<tr>\n<td>quote_literal(string text)</td>\n<td>text</td>\n<td>将给定字符串返回成合适的引用形式，使它可以在一个SQL语句字符串中被用作一个字符串文字。嵌入的引号会被正确地双写。注意quote_literal对空输入返回空；如果参数可能为空，quote_nullable通常更合适。</td>\n<td>quote_literal(E’O'Reilly’)</td>\n<td>‘O’‘Reilly’</td>\n</tr>\n<tr>\n<td>quote_literal(value anyelement)</td>\n<td>text</td>\n<td>强迫给定值为文本并且接着将它用引号包围作为一个文本。嵌入的单引号和反斜线被正确的双写。</td>\n<td>quote_literal(42.5)</td>\n<td>‘42.5’</td>\n</tr>\n<tr>\n<td>quote_nullable(string text)</td>\n<td>text</td>\n<td>将给定字符串返回成合适的引用形式，使它可以在一个SQL语句字符串中被用作一个字符串文字；或者，如果参数为空，返回NULL。嵌入的引号会被正确地双写。</td>\n<td>quote_nullable(NULL)</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>quote_nullable(value anyelement)</td>\n<td>text</td>\n<td>强迫给定值为文本并且接着将它用引号包围作为一个文本；或者，如果参数为空，返回NULL。嵌入的单引号和反斜线被正确的双写。</td>\n<td>quote_nullable(42.5)</td>\n<td>‘42.5’</td>\n</tr>\n<tr>\n<td>regexp_match(string text, pattern text [, flags text])</td>\n<td>text[]</td>\n<td>返回一个POSIX正则表达式与string的第一个匹配得到的子串。</td>\n<td>regexp_match(‘foobarbequebaz’,  ‘(bar)(beque)’)</td>\n<td>{bar,beque}</td>\n</tr>\n<tr>\n<td>regexp_matches(string text, pattern text [, flags text])</td>\n<td>setof text[]</td>\n<td>返回一个POSIX正则表达式与string匹配得到的子串。</td>\n<td>regexp_matches(‘foobarbequebaz’, ‘ba.’, ‘g’)</td>\n<td>{bar}  {baz}  (2 rows)</td>\n</tr>\n<tr>\n<td>regexp_replace(string text, pattern text, replacement text [, flags text])</td>\n<td>text</td>\n<td>替换匹配一个POSIX正则表达式的子串。</td>\n<td>regexp_replace(‘Thomas’, ‘.[mN]a.’, ‘M’)</td>\n<td>ThM</td>\n</tr>\n<tr>\n<td>regexp_split_to_array(string text, pattern text [, flags text ])</td>\n<td>text[]</td>\n<td>使用一个POSIX正则表达式作为分隔符划分string。</td>\n<td>regexp_split_to_array(‘hello world’, ‘\\s+’)</td>\n<td>{hello,world}</td>\n</tr>\n<tr>\n<td>regexp_split_to_table(string text, pattern text [, flags text])</td>\n<td>setof text</td>\n<td>使用一个POSIX正则表达式作为分隔符划分string。</td>\n<td>regexp_split_to_table(‘hello world’, ‘\\s+’)</td>\n<td>hello  world  (2 rows)</td>\n</tr>\n<tr>\n<td>repeat(string text, number int)</td>\n<td>text</td>\n<td>重复string指定的number次</td>\n<td>repeat(‘Pg’, 4)</td>\n<td>PgPgPgPg</td>\n</tr>\n<tr>\n<td>replace(string text, from text, to text)</td>\n<td>text</td>\n<td>将string中出现的所有子串from替换为子串to</td>\n<td>replace(‘abcdefabcdef’, ‘cd’, ‘XX’)</td>\n<td>abXXefabXXef</td>\n</tr>\n<tr>\n<td>reverse(str)</td>\n<td>text</td>\n<td>返回反转的字符串。</td>\n<td>reverse(‘abcde’)</td>\n<td>edcba</td>\n</tr>\n<tr>\n<td>right(str text, n int)</td>\n<td>text</td>\n<td>返回字符串中的最后n个字符。如果n为负，返回除最前面的|n|个字符外的所有字符。</td>\n<td>right(‘abcde’, 2)</td>\n<td>de</td>\n</tr>\n<tr>\n<td>rpad(string text, length int [, fill text])</td>\n<td>text</td>\n<td>将string通过增加字符fill（默认为一个空格）填充到长度length。如果string已经长于length则它会被截断。</td>\n<td>rpad(‘hi’, 5, ‘xy’)</td>\n<td>hixyx</td>\n</tr>\n<tr>\n<td>rtrim(string text [, characters text])</td>\n<td>text</td>\n<td>从string的结尾删除最长的只包含characters（默认是一个空格）的串</td>\n<td>rtrim(’testxxzx’, ‘xyz’)</td>\n<td>test</td>\n</tr>\n<tr>\n<td>split_part(string text, delimiter text, field int)</td>\n<td>text</td>\n<td>按delimiter划分string并返回给定域（从1开始计算）</td>\n<td>split_part(‘abc~@~def~@~ghi’, ‘~@~’, 2)</td>\n<td>def</td>\n</tr>\n<tr>\n<td>strpos(string, substring)</td>\n<td>int</td>\n<td>指定子串的位置（和position(substring in string)相同，但是注意相反的参数顺序）</td>\n<td>strpos(‘high’, ‘ig’)</td>\n<td>2</td>\n</tr>\n<tr>\n<td>substr(string, from [, count])</td>\n<td>text</td>\n<td>提取子串（与substring(string from from for count)相同）</td>\n<td>substr(‘alphabet’, 3, 2)</td>\n<td>ph</td>\n</tr>\n<tr>\n<td>starts_with(string, prefix)</td>\n<td>bool</td>\n<td>如果string以prefix开始则返回真。</td>\n<td>starts_with(‘alphabet’, ‘alph’)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>to_hex(number int or bigint)</td>\n<td>text</td>\n<td>将number转换到它等效的十六进制表示</td>\n<td>to_hex(2147483647)</td>\n<td>7fffffff</td>\n</tr>\n<tr>\n<td>translate(string text, from text, to text)</td>\n<td>text</td>\n<td>string中任何匹配from集合中一个字符的字符会被替换成to集合中的相应字符。如果from比to长，from中的额外字符会被删除。</td>\n<td>translate(‘12345’, ‘143’, ‘ax’)</td>\n<td>a2x5</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>concat、concat_ws和format函数是可变的，因此可以把要串接或格式化的值作为一个标记了VARIADIC关键字的数组进行传递。数组的元素被当作函数的独立普通参数一样处理。如果可变数组参数为 NULL，concat和concat_ws返回 NULL，但format把 NULL 当作一个零元素数组。</p>\n<p><strong>format</strong></p>\n<p>函数format根据一个格式字符串产生格式化的输出，其形式类似于 C 函数sprintf。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"40b8f05\" tabindex=\"0\"><code class=\"language-none\">format(formatstr text [, formatarg \"any\" [, ...] ])</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>formatstr是一个格式字符串，它指定了结果应该如何被格式化。格式字符串中的文本被直接复制到结果中，除了使用格式说明符的地方。格式说明符在字符串中扮演着占位符的角色，它定义后续的函数参数如何被格式化及插入到结果中。每一个formatarg参数会被根据其数据类型的常规输出规则转换为文本，并接着根据格式说明符被格式化和插入到结果字符串中。</p>\n<p>格式说明符由一个%字符开始并且有这样的形式</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4ab43de\" tabindex=\"0\"><code class=\"language-none\">%[position][flags][width]type</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>其中的各组件域是：</p>\n<p><strong>position</strong>（可选）</p>\n<p>一个形式为n$的字符串，其中n是要打印的参数的索引。索引 1 表示formatstr之后的第一个参数。如果position被忽略，默认会使用序列中的下一个参数。</p>\n<p>flags（可选）</p>\n<p>控制格式说明符的输出如何被格式化的附加选项。当前唯一支持的标志是一个负号（-），它将导致格式说明符的输出会被左对齐（left-justified）。除非width域也被指定，否者这个域不会产生任何效果。</p>\n<p>width（可选）</p>\n<p>指定用于显示格式说明符输出的最小字符数。输出将被在左部或右部（取决于-标志）用空格填充以保证充满该宽度。太小的宽度设置不会导致输出被截断，但是会被简单地忽略。宽度可以使用下列形式之一指定：一个正整数；一个星号（<em>）表示使用下一个函数参数作为宽度；或者一个形式为</em>n$的字符串表示使用第n个函数参数作为宽度。</p>\n<p>如果宽度来自于一个函数参数，则参数在被格式说明符的值使用之前就被消耗掉了。如果宽度参数是负值，结果会在长度为abs(width)的域中被左对齐（如果-标志被指定）。</p>\n<p>type（必需）</p>\n<p>格式转换的类型，用于产生格式说明符的输出。支持下面的类型：</p>\n<p>·   s将参数值格式化为一个简单字符串。一个控制被视为一个空字符串。</p>\n<p>·   I将参数值视作 SQL 标识符，并在必要时用双写引号包围它。如果参数为空，将会是一个错误（等效于quote_ident）。</p>\n<p>·   L将参数值引用为 SQL 文字。一个空值将被显示为不带引号的字符串NULL（等效于quote_nullable）。</p>\n<p>除了以上所述的格式说明符之外，要输出一个文字形式的%字符，可以使用特殊序列%%。</p>\n<p>下面有一些基本的格式转换的例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2647366\" tabindex=\"0\"><code class=\"language-none\">SELECT format('Hello %s', 'World');\n结果：Hello World\n\nSELECT format('Testing %s, %s, %s, %%', 'one', 'two', 'three');\n结果：Testing one, two, three, %\n\nSELECT format('INSERT INTO %I VALUES(%L)', 'Foo bar', E'O\\'Reilly');\n结果：INSERT INTO \"Foo bar\" VALUES('O''Reilly')\n\nSELECT format('INSERT INTO %I VALUES(%L)', 'locations', 'C:\\Program Files');\n结果：INSERT INTO locations VALUES(E'C:\\\\Program Files')</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>下面是使用width域和-标志的例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"b1d500b\" tabindex=\"0\"><code class=\"language-none\">SELECT format('|%10s|', 'foo');\n结果：|       foo|\n\nSELECT format('|%-10s|', 'foo');\n结果：|foo       |\n\nSELECT format('|%*s|', 10, 'foo');\n结果：|       foo|\n\nSELECT format('|%*s|', -10, 'foo');\n结果：|foo       |\n\nSELECT format('|%-*s|', 10, 'foo');\n结果：|foo       |\n\nSELECT format('|%-*s|', -10, 'foo');\n结果：|foo       |</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这些例子展示了position域的例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"57ffc0c\" tabindex=\"0\"><code class=\"language-none\">SELECT format('Testing %3$s, %2$s, %1$s', 'one', 'two', 'three');\n结果：Testing three, two, one\n\nSELECT format('|%*2$s|', 'foo', 10, 'bar');\n结果：|       bar|\n\nSELECT format('|%1$*2$s|', 'foo', 10, 'bar');\n结果：|       foo|</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>不同于标准的 C 函数sprintf，PostgreSQL的format函数允许将带有或者不带有position域的格式说明符被混在同一个格式字符串中。一个不带有position域的格式说明符总是使用最后一个被消耗的参数的下一个参数。另外，format函数不要求所有函数参数都被用在格式字符串中。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"e5e319c\" tabindex=\"0\"><code class=\"language-none\">SELECT format('Testing %3$s, %2$s, %s', 'one', 'two', 'three');\n结果：Testing three, two, three</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>对于安全地构造动态 SQL 语句，%I和%L格式说明符特别有用。</p>\n<h2 id=\"二进制串函数与操作符\">二进制串函数与操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%ba%8c%e8%bf%9b%e5%88%b6%e4%b8%b2%e5%87%bd%e6%95%b0%e4%b8%8e%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>本节描述那些检查和操作类型为bytea的值的函数和操作符。</p>\n<p>SQL定义了一些使用关键字而不是逗号来分割参数的串函数。</p>\n<p><strong>表.SQL二进制串函数和操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string || string</td>\n<td>bytea</td>\n<td>串连接</td>\n<td>‘\\Post’::bytea || ‘\\047gres\\000’::bytea</td>\n<td>\\Post’gres\\000</td>\n</tr>\n<tr>\n<td>octet_length(string)</td>\n<td>int</td>\n<td>二进制串中的字节数</td>\n<td>octet_length(‘jo\\000se’::bytea)</td>\n<td>5</td>\n</tr>\n<tr>\n<td>overlay(string placing string from int [for int])</td>\n<td>bytea</td>\n<td>替换子串</td>\n<td>overlay(‘Th\\000omas’::bytea placing  ‘\\002\\003’::bytea from 2 for 3)</td>\n<td>T\\002\\003mas</td>\n</tr>\n<tr>\n<td>position(substring in string)</td>\n<td>int</td>\n<td>指定子串的位置</td>\n<td>position(’\\000om’::bytea in  ‘Th\\000omas’::bytea)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>substring(string [from int]  [for int])</td>\n<td>bytea</td>\n<td>提取子串</td>\n<td>substring(‘Th\\000omas’::bytea from 2 for 3)</td>\n<td>h\\000o</td>\n</tr>\n<tr>\n<td>trim([both] bytes from string)</td>\n<td>bytea</td>\n<td>从string的开头或结尾删除只包含出现在bytes中字节的最长串</td>\n<td>trim(’\\000\\001’::bytea from  ‘\\000Tom\\001’::bytea)</td>\n<td>Tom</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>还有一些二进制串处理函数可以使用，在下表列出。</p>\n<p><strong>表 . 其他二进制串函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>返回类型</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>btrim(string bytea, bytes bytea)</td>\n<td>bytea</td>\n<td>从string的开头或结尾删除只由出现在bytes中字节组成的最长串</td>\n<td>btrim(’\\000trim\\001’::bytea,  ‘\\000\\001’::bytea)</td>\n<td>trim</td>\n</tr>\n<tr>\n<td>decode(string text, format text)</td>\n<td>bytea</td>\n<td>从string中的文本表示解码二进制数据。format的参数和在encode中一样。</td>\n<td>decode(‘123\\000456’, ’escape’)</td>\n<td>123\\000456</td>\n</tr>\n<tr>\n<td>encode(data bytea, format text)</td>\n<td>text</td>\n<td>将二进制数据编码为一个文本表示。支持的格式有：base64、hex、escape。escape将零字节和高位组字节转换为八进制序列（\\nnn）和双反斜线。</td>\n<td>encode(‘123\\000456’::bytea, ’escape’)</td>\n<td>123\\000456</td>\n</tr>\n<tr>\n<td>get_bit(string, offset)</td>\n<td>int</td>\n<td>从串中抽取位</td>\n<td>get_bit(‘Th\\000omas’::bytea, 45)</td>\n<td>1</td>\n</tr>\n<tr>\n<td>get_byte(string, offset)</td>\n<td>int</td>\n<td>从串中抽取字节</td>\n<td>get_byte(‘Th\\000omas’::bytea, 4)</td>\n<td>109</td>\n</tr>\n<tr>\n<td>length(string)</td>\n<td>int</td>\n<td>二进制串的长度</td>\n<td>length(‘jo\\000se’::bytea)</td>\n<td>5</td>\n</tr>\n<tr>\n<td>md5(string)</td>\n<td>text</td>\n<td>计算string的MD5哈希码，以十六进制形式返回结果</td>\n<td>md5(‘Th\\000omas’::bytea)</td>\n<td>8ab2d3c9689aaf18b4958c334c82d8b1</td>\n</tr>\n<tr>\n<td>set_bit(string, offset, newvalue)</td>\n<td>bytea</td>\n<td>设置串中的位</td>\n<td>set_bit(‘Th\\000omas’::bytea, 45, 0)</td>\n<td>Th\\000omAs</td>\n</tr>\n<tr>\n<td>set_byte(string, offset, newvalue)</td>\n<td>bytea</td>\n<td>设置串中的字节</td>\n<td>set_byte(‘Th\\000omas’::bytea, 4, 64)</td>\n<td>Th\\000o@as</td>\n</tr>\n<tr>\n<td>sha224(bytea)</td>\n<td>bytea</td>\n<td>SHA-224哈希</td>\n<td>sha224(‘abc’)</td>\n<td>\\x23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7</td>\n</tr>\n<tr>\n<td>sha256(bytea)</td>\n<td>bytea</td>\n<td>SHA-256哈希</td>\n<td>sha256(‘abc’)</td>\n<td>\\xba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad</td>\n</tr>\n<tr>\n<td>sha384(bytea)</td>\n<td>bytea</td>\n<td>SHA-384哈希</td>\n<td>sha384(‘abc’)</td>\n<td>\\xcb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7</td>\n</tr>\n<tr>\n<td>sha512(bytea)</td>\n<td>bytea</td>\n<td>SHA-512哈希</td>\n<td>sha512(‘abc’)</td>\n<td>\\xddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>get_byte和set_byte把一个二进制串中的一个字节计数为字节 0。get_bit和set_bit在每一个字节中从右边起计数位；例如位 0 是第一个字节的最低有效位，而位 15 是第二个字节的最高有效位。</p>\n<p>注意由于历史原因，函数md5返回的是一个十六进制编码的text值，而SHA-2函数返回类型bytea。可以使用函数encode和decode在两者之间转换，例如encode(sha256(‘abc’), ‘hex’)可以得到一个十六进制编码的文本表示。</p>\n<h2 id=\"位串函数和操作符\">位串函数和操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e4%bd%8d%e4%b8%b2%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>本节描述用于检查和操作位串的函数和操作符，也就是操作类型为bit和bit varying的值的函数和操作符。除了常用的比较操作符之外，还可以使用表里显示的操作符。&amp;、|和#的位串操作数必须等长。在移位的时候，保留原始的位串的的长度，如例子所示。</p>\n<p><strong>表</strong> <strong>位串操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>||</td>\n<td>连接</td>\n<td>B'10001’ || B'011'</td>\n<td>10001011</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>按位与</td>\n<td>B'10001’ &amp; B'01101'</td>\n<td>00001</td>\n</tr>\n<tr>\n<td>|</td>\n<td>按位或</td>\n<td>B'10001’ | B'01101'</td>\n<td>11101</td>\n</tr>\n<tr>\n<td>#</td>\n<td>按位异或</td>\n<td>B'10001’ # B'01101'</td>\n<td>11100</td>\n</tr>\n<tr>\n<td>~</td>\n<td>按位求反</td>\n<td>~ B'10001'</td>\n<td>01110</td>\n</tr>\n<tr>\n<td>«</td>\n<td>按位左移</td>\n<td>B'10001’ « 3</td>\n<td>01000</td>\n</tr>\n<tr>\n<td>»</td>\n<td>按位右移</td>\n<td>B'10001’ » 2</td>\n<td>00100</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>下面的SQL标准函数除了可以用于字符串之外，也可以用于位串： length、 bit_length、 octet_length、 position、 substring、 overlay。</p>\n<p>下面的函数除了可以用于二进制串之外，也可以用于位串： get_bit、 set_bit。 当使用于一个位串时，这些函数将串的第一（最左）位计数为位 0。</p>\n<p>另外，我们可以在整数和bit之间来回转换。一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"52c3ae9\" tabindex=\"0\"><code class=\"language-none\">44::bit(10)                    0000101100\n44::bit(3)                     100\ncast(-44 as bit(12))           111111010100\n'1110'::bit(4)::integer        14</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>请注意，如果只是转换为“bit”，意思是转换成bit(1)，因此只会转换整数的最低有效位。</p>\n<h2 id=\"模式匹配\">模式匹配 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%a8%a1%e5%bc%8f%e5%8c%b9%e9%85%8d\"><i class=\"material-icons align-middle\">link</i></a></h2><p>MemFireDB提供了三种独立的实现模式匹配的方法：SQL LIKE操作符、更近一些的SIMILAR TO操作符（SQL:1999 里添加进来的）和POSIX-风格的正则表达式。除了这些基本的“这个串匹配这个模式吗？”操作符外，还有一些函数可用于提取或替换匹配子串并在匹配位置分离一个串。</p>\n<h3 id=\"like\">LIKE <a aria-hidden=\"true\" class=\"anchor\" href=\"#like\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"933fb23\" tabindex=\"0\"><code class=\"language-none\">string LIKE pattern [ESCAPE escape-character]\nstring NOT LIKE pattern [ESCAPE escape-character]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>如果该string匹配了提供的pattern，那么LIKE表达式返回真（和预期的一样，如果LIKE返回真，那么NOT LIKE表达式返回假， 反之亦然。一个等效的表达式是NOT (string LIKE pattern)）。</p>\n<p>如果pattern不包含百分号或者下划线，那么该模式只代表它本身的串；这时候LIKE的行为就象等号操作符。在pattern里的下划线 （_）代表（匹配）任何单个字符； 而一个百分号（%）匹配任何零或更多个字符的序列。</p>\n<p>一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"7c68f91\" tabindex=\"0\"><code class=\"language-none\">'abc' LIKE 'abc'    true\n'abc' LIKE 'a%'     true\n'abc' LIKE '_b_'    true\n'abc' LIKE 'c'      false</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>LIKE模式匹配总是覆盖整个串。因此，要匹配在串内任何位置的序列，该模式必须以百分号开头和结尾。</p>\n<p>要匹配文本的下划线或者百分号，而不是匹配其它字符， 在pattern里相应的字符必须 前导逃逸字符。缺省的逃逸字符是反斜线，但是你可以用ESCAPE子句指定一个不同的逃逸字符。 要匹配逃逸字符本身，写两个逃逸字符。</p>\n<p>请注意反斜线在串文本里已经有特殊含义了，所以如果你写一个 包含反斜线的模式常量，那你就要在 SQL 语句里写两个反斜线。 因此，写一个匹配单个反斜线的模式实际上要在语句里写四个反斜线。 你可以通过用 ESCAPE 选择一个不同的逃逸字符 来避免这样；这样反斜线就不再是 LIKE 的特殊字符了。 但仍然是字符文本分析器的特殊字符，所以你还是需要两个反斜线。) 我们也可以通过写ESCAPE ‘‘的方式不选择逃逸字符，这样可以有效地禁用逃逸机制，但是没有办法关闭下划线和百分号在模式中的特殊含义。</p>\n<p>关键字ILIKE可以用于替换LIKE， 它令该匹配根据活动区域成为大小写无关。这个不属于SQL标准而是一个PostgreSQL扩展。</p>\n<p>操作符<del>等效于LIKE， 而</del>*对应ILIKE。 还有 !<del>和!</del>*操作符分别代表NOT LIKE和NOT ILIKE。所有这些操作符都是PostgreSQL特有的。</p>\n<p>在仅需要从字符串的开始部分搜索的情况，还有前缀操作符^@和相应的starts_with函数可以使用。</p>\n<h3 id=\"similar-to正则表达式\">SIMILAR TO正则表达式 <a aria-hidden=\"true\" class=\"anchor\" href=\"#similar-to%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"353cee1\" tabindex=\"0\"><code class=\"language-none\">string SIMILAR TO pattern [ESCAPE escape-character]\nstring NOT SIMILAR TO pattern [ESCAPE escape-character]</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>SIMILAR TO操作符根据自己的模式是否匹配给定串而返回真或者假。 它和LIKE非常类似，只不过它使用 SQL 标准定义的正则表达式理解模式。 SQL 正则表达式是在LIKE标记和普通的正则表达式标记的奇怪的杂交。</p>\n<p>类似LIKE，SIMILAR TO操作符只有在它的模式匹配整个串的时候才能成功；这一点和普通的 正则表达式的行为不同，在普通的正则表达式里，模式匹配串的任意部分。 和LIKE类似的地方还有，SIMILAR TO使用_和%作为分别代表任意单个字符和任意串的通配符（这些可以比得上 POSIX 正则表达式里的.和.*）。</p>\n<p>除了这些从LIKE借用的功能之外，SIMILAR TO支持下面这些从 POSIX 正则表达式借用的 模式匹配元字符：</p>\n<p>·   |表示选择（两个候选之一）。</p>\n<p>·   *表示重复前面的项零次或更多次。</p>\n<p>·   +表示重复前面的项一次或更多次。</p>\n<p>·   ?表示重复前面的项零次或一次。</p>\n<p>·   {m}表示重复前面的项刚好m次。</p>\n<p>·   {m,}表示重复前面的项m次或更多次。</p>\n<p>·   {m,n}表示重复前面的项至少m次并且不超过n次。</p>\n<p>·   可以使用圆括号()把多个项组合成一个逻辑项。</p>\n<p>·   一个方括号表达式[…]声明一个字符类，就像 POSIX 正则表达式一样。</p>\n<p>注意点号（.）不是SIMILAR TO的一个元字符。</p>\n<p>和LIKE一样，反斜线禁用所有这些元字符的特殊含义；当然我们也可以用ESCAPE指定一个不同的逃逸字符。</p>\n<p>一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"e4f8bcc\" tabindex=\"0\"><code class=\"language-none\">'abc' SIMILAR TO 'abc'      true\n'abc' SIMILAR TO 'a'        false\n'abc' SIMILAR TO '%(b|d)%'  true\n'abc' SIMILAR TO '(b|c)%'   false</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>带三个参数的substring，即substring(string from pattern for escape-character)，提供了抽取一个匹配 SQL 正则表达式的子串的方法。和SIMILAR TO一样，声明的模式必须匹配整个数据串，否则函数失败并返回空值。为了标识在成功的时候应该返回的模式部分，模式 必须包含逃逸字符的两次出现，并且后面要跟上双引号（\"）。匹配这两个标记之间的模式的文本将被返回。</p>\n<p>一些例子，使用#“定界返回串：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2cf2438\" tabindex=\"0\"><code class=\"language-none\">substring('foobar' from '%#\"o_b#\"%' for '#')   oob\nsubstring('foobar' from '#\"o_b#\"%' for '#')    NULL</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"posix正则表达式\">POSIX正则表达式 <a aria-hidden=\"true\" class=\"anchor\" href=\"#posix%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f\"><i class=\"material-icons align-middle\">link</i></a></h3><p>下表列出了所有可用于 POSIX 正则表达式模式匹配的操作符。</p>\n<p><strong>表 正则表达式匹配操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>操作符</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>~</td>\n<td>匹配正则表达式，大小写敏感</td>\n<td>’thomas’ ~ ‘.<em>thomas.</em>’</td>\n</tr>\n<tr>\n<td>~*</td>\n<td>匹配正则表达式，大小写不敏感</td>\n<td>’thomas’ ~* ‘.<em>Thomas.</em>’</td>\n</tr>\n<tr>\n<td>!~</td>\n<td>不匹配正则表达式，大小写敏感</td>\n<td>’thomas’ !~ ‘.<em>Thomas.</em>’</td>\n</tr>\n<tr>\n<td>!~*</td>\n<td>不匹配正则表达式，大小写不敏感</td>\n<td>’thomas’ !~* ‘.<em>vadim.</em>’</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>POSIX正则表达式提供了比LIKE和SIMILAR TO操作符更强大的含义。许多 Unix 工具，例如egrep、sed或awk使用一种与我们这里描述的类似的模式匹配语言。</p>\n<p>正则表达式是一个字符序列，它是定义一个串集合 （一个正则集）的缩写。 如果一个串是正则表达式描述的正则集中的一员时， 我们就说这个串匹配该正则表达式。 和LIKE一样，模式字符准确地匹配串字符， 除非在正则表达式语言里有特殊字符 — 不过正则表达式用的 特殊字符和LIKE用的不同。 和LIKE模式不一样的是，正则表达式允许匹配串里的任何位置，除非该正则表达式显式地挂接在串的开头或者结尾。</p>\n<p>一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"98be289\" tabindex=\"0\"><code class=\"language-none\">'abc' ~ 'abc'    true\n'abc' ~ '^a'     true\n'abc' ~ '(b|d)'  true\n'abc' ~ '^(b|c)' false</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>POSIX模式语言的详细描述见下文。</p>\n<p>带两个参数的substring函数，即<strong>substring(string from pattern)</strong>，提供了抽取一个匹配 POSIX 正则表达式模式的子串的方法。如果没有匹配它返回空值，否则就是文本中匹配模式的那部分。 但是如果该模式包含任何圆括号，那么将返回匹配第一对子表达式（对应第一个左圆括号的） 的文本。如果你想在表达式里使用圆括号而又不想导致这个例外，那么你可以在整个表达式外边放上一对圆括号。 如果你需要在想抽取的子表达式前有圆括号，参阅后文描述的非捕获性圆括号。</p>\n<p>一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"ba29e2a\" tabindex=\"0\"><code class=\"language-none\">substring('foobar' from 'o.b')     oob\nsubstring('foobar' from 'o(.)b')   o</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>regexp_replace</strong>函数提供了将匹配 POSIX 正则表达式模式的子串替换为新文本的功能。 它的语法是 <strong>regexp_replace(source, pattern, replacement [, flags ])</strong>。 如果没有匹配pattern，那么返回不加修改的source串。 如果有匹配，则返回的source串里面的匹配子串将被replacement串替换掉。replacement串可以包含\\n， 其中\\n是 1 到 9， 表明源串里匹配模式里第n个圆括号子表达式的子串应该被插入， 并且它可以包含&amp;表示应该插入匹配整个模式的子串。如果你需要放一个文字形式的反斜线在替换文本里，那么写\\。flags参数是一个可选的文本串，它包含另个或更多单字母标志，这些标志可以改变函数的行为。标志i指定大小写无关的匹配，而标志g指定替换每一个匹配的子串而不仅仅是第一个。</p>\n<p>一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"b56dd87\" tabindex=\"0\"><code class=\"language-none\">regexp_replace('foobarbaz', 'b..', 'X')\n                                   fooXbaz\nregexp_replace('foobarbaz', 'b..', 'X', 'g')\n                                   fooXX\nregexp_replace('foobarbaz', 'b(..)', 'X\\1Y', 'g')\n                                   fooXarYXazY</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>regexp_match返回一个文本数组，它包含一个POSIX正则表达式模式与一个字符串第一个匹配所得到的子串。其语法是<strong>regexp_match(string, pattern [, flags ])</strong>。如果没有匹配，则结果为NULL。如果找到一个匹配并且pattern不包含带括号的子表达式，那么结果是一个单一元素的文本数组，其中包含匹配整个模式的子串。如果找到一个匹配并且pattern含有带括号的子表达式，那么结果是一个文本数组，其中第n个元素是与pattern的第n个圆括号子表达式匹配的子串（“非捕获”圆括号不计入在内，详见下文）。flags参数是一个可选的文本字符串，它包含零个或者更多个可以改变该函数行为的单字母标志。所支持的标志在表 中介绍。</p>\n<p><strong>一些例子</strong>：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9309c6c\" tabindex=\"0\"><code class=\"language-none\">SELECT regexp_match('foobarbequebaz', 'bar.*que');\n regexp_match\n--------------\n {barbeque}\n(1 row)\n\nSELECT regexp_match('foobarbequebaz', '(bar)(beque)');\n regexp_match\n--------------\n {bar,beque}\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在通常情况下，人们只是想要的大整个匹配的子串或者NULL（没有匹配），可以写成这样</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4fc700e\" tabindex=\"0\"><code class=\"language-none\">SELECT (regexp_match('foobarbequebaz', 'bar.*que'))[1];\n regexp_match\n--------------\n barbeque\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>regexp_matches函数返回一个文本数组的集合，其中包含着一个POSIX正则表达式模式与一个字符串匹配得到的子串。它和regexp_match具有相同的语法。如果没有匹配，这个函数不会返回行。如果有一个匹配并且给定了g标志，则返回一行。如果有N个匹配并且给定了g标志，则返回N行。每一个返回的行都是一个文本数组，其中含有整个匹配的子串或者匹配pattern的圆括号子表达式的子串，这和上面对regexp_match的介绍一样。regexp_matches接受展示的所有标志，外加令它返回所有匹配而不仅仅是第一个匹配的g标志。</p>\n<p>一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"bcd0221\" tabindex=\"0\"><code class=\"language-none\">SELECT regexp_matches('foo', 'not there');\n regexp_matches\n----------------\n(0 rows)\n\nSELECT regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)', 'g');\n regexp_matches\n----------------\n {bar,beque}\n {bazil,barf}\n(2 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>提示：在大部分情况下，regexp_matches()应该与g标志一起使用，因为如果只是想要第一个匹配，使用regexp_match()会更加简单高效。</p>\n<p>regexp_split_to_table把一个 POSIX 正则表达式模式当作一个定界符来分离一个串。它的语法形式是regexp_split_to_table(string, pattern [, flags ])。如果没有与pattern的匹配，该函数返回string。如果有至少有一个匹配，对每一个匹配它都返回从上一个匹配的末尾（或者串的开头）到这次匹配开头之间的文本。当没有更多匹配时，它返回从上一次匹配的末尾到串末尾之间的文本。flags参数是一个可选的文本串，它包含零个或更多单字母标志，这些标识可以改变该函数的行为。regexp_split_to_table能支持的标志在表 9.22中描述。</p>\n<p>regexp_split_to_array函数的行为和regexp_split_to_table相同，不过regexp_split_to_array会把它的结果以一个text数组的形式返回。它的语法是regexp_split_to_array(string, pattern [, flags ])。这些参数和regexp_split_to_table的相同。</p>\n<p>一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"b956e6a\" tabindex=\"0\"><code class=\"language-none\">SELECT foo FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', '\\s+') AS foo;\n  foo\n-------\n the\n quick\n brown\n fox\n jumps\n over\n the\n lazy\n dog\n(9 rows)\n\nSELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', '\\s+');\n              regexp_split_to_array\n-----------------------------------------------\n {the,quick,brown,fox,jumps,over,the,lazy,dog}\n(1 row)\n\nSELECT foo FROM regexp_split_to_table('the quick brown fox', '\\s*') AS foo;\n foo\n-----\n t\n h\n e\n q\n u\n i\n c\n k\n b\n r\n o\n w\n n\n f\n o\n x\n(16 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>正如上一个例子所示，正则表达式分离函数会忽略零长度的匹配，这种匹配发生在串的开头或结尾或者正好发生在前一个匹配之后。这和正则表达式匹配的严格定义是相悖的，后者由regexp_match和regexp_matches实现，但是通常前者是实际中最常用的行为。其他软件系统如Perl也使用相似的定义。</p>\n<h4 id=\"正则表达式细节\"><strong>正则表达式细节</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e7%bb%86%e8%8a%82\"><i class=\"material-icons align-middle\">link</i></a></h4><p>正则表达式（RE），在POSIX 1003.2 中定义， 它有两种形式：扩展的RE或者是ERE（大概地说就是那些在egrep里的）， 基本的RE或者是BRE（大概地说就是那些在ed里的）。MemFireDB支持两种形式，并且还实现了一些POSIX标准中没有但是在类似 Perl 或者 Tcl 这样的语言中得到广泛应用的一些扩展。使用了那些非POSIX扩展的RE叫高级RE， 或者本文档里说的ARE。ARE 几乎完全是 ERE 的超集，但是 BRE 有几个符号上的不兼容（以及更多的限制）。我们首先描述 ARE 和 ERE 形式， 描述那些只适用于 ARE 的特性，然后描述 BRE 的区别是什么。</p>\n<p><strong>注意</strong>:</p>\n<p>一个正则表达式被定义为一个或更多分支，它们之间被|分隔。只要能匹配其中一个分支的东西都能匹配正则表达式。</p>\n<p>一个分支是一个或多个量化原子或者约束连接而成。一个原子匹配第一个，然后后面的原子匹配第二个， 以此类推；一个空分支匹配空串。</p>\n<p>一个量化原子是一个原子， 后面可能跟着一个量词。没有量词的时候，它匹配一个原子， 有量词的时候，它可以匹配若干个原子。</p>\n<p>一个约束匹配一个空串，但只是在满足特定条件下才匹配。 约束可以在能够使用原子的地方使用，只是它不能跟着量词。简单的约束在表里显示； 更多的约束稍后描述。</p>\n<p><strong>表.正则表达式原子</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>原子</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(re)</td>\n<td>（其中re是任何正则表达式） 匹配一个对re的匹配，匹配将为可能的报告被记下</td>\n</tr>\n<tr>\n<td>(?:re)</td>\n<td>同上，但是匹配不会为了报告而被记下 （一个“非捕获”圆括号集） （只对 ARE）</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配任意单个字符</td>\n</tr>\n<tr>\n<td>[chars]</td>\n<td>一个方括号表达式， 匹配chars中的任意一个（详见第 9.7.3.2 节）</td>\n</tr>\n<tr>\n<td>\\k</td>\n<td>（其中k是一个非字母数字字符） 匹配一个被当作普通字符看待的特定字符， 例如，\\匹配一个反斜线字符</td>\n</tr>\n<tr>\n<td>\\c</td>\n<td>其中c是一个字母数字 （可能跟着其它字符），它是一个逃逸， 参阅第 9.7.3.3 节（仅对 ARE； 在 ERE 和 BRE 中，它匹配c）</td>\n</tr>\n<tr>\n<td>{</td>\n<td>如果后面跟着一个字符，而不是数字， 那么就匹配左花括弧{；如果跟着一个数字， 那么它是range的开始（见下文）</td>\n</tr>\n<tr>\n<td>x</td>\n<td>其中x是一个没有其它意义的单个字符，则匹配该字符</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>RE 不能以反斜线（\\）结尾。</p>\n<p>注意:如果你关掉了standard_conforming_strings，任何你写在文字串常量中的反斜线都需要被双写。</p>\n<p>表 . 正则表达式量词\n\n\n\n\n\n\n\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>量词</th>\n<th>匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>一个由原子的 0 次或更多次匹配组成的序列</td>\n</tr>\n<tr>\n<td>+</td>\n<td>一个由原子的 1 次或更多次匹配组成的序列</td>\n</tr>\n<tr>\n<td>?</td>\n<td>一个由原子的 0 次或 1 次匹配组成的序列</td>\n</tr>\n<tr>\n<td>{m}</td>\n<td>一个由原子的正好m次匹配组成的序列</td>\n</tr>\n<tr>\n<td>{m,}</td>\n<td>一个由原子的m次或更多次匹配组成的序列</td>\n</tr>\n<tr>\n<td>{m,n}</td>\n<td>一个由原子的从m次到n次（包括）匹配组成的序列；m不能超过n</td>\n</tr>\n<tr>\n<td>*?</td>\n<td>*的非贪婪版本</td>\n</tr>\n<tr>\n<td>+?</td>\n<td>+的非贪婪版本</td>\n</tr>\n<tr>\n<td>??</td>\n<td>?的非贪婪版本</td>\n</tr>\n<tr>\n<td>{m}?</td>\n<td>{m}的非贪婪版本</td>\n</tr>\n<tr>\n<td>{m,}?</td>\n<td>{m,}的非贪婪版本</td>\n</tr>\n<tr>\n<td>{m,n}?</td>\n<td>{m,n}的非贪婪版本</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>使用{…}的形式被称作范围。 一个范围内的数字m和n都是无符号十进制整数， 允许的数值从 0 到 255（包含）。</p>\n<p>非贪婪的量词（只在 ARE 中可用）匹配对应的正常 （贪婪）模式，区别是它寻找最少的匹配，而不是最多的匹配。</p>\n<p>注意:一个量词不能紧跟在另外一个量词后面，例如**是非法的。量词不能作为表达式或者子表达式的开头，也不能跟在^或者|后面。</p>\n<p>表 正则表达式约束\n\n\n\n\n\n\n\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>约束</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>串开头的匹配</td>\n</tr>\n<tr>\n<td>$</td>\n<td>串末尾的匹配</td>\n</tr>\n<tr>\n<td>(?=re)</td>\n<td>在匹配re的子串开始的任何点的positive lookahead匹配（只对 ARE）</td>\n</tr>\n<tr>\n<td>(?!re)</td>\n<td>在匹配re的子串开始的任何点的negative lookahead匹配（只对 ARE）</td>\n</tr>\n<tr>\n<td>(?&lt;=re)</td>\n<td>只要有一个点上有一个子串匹配re端， positive lookbehind就在这个点上匹配（只对 ARE）</td>\n</tr>\n<tr>\n<td>(?&lt;!re)</td>\n<td>只要有一个点上没有子串匹配re端， negative  lookbehind就在这个点上匹配（只对 ARE）</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h4 id=\"方括号表达式\"><strong>方括号表达式</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%96%b9%e6%8b%ac%e5%8f%b7%e8%a1%a8%e8%be%be%e5%bc%8f\"><i class=\"material-icons align-middle\">link</i></a></h4><p>方括号表达式是一个包围在[]中的字符列表。它通常匹配列表中的任意单个字符（但见下文）。 如果列表以^开头，它匹配任意单个不在该列表参与部分中的字符。如果该列表中两个字符用-隔开， 那它就是那两个字符（包括在内）之间的所有字符范围的缩写，例如，在ASCII中[0-9]匹配任何十进制数字。两个范围共享一个端点是非法的，例如，a-c-e。范围与字符集关系密切， 可移植的程序应该避免依靠它们。</p>\n<p>想在列表中包含文本]，可以让它做列表的首字符（如果使用了^，需要放在其后）。 想在列表中包含文本-，可以让它做列表的首字符或者尾字符，或者一个范围的第二个端点。 想在列表中把文本-当做范围的起点， 把它用[.和.]包围起来，这样它就成为一个排序元素（见下文）。 除了这些字符本身、一些用[的组合（见下段）以及逃逸（只在 ARE 中有效）以外，所有其它特殊字符 在方括号表达式里都失去它们的特殊含义。特别是，在 ERE 和 BRE 规则下\\不是特殊的， 但在 ARE 里，它是特殊的（引入一个逃逸）。</p>\n<p>在一个方括号表达式里，一个排序元素（一个字符、一个被当做一个单一字符排序的多字符序列或者一个表示上面两种情况的排序序列名称） 包含在[.和.]里面的时候表示该排序元素的字符序列。该序列被当做该方括号列表 的一个单一元素。这允许一个包含多字符排序元素的方括号表达式去匹配多于一个字符，例如，如果排序序列包含一个ch排序元素， 那么 RE [[.ch.]]*c匹配chchcc的头五个字符。</p>\n<p>在方括号表达式里，包围在[=和=]里的排序元素是一个等价类， 代表等效于那一个的所有排序元素的字符序列，包括它本身（如果没有其它等效排序元素，那么就好象封装定界符是[.和 .]）。例如，如果o和^是一个等价类的成员，那么[[=o=]]、[[=^=]]和[o^]都是同义的。一个等价类不能是一个范围的端点。</p>\n<p>在方括号表达式里，在[:和:]里面封装的字符类的名字代表属于该类的所有字符的列表。 标准的字符类名字是：alnum、 alpha、blank、 cntrl、digit、 graph、lower、 print、punct、 space、upper、 xdigit。 它们代表在ctype中定义的字符类。 一个区域可以会提供其他的类。字符类不能用做一个范围的端点。</p>\n<p>方括号表达式里有两个特例：方括号表达式[[:&lt;:]]和[[:&gt;:]]是约束，分别匹配一个单词开头和结束的空串。 单词定义为一个单词字符序列，前面和后面都没有其它单词字符。单词字符是一个alnum字符（和ctype中定义的一样） 或者一个下划线。这是一个扩展，兼容POSIX 1003.2， 但那里面并没有说明， 而且在准备移植到其他系统里去的软件里一定要小心使用。通常下文描述的约束逃逸更好些（它们并非更标准，但是更容易键入）。</p>\n<h4 id=\"正则表达式逃逸\"><strong>正则表达式逃逸</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e9%80%83%e9%80%b8\"><i class=\"material-icons align-middle\">link</i></a></h4><p>逃逸是以\\开头，后面跟着一个字母数字字符得特殊序列。 逃逸有好几种变体：字符项、类缩写、约束逃逸以及后引用。在 ARE 里， 如果一个\\后面跟着一个字母数字，但是并未组成一个合法的逃逸， 那么它是非法的。在 ERE 中没有逃逸：在方括号表达式之外，一个后面跟着字母数字字符的\\只是表示该字符是一个普通的字符，而且在一个方括号表达式里，\\是一个普通的字符（后者实际上在 ERE 和 ARE 不兼容）。</p>\n<p>字符项逃逸用于便于我们在 RE 中声明那些不可打印的或其他习惯的字符。</p>\n<p>类缩写逃逸用来提供一些常用的字符类缩写。。</p>\n<p>约束逃逸是一个约束，如果满足特定的条件，它匹配该空串。</p>\n<p>后引用（\\n）匹配数字\\n指定的被前面的圆括号子表达式匹配的同一个串。例如， ([bc])\\1匹配bb或者cc， 但是不匹配bc或者cb。RE 中子表达式必须完全在后引用前面。子表达式以它们的先导圆括号的顺序编号。非捕获圆括号并不定义子表达式。</p>\n<p><strong>表  正则表达式字符项逃逸</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>逃逸</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>警告（响铃）字符，和 C 中一样</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格，和 C 中一样</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>反斜线（\\）的同义词，用来减少双写反斜线</td>\n</tr>\n<tr>\n<td>\\cX</td>\n<td>（其中X是任意字符）低序5位和X相同的字符，它的其他位都是零</td>\n</tr>\n<tr>\n<td>\\e</td>\n<td>排序序列名为ESC的字符，如果无法做到该字符为八进制值 033</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页，和 C 中一样</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>新行，和 C 中一样</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车，和 C 中一样</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>水平制表符，和 C 中一样</td>\n</tr>\n<tr>\n<td>\\uwxyz</td>\n<td>（其中wxyz正好是四个十六进制位）十六进制值为0xwxyz的字符</td>\n</tr>\n<tr>\n<td>\\Ustuvwxyz</td>\n<td>（其中stuvwxyz正好是八个十六进制位）十六进制值为0xstuvwxyz的字符</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表符，和 C 中一样</td>\n</tr>\n<tr>\n<td>\\xhhh</td>\n<td>（其中hhh是十六进制位的任意序列）十六进制值为0xhhh的字符（一个单一字符，不管用了多少个十六进制位）</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>值为0（空字节）的字符</td>\n</tr>\n<tr>\n<td>\\xy</td>\n<td>（其中xy正好是两个八进制位，并且不是一个后引用）八进制值为0xy的字符</td>\n</tr>\n<tr>\n<td>\\xyz</td>\n<td>（其中xyz正好是三个八进制位，并且不是一个后引用）八进制值为0xyz的字符</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>十六进制位是0-9、a-f和A-F。八进制位是0-7。</p>\n<p>指定 ASCII 范围（0-127）之外的值的数字字符项转义的含义取决于数据库编码。 当编码是 UTF-8 时，转义值等价于 Unicode 代码点，例如 \\u1234表示字符U+1234。对于其他多字节编码， 字符项转义通常只是指定该字符的字节值的串接。如果该转义值不对应数据库编码 中的任何合法字符，将不会发生错误，但是它不会匹配任何数据。</p>\n<p>字符项逃逸总是被当作普通字符。例如，\\135是 ASCII 中的]， 但\\135并不终止一个方括号表达式。</p>\n<p><strong>表  正则表达式类缩写逃逸</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>逃逸</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td><code>[[:digit:]] </code></td>\n</tr>\n<tr>\n<td>\\s</td>\n<td><code>[[:space:]] </code></td>\n</tr>\n<tr>\n<td>\\w</td>\n<td><code>[[:alnum:]_]</code>（注意下划线是被包括的）</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td><code>[^[:digit:]] </code></td>\n</tr>\n<tr>\n<td>\\S</td>\n<td><code>[^[:space:]]</code></td>\n</tr>\n<tr>\n<td>\\W</td>\n<td><code>[^[:alnum:]_] </code>（注意下划线是被包括的）</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>在方括号表达式里，\\d、\\s和\\w会失去它们的外层方括号，而\\D、\\S和 \\W是非法的（也就是说，例如[a-c\\d]等效于[a-c[:digit:]]。同样[a-c\\D]等效于 <code>[a-c^[:digit:]]</code>的，也是非法的）。</p>\n<p><strong>表.正则表达式约束逃逸</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>逃逸</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\A</td>\n<td>只在串开头匹配</td>\n</tr>\n<tr>\n<td>\\m</td>\n<td>只在一个词的开头匹配</td>\n</tr>\n<tr>\n<td>\\M</td>\n<td>只在一个词的末尾匹配</td>\n</tr>\n<tr>\n<td>\\y</td>\n<td>只在一个词的开头或末尾匹配</td>\n</tr>\n<tr>\n<td>\\Y</td>\n<td>只在一个词的不是开头或末尾的点上匹配</td>\n</tr>\n<tr>\n<td>\\Z</td>\n<td>只在串的末尾匹配</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>一个词被定义成在上面[[:&lt;:]]和[[:&gt;:]]中的声明。在方括号表达式里，约束逃逸是非法的。</p>\n<p><strong>表  正则表达式后引用</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>逃逸</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\m</td>\n<td>（其中m是一个非零位）一个到第m个子表达式的后引用</td>\n</tr>\n<tr>\n<td>\\mnn</td>\n<td>（其中m是一个非零位，并且nn是一些更多的位，并且十六进制值mnn不超过目前能看到的封闭捕获圆括号的数目）一个到第mnn个子表达式的后引用</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>注意</p>\n<p>在八进制字符项逃逸和后引用之间有一个历史继承的歧义存在，这个歧义是 通过下面的启发式规则解决的，像上面描述地那样。前导零总是表示这是一个八进制逃逸。 而单个非零数字，如果没有跟着任何其它位，那么总是被认为后引用。 一个多位的非零开头的序列也被认为是后引用，只要它出现在合适的子表达式后面 （也就是说，在后引用的合法范围中的数），否则就被认为是一个八进制。</p>\n<h4 id=\"正则表达式元语法\"><strong>正则表达式元语法</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%85%83%e8%af%ad%e6%b3%95\"><i class=\"material-icons align-middle\">link</i></a></h4><p>除了上面描述的主要语法之外，还有几种特殊形式和杂项语法。</p>\n<p>如果一个 RE 以***:开头，那么剩下的 RE 都被当作 ARE。如果一个 RE 以***=开头， 那么剩下的 RE 被当作一个文本串，所有的字符都被认为是一个普通字符。</p>\n<p>一个 ARE 可以以嵌入选项开头：一个序列(?xyz)（这里的xyz是一个或多个字母字符）声明影响剩余 RE 的选项。 这些选项覆盖任何前面判断的选项 — 特别地，它们可以覆盖一个正则表达式操作符隐含的大小写敏感的行为，或者覆盖flags参数中的正则表达式函数。可用的选项字母在表中显示。注意这些同样的选项字母也被用在正则表达式函数的flags参数中。</p>\n<p><strong>表  ARE嵌入选项字母</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>b</td>\n<td>RE的剩余部分是一个BRE</td>\n</tr>\n<tr>\n<td>c</td>\n<td>大小写敏感的匹配（覆盖操作符类型）</td>\n</tr>\n<tr>\n<td>e</td>\n<td>RE的剩余部分是一个ERE</td>\n</tr>\n<tr>\n<td>i</td>\n<td>大小写不敏感的匹配（覆盖操作符类型）</td>\n</tr>\n<tr>\n<td>m</td>\n<td>n的历史原因的同义词</td>\n</tr>\n<tr>\n<td>n</td>\n<td>新行敏感的匹配</td>\n</tr>\n<tr>\n<td>p</td>\n<td>部分新行敏感的匹配</td>\n</tr>\n<tr>\n<td>q</td>\n<td>RE的剩余部分是一个文字（“quoted”）串，全部是普通字符</td>\n</tr>\n<tr>\n<td>s</td>\n<td>非新行敏感的匹配（默认）</td>\n</tr>\n<tr>\n<td>t</td>\n<td>紧语法（默认，见下文）</td>\n</tr>\n<tr>\n<td>w</td>\n<td>逆部分新行敏感（“怪异”）的匹配</td>\n</tr>\n<tr>\n<td>x</td>\n<td>扩展语法（见下文）</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>嵌入选项在)终止序列时发生作用。它们只在 ARE 的开始处起作用 （在任何可能存在的***:控制器后面）。</p>\n<p>除了通常的（紧）RE 语法（这种情况下所有字符都有效）， 还有一种扩展语法，可以通过声明嵌入的x选项获得。在扩展语法里，RE 中的空白字符被忽略，就像那些在#和其后的新行（或 RE 的末尾）之间的字符一样。这样就允许我们给一个复杂的 RE 分段和注释。不过这个基本规则有三种例外：</p>\n<p>·   空白字符或前置了\\的#将被保留</p>\n<p>·   方括号表达式里的空白或者#将被保留</p>\n<p>·   在多字符符号里面不能出现空白和注释，例如(?:</p>\n<p>为了这个目的，空白是空格、制表符、新行和任何属于空白字符类的字符。</p>\n<p>最后，在 ARE 里，方括号表达式外面，序列(?#ttt)（其中ttt是任意不包含一个))的文本）是一个注释， 它被完全忽略。同样，这样的东西是不允许出现在多字符符号的字符中间的，例如 (?:。这种注释更像是一种历史产物而不是一种有用的设施，并且它们的使用已经被废弃；请使用扩展语法来替代。</p>\n<p>如果声明了一个初始的***=控制器，那么所有这些元语法扩展都不能使用，因为这样表示把用户输入当作一个文字串而不是 RE 对待。</p>\n<h4 id=\"正则表达式匹配规则\"><strong>正则表达式匹配规则</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%8c%b9%e9%85%8d%e8%a7%84%e5%88%99\"><i class=\"material-icons align-middle\">link</i></a></h4><p>在 RE 可以在给定串中匹配多于一个子串的情况下， RE 匹配串中最靠前的那个子串。如果 RE 可以匹配在那个位置开始 的多个子串，要么是取最长的子串，要么是最短的，具体哪种， 取决于 RE 是贪婪的还是非贪婪的。</p>\n<p>一个 RE 是否贪婪取决于下面规则：</p>\n<p>·   大多数原子以及所有约束，都没有贪婪属性（因为它们毕竟无法匹配个数变化的文本）。</p>\n<p>·   在一个 RE 周围加上圆括号并不会改变其贪婪性。</p>\n<p>·   带一个固定重复次数量词 （{m}或者{m}?） 的量化原子和原子自身具有同样的贪婪性（可能是没有）。</p>\n<p>·   一个带其他普通的量词（包括{m,n}中m等于n的情况）的量化原子是贪婪的（首选最长匹配）。</p>\n<p>·   一个带非贪婪量词（包括{m,n}?中m等于 n的情况）的量化原子是非贪婪的（首选最短匹配）。</p>\n<p>·   一个分支 — 也就是说，一个没有顶级|操作符的 RE — 和它里面的第一个有贪婪属性的量化原子有着同样的贪婪性。</p>\n<p>·   一个由|操作符连接起来的两个或者更多分支组成的 RE 总是贪婪的。</p>\n<p>上面的规则所描述的贪婪属性不仅仅适用于独立的量化原子， 而且也适用于包含量化原子的分支和整个 RE。这里的意思是， 匹配是按照分支或者整个 RE 作为一个整体匹配最长或者最短的可能子串。 一旦整个匹配的长度确定，那么匹配任意特定子表达式的部分就基于该子表达式的贪婪属性进行判断，在 RE 里面靠前的子表达式的优先级高于靠后的子表达式。</p>\n<p>一个相应的例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"ed2c66b\" tabindex=\"0\"><code class=\"language-none\">SELECT SUBSTRING('XY1234Z', 'Y*([0-9]{1,3})');\n结果：123\nSELECT SUBSTRING('XY1234Z', 'Y*?([0-9]{1,3})');\n结果：1</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在第一个例子里，RE 作为整体是贪婪的，因为Y<em>是贪婪的。它可以匹配从Y开始的东西，并且它匹配从这个位置开始的最长的串， 也就是，Y123。输出是这里的圆括号包围的部分，或者说是123。在第二个例子里， RE 总体上是一个非贪婪的 RE，因为Y</em>?是非贪婪的。它可以匹配从Y开始的最短的子串，也就是说Y1。子表达式[0-9]{1,3}是贪婪的，但是它不能修改总体匹配长度的决定； 因此它被迫只匹配1。</p>\n<p>简而言之，如果一个 RE 同时包含贪婪和非贪婪的子表达式，那么总的匹配长度要么是尽可能长，要么是尽可能短，这取决于给整个 RE 赋予的属性。给子表达式赋予的属性只影响在这个匹配里，各个子表达式之间相互允许“吃掉”的多少。</p>\n<p>量词{1,1}和{1,1}?可以分别用于在一个子表达式 或者整个 RE 上强制贪婪或者非贪婪。当需要整个 RE 具有不同于从其元素中 推导出的贪婪属性时，这很有用。例如，假设我们尝试将一个包含一些数字的 字符串分隔成数字以及在它们之前和之后的部分，我们可能会尝试这样做：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2c796aa\" tabindex=\"0\"><code class=\"language-none\">SELECT regexp_matches('abc01234xyz', '(.*)(\\d+)(.*)');\nResult: {abc0123,4,xyz}</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这不会有用：第一个.*是贪婪的，因此它会“吃掉” 尽可能多的字符而留下\\d+去匹配在最后一个可能位置上的最 后一个数字。我们可能会通过让它变成非贪婪来修复：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"65a5387\" tabindex=\"0\"><code class=\"language-none\">SELECT regexp_matches('abc01234xyz', '(.*?)(\\d+)(.*)');\nResult: {abc,0,\"\"}</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这也不会有用：因为现在 RE 作为整体来说是非贪婪的，因此它会尽快结束 全部的匹配。我们可以通过强制 RE 整体是贪婪的来得到我们想要的：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"78d043b\" tabindex=\"0\"><code class=\"language-none\">SELECT regexp_matches('abc01234xyz', '(?:(.*?)(\\d+)(.*)){1,1}');\nResult: {abc,01234,xyz}</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>独立于 RE 的组件的贪婪性之外控制 RE 的整体贪婪性为处理变长模式提供了 很大的灵活性。</p>\n<p>在决定更长或者更短的匹配时，匹配长度是以字符衡量的，而不是排序元素。一个空串会被认为比什么都不匹配长。例如：bb<em>匹配abbbc的中间三个字符；(week|wee)(night|knights)匹配weeknights的所有十个字符； 而(.</em>).<em>匹配 abc的时候，圆括号包围的子表达式匹配所有三个字符；当(a</em>)*被拿来匹配bc时，整个 RE 和圆括号 子表达式都匹配一个空串。</p>\n<p>如果声明了大小写无关的匹配，那么效果就好像所有大小写区别在字母表中消失了。如果在多个情况中一个字母以一个普通字符的形式出现在方括号表达式外面，那么它实际上被转换成 一个包含大小写的方括号表达式，也就是说，x 变成 [xX]。 如果它出现在一个方括号表达式里面，那么它的所有大小写的同族都被加入 方括号表达式中，也就是说，x变成[xX]。当它出现在一个方括号表达式内时，它的所有大小写副本都被加入到方括号表达式中，例如， [x]会变成[xX]，而[^x]会变成[^xX]。</p>\n<p>如果指定了新行敏感的匹配，.和使用^的方括号表达式 将永远不会匹配新行字符（这样，匹配就绝对不会跨越新行，除非 RE 显式地安排了这样的情况）并且^和$除了分别匹配串开头和结尾之外，还将分别匹配新行后面和前面的空串。但是 ARE 逃逸\\A和\\Z仍然只匹配串的开头和结尾。</p>\n<p>如果指定了部分新行敏感的匹配，那么它影响.和方括号表达式， 这个时候和新行敏感的匹配一样，但是不影响^和$。</p>\n<p>如果指定了逆新行敏感匹配，那么它影响^和$，其作用和在新行敏感的匹配里一样，但是不影响.和方括号表达式。这个并不是很有用，只是为了满足对称性而提供的。</p>\n<h4 id=\"限制和兼容性\"><strong>限制和兼容性</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e9%99%90%e5%88%b6%e5%92%8c%e5%85%bc%e5%ae%b9%e6%80%a7\"><i class=\"material-icons align-middle\">link</i></a></h4><p>在这个实现里，对 RE 的长度没有特别的限制。但是，那些希望高移植性的程序应该避免使用长度超过 256 字节的 RE，因为 POSIX 兼容 的实现可以拒绝接受这样的 RE。</p>\n<p>ARE 实际上和 POSIX ERE 不兼容的唯一的特性是在方括号表达式里\\并不失去它特殊的含义。所有其它 ARE 特性都使用在 POSIX ERE 里面是非法或者是未定义、未声明效果的语法；指示器的***就是在 POSIX 的 BRE 和 ERE 之外的语法。</p>\n<p>许多 ARE 扩展都是从 Perl 那里借来的（但是有些被做了修改来清理它们），以及一些 Perl 里没有出现的扩展。要注意的不兼容性包括\\b、\\B、对结尾的新行缺乏特别的处理、对那些被新行敏感匹配的东西附加的补齐方括号表达式、在 lookahead/lookbehind 约束里对圆括号和后引用的限制以及最长/最短 匹配（而不是第一匹配）的语义。</p>\n<p>在 ARE 中，后面跟着一个字母数字字符的\\要么是一个逃逸要么是一个错误， 但是在以前的版本里，它只是写该字母数字字符的另外一种方法。这个应该不是什么问题， 因为在以前的版本里没有什么理由会让我们写这样的序列。</p>\n<p>在 ARE 里，\\在[]里还是一个特殊字符， 因此在方括号表达式里的一个文本\\必须被写成\\。</p>\n<h4 id=\"基本正则表达式\"><strong>基本正则表达式</strong> <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%9f%ba%e6%9c%ac%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f\"><i class=\"material-icons align-middle\">link</i></a></h4><p>BRE 在几个方面和 ERE 不太一样。在 BRE 中，|、+和?都是普通字符并且没有与它们功能等价的东西。范围的定界符是{和}， 因为 {和}本身是普通字符。嵌套的子表达式的圆括号是(和)，因为(和)自身是普通字符。除非在 RE 开头或者是圆括号子表达式开头，^都是一个普通字符。 除非在 RE 结尾或者是圆括号子表达式的结尾，$是一个普通字符。如果*出现在 RE 开头或者是圆括号封装的子表达式开头 （前面可能有^），那么它是个普通字符。最后，可以用单数字的后引用，&lt;和&gt;分别是[[:&lt;:]]和[[:&gt;:]]的同义词；在 BRE 中没有其它可用的逃逸。</p>\n<h2 id=\"数据类型格式化函数\">数据类型格式化函数 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e6%a0%bc%e5%bc%8f%e5%8c%96%e5%87%bd%e6%95%b0\"><i class=\"material-icons align-middle\">link</i></a></h2><p>格式化函数提供一套强大的工具用于把各种数据类型 （日期/时间、整数、浮点、数字） 转换成格式化的字符串以及反过来从格式化的字符串转换成 指定的数据类型。。这些函数都遵循一个公共的调用规范： 第一个参数是待格式化的值，而第二个是一个定义输出或输入格式的模板。</p>\n<p><strong>表 格式化函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>to_char(timestamp, text)</td>\n<td>text</td>\n<td>把时间戳转成字符串</td>\n<td>to_char(current_timestamp, <code>'HH12:MI:SS'</code>)</td>\n</tr>\n<tr>\n<td>to_char(interval, text)</td>\n<td>text</td>\n<td>把间隔转成字符串</td>\n<td>to_char(interval ‘15h 2m 12s’,  <code>'HH24:MI:SS'</code>)</td>\n</tr>\n<tr>\n<td>to_char(int, text)</td>\n<td>text</td>\n<td>把整数转成字符串</td>\n<td>to_char(125, ‘999’)</td>\n</tr>\n<tr>\n<td>to_char(double precision, text)</td>\n<td>text</td>\n<td>把实数或双精度转成字符串</td>\n<td>to_char(125.8::real, ‘999D9’)</td>\n</tr>\n<tr>\n<td>to_char(numeric, text)</td>\n<td>text</td>\n<td>把数字转成字符串</td>\n<td>to_char(-125.8, ‘999D99S’)</td>\n</tr>\n<tr>\n<td>to_date(text, text)</td>\n<td>date</td>\n<td>把字符串转成日期</td>\n<td>to_date(‘05 Dec 2000’,  ‘DD Mon YYYY’)</td>\n</tr>\n<tr>\n<td>to_number(text, text)</td>\n<td>numeric</td>\n<td>把字符串转成数字</td>\n<td>to_number(‘12,454.8-’, ‘99G999D9S’)</td>\n</tr>\n<tr>\n<td>to_timestamp(text, text)</td>\n<td>timestamp with time zone</td>\n<td>把字符串转成时间戳</td>\n<td>to_timestamp(‘05 Dec 2000’,  ‘DD Mon YYYY’)</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>注意:还有一个单一参数的to_timestamp函数。</p>\n<p>提示:to_timestamp和to_date存在的目的是为了处理无法用简单造型转换的输入格式。对于大部分标准的日期/时间格式，简单地把源字符串造型成所需的数据类型是可以的，并且简单很多。类似地，对于标准的数字表示形式，to_number也是没有必要的。</p>\n<p>在一个to_char输出模板串中，一些特定的模式可以被识别并且被替换成基于给定值的被恰当地格式化的数据。任何不属于模板模式的文本都简单地照字面拷贝。同样，在一个输入 模板串里（对其他函数），模板模式标识由输入数据串提供的值。如果在模板字符串中有不是模板模式的字符，输入数据字符串中的对应字符会被简单地跳过（不管它们是否等于模板字符串字符）。</p>\n<p>[表 ]展示了可以用于格式化日期和时间值的模版。</p>\n<p><strong>表  .用于日期/时间格式化的模板模式</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HH</td>\n<td>一天中的小时 （01-12）</td>\n</tr>\n<tr>\n<td>HH12</td>\n<td>一天中的小时 （01-12）</td>\n</tr>\n<tr>\n<td>HH24</td>\n<td>一天中的小时 （00-23）</td>\n</tr>\n<tr>\n<td>MI</td>\n<td>分钟 （00-59）minute (00-59)</td>\n</tr>\n<tr>\n<td>SS</td>\n<td>秒（00-59）</td>\n</tr>\n<tr>\n<td>MS</td>\n<td>毫秒（000-999）</td>\n</tr>\n<tr>\n<td>US</td>\n<td>微秒（000000-999999）</td>\n</tr>\n<tr>\n<td>SSSS</td>\n<td>午夜后的秒（0-86399）</td>\n</tr>\n<tr>\n<td>AM, am, PM or pm</td>\n<td>正午指示器（不带句号）</td>\n</tr>\n<tr>\n<td>A.M., a.m., P.M. or p.m.</td>\n<td>正午指示器（带句号）</td>\n</tr>\n<tr>\n<td>Y,YYY</td>\n<td>带逗号的年（4 位或者更多位）</td>\n</tr>\n<tr>\n<td>YYYY</td>\n<td>年（4 位或者更多位）</td>\n</tr>\n<tr>\n<td>YYY</td>\n<td>年的后三位</td>\n</tr>\n<tr>\n<td>YY</td>\n<td>年的后两位</td>\n</tr>\n<tr>\n<td>Y</td>\n<td>年的最后一位</td>\n</tr>\n<tr>\n<td>IYYY</td>\n<td>ISO 8601 周编号方式的年（4 位或更多位）</td>\n</tr>\n<tr>\n<td>IYY</td>\n<td>ISO 8601 周编号方式的年的最后 3 位</td>\n</tr>\n<tr>\n<td>IY</td>\n<td>ISO 8601 周编号方式的年的最后 2 位</td>\n</tr>\n<tr>\n<td>I</td>\n<td>ISO 8601 周编号方式的年的最后一位</td>\n</tr>\n<tr>\n<td>BC, bc, AD或者ad</td>\n<td>纪元指示器（不带句号）</td>\n</tr>\n<tr>\n<td>B.C., b.c., A.D.或者a.d.</td>\n<td>纪元指示器（带句号）</td>\n</tr>\n<tr>\n<td>MONTH</td>\n<td>全大写形式的月名（空格补齐到 9 字符）</td>\n</tr>\n<tr>\n<td>Month</td>\n<td>全首字母大写形式的月名（空格补齐到 9 字符）</td>\n</tr>\n<tr>\n<td>month</td>\n<td>全小写形式的月名（空格补齐到 9 字符）</td>\n</tr>\n<tr>\n<td>MON</td>\n<td>简写的大写形式的月名（英文 3 字符，本地化长度可变）</td>\n</tr>\n<tr>\n<td>Mon</td>\n<td>简写的首字母大写形式的月名（英文 3 字符，本地化长度可变）</td>\n</tr>\n<tr>\n<td>mon</td>\n<td>简写的小写形式的月名（英文 3 字符，本地化长度可变）</td>\n</tr>\n<tr>\n<td>MM</td>\n<td>月编号（01-12）</td>\n</tr>\n<tr>\n<td>DAY</td>\n<td>全大写形式的日名（空格补齐到 9 字符）</td>\n</tr>\n<tr>\n<td>Day</td>\n<td>全首字母大写形式的日名（空格补齐到 9 字符）</td>\n</tr>\n<tr>\n<td>day</td>\n<td>全小写形式的日名（空格补齐到 9 字符）</td>\n</tr>\n<tr>\n<td>DY</td>\n<td>简写的大写形式的日名（英语 3 字符，本地化长度可变）</td>\n</tr>\n<tr>\n<td>Dy</td>\n<td>简写的首字母大写形式的日名（英语 3 字符，本地化长度可变）</td>\n</tr>\n<tr>\n<td>dy</td>\n<td>简写的小写形式的日名（英语 3 字符，本地化长度可变）</td>\n</tr>\n<tr>\n<td>DDD</td>\n<td>一年中的日（001-366）</td>\n</tr>\n<tr>\n<td>IDDD</td>\n<td>ISO 8601 周编号方式的年中的日（001-371，年的第 1 日时第一个 ISO 周的周一）</td>\n</tr>\n<tr>\n<td>DD</td>\n<td>月中的日（01-31）</td>\n</tr>\n<tr>\n<td>D</td>\n<td>周中的日，周日（1）到周六（7）</td>\n</tr>\n<tr>\n<td>ID</td>\n<td>周中的 ISO 8601 日，周一（1）到周日（7）</td>\n</tr>\n<tr>\n<td>W</td>\n<td>月中的周（1-5）（第一周从该月的第一天开始）</td>\n</tr>\n<tr>\n<td>WW</td>\n<td>年中的周数（1-53）（第一周从该年的第一天开始）</td>\n</tr>\n<tr>\n<td>IW</td>\n<td>ISO 8601 周编号方式的年中的周数（01 - 53；新的一年的第一个周四在第一周）</td>\n</tr>\n<tr>\n<td>CC</td>\n<td>世纪（2 位数）（21 世纪开始于 2001-01-01）</td>\n</tr>\n<tr>\n<td>J</td>\n<td>儒略日（从午夜 UTC 的公元前 4714 年 11 月 24 日开始的整数日数）</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>季度（to_date和to_timestamp会忽略）</td>\n</tr>\n<tr>\n<td>RM</td>\n<td>大写形式的罗马计数法的月（I-XII；I 是 一月）</td>\n</tr>\n<tr>\n<td>rm</td>\n<td>小写形式的罗马计数法的月（i-xii；i 是 一月）</td>\n</tr>\n<tr>\n<td>TZ</td>\n<td>大写形式的时区缩写（仅在to_char中支持）</td>\n</tr>\n<tr>\n<td>tz</td>\n<td>小写形式的时区缩写（仅在to_char中支持）</td>\n</tr>\n<tr>\n<td>TZH</td>\n<td>时区的小时</td>\n</tr>\n<tr>\n<td>TZM</td>\n<td>时区的分钟</td>\n</tr>\n<tr>\n<td>OF</td>\n<td>从UTC开始的时区偏移（仅在to_char中支持）</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>修饰语可以被应用于模板模式来修改它们的行为。例如，FMMonth就是带着FM修饰语的Month模式。展示了可用于日期/时间格式化的修饰语模式。</p>\n<p><strong>表.  用于日期/时间格式化的模板模式修饰语</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>修饰语</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FM prefix</td>\n<td>填充模式（抑制前导零和填充的空格）</td>\n<td>FMMonth</td>\n</tr>\n<tr>\n<td>TH suffix</td>\n<td>大写形式的序数后缀</td>\n<td>DDTH, e.g., 12TH</td>\n</tr>\n<tr>\n<td>th suffix</td>\n<td>小写形式的序数后缀</td>\n<td>DDth, e.g., 12th</td>\n</tr>\n<tr>\n<td>FX prefix</td>\n<td>固定的格式化全局选项（见使用须知）</td>\n<td>FX Month DD Day</td>\n</tr>\n<tr>\n<td>TM prefix</td>\n<td>翻译模式（基于[lc_time]打印本地化的日和月名）</td>\n<td>TMMonth</td>\n</tr>\n<tr>\n<td>SP suffix</td>\n<td>拼写模式（未实现）</td>\n<td>DDSP</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>日期/时间格式化的使用须知：</p>\n<p>·   FM抑制前导的零或尾随的空白， 否则会把它们增加到输入从而把一个模式的输出变成固定宽度。FM只修改下一个声明，而在 Oracle 中，FM影响所有随后的声明，并且重复的FM修饰语将触发填充模式开和关。</p>\n<p>·   TM不包括结尾空白。to_timestamp和to_date会忽略TM修饰语。</p>\n<p>·   如果没有使用FX选项，to_timestamp和to_date会跳过输入字符串中的多个空白。例如，to_timestamp(‘2000  JUN’, ‘YYYY MON’)是正确的，但to_timestamp(‘2000  JUN’, ‘FXYYYY MON’)会返回一个错误，因为to_timestamp只期望一个空白。FX必须被指定为模板中的第一个项。</p>\n<p>·   在to_char模板里可以有普通文本，并且它们会被照字面输出。你可以把一个子串放到双引号里强迫它被解释成一个文本，即使它里面包含模板模式也如此。例如，在 ‘“Hello Year “YYYY’中，YYYY将被年份数据代替，但是Year中单独的Y不会。在to_date、to_number以及to_timestamp中，文本和双引号字符串会导致跳过该字符串中所包含的字符数量，例如\"XX\"会跳过两个输入字符（不管它们是不是XX）。</p>\n<p>·   如果你想在输出里有双引号，那么你必须在它们前面放反斜线，例如 ‘\"YYYY Month\"’。不然，在双引号字符串外面的反斜线就不是特殊的。在双引号字符串内，反斜线会导致下一个字符被取其字面形式，不管它是什么字符（但是这没有特殊效果，除非下一个字符是一个双引号或者另一个反斜线）。</p>\n<p>·   在to_timestamp和to_date中，如果年份格式声明少于四位（如YYY）并且提供的年份少于四位，年份将被调整为最接近于 2020 年，例如95会变成 1995。</p>\n<p>·   在to_timestamp和to_date中，在处理超过4位数的年份时，YYYY转换具有限制。你必须在YYYY后面使用一些非数字字符或者模板， 否则年份总是被解释为 4 位数字。例如（对于 20000 年）：to_date(‘200001131’, ‘YYYYMMDD’)将会被解释成一个 4 位数字的年份，而不是在年份后使用一个非数字分隔符，像to_date(‘20000-1131’, ‘YYYY-MMDD’)或to_date(‘20000Nov31’, ‘YYYYMonDD’)。</p>\n<p>·   在to_timestamp和to_date中，CC（世纪）字段会被接受，但是如果有YYY、YYYY或者Y,YYY字段则会忽略它。如果CC与YY或Y一起使用，则结果被计算为指定世纪中的那一年。如果指定了世纪但是没有指定年，则会假定为该世纪的第一年。</p>\n<p>·   在to_timestamp和to_date中，工作日名称或编号（DAY、D以及相关的字段类型）会被接受，但会为了计算结果的目的而忽略。季度（Q）字段也是一样。</p>\n<p>·   在to_timestamp和to_date中，一个 ISO 8601 周编号的日期（与一个格里高利日期相区别）可以用两种方法之一被指定为to_timestamp和to_date：</p>\n<p>n 年、周编号和工作日：例如to_date(‘2006-42-4’, ‘IYYY-IW-ID’)返回日期2006-10-19。如果你忽略工作日，它被假定为 1（周一）。</p>\n<p>n 年和一年中的日：例如to_date(‘2006-291’, ‘IYYY-IDDD’)也返回2006-10-19。</p>\n<p>尝试使用一个混合了 ISO 8601 周编号和格里高利日期的域来输入一个日期是无意义的，并且将导致一个错误。在一个 ISO 周编号的年的环境下，一个“月”或“月中的日”的概念没有意义。在一个格里高利年的环境下，ISO 周没有意义。用户应当避免混合格里高利和 ISO 日期声明。</p>\n<p>小心:虽然to_date将会拒绝混合使用格里高利和 ISO 周编号日期的域， to_char却不会，因为YYYY-MM-DD (IYYY-IDDD) 这种输出格式也会有用。但是避免写类似IYYY-MM-DD的东西，那会得到在 起始年附近令人惊讶的结果。</p>\n<p>·   在to_timestamp中，毫秒（MS）和微秒（US）域都被用作小数点后的秒位。例如to_timestamp(‘12.3’, ‘SS.MS’)不是 3 毫秒, 而是 300，因为该转换把它看做 12 + 0.3 秒。这意味着对于格式SS.MS而言，输入值12.3、12.30和12.300指定了相同数目的毫秒。要得到三毫秒，你必须使用 12.003，转换会把它看做 12 + 0.003 = 12.003 秒。</p>\n<p>·   下面是一个更复杂的例子∶to_timestamp(<code>'15:12:02.020.001230'</code>, <code>'HH24:MI:SS.MS.US'</code>)是 15 小时、12 分钟和 2 秒 + 20 毫秒 + 1230微秒 = 2.021230 秒。</p>\n<p>·   to_char(…, ‘ID’)的一周中日的编号匹配extract(isodow from …)函数，但是to_char(…, ‘D’)不匹配extract(dow from …)的日编号。</p>\n<p>·   to_char(interval)格式化HH和HH12为显示在一个 12 小时的时钟上，即零小时和 36 小时输出为12，而HH24会输出完整的小时值，对于间隔它可以超过 23.</p>\n<p>表展示了可以用于格式化数字值的模版模式。</p>\n<p><strong>表 . 用于数字格式化的模板模式</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9</td>\n<td>数位（如果无意义可以被删除）</td>\n</tr>\n<tr>\n<td>0</td>\n<td>数位（即便没有意义也不会被删除）</td>\n</tr>\n<tr>\n<td>. (period)</td>\n<td>小数点</td>\n</tr>\n<tr>\n<td>, (comma)</td>\n<td>分组（千）分隔符</td>\n</tr>\n<tr>\n<td>PR</td>\n<td>尖括号内的负值</td>\n</tr>\n<tr>\n<td>S</td>\n<td>带符号的数字（使用区域）</td>\n</tr>\n<tr>\n<td>L</td>\n<td>货币符号（使用区域）</td>\n</tr>\n<tr>\n<td>D</td>\n<td>小数点（使用区域）</td>\n</tr>\n<tr>\n<td>G</td>\n<td>分组分隔符（使用区域）</td>\n</tr>\n<tr>\n<td>MI</td>\n<td>在指定位置的负号（如果数字 &lt; 0）</td>\n</tr>\n<tr>\n<td>PL</td>\n<td>在指定位置的正号（如果数字 &gt; 0）</td>\n</tr>\n<tr>\n<td>SG</td>\n<td>在指定位置的正/负号</td>\n</tr>\n<tr>\n<td>RN</td>\n<td>罗马数字（输入在 1 和 3999 之间）</td>\n</tr>\n<tr>\n<td>TH or th</td>\n<td>序数后缀</td>\n</tr>\n<tr>\n<td>V</td>\n<td>移动指定位数（参阅注解）</td>\n</tr>\n<tr>\n<td>EEEE</td>\n<td>科学记数的指数</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>数字格式化的用法须知：</p>\n<p>·   0指定一个总是被打印的数位，即便它包含前导/拖尾的零。9也指定一个数位，但是如果它是前导零则会被空格替换，而如果是拖尾零并且指定了填充模式则它会被删除（对于to_number()来说，这两种模式字符等效）。</p>\n<p>·   模式字符S、L、D以及G表示当前locale定义的负号、货币符号、小数点以及数字分隔符字符。不管locale是什么，模式字符句号和逗号就表示小数点和数字分隔符。</p>\n<p>·   对于to_char()的模式中的一个负号，如果没有明确的规定，将为该负号保留一列，并且它将被锚接到（出现在左边）那个数字。如果S正好出现在某个9的左边，它也将被锚接到那个数字。</p>\n<p>·   使用SG、PL或MI格式化的符号并不挂在数字上面； 例如，to_char(-12, ‘MI9999’)生成’- 12’，而to_char(-12, ‘S9999’)生成 ’ -12’。（Oracle 里的实现不允许在9前面使用MI，而是要求9在MI前面。）</p>\n<p>·   TH不会转换小于零的数值，也不会转换小数。</p>\n<p>·   在to_number中，如果没有使用L或TH之类的非数据模板模式，相应数量的输入字符会被跳过，不管它们是否匹配模板模式，除非它们是数据字符（也就是数位、负号、小数点或者逗号）。例如，TH会跳过两个非数据字符。</p>\n<p>·   带有to_char的V会把输入值乘上10^n，其中n是跟在V后面的位数。带有to_number的V以类似的方式做除法。to_char和to_number不支持使用结合小数点的V（例如，不允许99.9V99）。</p>\n<p>·   EEEE（科学记数法）不能和任何其他格式化模式或修饰语（数字和小数点模式除外）组合在一起使用，并且必须位于格式化字符串的最后（例如9.99EEEE是一个合法的模式）。</p>\n<p>某些修饰语可以被应用到任何模板来改变其行为。例如，FM99.99是带有FM修饰语的99.99模式。</p>\n<p><strong>表.  用于数字格式化的模板模式修饰语</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>修饰语</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FM prefix</td>\n<td>填充模式（抑制拖尾零和填充的空白）</td>\n<td>FM99.99</td>\n</tr>\n<tr>\n<td>TH suffix</td>\n<td>大写序数后缀</td>\n<td>999TH</td>\n</tr>\n<tr>\n<td>th suffix</td>\n<td>小写序数后缀</td>\n<td>999th</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>表展示了一些使用to_char函数的例子。</p>\n<p><strong>表.  to_char例子</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>表达式</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>to_char(current_timestamp,  <code>'Day, DD HH12:MI:SS'</code>)</td>\n<td><code>'Tuesday , 06 05:39:18'</code></td>\n</tr>\n<tr>\n<td>to_char(current_timestamp,  <code>'FMDay, FMDD HH12:MI:SS'</code>)</td>\n<td><code>'Tuesday, 6 05:39:18'</code></td>\n</tr>\n<tr>\n<td>to_char(-0.1, ‘99.99’)</td>\n<td>’ -.10'</td>\n</tr>\n<tr>\n<td>to_char(-0.1, ‘FM9.99’)</td>\n<td>‘-.1’</td>\n</tr>\n<tr>\n<td>to_char(-0.1, ‘FM90.99’)</td>\n<td>‘-0.1’</td>\n</tr>\n<tr>\n<td>to_char(0.1, ‘0.9’)</td>\n<td>’ 0.1'</td>\n</tr>\n<tr>\n<td>to_char(12, ‘9990999.9’)</td>\n<td>’  0012.0'</td>\n</tr>\n<tr>\n<td>to_char(12, ‘FM9990999.9’)</td>\n<td>‘0012.’</td>\n</tr>\n<tr>\n<td>to_char(485, ‘999’)</td>\n<td>’ 485'</td>\n</tr>\n<tr>\n<td>to_char(-485, ‘999’)</td>\n<td>‘-485’</td>\n</tr>\n<tr>\n<td>to_char(485, ‘9 9 9’)</td>\n<td>’ 4 8 5'</td>\n</tr>\n<tr>\n<td>to_char(1485, ‘9,999’)</td>\n<td>’ 1,485'</td>\n</tr>\n<tr>\n<td>to_char(1485, ‘9G999’)</td>\n<td>’ 1 485'</td>\n</tr>\n<tr>\n<td>to_char(148.5, ‘999.999’)</td>\n<td>’ 148.500'</td>\n</tr>\n<tr>\n<td>to_char(148.5, ‘FM999.999’)</td>\n<td>‘148.5’</td>\n</tr>\n<tr>\n<td>to_char(148.5, ‘FM999.990’)</td>\n<td>‘148.500’</td>\n</tr>\n<tr>\n<td>to_char(148.5, ‘999D999’)</td>\n<td>’ 148,500'</td>\n</tr>\n<tr>\n<td>to_char(3148.5, ‘9G999D999’)</td>\n<td>’ 3 148,500'</td>\n</tr>\n<tr>\n<td>to_char(-485, ‘999S’)</td>\n<td>‘485-’</td>\n</tr>\n<tr>\n<td>to_char(-485, ‘999MI’)</td>\n<td>‘485-’</td>\n</tr>\n<tr>\n<td>to_char(485, ‘999MI’)</td>\n<td>‘485 '</td>\n</tr>\n<tr>\n<td>to_char(485, ‘FM999MI’)</td>\n<td>‘485’</td>\n</tr>\n<tr>\n<td>to_char(485, ‘PL999’)</td>\n<td>‘+485’</td>\n</tr>\n<tr>\n<td>to_char(485, ‘SG999’)</td>\n<td>‘+485’</td>\n</tr>\n<tr>\n<td>to_char(-485, ‘SG999’)</td>\n<td>‘-485’</td>\n</tr>\n<tr>\n<td>to_char(-485, ‘9SG99’)</td>\n<td>‘4-85’</td>\n</tr>\n<tr>\n<td>to_char(-485, ‘999PR’)</td>\n<td>‘&lt;485&gt;’</td>\n</tr>\n<tr>\n<td>to_char(485, ‘L999’)</td>\n<td>‘DM 485’</td>\n</tr>\n<tr>\n<td>to_char(485, ‘RN’)</td>\n<td>’    CDLXXXV’</td>\n</tr>\n<tr>\n<td>to_char(485, ‘FMRN’)</td>\n<td>‘CDLXXXV’</td>\n</tr>\n<tr>\n<td>to_char(5.2, ‘FMRN’)</td>\n<td>‘V’</td>\n</tr>\n<tr>\n<td>to_char(482, ‘999th’)</td>\n<td>’ 482nd'</td>\n</tr>\n<tr>\n<td>to_char(485,  ‘“Good number:“999’)</td>\n<td>‘Good number: 485’</td>\n</tr>\n<tr>\n<td>to_char(485.8,  ‘“Pre:“999” Post:” .999’)</td>\n<td>‘Pre: 485 Post: .800’</td>\n</tr>\n<tr>\n<td>to_char(12, ‘99V999’)</td>\n<td>’ 12000'</td>\n</tr>\n<tr>\n<td>to_char(12.4, ‘99V999’)</td>\n<td>’ 12400'</td>\n</tr>\n<tr>\n<td>to_char(12.45, ‘99V9’)</td>\n<td>’ 125'</td>\n</tr>\n<tr>\n<td>to_char(0.0004859, ‘9.99EEEE’)</td>\n<td>’ 4.86e-04'</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h2 id=\"时间日期函数和操作符\">时间/日期函数和操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%97%b6%e9%97%b4%e6%97%a5%e6%9c%9f%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>表展示了可用于处理日期/时间值的函数，其细节在随后的小节中描述。表演示了基本算术操作符 （+、*等）的行为。</p>\n<p>所有下文描述的接受time或timestamp输入的函数和操作符实际上都有两种变体： 一种接收time with time zone或timestamp with time zone， 另外一种接受time without time zone或者 timestamp without time zone。为了简化，这些变种没有被独立地展示。此外，+和*操作符都是可交换的操作符对（例如，date + integer 和 integer + date）；我们只显示其中一个。</p>\n<p><strong>表  日期/时间操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>操作符</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>date ‘2001-09-28’ + integer ‘7’</td>\n<td>date ‘2001-10-05’</td>\n</tr>\n<tr>\n<td>+</td>\n<td>date ‘2001-09-28’ + interval ‘1 hour’</td>\n<td><code>timestamp '2001-09-28 01:00:00'</code></td>\n</tr>\n<tr>\n<td>+</td>\n<td>date ‘2001-09-28’ + time ‘03:00’</td>\n<td><code>timestamp '2001-09-28 03:00:00'</code></td>\n</tr>\n<tr>\n<td>+</td>\n<td>interval ‘1 day’ + interval ‘1 hour’</td>\n<td><code>interval '1 day 01:00:00'</code></td>\n</tr>\n<tr>\n<td>+</td>\n<td>timestamp ‘2001-09-28 01:00’ + interval ‘23 hours’</td>\n<td><code>timestamp '2001-09-29 00:00:00'</code></td>\n</tr>\n<tr>\n<td>+</td>\n<td>time ‘01:00’ + interval ‘3 hours’</td>\n<td><code>time '04:00:00'</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>- interval ‘23 hours’</td>\n<td><code>interval '-23:00:00'</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>date ‘2001-10-01’ - date ‘2001-09-28’</td>\n<td>integer ‘3’ (days)</td>\n</tr>\n<tr>\n<td>-</td>\n<td>date ‘2001-10-01’ - integer ‘7’</td>\n<td>date ‘2001-09-24’</td>\n</tr>\n<tr>\n<td>-</td>\n<td>date ‘2001-09-28’ - interval ‘1 hour’</td>\n<td><code>timestamp '2001-09-27 23:00:00'</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>time ‘05:00’ - time ‘03:00’</td>\n<td><code>interval '02:00:00'</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>time ‘05:00’ - interval ‘2 hours’</td>\n<td><code>time '03:00:00'</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>timestamp ‘2001-09-28 23:00’ - interval ‘23  hours’</td>\n<td><code>timestamp '2001-09-28 00:00:00'</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>interval ‘1 day’ - interval ‘1 hour’</td>\n<td><code>interval '1 day -01:00:00'</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>timestamp ‘2001-09-29 03:00’ - timestamp  ‘2001-09-27 12:00’</td>\n<td><code>interval '1 day 15:00:00'</code></td>\n</tr>\n<tr>\n<td>*</td>\n<td>900 * interval ‘1 second’</td>\n<td><code>interval '00:15:00'</code></td>\n</tr>\n<tr>\n<td>*</td>\n<td>21 * interval ‘1 day’</td>\n<td>interval ‘21 days’</td>\n</tr>\n<tr>\n<td>*</td>\n<td>double precision ‘3.5’ * interval ‘1 hour’</td>\n<td><code>interval '03:30:00'</code></td>\n</tr>\n<tr>\n<td>/</td>\n<td>interval ‘1 hour’ / double precision ‘1.5’</td>\n<td><code>interval '00:40:00'</code></td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p><strong>表.  日期/时间函数</strong></p>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>age(timestamp, timestamp)</td>\n<td>interval</td>\n<td>减去参数，生成一个使用年、月（而不是只用日）的“符号化”的结果</td>\n<td>age(timestamp ‘2001-04-10’, timestamp  ‘1957-06-13’)</td>\n<td>43 年 9 月 27 日</td>\n</tr>\n<tr>\n<td>age(timestamp)</td>\n<td>interval</td>\n<td>从current_date（在午夜）减去</td>\n<td>age(timestamp ‘1957-06-13’)</td>\n<td>43 years 8 mons 3 days</td>\n</tr>\n<tr>\n<td>clock_timestamp()</td>\n<td>timestamp with time zone</td>\n<td>当前日期和时间（在语句执行期间变化）；</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>current_date</td>\n<td>date</td>\n<td>当前日期；</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>current_time</td>\n<td>time with time zone</td>\n<td>当前时间（一天中的时间）；</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>current_timestamp</td>\n<td>timestamp with time zone</td>\n<td>当前日期和时间（当前事务开始时）；</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>date_part(text, timestamp)</td>\n<td>double precision</td>\n<td>获得子域（等价于extract）；</td>\n<td><code>date_part('hour', timestamp '2001-02-16  20:38:40')</code></td>\n<td>20</td>\n</tr>\n<tr>\n<td>date_part(text, interval)</td>\n<td>double precision</td>\n<td>获得子域（等价于extract）；</td>\n<td>date_part(‘month’, interval ‘2 years 3  months’)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>date_trunc(text, timestamp)</td>\n<td>timestamp</td>\n<td>截断到指定精度；</td>\n<td><code>date_trunc('hour', timestamp '2001-02-16  20:38:40')</code></td>\n<td><code>2001-02-16 20:00:00</code></td>\n</tr>\n<tr>\n<td>date_trunc(text, interval)</td>\n<td>interval</td>\n<td>截断到指定精度；</td>\n<td>date_trunc(‘hour’, interval ‘2 days 3 hours  40 minutes’)</td>\n<td><code>2 days 03:00:00</code></td>\n</tr>\n<tr>\n<td>extract(field from timestamp)</td>\n<td>double precision</td>\n<td>获得子域；</td>\n<td><code>extract(hour from timestamp '2001-02-16  20:38:40')</code></td>\n<td>20</td>\n</tr>\n<tr>\n<td>extract(field from interval)</td>\n<td>double precision</td>\n<td>获得子域；</td>\n<td>extract(month from interval ‘2 years 3  months’)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>isfinite(date)</td>\n<td>boolean</td>\n<td>测试有限日期（不是+/-无限）</td>\n<td>isfinite(date ‘2001-02-16’)</td>\n<td>true</td>\n</tr>\n<tr>\n<td>isfinite(timestamp)</td>\n<td>boolean</td>\n<td>测试有限时间戳（不是+/-无限）</td>\n<td><code>isfinite(timestamp '2001-02-16 21:28:30')</code></td>\n<td>true</td>\n</tr>\n<tr>\n<td>isfinite(interval)</td>\n<td>boolean</td>\n<td>测试有限间隔</td>\n<td>isfinite(interval ‘4 hours’)</td>\n<td>true</td>\n</tr>\n<tr>\n<td>justify_days(interval)</td>\n<td>interval</td>\n<td>调整间隔这样30天时间周期可以表示为月</td>\n<td>justify_days(interval ‘35 days’)</td>\n<td>1 mon 5 days</td>\n</tr>\n<tr>\n<td>justify_hours(interval)</td>\n<td>interval</td>\n<td>调整间隔这样24小时时间周期可以表示为日</td>\n<td>justify_hours(interval ‘27 hours’)</td>\n<td><code>1 day 03:00:00</code></td>\n</tr>\n<tr>\n<td>justify_interval(interval)</td>\n<td>interval</td>\n<td>使用justify_days和justify_hours调整间隔，使用额外的符号调整</td>\n<td>justify_interval(interval ‘1 mon -1 hour’)</td>\n<td><code>29 days 23:00:00</code></td>\n</tr>\n<tr>\n<td>localtime</td>\n<td>time</td>\n<td>当前时间（一天中的时间）；</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>localtimestamp</td>\n<td>timestamp</td>\n<td>当前日期和时间（当前事务的开始）；</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>make_date(year int, month int, day int)</td>\n<td>date</td>\n<td>从年、月、日域创建日期</td>\n<td>make_date(2013, 7, 15)</td>\n<td>2013-07-15</td>\n</tr>\n<tr>\n<td>make_interval(years int DEFAULT  0, months int DEFAULT 0, weeks int DEFAULT  0, days int DEFAULT 0, hours int DEFAULT  0, mins int DEFAULT 0, secs double precision DEFAULT  0.0)</td>\n<td>interval</td>\n<td>从年、月、周、日、时、分、秒域创建 interval</td>\n<td>make_interval(days =&gt; 10)</td>\n<td>10 days</td>\n</tr>\n<tr>\n<td>make_time(hour int, min int, sec double  precision)</td>\n<td>time</td>\n<td>从时、分、秒域创建时间</td>\n<td>make_time(8, 15, 23.5)</td>\n<td><code>08:15:23.5</code></td>\n</tr>\n<tr>\n<td>make_timestamp(year int, month int, day int, hour int, min int, sec double  precision)</td>\n<td>timestamp</td>\n<td>从年、月、日、时、分、秒域创建时间戳</td>\n<td>make_timestamp(2013, 7, 15, 8, 15, 23.5)</td>\n<td><code>2013-07-15 08:15:23.5</code></td>\n</tr>\n<tr>\n<td>make_timestamptz(year int, month int, day int, hour int, min int, sec double  precision, [ timezone text ])</td>\n<td>timestamp with time zone</td>\n<td>从年、月、日、时、分、秒域创建带时区的时间戳。如果没有指定timezone， 则使用当前时区。</td>\n<td>make_timestamptz(2013, 7, 15, 8, 15, 23.5)</td>\n<td><code>2013-07-15 08:15:23.5+01</code></td>\n</tr>\n<tr>\n<td>now()</td>\n<td>timestamp with time zone</td>\n<td>当前日期和时间（当前事务的开始）；</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>statement_timestamp()</td>\n<td>timestamp with time zone</td>\n<td>当前日期和时间（当前事务的开始）；</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>timeofday()</td>\n<td>text</td>\n<td>当前日期和时间（像clock_timestamp，但是作为一个text字符串）；</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>transaction_timestamp()</td>\n<td>timestamp with time zone</td>\n<td>当前日期和时间（当前事务的开始）；</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>to_timestamp(double precision)</td>\n<td>timestamp with time zone</td>\n<td>把 Unix 时间（从 1970-01-01 00:00:00+00 开始的秒）转换成 timestamp</td>\n<td>to_timestamp(1284352323)</td>\n<td><code>2010-09-13 04:32:03+00</code></td>\n</tr>\n</tbody>\n</table>\n<p>除了这些函数以外，还支持 SQL 操作符OVERLAPS：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"3538bc5\" tabindex=\"0\"><code class=\"language-none\">(start1, end1) OVERLAPS (start2, end2)\n(start1, length1) OVERLAPS (start2, length2)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这个表达式在两个时间域（用它们的端点定义）重叠的时候得到真，当它们不重叠时得到假。端点可以用一对日期、时间或者时间戳来指定；或者是用一个后面跟着一个间隔的日期、时间或时间戳来指定。当一对值被提供时，起点或终点都可以被写在前面，OVERLAPS会自动地把较早的值作为起点。每一个时间段被认为是表示半开的间隔start &lt;= time &lt; end，除非start和end相等，这种情况下它表示单个时间实例。例如这表示两个只有一个共同端点的时间段不重叠。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"36f9e17\" tabindex=\"0\"><code class=\"language-none\">SELECT (DATE '2001-02-16', DATE '2001-12-21') OVERLAPS\n       (DATE '2001-10-30', DATE '2002-10-30');\n结果：true\nSELECT (DATE '2001-02-16', INTERVAL '100 days') OVERLAPS\n       (DATE '2001-10-30', DATE '2002-10-30');\n结果：false\nSELECT (DATE '2001-10-29', DATE '2001-10-30') OVERLAPS\n       (DATE '2001-10-30', DATE '2001-10-31');\n结果：false\nSELECT (DATE '2001-10-30', DATE '2001-10-30') OVERLAPS\n       (DATE '2001-10-30', DATE '2001-10-31');\n结果：true</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>当把一个interval值添加到timestamp with time zone上（或从中减去）时， days 部分会按照指定的天数增加或减少timestamp with time zone的日期。 对于横跨夏令时的变化（当会话的时区被设置为可识别DST的时区时），这意味着interval ‘1 day’并 不一定等于interval ‘24 hours’。例如，当会话的时区设置为CST7CDT时，timestamp with time zone ‘2005-04-02 12:00-07’ + interval ‘1 day’ 的结果是timestamp with time zone ‘2005-04-03 12:00-06’，而将interval ‘24 hours’增加到相同的初始timestamp with time zone的结果 则是timestamp with time zone ‘2005-04-03 13:00-06’， 因为CST7CDT时区在2005-04-03 02:00有一个夏令时变更。</p>\n<p>注意age返回的月数域可能有歧义，因为不同的月份有不同的天数。当计算部分月数时，采用两个日期中较早的月。例如：age(‘2004-06-01’, ‘2004-04-30’)使用4月份得到1 mon 1 day，而用5月分时会得到1 mon 2 days，因为5月有31天，而4月只有30天。</p>\n<p>日期和时间戳的减法也可能会很复杂。执行减法的一种概念上很简单的方法是，使用 EXTRACT(EPOCH FROM …)把每个值都转换成秒数，然后执行减法， 这样会得到两个值之间的<em>秒</em>数。这种方法将会适应每个月中天数、 时区改变和夏令时调整。使用“-”操作符的日期或时间 戳减法会返回值之间的天数（24小时）以及时/分/秒，也会做同样的调整。 age函数会返回年、月、日以及时/分/秒，执行按域的减法，然后对 负值域进行调整。下面的查询展示了这些方法的不同。例子中的结果由 timezone = ‘US/Eastern’产生，这使得两个使用的日期之间存在着夏令 时的变化：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d54a8d8\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(EPOCH FROM timestamptz '2013-07-01 12:00:00') -\n       EXTRACT(EPOCH FROM timestamptz '2013-03-01 12:00:00');\nResult: 10537200\nSELECT (EXTRACT(EPOCH FROM timestamptz '2013-07-01 12:00:00') -\n        EXTRACT(EPOCH FROM timestamptz '2013-03-01 12:00:00'))\n        / 60 / 60 / 24;\nResult: 121.958333333333\nSELECT timestamptz '2013-07-01 12:00:00' - timestamptz '2013-03-01 12:00:00';\nResult: 121 days 23:00:00\nSELECT age(timestamptz '2013-07-01 12:00:00', timestamptz '2013-03-01 12:00:00');\nResult: 4 mons</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"extract-date_part\">EXTRACT, date_part <a aria-hidden=\"true\" class=\"anchor\" href=\"#extract-date_part\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"0127ba4\" tabindex=\"0\"><code class=\"language-none\">EXTRACT(field FROM source)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>extract函数从日期/时间值中抽取子域，例如年或者小时等。source必须是一个类型 timestamp、time或interval的值表达式（类型为date的表达式将被造型为 timestamp，并且因此也可以被同样使用）。field是一个标识符或者字符串，它指定从源值中抽取的域。extract函数返回类型为double precision的值。 下列值是有效的域名字∶</p>\n<p>century</p>\n<p>世纪</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"e93b333\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(CENTURY FROM TIMESTAMP '2000-12-16 12:21:13');\n结果：20\nSELECT EXTRACT(CENTURY FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：21</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>第一个世纪从 <code>0001-01-01 00:00:00 AD</code> 开始， 尽管那时候人们还不知道这是第一个世纪。这个定义适用于所有使用格里高利历法的国家。其中没有 0 世纪，我们直接从公元前 1 世纪到公元 1 世纪。 如果你认为这个不合理，那么请把抱怨发给：罗马圣彼得教堂，梵蒂冈，教皇收。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"a056cf8\" tabindex=\"0\"><code class=\"language-none\">day</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>对于timestamp值，是（月份）里的日域（1-31）；对于interval值，是日数</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f14d689\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(DAY FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：16\n\nSELECT EXTRACT(DAY FROM INTERVAL '40 days 1 minute');\n结果：40\ndecade</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>年份域除以10</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"3cdac3f\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(DECADE FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：200\ndow</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>一周中的日，从周日（0）到周六（6）</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"38f1d71\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(DOW FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：5</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>请注意，extract的一周中的日和to_char(…, ‘D’)函数不同。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"dfa0e0d\" tabindex=\"0\"><code class=\"language-none\">doy</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>一年的第几天（1 -365/366）</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"a673a60\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(DOY FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：47\nepoch</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>对于timestamp with time zone值， 是自<code>1970-01-01 00:00:00 UTC</code>以来的秒数（结果可能是负数）； 对于date and timestamp值，是自本地时间<code> 1970-01-01 00:00:00</code> 以来的描述；对于interval值，它是时间间隔的总秒数。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"23d2554\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(EPOCH FROM TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40.12-08');\n结果：982384720.12\n\nSELECT EXTRACT(EPOCH FROM INTERVAL '5 days 3 hours');\n结果：442800</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>不能用to_timestamp把一个 epoch 值转换回成时间戳：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"3c9659c\" tabindex=\"0\"><code class=\"language-none\">SELECT to_timestamp(982384720.12);\nResult: 2001-02-17 04:38:40.12+00\nhour</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>小时域（0 - 23）</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4e50dd2\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(HOUR FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：20\nisodow</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>一周中的日，从周一（1）到周日（7）</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d9a35eb\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(ISODOW FROM TIMESTAMP '2001-02-18 20:38:40');\n结果：7</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>除了周日，这和dow相同。这符合ISO 8601 中一周中的日的编号。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5b3a6dd\" tabindex=\"0\"><code class=\"language-none\">isoyear</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>日期所落在的ISO 8601 周编号的年（不适用于间隔）</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"b4ca93a\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(ISOYEAR FROM DATE '2006-01-01');\n结果：2005\nSELECT EXTRACT(ISOYEAR FROM DATE '2006-01-02');\n结果：2006</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>每一个ISO 8601 周编号的年都开始于包含1月4日的那一周的周一，在早的1月或迟的12月中ISO年可能和格里高利年不同。更多信息见week域。</p>\n<p>这个域不能用于 PostgreSQL 8.3之前的版本。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"e3052c7\" tabindex=\"0\"><code class=\"language-none\">microseconds</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>秒域，包括小数部分，乘以 1,000,000。请注意它包括全部的秒</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4bf260f\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(MICROSECONDS FROM TIME '17:12:28.5');\n结果：28500000\nmillennium</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>千年</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1e92ebe\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(MILLENNIUM FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：3</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>19xx的年份在第二个千年里。第三个千年从 2001 年 1 月 1 日开始。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5bc72b5\" tabindex=\"0\"><code class=\"language-none\">milliseconds</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>秒域，包括小数部分，乘以 1000。请注意它包括完整的秒。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4d71cb1\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(MILLISECONDS FROM TIME '17:12:28.5');\n结果：28500\nminute</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>分钟域（0 - 59）</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"534c71f\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：38\nmonth</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>对于timestamp值，它是一年里的月份数（1 - 12）； 对于interval值，它是月的数目，然后对 12 取模（0 - 11）</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"667e238\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(MONTH FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：2\n\nSELECT EXTRACT(MONTH FROM INTERVAL '2 years 3 months');\n结果：3\n\nSELECT EXTRACT(MONTH FROM INTERVAL '2 years 13 months');\n结果：1\nquarter</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>该天所在的该年的季度（1 - 4）</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2086857\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(QUARTER FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：1\nsecond</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>秒域，包括小数部分（0 - 59[<a href=\"http://postgres.cn/docs/11/functions-datetime.html#ftn.id-1.5.8.14.12.5.11.16.2.1.1\" rel=\"external\" target=\"_blank\">7]<svg height=\"16\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z\" fill=\"currentColor\"></path></svg></a>）</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4f99284\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(SECOND FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：40\n\nSELECT EXTRACT(SECOND FROM TIME '17:12:28.5');\n结果：28.5\ntimezone</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>与 UTC 的时区偏移，以秒记。正数对应 UTC 东边的时区，负数对应 UTC 西边的时区（从技术上来看，PostgreSQL不使用 UTC，因为其中不处理闰秒）。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"74e81ec\" tabindex=\"0\"><code class=\"language-none\">timezone_hour</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>时区偏移的小时部分。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"b8e32cc\" tabindex=\"0\"><code class=\"language-none\">timezone_minute</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>时区偏移的分钟部分。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5631808\" tabindex=\"0\"><code class=\"language-none\">week</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>该天在所在的ISO 8601 周编号的年份里是第几周。根据定义， 一年的第一周包含该年的 1月 4 日并且 ISO 周从星期一开始。换句话说，一年的第一个星期四在第一周。</p>\n<p>在 ISO 周编号系统中，早的 1 月的日期可能位于前一年的第五十二或者第五十三周，而迟的 12 月的日期可能位于下一年的第一周。例如， 2005-01-01位于 2004 年的第五十三周，并且2006-01-01位于 2005 年的第五十二周，而2012-12-31位于 2013 年的第一周。我们推荐把isoyear域和week一起使用来得到一致的结果。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2aa5fbf\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(WEEK FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：7\nyear</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>年份域。要记住这里没有0 AD，所以从AD年里抽取BC年应该小心处理。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"faec0f7\" tabindex=\"0\"><code class=\"language-none\">SELECT EXTRACT(YEAR FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：2001</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>注意</p>\n<p>当输入值为 +/-Infinity 时，extract对于单调增的域（epoch、julian、year、isoyear、decade、century以及millennium）返回 +/-Infinity。对于其他域返回 NULL。PostgreSQL 9.6 之前的版本对所有输入无穷的情况都返回零。</p>\n<p>在传统的Ingres上建模的date_part函数等价于SQL标准函数extract：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"d8b5efd\" tabindex=\"0\"><code class=\"language-none\">date_part('field', source)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>请注意这里的field参数必须是一个串值，而不是一个名字。有效的date_part域名 和extract相同。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"905802c\" tabindex=\"0\"><code class=\"language-none\">SELECT date_part('day', TIMESTAMP '2001-02-16 20:38:40');\n结果：16\n\nSELECT date_part('hour', INTERVAL '4 hours 3 minutes');\n结果：4</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"date_trunc\">date_trunc <a aria-hidden=\"true\" class=\"anchor\" href=\"#date_trunc\"><i class=\"material-icons align-middle\">link</i></a></h3><p>date_trunc函数在概念上和用于数字的trunc函数类似。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"23c69b3\" tabindex=\"0\"><code class=\"language-none\">date_trunc('field', source)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>source是类型timestamp或interval的值表达式（类型date和 time的值都分别被自动转换成timestamp或者interval）。field选择对输入值选用什么样的精度进行截断。返回的值是timestamp类型或者所有小于选定的 精度的域都设置为零（或者一，对于日期和月份）的interval。</p>\n<p>field的有效值是∶\n\n\n\n\n\n\n\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>microseconds</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>milliseconds</td>\n</tr>\n<tr>\n<td>second</td>\n</tr>\n<tr>\n<td>minute</td>\n</tr>\n<tr>\n<td>hour</td>\n</tr>\n<tr>\n<td>day</td>\n</tr>\n<tr>\n<td>week</td>\n</tr>\n<tr>\n<td>month</td>\n</tr>\n<tr>\n<td>quarter</td>\n</tr>\n<tr>\n<td>year</td>\n</tr>\n<tr>\n<td>decade</td>\n</tr>\n<tr>\n<td>century</td>\n</tr>\n<tr>\n<td>millennium</td>\n</tr>\n</tbody>\n</table>\n\n例子：<p></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9862af7\" tabindex=\"0\"><code class=\"language-none\">SELECT date_trunc('hour', TIMESTAMP '2001-02-16 20:38:40');\n结果：2001-02-16 20:00:00\n\nSELECT date_trunc('year', TIMESTAMP '2001-02-16 20:38:40');\n结果：2001-01-01 00:00:00</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"at-time-zone\">AT TIME ZONE <a aria-hidden=\"true\" class=\"anchor\" href=\"#at-time-zone\"><i class=\"material-icons align-middle\">link</i></a></h3><p>AT TIME ZONE把时间戳<em>without time zone</em>转换成时间戳<em>with time zone</em>或者反过来，并且把<em>time</em>值转换成不同的时区。表展示了它的变体。</p>\n<p><strong>表</strong> <strong>.</strong> AT TIME ZONE<strong>变体</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>表达式</th>\n<th>返回类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>timestamp without time zone AT TIME  ZONE zone</td>\n<td>timestamp with time zone</td>\n<td>把给定的不带时区的时间戳当作位于指定时区的时间对待</td>\n</tr>\n<tr>\n<td>timestamp with time zone AT TIME  ZONE zone</td>\n<td>timestamp without time zone</td>\n<td>把给定的带时区的时间戳转换到新的时区，不带时区指定</td>\n</tr>\n<tr>\n<td>time with time zone AT TIME  ZONE zone</td>\n<td>time with time zone</td>\n<td>把给定的带时区的时间转换到新时区</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>在这些表达式里，我们需要的时区zone可以指定为文本串（例如，‘America/Los_Angeles’）或者一个间隔 （例如，INTERVAL ‘-08:00’）。</p>\n<p>例子（假设本地时区是America/Los_Angeles）：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"dd2ec2b\" tabindex=\"0\"><code class=\"language-none\">SELECT TIMESTAMP '2001-02-16 20:38:40' AT TIME ZONE 'America/Denver';\nResult: 2001-02-16 19:38:40-08\n\nSELECT TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40-05' AT TIME ZONE 'America/Denver';\nResult: 2001-02-16 18:38:40\n\nSELECT TIMESTAMP '2001-02-16 20:38:40-05' AT TIME ZONE 'Asia/Tokyo' AT TIME ZONE 'America/Chicago';\nResult: 2001-02-16 05:38:40</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>第一个例子给缺少时区的值加上了时区，并且显示了使用当前TimeZone设置的值。第二个例子把带有时区值的时间戳移动到指定的时区，并且返回不带时区的值。这允许存储和显示不同于当前TimeZone设置的值。第三个例子把东京时间转换成芝加哥时间。把<em>time</em>值转换成其他时区会使用当前活跃的时区规则，因为没有提供日期。</p>\n<p>函数timezone(zone, timestamp)等效于 SQL 兼容的结构timestamp AT TIME ZONE zone。</p>\n<h3 id=\"当前日期时间\">当前日期/时间 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%bd%93%e5%89%8d%e6%97%a5%e6%9c%9f%e6%97%b6%e9%97%b4\"><i class=\"material-icons align-middle\">link</i></a></h3><p>MemFireDB提供了许多返回当前日期和时间的函数。这些 SQL 标准的函数全部都按照当前事务的开始时刻返回值：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4733c5e\" tabindex=\"0\"><code class=\"language-none\">CURRENT_DATE\nCURRENT_TIME\nCURRENT_TIMESTAMP\nCURRENT_TIME(precision)\nCURRENT_TIMESTAMP(precision)\nLOCALTIME\nLOCALTIMESTAMP\nLOCALTIME(precision)\nLOCALTIMESTAMP(precision)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>CURRENT_TIME和CURRENT_TIMESTAMP传递带有时区的值；LOCALTIME和LOCALTIMESTAMP传递的值不带时区。</p>\n<p>CURRENT_TIME、CURRENT_TIMESTAMP、LOCALTIME和 LOCALTIMESTAMP可以有选择地接受一个精度参数， 该精度导致结果的秒域被园整为指定小数位。如果没有精度参数，结果将被给予所能得到的全部精度。</p>\n<p>一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"bdaf380\" tabindex=\"0\"><code class=\"language-none\">SELECT CURRENT_TIME;\n结果：14:39:53.662522-05\n\nSELECT CURRENT_DATE;\n结果：2001-12-23\n\nSELECT CURRENT_TIMESTAMP;\n结果：2001-12-23 14:39:53.662522-05\n\nSELECT CURRENT_TIMESTAMP(2);\n结果：2001-12-23 14:39:53.66-05\n\nSELECT LOCALTIMESTAMP;\n结果：2001-12-23 14:39:53.662522</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>因为这些函数全部都按照当前事务的开始时刻返回结果，所以它们的值在事务运行的整个期间内都不改变。 我们认为这是一个特性：目的是为了允许一个事务在“当前”时间上有一致的概念， 这样在同一个事务里的多个修改可以保持同样的时间戳。</p>\n<p>注意:许多其它数据库系统可能会更频繁地推进这些值。\nMemFireDB同样也提供了返回当前语句开始时间的函数， 它们会返回函数被调用时的真实当前时间。这些非 SQL 标准的函数列表如下：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"849f1c5\" tabindex=\"0\"><code class=\"language-none\">transaction_timestamp()\nstatement_timestamp()\nclock_timestamp()\ntimeofday()\nnow()</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><code>transaction_timestamp()</code>等价于<code>CURRENT_TIMESTAMP</code>，但是其命名清楚地反映了它的返回值。statement_timestamp()返回当前语句的开始时刻（更准确的说是收到 客户端最后一条命令的时间）。statement_timestamp()和transaction_timestamp()在一个事务的第一条命令期间返回值相同，但是在随后的命令中却不一定相同。 clock_timestamp()返回真正的当前时间，因此它的值甚至在同一条 SQL 命令中都会变化。timeofday()是一个有历史原因的PostgreSQL函数。和clock_timestamp()相似，timeofday()也返回真实的当前时间，但是它的结果是一个格式化的text串，而不是timestamp with time zone值。now()是PostgreSQL的一个传统，等效于transaction_timestamp()。</p>\n<p>所有日期/时间类型还接受特殊的文字值now，用于指定当前的日期和时间（重申，被解释为当前事务的开始时刻）。 因此，下面三个都返回相同的结果：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"87f89e5\" tabindex=\"0\"><code class=\"language-none\">SELECT CURRENT_TIMESTAMP;\nSELECT now();\nSELECT TIMESTAMP 'now';  -- 对于和 DEFAULT 一起使用是不正确的</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>提示:在创建表期间指定一个DEFAULT子句时，你不会希望使用第三种形式。系统将在分析这个常量的时候把now转换为一个timestamp， 这样需要默认值时就会得到创建表的时间！而前两种形式要到实际使用缺省值的时候才被计算， 因为它们是函数调用。因此它们可以给出每次插入行的时刻。</p>\n<h3 id=\"延时执行\">延时执行 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%bb%b6%e6%97%b6%e6%89%a7%e8%a1%8c\"><i class=\"material-icons align-middle\">link</i></a></h3><p>下面的这些函数可以用于让服务器进程延时执行：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"ef906d2\" tabindex=\"0\"><code class=\"language-sql\">pg_sleep<span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span>\npg_sleep_for<span class=\"token punctuation\">(</span><span class=\"token keyword\">interval</span><span class=\"token punctuation\">)</span>\npg_sleep_until<span class=\"token punctuation\">(</span><span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">with</span> <span class=\"token keyword\">time</span> zone<span class=\"token punctuation\">)</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>pg_sleep让当前的会话进程休眠seconds 秒以后再执行。seconds是一个double precision 类型的值，所以可以指定带小数的秒数。pg_sleep_for是针对用 interval指定的较长休眠时间的函数。pg_sleep_until 则可以用来休眠到一个指定的时刻唤醒。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f542779\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> pg_sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> pg_sleep_for<span class=\"token punctuation\">(</span><span class=\"token string\">'5 minutes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> pg_sleep_until<span class=\"token punctuation\">(</span><span class=\"token string\">'tomorrow 03:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"枚举支持函数\">枚举支持函数 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%9e%9a%e4%b8%be%e6%94%af%e6%8c%81%e5%87%bd%e6%95%b0\"><i class=\"material-icons align-middle\">link</i></a></h2><p>对于枚举类型， 有一些函数允许更清洁的编码，而不需要为一个枚举类型硬写特定的值。它们被列在表 中。本例假定一个枚举类型被创建为：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"e666531\" tabindex=\"0\"><code class=\"language-none\">CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>表. 枚举支持函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>enum_first(anyenum)</td>\n<td>返回输入枚举类型的第一个值</td>\n<td>enum_first(null::rainbow)</td>\n<td>red</td>\n</tr>\n<tr>\n<td>enum_last(anyenum)</td>\n<td>返回输入枚举类型的最后一个值</td>\n<td>enum_last(null::rainbow)</td>\n<td>purple</td>\n</tr>\n<tr>\n<td>enum_range(anyenum)</td>\n<td>将输入枚举类型的所有值作为一个有序的数组返回</td>\n<td>enum_range(null::rainbow)</td>\n<td>{red,orange,yellow,green,blue,purple}</td>\n</tr>\n<tr>\n<td>enum_range(anyenum, anyenum)</td>\n<td>以一个数组返回在给定两个枚举值之间的范围。值必须来自相同的枚举类型。 如果第一个参数为空，其结果将从枚举类型的第一个值开始。如果第二参数为空，其结果将以枚举类型的最后一个值结束。</td>\n<td>enum_range(‘orange’::rainbow,  ‘green’::rainbow)</td>\n<td>{orange,yellow,green}</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>enum_range(NULL, ‘green’::rainbow)`</td>\n<td>{red,orange,yellow,green}</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>enum_range(‘orange’::rainbow, NULL)`</td>\n<td>{orange,yellow,green,blue,purple}</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>请注意，除了双参数形式的enum_range外， 这些函数忽略传递给它们的具体值，它们只关心声明的数据类型。 空值或类型的一个特定值可以通过，并得到相同的结果。这些函数更多地被用于一个表列或函数参数，而不是一个硬写的类型名，如例子中所建议。</p>\n<p>枚举样例如下：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"d5873a2\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">type</span> enum_clor <span class=\"token keyword\">as</span> <span class=\"token keyword\">enum</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> enum_first<span class=\"token punctuation\">(</span><span class=\"token string\">'black'</span>::enum_clor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>enum_first<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span>::enum_clor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span> enum_last<span class=\"token punctuation\">(</span><span class=\"token string\">'black'</span>::enum_clor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>enum_last<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span>::enum_clor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> enum_range<span class=\"token punctuation\">(</span><span class=\"token string\">'black'</span>::enum_clor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>enum_range<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span>::enum_clor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> enum_range<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">'white'</span>::enum_clor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> enum_range<span class=\"token punctuation\">(</span><span class=\"token string\">'black'</span>::enum_clor<span class=\"token punctuation\">,</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> enum_range<span class=\"token punctuation\">(</span><span class=\"token string\">'black'</span>::enum_clor<span class=\"token punctuation\">,</span><span class=\"token string\">'white'</span>::enum_clor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"几何函数和操作符\">几何函数和操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%87%a0%e4%bd%95%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>几何类型point、box、 lseg、line、path、 polygon和circle有一大堆本地支持函数和操作符，如下表中所示。</p>\n<p><strong>表</strong> <strong>.</strong> <strong>几何操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>平移</td>\n<td>select box ‘((0,0),(1,1))’ + point ‘(2.0,0)’;</td>\n</tr>\n<tr>\n<td>-</td>\n<td>平移</td>\n<td>select box ‘((0,0),(1,1))’ - point ‘(2.0,0)’;</td>\n</tr>\n<tr>\n<td>*</td>\n<td>缩放/旋转</td>\n<td>select box ‘((0,0),(1,1))’ * point ‘(2.0,0)’;</td>\n</tr>\n<tr>\n<td>/</td>\n<td>缩放/旋转</td>\n<td>select box ‘((0,0),(2,2))’ / point ‘(2.0,0)’;</td>\n</tr>\n<tr>\n<td>#</td>\n<td>相交的点或方框</td>\n<td>select box’((1,-1),(-1,1))’ #  box’((1,1),(-1,-1))’;</td>\n</tr>\n<tr>\n<td>#</td>\n<td>路径或多边形中的点数</td>\n<td>select # path ‘((1,0),(0,1),(-1,0))’;</td>\n</tr>\n<tr>\n<td>@-@</td>\n<td>长度或周长</td>\n<td>select @-@ path ‘((0,0),(1,0))’;</td>\n</tr>\n<tr>\n<td>@@</td>\n<td>中心</td>\n<td>select @@ circle ‘((0,0),10)’;</td>\n</tr>\n<tr>\n<td>##</td>\n<td>第二个操作数上最接近第一个操作数的点</td>\n<td>select point ‘(0,0)’ ## lseg ‘((2,0),(0,2))’;</td>\n</tr>\n<tr>\n<td>&lt;-&gt;</td>\n<td>距离</td>\n<td>select circle ‘((0,0),1)’ &lt;-&gt; circle  ‘((5,0),1)’;</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>是否重叠？（只要有一个公共点这就为真）</td>\n<td>select box ‘((0,0),(1,1))’ &amp;&amp; box  ‘((0,0),(2,2))’;</td>\n</tr>\n<tr>\n<td>«</td>\n<td>是否严格地在左侧？</td>\n<td>select circle ‘((0,0),1)’ « circle  ‘((5,0),1)’;</td>\n</tr>\n<tr>\n<td>»</td>\n<td>是否严格地在右侧？</td>\n<td>select circle ‘((5,0),1)’ » circle  ‘((0,0),1)’;</td>\n</tr>\n<tr>\n<td>&amp;&lt;</td>\n<td>没有延展到右边？</td>\n<td>select box ‘((0,0),(1,1))’ &amp;&lt; box  ‘((0,0),(2,2))’;</td>\n</tr>\n<tr>\n<td>&amp;&gt;</td>\n<td>没有延展到左边？</td>\n<td>select box ‘((0,0),(3,3))’ &amp;&gt; box  ‘((0,0),(2,2))’;</td>\n</tr>\n<tr>\n<td>«|</td>\n<td>严格在下？</td>\n<td>select box ‘((0,0),(3,3))’ «| box  ‘((3,4),(5,5))’;</td>\n</tr>\n<tr>\n<td>|»</td>\n<td>严格在上？</td>\n<td>select box ‘((3,4),(5,5))’ |» box  ‘((0,0),(3,3))’;</td>\n</tr>\n<tr>\n<td>&amp;&lt;|</td>\n<td>没有延展到上面？</td>\n<td>select box ‘((0,0),(1,1))’ &amp;&lt;| box  ‘((0,0),(2,2))’;</td>\n</tr>\n<tr>\n<td>|&amp;&gt;</td>\n<td>没有延展到下面？</td>\n<td>select box ‘((0,0),(3,3))’ |&amp;&gt; box  ‘((0,0),(2,2))’;</td>\n</tr>\n<tr>\n<td>&lt;^</td>\n<td>在下面（允许相切）？</td>\n<td>select circle ‘((0,0),1)’ &lt;^ circle  ‘((0,5),1)’;</td>\n</tr>\n<tr>\n<td>&gt;^</td>\n<td>在上面（允许相切）？</td>\n<td>select circle ‘((0,5),1)’ &gt;^ circle  ‘((0,0),1)’;</td>\n</tr>\n<tr>\n<td>?#</td>\n<td>相交？</td>\n<td>select lseg ‘((-1,0),(1,0))’ ?# box  ‘((-2,-2),(2,2))’;</td>\n</tr>\n<tr>\n<td>?-</td>\n<td>水平？</td>\n<td>select ?- lseg ‘((-1,0),(1,0))’;</td>\n</tr>\n<tr>\n<td>?-</td>\n<td>水平对齐？</td>\n<td>select point ‘(1,0)’ ?- point ‘(0,0)’;</td>\n</tr>\n<tr>\n<td>?|</td>\n<td>垂直？</td>\n<td>select ?| lseg ‘((-1,0),(1,0))’;</td>\n</tr>\n<tr>\n<td>?|</td>\n<td>垂直对齐？</td>\n<td>select point ‘(0,1)’ ?| point ‘(0,0)’;</td>\n</tr>\n<tr>\n<td>?-|</td>\n<td>相互垂直？</td>\n<td>select lseg ‘((0,0),(0,1))’ ?-| lseg  ‘((0,0),(1,0))’;</td>\n</tr>\n<tr>\n<td>?||</td>\n<td>平行？</td>\n<td>select lseg ‘((-1,0),(1,0))’ ?|| lseg  ‘((-1,2),(1,2))’;</td>\n</tr>\n<tr>\n<td>@&gt;</td>\n<td>包含？</td>\n<td>select circle ‘((0,0),2)’ @&gt; point ‘(1,1)’;</td>\n</tr>\n<tr>\n<td>&lt;@</td>\n<td>包含在内或在上？</td>\n<td>select point ‘(1,1)’ &lt;@ circle ‘((0,0),2)’;</td>\n</tr>\n<tr>\n<td>~=</td>\n<td>相同？</td>\n<td>select polygon ‘((0,0),(1,1))’ ~= polygon  ‘((1,1),(0,0))’;</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p><strong>表</strong> <strong>.</strong> <strong>几何函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>area(object)</td>\n<td>double precision</td>\n<td>面积</td>\n<td>select area(circle’((0,0),1)’) ;</td>\n</tr>\n<tr>\n<td>center(object)</td>\n<td>point</td>\n<td>中心</td>\n<td>select center(box ‘((0,0),(1,2))’) ;</td>\n</tr>\n<tr>\n<td>diameter(circle)</td>\n<td>double precision</td>\n<td>圆的直径</td>\n<td>select diameter(circle ‘((0,0),2.0)’) ;</td>\n</tr>\n<tr>\n<td>height(box)</td>\n<td>double precision</td>\n<td>方框的垂直尺寸</td>\n<td>select height(box ‘((0,0),(1,1))’) ;</td>\n</tr>\n<tr>\n<td>isclosed(path)</td>\n<td>boolean</td>\n<td>一个封闭路径？</td>\n<td>select isclosed(path ‘((0,0),(1,1),(2,0))’)  ;</td>\n</tr>\n<tr>\n<td>isopen(path)</td>\n<td>boolean</td>\n<td>一个开放路径？</td>\n<td>select isopen(path ‘[(0,0),(1,1),(2,0)]’)  ;</td>\n</tr>\n<tr>\n<td>length(object)</td>\n<td>double precision</td>\n<td>长度</td>\n<td>select length(path ‘((-1,0),(1,0))’) ;</td>\n</tr>\n<tr>\n<td>npoints(path)</td>\n<td>int</td>\n<td>点数</td>\n<td>select npoints(path ‘[(0,0),(1,1),(2,0)]’)  ;</td>\n</tr>\n<tr>\n<td>npoints(polygon)</td>\n<td>int</td>\n<td>点数</td>\n<td>select npoints(polygon ‘((1,1),(0,0))’) ;</td>\n</tr>\n<tr>\n<td>pclose(path)</td>\n<td>path</td>\n<td>将路径转换成封闭的</td>\n<td>select pclose(path ‘[(0,0),(1,1),(2,0)]’)  ;</td>\n</tr>\n<tr>\n<td>popen(path)</td>\n<td>path</td>\n<td>将路径转换成开放</td>\n<td>select popen(path ‘((0,0),(1,1),(2,0))’) ;</td>\n</tr>\n<tr>\n<td>radius(circle)</td>\n<td>double precision</td>\n<td>圆的半径</td>\n<td>select radius(circle ‘((0,0),2.0)’) ;</td>\n</tr>\n<tr>\n<td>width(box)</td>\n<td>double precision</td>\n<td>方框的水平尺寸</td>\n<td>select width(box ‘((0,0),(1,1))’) ;</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p><strong>表</strong> <strong>.</strong> <strong>几何类型转换函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>box(circle)</td>\n<td>box</td>\n<td>圆到方框</td>\n<td>select box(circle ‘((0,0),2.0)’);</td>\n</tr>\n<tr>\n<td>box(point)</td>\n<td>box</td>\n<td>点到空方框</td>\n<td>select box(point ‘(0,0)’) ;</td>\n</tr>\n<tr>\n<td>box(point, point)</td>\n<td>box</td>\n<td>点到方框</td>\n<td>select box(point ‘(0,0)’, point ‘(1,1)’) ;</td>\n</tr>\n<tr>\n<td>box(polygon)</td>\n<td>box</td>\n<td>多边形到方框</td>\n<td>select box(polygon ‘((0,0),(1,1),(2,0))’) ;</td>\n</tr>\n<tr>\n<td>bound_box(box, box)</td>\n<td>box</td>\n<td>方框到外包框</td>\n<td>select bound_box(box ‘((0,0),(1,1))’, box  ‘((3,3),(4,4))’) ;</td>\n</tr>\n<tr>\n<td>circle(box)</td>\n<td>circle</td>\n<td>方框到圆</td>\n<td>select circle(box ‘((0,0),(1,1))’) ;</td>\n</tr>\n<tr>\n<td>circle(point, double precision)</td>\n<td>circle</td>\n<td>中心和半径到圆</td>\n<td>select circle(point ‘(0,0)’, 2.0) ;</td>\n</tr>\n<tr>\n<td>circle(polygon)</td>\n<td>circle</td>\n<td>多边形到圆</td>\n<td>select circle(polygon ‘((0,0),(1,1),(2,0))’)  ;</td>\n</tr>\n<tr>\n<td>line(point, point)</td>\n<td>line</td>\n<td>点到线</td>\n<td>select line(point ‘(-1,0)’, point ‘(1,0)’) ;</td>\n</tr>\n<tr>\n<td>lseg(box)</td>\n<td>lseg</td>\n<td>方框对角线到线段</td>\n<td>select lseg(box ‘((-1,0),(1,0))’) ;</td>\n</tr>\n<tr>\n<td>lseg(point, point)</td>\n<td>lseg</td>\n<td>点到线段</td>\n<td>select lseg(point ‘(-1,0)’, point ‘(1,0)’) ;</td>\n</tr>\n<tr>\n<td>path(polygon)</td>\n<td>path</td>\n<td>多边形到路径</td>\n<td>select path(polygon ‘((0,0),(1,1),(2,0))’) ;</td>\n</tr>\n<tr>\n<td>point(double precision, double  precision)</td>\n<td>point</td>\n<td>构造点</td>\n<td>select point(23.4, -44.5) ;</td>\n</tr>\n<tr>\n<td>point(box)</td>\n<td>point</td>\n<td>方框的中心</td>\n<td>select point(box ‘((-1,0),(1,0))’) ;</td>\n</tr>\n<tr>\n<td>point(circle)</td>\n<td>point</td>\n<td>圆的中心</td>\n<td>select point(circle ‘((0,0),2.0)’) ;</td>\n</tr>\n<tr>\n<td>point(lseg)</td>\n<td>point</td>\n<td>线段的中心</td>\n<td>select point(lseg ‘((-1,0),(1,0))’) ;</td>\n</tr>\n<tr>\n<td>point(polygon)</td>\n<td>point</td>\n<td>多边形的中心</td>\n<td>select point(polygon ‘((0,0),(1,1),(2,0))’) ;</td>\n</tr>\n<tr>\n<td>polygon(box)</td>\n<td>polygon</td>\n<td>方框到4点多边形</td>\n<td>select polygon(box ‘((0,0),(1,1))’) ;</td>\n</tr>\n<tr>\n<td>polygon(circle)</td>\n<td>polygon</td>\n<td>圆到12点多边形</td>\n<td>select polygon(circle ‘((0,0),2.0)’) ;</td>\n</tr>\n<tr>\n<td>polygon(npts, circle)</td>\n<td>polygon</td>\n<td>点到npts点多边形</td>\n<td>select polygon(12, circle ‘((0,0),2.0)’) ;</td>\n</tr>\n<tr>\n<td>polygon(path)</td>\n<td>polygon</td>\n<td>路径到多边形</td>\n<td>select polygon(path ‘((0,0),(1,1),(2,0))’) ;</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>我们可以把一个point的两个组成数字当作具有索引 0 和 1 的数组访问。例如，如果t.p是一个point列，那么SELECT p[0] FROM t检索 X 座标而 UPDATE t SET p[1] = …改变 Y 座标。同样，box或者lseg类型的值可以当作两个point值的数组值看待。</p>\n<p>函数area可以用于类型box、circle和path。area函数操作path数据类型的时候， 只有在path的点没有交叉的情况下才可用。例如，path ‘((0,0),(0,1),(2,1),(2,2),(1,2),(1,0),(0,0))’::PATH是不行的， 而下面的视觉上相同的 path ‘((0,0),(0,1),(1,1),(1,2),(2,2),(2,1),(1,1),(1,0),(0,0))’::PATH就可以。 如果交叉和不交叉的path概念让你疑惑，那么把上面两个path都画在一张图纸上，你就明白了。</p>\n<h2 id=\"网络地址函数和操作符\">网络地址函数和操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%bd%91%e7%bb%9c%e5%9c%b0%e5%9d%80%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>展示了可以用于cidr和 inet类型的操作符。 操作符«、«=、 »、»=和 &amp;&amp;测试用于子网包含。它们只考虑两个地址的网络部分（忽略任何主机部分），然后判断其中一个网络部分是等于另外一个或者是另外一个的子网。</p>\n<p><strong>表.cidr和inet操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>select inet  ‘192.168.1.5’ &lt; inet ‘192.168.1.6’ ;</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>select inet  ‘192.168.1.5’ &lt;= inet ‘192.168.1.5’ ;</td>\n</tr>\n<tr>\n<td>=</td>\n<td>等于</td>\n<td>select inet  ‘192.168.1.5’ = inet ‘192.168.1.5’ ;</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>select inet ‘192.168.1.5’  &gt;= inet ‘192.168.1.5’ ;</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>select inet  ‘192.168.1.5’ &gt; inet ‘192.168.1.4’ ;</td>\n</tr>\n<tr>\n<td>&lt;&gt;</td>\n<td>不等于</td>\n<td>select inet  ‘192.168.1.5’ &lt;&gt; inet ‘192.168.1.4’ ;</td>\n</tr>\n<tr>\n<td>«</td>\n<td>被包含在内</td>\n<td>select inet  ‘192.168.1.5’ « inet ‘192.168.1/24’ ;</td>\n</tr>\n<tr>\n<td>«=</td>\n<td>被包含在内或等于</td>\n<td>select inet ‘192.168.1/24’  «= inet ‘192.168.1/24’ ;</td>\n</tr>\n<tr>\n<td>»</td>\n<td>包含</td>\n<td>select inet  ‘192.168.1/24’ » inet ‘192.168.1.5’ ;</td>\n</tr>\n<tr>\n<td>»=</td>\n<td>包含或等于</td>\n<td>select inet  ‘192.168.1/24’ »= inet ‘192.168.1/24’ ;</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>包含或者被包含contains or is contained by</td>\n<td>select inet  ‘192.168.1/24’ &amp;&amp; inet ‘192.168.1.80/28’ ;</td>\n</tr>\n<tr>\n<td>~</td>\n<td>按位 NOT</td>\n<td>select ~ inet  ‘192.168.1.6’ ;</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>按位 AND</td>\n<td>select inet  ‘192.168.1.6’ &amp; inet ‘0.0.0.255’ ;</td>\n</tr>\n<tr>\n<td>|</td>\n<td>按位 OR</td>\n<td>select inet  ‘192.168.1.6’ | inet ‘0.0.0.255’ ;</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>select inet  ‘192.168.1.6’ + 25 ;</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>select inet  ‘192.168.1.43’ - 36 ;</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>select inet ‘192.168.1.43’  - inet ‘192.168.1.19’ ;</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>展示了所有可以用于cidr和inet类型的函数。函数abbrev、host和text主要是为了提供可选的显示格式用的。</p>\n<p><strong>表</strong> <strong>. cidr和inet函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>返回类型</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>abbrev(inet)</td>\n<td>text</td>\n<td>缩写显示格式文本</td>\n<td>select abbrev(inet ‘10.1.0.0/16’);</td>\n<td>10.1.0.0/16</td>\n</tr>\n<tr>\n<td>abbrev(cidr)</td>\n<td>text</td>\n<td>缩写显示格式文本</td>\n<td>select abbrev(cidr ‘10.1.0.0/16’) ;</td>\n<td>10.1/16</td>\n</tr>\n<tr>\n<td>broadcast(inet)</td>\n<td>inet</td>\n<td>网络广播地址</td>\n<td>select broadcast(‘192.168.1.5/24’) ;</td>\n<td>192.168.1.255/24</td>\n</tr>\n<tr>\n<td>family(inet)</td>\n<td>int</td>\n<td>抽取地址族；4为 IPv4， 6为 IPv6</td>\n<td>select family(’::1’) ;</td>\n<td>6</td>\n</tr>\n<tr>\n<td>host(inet)</td>\n<td>text</td>\n<td>抽取 IP 地址为文本</td>\n<td>select host(‘192.168.1.5/24’) ;</td>\n<td>192.168.1.5</td>\n</tr>\n<tr>\n<td>hostmask(inet)</td>\n<td>inet</td>\n<td>为网络构造主机掩码</td>\n<td>select hostmask(‘192.168.23.20/30’) ;</td>\n<td>0.0.0.3</td>\n</tr>\n<tr>\n<td>masklen(inet)</td>\n<td>int</td>\n<td>抽取网络掩码长度</td>\n<td>select masklen(‘192.168.1.5/24’) ;</td>\n<td>24</td>\n</tr>\n<tr>\n<td>netmask(inet)</td>\n<td>inet</td>\n<td>为网络构造网络掩码</td>\n<td>select netmask(‘192.168.1.5/24’) ;</td>\n<td>255.255.255.0</td>\n</tr>\n<tr>\n<td>network(inet)</td>\n<td>cidr</td>\n<td>抽取地址的网络部分</td>\n<td>select network(‘192.168.1.5/24’) ;</td>\n<td>192.168.1.0/24</td>\n</tr>\n<tr>\n<td>set_masklen(inet, int)</td>\n<td>inet</td>\n<td>为inet值设置网络掩码长度</td>\n<td>select set_masklen(‘192.168.1.5/24’, 16) ;</td>\n<td>192.168.1.5/16</td>\n</tr>\n<tr>\n<td>set_masklen(cidr, int)</td>\n<td>cidr</td>\n<td>为cidr值设置网络掩码长度</td>\n<td>select set_masklen(‘192.168.1.0/24’::cidr, 16) ;</td>\n<td>192.168.0.0/16</td>\n</tr>\n<tr>\n<td>text(inet)</td>\n<td>text</td>\n<td>抽取 IP 地址和网络掩码长度为文本</td>\n<td>select text(inet ‘192.168.1.5’) ;</td>\n<td>192.168.1.5/32</td>\n</tr>\n<tr>\n<td>inet_same_family(inet, inet)</td>\n<td>boolean</td>\n<td>地址是来自于同一个家族吗？</td>\n<td>select inet_same_family(‘192.168.1.5/24’, ‘::1’) ;</td>\n<td>false</td>\n</tr>\n<tr>\n<td>inet_merge(inet, inet)</td>\n<td>cidr</td>\n<td>包括给定网络的最小网络</td>\n<td>select inet_merge(‘192.168.1.5/24’, ‘192.168.2.5/24’) ;</td>\n<td>192.168.0.0/22</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>任何cidr值都能够被隐式或显式地转换为inet值， 因此上述能够操作inet值的函数也同样能够操作cidr值（也有独立的用于inet和cidr的函数，因为它的行为应当和这两种情况不同）。inet值也可以转换为cidr值。完成时，该网络掩码右侧的任何位都将无声地转换为零以获得一个有效的cidr值。另外，你还可以使用常规的造型语法将一个文本字符串转换为inet或cidr值：例如，inet(expression)或colname::cidr。</p>\n<p>下表展示了可以用于macaddr类型的函数。 函数trunc(macaddr)返回一个 MAC 地址，该地址的最后三个字节设置为零。这样可以把剩下的前缀与一个制造商相关联。</p>\n<p><strong>表. macaddr函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>返回类型</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>trunc(macaddr)</td>\n<td>macaddr</td>\n<td>设置最后3个字节为零</td>\n<td><code>select trunc(macaddr  '12:34:56:78:90:ab');</code></td>\n<td><code> 12:34:56:00:00:00</code></td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>macaddr类型还支持标准关系操作符 （&gt;、&lt;=等） 用于编辑次序，并且按位算术操作符（~、&amp;和|）用于 NOT、AND 和 OR。</p>\n<p>表 中展示了可以用于macaddr8类型的函数。函数trunc(macaddr8)返回一个后五个字节设置为零的MAC地址。这可以被用来为一个制造商关联一个前缀。</p>\n<p><strong>表. macaddr8函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>返回类型</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>trunc(macaddr8)</td>\n<td>macaddr8</td>\n<td>设置最后五个字节为零</td>\n<td><code>select trunc(macaddr8 '12:34:56:78:90:ab:cd:ef');</code></td>\n<td><code>12:34:56:00:00:00:00:00</code></td>\n</tr>\n<tr>\n<td>macaddr8_set7bit(macaddr8)</td>\n<td>macaddr8</td>\n<td>设置第7位为一，也被称为修改版的EUI-64，用于内含在IPv6地址中</td>\n<td><code>select macaddr8_set7bit(macaddr8 '00:34:56:ab:cd:ef'); </code></td>\n<td><code>02:34:56:ff:fe:ab:cd:ef</code></td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>macaddr8类型也支持用于排序的标准关系操作符（&gt;、&lt;=等）以及用于NOT、AND和OR的位运算操作符（~、&amp;和|）。</p>\n<h2 id=\"文本搜索函数和操作符\">文本搜索函数和操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%96%87%e6%9c%ac%e6%90%9c%e7%b4%a2%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>结了为全文搜索提供的函数和操作符。</p>\n<p><strong>表.文本搜索操作符</strong></p>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th>操作符</th>\n<th>返回类型</th>\n<th>描述</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>||</td>\n<td>tsvector</td>\n<td>连接tsvector</td>\n<td>‘a:1 b:2’::tsvector  || ‘c:1 d:2 b:3’::tsvector</td>\n<td>‘a’:1 ‘b’:2,5 ‘c’:3 ’d’:4</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>tsquery</td>\n<td>将tsquery用 AND 连接起来</td>\n<td>‘fat | rat’::tsquery  &amp;&amp; ‘cat’::tsquery</td>\n<td>( ‘fat’ | ‘rat’ )  &amp; ‘cat’</td>\n</tr>\n<tr>\n<td>||</td>\n<td>tsquery</td>\n<td>将tsquery用 OR 连接起来</td>\n<td>‘fat | rat’::tsquery  || ‘cat’::tsquery</td>\n<td>( ‘fat’ | ‘rat’ ) |  ‘cat’</td>\n</tr>\n<tr>\n<td>!!</td>\n<td>tsquery</td>\n<td>对一个tsquery取反</td>\n<td>!! ‘cat’::tsquery</td>\n<td>!‘cat’</td>\n</tr>\n<tr>\n<td>@&gt;</td>\n<td>boolean</td>\n<td>tsquery包含另一个？</td>\n<td>‘cat’::tsquery @&gt;  ‘cat &amp; rat’::tsquery</td>\n<td>f</td>\n</tr>\n<tr>\n<td>&lt;@</td>\n<td>boolean</td>\n<td>tsquery被包含？</td>\n<td>‘cat’::tsquery &lt;@  ‘cat &amp; rat’::tsquery</td>\n<td>t</td>\n</tr>\n</tbody>\n</table>\n<p>除了显示在表中的操作符，还定义了tsvector和tsquery类型的普通B-tree比较操作符（=、&lt;等）。它们对于文本搜索不是很有用，但是允许使用。例如，建在这些类型列上的唯一索引。</p>\n<p><strong>表.文本搜索函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>array_to_tsvector(text[])</td>\n<td>tsvector</td>\n<td>把词位数组转换成tsvector</td>\n<td>array_to_tsvector(’{fat,cat,rat}’::text[])</td>\n<td>‘cat’ ‘fat’ ‘rat’</td>\n</tr>\n<tr>\n<td>length(tsvector)</td>\n<td>integer</td>\n<td>tsvector中的词位数</td>\n<td>length(‘fat:2,4 cat:3 rat:5A’::tsvector)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>numnode(tsquery)</td>\n<td>integer</td>\n<td>tsquery中词位外加操作符的数目</td>\n<td>numnode(’(fat &amp; rat) | cat’::tsquery)</td>\n<td>5</td>\n</tr>\n<tr>\n<td>querytree(query tsquery)</td>\n<td>text</td>\n<td>获得一个tsquery的可索引部分</td>\n<td>querytree(‘foo &amp; ! bar’::tsquery)</td>\n<td>‘foo’</td>\n</tr>\n<tr>\n<td>setweight(vector tsvector, weight “char”)</td>\n<td>tsvector</td>\n<td>为vector的每一个元素分配权重</td>\n<td>setweight(‘fat:2,4 cat:3 rat:5B’::tsvector, ‘A’)</td>\n<td>‘cat’:3A ‘fat’:2A,4A ‘rat’:5A</td>\n</tr>\n<tr>\n<td>setweight(vector tsvector, weight “char”, lexemes text[])</td>\n<td>tsvector</td>\n<td>为lexemes中列出的vector的元素分配权重</td>\n<td>setweight(‘fat:2,4 cat:3 rat:5B’::tsvector, ‘A’, ‘{cat,rat}’)</td>\n<td>‘cat’:3A ‘fat’:2,4 ‘rat’:5A</td>\n</tr>\n<tr>\n<td>strip(tsvector)</td>\n<td>tsvector</td>\n<td>从tsvector中移除位置和权重</td>\n<td>strip(‘fat:2,4 cat:3 rat:5A’::tsvector)</td>\n<td>‘cat’ ‘fat’ ‘rat’</td>\n</tr>\n<tr>\n<td>ts_delete(vector tsvector, lexeme text)</td>\n<td>tsvector</td>\n<td>从vector中移除给定的lexeme</td>\n<td>ts_delete(‘fat:2,4 cat:3 rat:5A’::tsvector, ‘fat’)</td>\n<td>‘cat’:3 ‘rat’:5A</td>\n</tr>\n<tr>\n<td>ts_delete(vector tsvector, lexemes text[])</td>\n<td>tsvector</td>\n<td>从vector中移除lexemes中词位的任何出现</td>\n<td>ts_delete(‘fat:2,4 cat:3 rat:5A’::tsvector, ARRAY[‘fat’,‘rat’])</td>\n<td>‘cat’:3</td>\n</tr>\n<tr>\n<td>ts_filter(vector tsvector, weights “char”[])</td>\n<td>tsvector</td>\n<td>从vector中只选择带有给定权重的元素</td>\n<td>ts_filter(‘fat:2,4 cat:3b rat:5A’::tsvector, ‘{a,b}’)</td>\n<td>‘cat’:3B ‘rat’:5A</td>\n</tr>\n<tr>\n<td>ts_rewrite(query tsquery, target tsquery, substitute tsquery)</td>\n<td>tsquery</td>\n<td>在查询内用substitute替换target</td>\n<td>ts_rewrite(‘a &amp; b’::tsquery, ‘a’::tsquery, ‘foo|bar’::tsquery)</td>\n<td>‘b’ &amp; ( ‘foo’ | ‘bar’ )</td>\n</tr>\n<tr>\n<td>tsvector_to_array(tsvector)</td>\n<td>text[]</td>\n<td>把tsvector转换为词位数组</td>\n<td>tsvector_to_array(‘fat:2,4 cat:3 rat:5A’::tsvector)</td>\n<td>{cat,fat,rat}</td>\n</tr>\n<tr>\n<td>unnest(tsvector, OUT lexeme text,  OUT positions smallint[], OUT weights text)</td>\n<td>setof record</td>\n<td>把一个 tsvector 扩展成一组行</td>\n<td>unnest(‘fat:2,4 cat:3 rat:5A’::tsvector)</td>\n<td>(cat,{3},{D}) …</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>表中的函数被单独列出，因为它们通常不被用于日常的文本搜索操作。 它们有助于开发和调试新的文本搜索配置。</p>\n<p><strong>表.文本搜索调试函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ts_parse(parser_name text, document text,  OUT tokid integer, OUT token text)</td>\n<td>setof record</td>\n<td>测试一个解析器</td>\n<td>ts_parse(‘default’, ‘foo - bar’)</td>\n<td>(1,foo) …</td>\n</tr>\n<tr>\n<td>ts_parse(parser_oid oid, document text,  OUT tokid integer, OUT token text)</td>\n<td>setof record</td>\n<td>测试一个解析器</td>\n<td>ts_parse(3722, ‘foo - bar’)</td>\n<td>(1,foo) …</td>\n</tr>\n<tr>\n<td>ts_token_type(parser_name text, OUT tokid integer,  OUT alias text, OUT description text)</td>\n<td>setof record</td>\n<td>获得解析器定义的记号类型</td>\n<td>ts_token_type(‘default’)</td>\n<td>(1,asciiword,“Word, all ASCII”) …</td>\n</tr>\n<tr>\n<td>ts_token_type(parser_oid oid, OUT tokid integer,  OUT alias text, OUT description text)</td>\n<td>setof record</td>\n<td>获得解析器定义的记号类型</td>\n<td>ts_token_type(3722)</td>\n<td>(1,asciiword,“Word, all ASCII”) …</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h2 id=\"json函数与操作符\">JSON函数与操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#json%e5%87%bd%e6%95%b0%e4%b8%8e%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>大多数运算符都是重载的，因此可以同时在json和jsonb值上使用它们。下表展示了可以用于两种 JSON 数据类型的操作符。</p>\n<p><strong>表</strong> json<strong>和</strong>jsonb <strong>操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>操作符</strong></th>\n<th><strong>右操作数类型</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>例子结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-&gt;</td>\n<td>int</td>\n<td>获得 JSON 数组元素（索引从 0 开始，负整数从末尾开始计）</td>\n<td>‘[{“a”:“foo”},{“b”:“bar”},{“c”:“baz”}]’::json-&gt;2</td>\n<td>{“c”:“baz”}</td>\n</tr>\n<tr>\n<td>-&gt;</td>\n<td>text</td>\n<td>通过键获得 JSON 对象域</td>\n<td>‘{“a”: {“b”:“foo”}}’::json-&gt;‘a’</td>\n<td>{“b”:“foo”}</td>\n</tr>\n<tr>\n<td>-»</td>\n<td>int</td>\n<td>以text形式获得 JSON 数组元素</td>\n<td>‘[1,2,3]’::json-»2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>-»</td>\n<td>text</td>\n<td>以text形式获得 JSON 对象域</td>\n<td>‘{“a”:1,“b”:2}’::json-»‘b’</td>\n<td>2</td>\n</tr>\n<tr>\n<td>#&gt;</td>\n<td>text[]</td>\n<td>获取在指定路径的 JSON 对象</td>\n<td>‘{“a”: {“b”:{“c”:  “foo”}}}’::json#&gt;’{a,b}’</td>\n<td>{“c”: “foo”}</td>\n</tr>\n<tr>\n<td>#»</td>\n<td>text[]</td>\n<td>以text形式获取在指定路径的 JSON 对象</td>\n<td>‘{“a”:[1,2,3],“b”:[4,5,6]}’::json#»’{a,2}’</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>注意：对json和jsonb类型，这些操作符都有其并行变体。 域/元素/路径抽取操作符返回与其左手输入（json或jsonb） 相同的类型，不过那些被指定为返回text的除外，它们的返回值会被强制 为文本。如果该 JSON 输入没有匹配请求的正确结构（例如那样的元素不存在），这些 域/元素/路径抽取操作符会返回 NULL 而不是失败。 接受整数 JSON 数组下标的 域/元素/路径抽取操作符都支持表示从数组末尾开始的负值下标形式。</p>\n<p><strong>表</strong> <strong>额外的jsonb操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>操作符</strong></th>\n<th><strong>右操作数类型</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@&gt;</td>\n<td>jsonb</td>\n<td>左边的 JSON 值是否在顶层包含右边的 JSON 路径/值项？</td>\n<td>‘{“a”:1, “b”:2}’::jsonb @&gt;  ‘{“b”:2}’::jsonb</td>\n</tr>\n<tr>\n<td>&lt;@</td>\n<td>jsonb</td>\n<td>左边的 JSON 路径/值项是否被包含在右边的 JSON 值的顶层？</td>\n<td>‘{“b”:2}’::jsonb &lt;@ ‘{“a”:1,  “b”:2}’::jsonb</td>\n</tr>\n<tr>\n<td>?</td>\n<td>text</td>\n<td>键/元素字符串是否存在于 JSON 值的顶层？</td>\n<td>‘{“a”:1, “b”:2}’::jsonb ? ‘b’</td>\n</tr>\n<tr>\n<td>?|</td>\n<td>text[]</td>\n<td>这些数组字符串中的任何一个是否做为顶层键存在？</td>\n<td>‘{“a”:1, “b”:2, “c”:3}’::jsonb ?|  array[‘b’, ‘c’]</td>\n</tr>\n<tr>\n<td>?&amp;</td>\n<td>text[]</td>\n<td>是否所有这些数组字符串都作为顶层键存在？</td>\n<td>‘[“a”, “b”]’::jsonb ?&amp; array[‘a’, ‘b’]</td>\n</tr>\n<tr>\n<td>||</td>\n<td>jsonb</td>\n<td>把两个jsonb值串接成一个新的jsonb值</td>\n<td>‘[“a”, “b”]’::jsonb || ‘[“c”,  “d”]’::jsonb</td>\n</tr>\n<tr>\n<td>-</td>\n<td>text</td>\n<td>从左操作数删除键/值对或者string 元素。键/值对基于它们的键值来匹配。</td>\n<td>‘{“a”: “b”}’::jsonb - ‘a’</td>\n</tr>\n<tr>\n<td>-</td>\n<td>text[]</td>\n<td>从左操作数中删除多个键/值对或者string元素。键/值对基于它们的键值来匹配。</td>\n<td>‘{“a”: “b”, “c”: “d”}’::jsonb -  ‘{a,c}’::text[]</td>\n</tr>\n<tr>\n<td>-</td>\n<td>integer</td>\n<td>删除具有指定索引（负值表示倒数）的数组元素。如果 顶层容器不是数组则抛出一个错误。</td>\n<td>‘[“a”, “b”]’::jsonb - 1</td>\n</tr>\n<tr>\n<td>#-</td>\n<td>text[]</td>\n<td>删除具有指定路径的域或者元素（对于 JSON 数组，负值 表示倒数）</td>\n<td>‘[“a”, {“b”:1}]’::jsonb #- ‘{1,b}’</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>注意：||操作符将其每一个操作数的顶层的元素串接起来。它不会递归操作。例如，如果两个操作数都是具有公共域名称的对象，结果中的域值将只是来自右手操作数的值。</p>\n<p>下表展示了可用于创建 json 和 jsonb值的函数（没有用于 jsonb的与row_to_json和 array_to_json等价的函数。不过，to_jsonb函数 提供了这些函数的很大一部分相同的功能）。</p>\n<p><strong>表. JSON创建函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>例子结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>to_json(anyelement)  to_jsonb(anyelement)</td>\n<td>把该值返回为json或者jsonb。数组和组合 会被（递归）转换成数组和对象；对于不是数组和组合的值，如果有 从该类型到json的造型，造型函数将被用来执行该 转换；否则将产生一个标量值。对于任何不是数字、布尔、空值的标 量类型，将使用文本表达，在这种风格下它是一个合法的 json或者jsonb值。</td>\n<td>to_json(‘Fred said “Hi.”’::text)</td>\n<td>“Fred said \"Hi.\"”</td>\n</tr>\n<tr>\n<td>row_to_json(record [, pretty_bool])</td>\n<td>把行作为一个 JSON 对象返回。如果pretty_bool为真，将在第1层元素之间增加换行。</td>\n<td>row_to_json(row(1,‘foo’))</td>\n<td>{“f1”:1,“f2”:“foo”}</td>\n</tr>\n<tr>\n<td>json_build_array(VARIADIC “any”)  jsonb_build_array(VARIADIC “any”)</td>\n<td>从一个可变参数列表构造一个可能包含异质类型的 JSON 数组。</td>\n<td>json_build_array(1,2,‘3’,4,5)</td>\n<td>[1, 2, “3”, 4, 5]</td>\n</tr>\n<tr>\n<td>json_build_object(VARIADIC “any”)  jsonb_build_object(VARIADIC “any”)</td>\n<td>从一个可变参数列表构造一个 JSON 对象。通过转换，该参数列表由交替 出现的键和值构成。</td>\n<td>json_build_object(‘foo’,1,‘bar’,2)</td>\n<td>{“foo”: 1, “bar”: 2}</td>\n</tr>\n<tr>\n<td>json_object(keys text[], values text[])  jsonb_object(keys text[], values text[])</td>\n<td>json_object的这种形式从两个独立的数组得到键/值对。在其 他方面和一个参数的形式相同。</td>\n<td>json_object(’{a, b}’, ‘{1,2}’)</td>\n<td>{“a”: “1”, “b”: “2”}</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>注意：array_to_json和row_to_json与to_json 具有相同的行为，不过它们提供了更好的打印选项。针对to_json所描述 的行为同样也适用于由其他 JSON 创建函数转换的每个值。</p>\n<p>下表展示了可用来处理json 和jsonb值的函数。</p>\n<p><strong>表. JSON处理</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>返回值</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>例子结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>json_array_length(json)  jsonb_array_length(jsonb)</td>\n<td>int</td>\n<td>返回最外层 JSON 数组中的元素数量。</td>\n<td>json_array_length(’[1,2,3,{“f1”:1,“f2”:[5,6]},4]')</td>\n<td>5</td>\n</tr>\n<tr>\n<td>json_each(json)  jsonb_each(jsonb)</td>\n<td>setof key text, value json  setof key text, value jsonb</td>\n<td>扩展最外层的 JSON 对象成为一组键/值对。</td>\n<td>select * from json_each(’{“a”:“foo”,  “b”:“bar”}')</td>\n<td>key | value  —–+——-   a  | “foo”   b  | “bar”</td>\n</tr>\n<tr>\n<td>json_each_text(json)  jsonb_each_text(jsonb)</td>\n<td>setof key text, value text</td>\n<td>扩展最外层的 JSON 对象成为一组键/值对。返回值将是text类型。</td>\n<td>select * from json_each_text(’{“a”:“foo”,  “b”:“bar”}')</td>\n<td>key | value  —–+——-   a  | foo   b  |  bar</td>\n</tr>\n<tr>\n<td>json_extract_path(from_json json, VARIADIC path_elems text[])  jsonb_extract_path(from_json jsonb, VARIADIC path_elems text[])</td>\n<td>json  jsonb</td>\n<td>返回由path_elems指向的 JSON 值（等效于#&gt;操作符）。</td>\n<td>json_extract_path(’{“f2”:{“f3”:1},“f4”:{“f5”:99,“f6”:“foo”}}’,‘f4’)</td>\n<td>{“f5”:99,“f6”:“foo”}</td>\n</tr>\n<tr>\n<td>json_extract_path_text(from_json json, VARIADIC path_elems text[])  jsonb_extract_path_text(from_json jsonb, VARIADIC path_elems text[])</td>\n<td>text</td>\n<td>以text返回由path_elems指向的 JSON 值（等效于#»操作符）。</td>\n<td>json_extract_path_text(’{“f2”:{“f3”:1},“f4”:{“f5”:99,“f6”:“foo”}}’,‘f4’,  ‘f6’)</td>\n<td>foo</td>\n</tr>\n<tr>\n<td>json_object_keys(json)  jsonb_object_keys(jsonb)</td>\n<td>setof text</td>\n<td>返回最外层 JSON 对象中的键集合。</td>\n<td>json_object_keys(’{“f1”:“abc”,“f2”:{“f3”:“a”,  “f4”:“b”}}’)</td>\n<td>json_object_keys  ——————   f1   f2</td>\n</tr>\n<tr>\n<td>json_populate_record(base anyelement, from_json json)  jsonb_populate_record(base anyelement, from_json jsonb)</td>\n<td>anyelement</td>\n<td>扩展from_json中的对象成一个行，它的列匹配由base定义的记录类型。</td>\n<td>select * from json_populate_record(null::myrowtype, ‘{“a”: 1, “b”:  [“2”, “a b”], “c”: {“d”: 4,  “e”: “a b c”}}’)</td>\n<td>a |  b     |   c  —+———–+————-   1 | {2,“a b”} |  (4,“a b c”)</td>\n</tr>\n<tr>\n<td>json_populate_recordset(base anyelement, from_json json)  jsonb_populate_recordset(base anyelement, from_json jsonb)</td>\n<td>setof anyelement</td>\n<td>扩展from_json中最外的对象数组为一个集合，该集合的列匹配由base定义的记录类型。</td>\n<td>select * from json_populate_recordset(null::myrowtype,  ‘[{“a”:1,“b”:2},{“a”:3,“b”:4}]’)</td>\n<td>a | b  —+—   1 | 2   3 | 4</td>\n</tr>\n<tr>\n<td>json_array_elements(json)  jsonb_array_elements(jsonb)</td>\n<td>setof json  setof jsonb</td>\n<td>把一个 JSON 数组扩展成一个 JSON 值的集合。</td>\n<td>select * from json_array_elements(’[1,true, [2,false]]')</td>\n<td>value  ———–   1   true   [2,false]</td>\n</tr>\n<tr>\n<td>json_array_elements_text(json)  jsonb_array_elements_text(jsonb)</td>\n<td>setof text</td>\n<td>把一个 JSON 数组扩展成一个text值集合。</td>\n<td>select * from json_array_elements_text(’[“foo”,  “bar”]')</td>\n<td>value  ———–   foo   bar</td>\n</tr>\n<tr>\n<td>json_typeof(json)  jsonb_typeof(jsonb)</td>\n<td>text</td>\n<td>把最外层的 JSON 值的类型作为一个文本字符串返回。可能的类型是： object、array、string、number、 boolean以及null。</td>\n<td>json_typeof(’-123.4')</td>\n<td>number</td>\n</tr>\n<tr>\n<td>json_to_record(json)  jsonb_to_record(jsonb)</td>\n<td>record</td>\n<td>从一个 JSON 对象（见下文的注解）构建一个任意的记录。正如所有返回record 的函数一样，调用者必须用一个AS子句显式地定义记录的结构。</td>\n<td>select * from  json_to_record(’{“a”:1,“b”:[1,2,3],“c”:[1,2,3],“e”:“bar”,“r”:  {“a”: 123, “b”: “a b c”}}’) as x(a int, b text,  c int[], d text, r myrowtype)</td>\n<td>a |  b    |  c  | d |     r  —+———+———+—+—————   1 | [1,2,3] | {1,2,3} |  | (123,“a b c”)</td>\n</tr>\n<tr>\n<td>json_to_recordset(json)  jsonb_to_recordset(jsonb)</td>\n<td>setof record</td>\n<td>从一个 JSON 对象数组构建一个任意的记录集合。正如所有返回record 的函数一样，调用者必须用一个AS子句显式地定义记录的结构。</td>\n<td>select * from  json_to_recordset(’[{“a”:1,“b”:“foo”},{“a”:“2”,“c”:“bar”}]’)  as x(a int, b text);</td>\n<td>a | b  —+—–   1 | foo   2 |</td>\n</tr>\n<tr>\n<td>json_strip_nulls(from_json json)  jsonb_strip_nulls(from_json jsonb)</td>\n<td>json  jsonb</td>\n<td>返回from_json，其中所有具有空值的 对象域都被省略。其他空值不动。</td>\n<td>json_strip_nulls(’[{“f1”:1,“f2”:null},2,null,3]')</td>\n<td>[{“f1”:1},2,null,3]</td>\n</tr>\n<tr>\n<td>jsonb_set(target jsonb, path text[], new_value  jsonb[, create_missing boolean])</td>\n<td>jsonb</td>\n<td>返回target，其中由 path指定的节用 new_value替换，如果 path指定的项不存在并且 create_missing为真则加上 new_value。正如面向路径的 操作符一样，出现在path中的 负整数表示从 JSON 数组的末尾开始数。</td>\n<td>jsonb_set(’[{“f1”:1,“f2”:null},2,null,3]’,  ‘{0,f1}’,’[2,3,4]’, false)  jsonb_set(’[{“f1”:1,“f2”:null},2]’,  ‘{0,f3}’,’[2,3,4]’)</td>\n<td>[{“f1”:[2,3,4],“f2”:null},2,null,3]  [{“f1”: 1, “f2”: null, “f3”: [2, 3, 4]},  2]</td>\n</tr>\n<tr>\n<td>jsonb_insert(target jsonb, path text[], new_value jsonb,  [insert_after boolean])</td>\n<td>jsonb</td>\n<td>返回被插入了new_value的target。如果path指定的target节在一个 JSONB 数组中，new_value将被插入到目标之前（insert_after为false，默认情况）或者之后（insert_after为真）。如果path指定的target节在一个 JSONB 对象内，则只有当target不存在时才插入new_value。对于面向路径的操作符来说，出现在path中的负整数表示从 JSON 数组的末尾开始计数。</td>\n<td>jsonb_insert(’{“a”: [0,1,2]}’, ‘{a, 1}’,  ‘“new_value”’)  jsonb_insert(’{“a”: [0,1,2]}’, ‘{a, 1}’,  ‘“new_value”’, true)</td>\n<td>{“a”: [0, “new_value”, 1, 2]}  {“a”: [0, 1, “new_value”, 2]}</td>\n</tr>\n<tr>\n<td>jsonb_pretty(from_json jsonb)</td>\n<td>text</td>\n<td>把from_json返回成一段 缩进后的 JSON 文本。</td>\n<td>jsonb_pretty(’[{“f1”:1,“f2”:null},2,null,3]’)</td>\n<td>[    {   “f1”: 1,   “f2”: null    },    2,    null,    3  ]</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"4e02be4\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">drop</span> <span class=\"token keyword\">type</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> json_test_columns<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">--根据json结构创建自定义类型</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">type</span> json_test_columns <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>b <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>c <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>d <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">--使用自定义类型输出</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> json_populate_record<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span>::json_test_columns<span class=\"token punctuation\">,</span><span class=\"token string\">'{\"a\":1,\"b\":2,\"c\":3,\"d\":4}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> json_populate_recordset<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span>::json_test_columns<span class=\"token punctuation\">,</span><span class=\"token string\">'[{\"a\":1,\"b\":2,\"c\":3,\"d\":4},{\"a\":2,\"b\":3,\"c\":4,\"d\":5}]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">--上面的压缩版本,目前还不支持,我个人觉得应该支持,</span>\n<span class=\"token comment\">-- select * from json_populate_recordset(null::json_test_columns,'[[1,2,3,4],[2,3,4,5]]');</span>\n<span class=\"token comment\">--变通方法</span>\n<span class=\"token keyword\">select</span> <span class=\"token keyword\">value</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">0</span> <span class=\"token keyword\">as</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">value</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">1</span> <span class=\"token keyword\">as</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">value</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">2</span> <span class=\"token keyword\">as</span> c<span class=\"token punctuation\">,</span><span class=\"token keyword\">value</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">3</span> <span class=\"token keyword\">as</span> c <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> jsonb_array_elements<span class=\"token punctuation\">(</span><span class=\"token string\">'[[1,2,3,4],[2,3,4,5]]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> tmp<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>注意:很多这些函数和操作符将把 JSON 字符串中的 Unicode 转义转换成合适的单一字符。如果 输入类型是jsonb，这就没有问题，因为该转换已经完成了。但是对于json 输入，这可能会导致抛出一个错误。</p>\n<p>注意:虽然函数json_populate_record、json_populate_recordset、json_to_record以及json_to_recordset的例子使用了常量，但常见的用法是引用FROM子句中的表并且使用其json或jsonb列之一作为函数的参数。然后抽取出的键值可以被查询的其他部分引用，例如WHERE子句和目标列表。以这种方式抽取多个值的性能比用以键为单位的操作符单个抽取它们的性能更好。</p>\n<p>JSON键被匹配到目标行类型中的相同列名。这些函数的JSON类型强制是一种“尽力而为”的方式并且对于某些类型可能得不到想要的值。不出现在目标行类型中的JSON字段将从输出中忽略，而且不匹配任何JSON字段的目标列将为NULL。</p>\n<p>注意:jsonb_set和jsonb_insert的path参数中除最后一项之外的所有项都必须存在于target中。如果create_missing为假，jsonb_set的path参数的所有项都必须存在。如果这些条件不满足，则返回的target不会被改变。</p>\n<p>如果最后的路径项是一个对象键，在它不存在且给定了新值的情况下会创建它。如果最后的路径项是一个数组索引，为正值则表示从左边开始计数，为负值表示从右边开始计数 - -1表示最右边的元素，以此类推。如果该项超过范围 -array_length .. array_length -1 并且 create_missing 为真，则该项为负时把新值加载数组的开始处，而该项为正时把新值加在数组的末尾处。</p>\n<p>注意:不要把json_typeof函数的null返回值与 SQL 的 NULL 弄混。 虽然调用json_typeof(’null’::json)将会返回null，但调用 json_typeof(NULL::json)将会返回一个 SQL 的 NULL。</p>\n<p>注意:如果json_strip_nulls的参数在任何对象中包含重复的域名称， 结果在语义上可能有所不同，具体取决于它们发生的顺序。这不是 jsonb_strip_nulls的一个问题，因为jsonb值 不能具有重复的对象域名称。</p>\n<h2 id=\"序列操作函数\">序列操作函数 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%ba%8f%e5%88%97%e6%93%8d%e4%bd%9c%e5%87%bd%e6%95%b0\"><i class=\"material-icons align-middle\">link</i></a></h2><p>本节描述用于操作序列对象的函数，序列对象也被称为序列生成器或者就是序列。序列对象都是用CREATE SEQUENCE创建的特殊的单行表。序列对象通常用于为表的行生成唯一的标识符。表中列出的这些序列函数，可以为我们从序列对象中获取连续的序列值提供了简单的、多用户安全的方法。</p>\n<p><strong>表</strong> <strong>.</strong> <strong>序列函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>currval(regclass)</td>\n<td>bigint</td>\n<td>返回最近一次用nextval获取的指定序列的值</td>\n</tr>\n<tr>\n<td>lastval()</td>\n<td>bigint</td>\n<td>返回最近一次用nextval获取的任何序列的值</td>\n</tr>\n<tr>\n<td>nextval(regclass)</td>\n<td>bigint</td>\n<td>递增序列并返回新值</td>\n</tr>\n<tr>\n<td>setval(regclass, bigint)</td>\n<td>bigint</td>\n<td>设置序列的当前值</td>\n</tr>\n<tr>\n<td>setval(regclass, bigint, boolean)</td>\n<td>bigint</td>\n<td>设置序列的当前值以及is_called标志</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p><strong>创建序列</strong></p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e655968\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> sequence <span class=\"token keyword\">public</span><span class=\"token punctuation\">.</span>test_sequece\nincrement <span class=\"token keyword\">by</span> <span class=\"token number\">1</span>\nminvalue <span class=\"token number\">10000000</span>\nmaxvalue <span class=\"token number\">9999999999</span>\n<span class=\"token keyword\">start</span> <span class=\"token keyword\">with</span> <span class=\"token number\">10000000</span>\ncache <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>查看序列结构</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"312a526\" tabindex=\"0\"><code class=\"language-none\">\\d test_sequece\n                     Sequence \"public.test_sequece\"\n  Type  |  Start   | Minimum  |  Maximum   | Increment | Cycles? | Cache\n--------+----------+----------+------------+-----------+---------+-------\n bigint | 10000000 | 10000000 | 9999999999 |         1 | no      |   100\n\nSELECT nextval('test_sequece');\n nextval\n----------\n 10000000\n(1 row)\n\nSELECT nextval('test_sequece');\n nextval\n----------\n 10000001\n(1 row)\nselect currval('test_sequece');\n currval\n----------\n 10000001\n(1 row)\n\nSELECT setval('test_sequece',  11000001);\n  setval\n----------\n 11000001\n(1 row)\n\nselect currval('test_sequece');\n currval\n----------\n 11000001\n(1 row)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>将要由序列函数调用操作的序列是用一个regclass参数声明的， 它只是序列在pg_class系统表里面的 OID。不过，你不需要手工查找 OID， 因为regclass数据类型的输入转换器会帮你做这件事情。 只要写出用单引号包围的序列名字即可，因此它看上去像文本常量。为了和普通SQL名字处理兼容，这个字串将转换成小写形式， 除非在序列名字周围包含双引号。因此：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"e7acfd9\" tabindex=\"0\"><code class=\"language-sql\">nextval<span class=\"token punctuation\">(</span><span class=\"token string\">'test_sequece'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      操作序列test_sequece\nnextval<span class=\"token punctuation\">(</span><span class=\"token string\">' test_sequece '</span><span class=\"token punctuation\">)</span>      操作序列test_sequece\nnextval<span class=\"token punctuation\">(</span><span class=\"token string\">' test_Sequece \"'</span><span class=\"token punctuation\">)</span>    操作序列test_sequece</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>必要时序列名可以用模式限定∶</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"f078ffd\" tabindex=\"0\"><code class=\"language-sql\">nextval<span class=\"token punctuation\">(</span><span class=\"token string\">' public.test_sequece '</span><span class=\"token punctuation\">)</span>     操作myschema<span class=\"token punctuation\">.</span>foo\nnextval<span class=\"token punctuation\">(</span><span class=\"token string\">'\"public\". test_sequece '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>   同上\nnextval<span class=\"token punctuation\">(</span><span class=\"token string\">' test_sequece '</span><span class=\"token punctuation\">)</span>              在搜索路径中查找foo\nnextval<span class=\"token punctuation\">(</span><span class=\"token string\">' test_sequece '</span>::<span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span>      foo在运行时查找\n查看数据库中有哪些序列\n<span class=\"token comment\">--r =普通表， i =索引，S =序列，v =视图，m =物化视图， c =复合类型，t = TOAST表，f =外部表</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>  <span class=\"token keyword\">from</span> pg_class <span class=\"token keyword\">where</span> relkind<span class=\"token operator\">=</span><span class=\"token string\">'S'</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>可用的序列函数有∶</p>\n<p><strong>nextval</strong></p>\n<p>递增序列对象到它的下一个值并且返回该值。这个动作是自动完成的： 即使多个会话并发执行nextval，每个进程也会安全地收到一个唯一的序列值。</p>\n<p>如果一个序列对象是用默认参数创建的，连续的nextval调用将会返回从 1 开始的连续的值。其他的行为可以通过在CREATE SEQUENCE命令中使用特殊参数来获得；详见该命令的参考页。</p>\n<p>重要</p>\n<p>为了避免阻塞从同一个序列获取序号的并发事务，nextval操作从来不会被回滚。也就是说，一旦一个值被取出就视同被用掉并且不会被再次返回给调用者，即便调用该操作的外层事务后来中止或者调用查询后来没有使用取得的值也是这样。例如一个带有ON CONFLICT子句的INSERT会计算要被插入的元组，其中可能就包括调用nextval，然后才会检测到导致它转向ON CONFLICT规则的冲突。这种情况就会在已分配值的序列中留下未被使用的“空洞”。因此，序列对象不能被用来得到“无间隙”的序列。</p>\n<p>这个函数要求序列上的USAGE或者UPDATE特权。</p>\n<p><strong>currval</strong></p>\n<p>在当前会话中返回最近一次nextval取到的该序列的值（如果在本会话中从未在该序列上调用过nextval，那么会报告一个错误）。请注意因为此函数返回一个会话本地的值，不论其它会话是否在当前会话之后执行过nextval，它都能给出一个可预测的回答。</p>\n<p>这个函数要求序列上的USAGE或者SELECT特权。</p>\n<p><strong>lastval</strong></p>\n<p>返回当前会话里最近一次nextval返回的值。 这个函数等效于currval，只是它不用序列名作为参数， 它会引用当前会话里面最近一次被应用的序列的nextval。如果当前会话还没有调用过nextval，那么调用lastval会报错。</p>\n<p>这个函数要求上一次使用的序列上的USAGE或者SELECT特权。</p>\n<p><strong>setval</strong></p>\n<p>重置序列对象的计数器值。双参数的形式设置序列的last_value域为指定值并且将其is_called域设置为 true，表示下一次nextval将在返回值之前递增该序列。currval报告的值也被设置为指定的值。在三参数形式里，is_called可以设置为true或false。true具有和双参数形式相同的效果。如果你把它设置为false，那么下一次nextval将返回指定的值，而从随后的nextval才开始递增该序列。此外，在这种情况中currval报告的值不会被改变。 例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"37cf0e3\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> setval<span class=\"token punctuation\">(</span><span class=\"token string\">' test_sequece '</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           下一次nextval会返回 <span class=\"token number\">43</span>\n<span class=\"token keyword\">SELECT</span> setval<span class=\"token punctuation\">(</span><span class=\"token string\">' test_sequece '</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000001</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     同上\n<span class=\"token keyword\">SELECT</span> setval<span class=\"token punctuation\">(</span><span class=\"token string\">' test_sequece '</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000001</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    下一次nextval将返回 <span class=\"token number\">42</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>setval返回的结果就是它的第二个参数的值。</p>\n<h2 id=\"条件表达式\">条件表达式 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%9d%a1%e4%bb%b6%e8%a1%a8%e8%be%be%e5%bc%8f\"><i class=\"material-icons align-middle\">link</i></a></h2><p>本节描述在MemFireDB中可用的SQL兼容的条件表达式。</p>\n<h3 id=\"case\">CASE <a aria-hidden=\"true\" class=\"anchor\" href=\"#case\"><i class=\"material-icons align-middle\">link</i></a></h3><p>SQL CASE表达式是一种通用的条件表达式，类似于其它编程语言中的 if/else 语句：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9d1b29a\" tabindex=\"0\"><code class=\"language-none\">CASE WHEN condition THEN result\n     [WHEN ...]\n     [ELSE result]\nEND</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>CASE子句可以用于任何表达式可以出现的地方。每一个condition是一个返回boolean结果的表达式。如果结果为真，那么CASE表达式的结果就是符合条件的result，并且剩下的CASE表达式不会被处理。如果条件的结果不为真，那么以相同方式搜寻任何随后的WHEN子句。如果没有WHEN condition为真，那么CASE表达式的值就是在ELSE子句里的result。如果省略了ELSE子句而且没有条件为真，结果为空。</p>\n<p>例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"14fb1c9\" tabindex=\"0\"><code class=\"language-none\">create table test (a integer);\ninsert into table test values(1),(2),(3);\nSELECT * FROM test;\n\n a\n---\n 1\n 2\n 3\n\n\nSELECT a,\n       CASE WHEN a=1 THEN 'one'\n            WHEN a=2 THEN 'two'\n            ELSE 'other'\n       END\n    FROM test;\n\n a | case\n---+-------\n 1 | one\n 2 | two\n 3 | other</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>所有result表达式的数据类型都必须可以转换成单一的输出类型。</p>\n<p>下面这个“简单”形式的CASE表达式是上述通用形式的一个变种：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"9f9adea\" tabindex=\"0\"><code class=\"language-none\">CASE expression\n    WHEN value THEN result\n    [WHEN ...]\n    [ELSE result]\nEND</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>第一个expression会被计算，然后与所有在WHEN子句中的每一个value对比，直到找到一个相等的。如果没有找到匹配的，则返回在ELSE子句中的result（或者控制）。 这类似于 C 里的switch语句。</p>\n<p>上面的例子可以用简单CASE语法来写：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"bc92dcd\" tabindex=\"0\"><code class=\"language-none\">SELECT a,\n       CASE a WHEN 1 THEN 'one'\n              WHEN 2 THEN 'two'\n              ELSE 'other'\n       END\n    FROM test;\n\n a | case\n---+-------\n 1 | one\n 2 | two\n 3 | other</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>CASE表达式并不计算任何无助于判断结果的子表达式。例如，下面是一个可以避免被零除错误的方法：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1f75b72\" tabindex=\"0\"><code class=\"language-none\">SELECT ... WHERE CASE WHEN x &lt;&gt; 0 THEN y/x &gt; 1.5 ELSE false END;</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"coalesce\">COALESCE <a aria-hidden=\"true\" class=\"anchor\" href=\"#coalesce\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"0edb79e\" tabindex=\"0\"><code class=\"language-none\">COALESCE(value [, ...])</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>COALESCE函数返回它的第一个非空参数的值。当且仅当所有参数都为空时才会返回空。它常用于在为显示目的检索数据时用缺省值替换空值。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"342b025\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">COALESCE</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">,</span> short_description<span class=\"token punctuation\">,</span> <span class=\"token string\">'(none)'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>如果description不为空，这将会返回它的值，否则如果short_description非空则返回short_description的值，如果前两个都为空则返回(none)。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"2465b37\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">COALESCE</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>::<span class=\"token keyword\">varchar</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>和CASE表达式一样，COALESCE将不会计算无助于判断结果的参数；也就是说，在第一个非空参数右边的参数不会被计算。这个 SQL 标准函数提供了类似于NVL和IFNULL的能力，它们被用在某些其他数据库系统中。</p>\n<h3 id=\"nullif\">NULLIF <a aria-hidden=\"true\" class=\"anchor\" href=\"#nullif\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"f73a64c\" tabindex=\"0\"><code class=\"language-none\">NULLIF(value1, value2)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>当value1和value2相等时，NULLIF返回一个空值。 否则它返回value1。 这些可以用于执行前文给出的COALESCE例子的逆操作：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"df8c931\" tabindex=\"0\"><code class=\"language-none\">SELECT NULLIF(value, '(none)') ...</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>在这个例子中，如果value是(none)，将返回空值，否则返回value的值。</p>\n<h3 id=\"greatest和least\">GREATEST和LEAST <a aria-hidden=\"true\" class=\"anchor\" href=\"#greatest%e5%92%8cleast\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"dabac65\" tabindex=\"0\"><code class=\"language-none\">GREATEST(value [, ...])\nLEAST(value [, ...])</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>GREATEST和LEAST函数从一个任意的数字表达式列表里选取最大或者最小的数值。 这些表达式必须都可以转换成一个普通的数据类型，它将会是结果类型。列表中的 NULL 数值将被忽略。只有所有表达式的结果都是 NULL 的时候，结果才会是 NULL。</p>\n<p>请注意GREATEST和LEAST都不是 SQL 标准，但却是很常见的扩展。某些其他数据库让它们在任何参数为 NULL 时返回 NULL，而不是在所有参数都为 NULL 时才返回 NULL。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"0f54f78\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> biztable\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> biztable <span class=\"token punctuation\">(</span>\n           id <span class=\"token keyword\">int</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>\n           time1 <span class=\"token keyword\">TIMESTAMP</span><span class=\"token punctuation\">,</span>\n           time2 <span class=\"token keyword\">TIMESTAMP</span><span class=\"token punctuation\">,</span>\n    time3 <span class=\"token keyword\">TIMESTAMP</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> biztable<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span>            biztable <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2018-05-20 22:52'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2019-05-20 22:54'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2019-05-20 23:52'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>GREATEST<span class=\"token punctuation\">(</span>time1<span class=\"token punctuation\">,</span>time2<span class=\"token punctuation\">,</span>time3<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> maxval<span class=\"token punctuation\">,</span> LEAST<span class=\"token punctuation\">(</span>time1<span class=\"token punctuation\">,</span>time2<span class=\"token punctuation\">,</span>time3<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> minval\n<span class=\"token keyword\">from</span> biztable<span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"数组函数与操作符\">数组函数与操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e6%95%b0%e7%bb%84%e5%87%bd%e6%95%b0%e4%b8%8e%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>显示了可以用于数组类型的操作符。</p>\n<p><strong>表.数组操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>等于</td>\n<td>ARRAY[1.1,2.1,3.1]::int[] = ARRAY[1,2,3]</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&lt;&gt;</td>\n<td>不等于</td>\n<td>ARRAY[1,2,3] &lt;&gt; ARRAY[1,2,4]</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>ARRAY[1,2,3] &lt; ARRAY[1,2,4]</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>ARRAY[1,4,3] &gt; ARRAY[1,2,4]</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>ARRAY[1,2,3] &lt;= ARRAY[1,2,3]</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>ARRAY[1,4,3] &gt;= ARRAY[1,4,3]</td>\n<td>t</td>\n</tr>\n<tr>\n<td>@&gt;</td>\n<td>包含</td>\n<td>ARRAY[1,4,3] @&gt; ARRAY[3,1]</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&lt;@</td>\n<td>被包含</td>\n<td>ARRAY[2,7] &lt;@ ARRAY[1,7,4,2,6]</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>重叠（具有公共元素）</td>\n<td>ARRAY[1,4,3] &amp;&amp; ARRAY[2,1]</td>\n<td>t</td>\n</tr>\n<tr>\n<td>||</td>\n<td>数组和数组串接</td>\n<td>ARRAY[1,2,3] || ARRAY[4,5,6]</td>\n<td>{1,2,3,4,5,6}</td>\n</tr>\n<tr>\n<td>||</td>\n<td>元素到数组串接</td>\n<td>3 || ARRAY[4,5,6]</td>\n<td>{3,4,5,6}</td>\n</tr>\n<tr>\n<td>||</td>\n<td>数组到元素串接</td>\n<td>ARRAY[4,5,6] || 7</td>\n<td>{4,5,6,7}</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p><strong>表.数组函数</strong></p>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>返回类型</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>array_append(anyarray, anyelement)</td>\n<td>anyarray</td>\n<td>向一个数组的末端追加一个元素</td>\n<td>array_append(ARRAY[1,2],  3)</td>\n<td>{1,2,3}</td>\n</tr>\n<tr>\n<td>array_cat(anyarray, anyarray)</td>\n<td>anyarray</td>\n<td>连接两个数组</td>\n<td>array_cat(ARRAY[1,2,3],  ARRAY[4,5])</td>\n<td>{1,2,3,4,5}</td>\n</tr>\n<tr>\n<td>array_ndims(anyarray)</td>\n<td>int</td>\n<td>返回数组的维度数</td>\n<td>array_ndims(ARRAY[[1,2,3],  [4,5,6]])</td>\n<td>2</td>\n</tr>\n<tr>\n<td>array_dims(anyarray)</td>\n<td>text</td>\n<td>返回数组的维度的文本表示</td>\n<td>array_dims(ARRAY[[1,2,3],  [4,5,6]])</td>\n<td>[1:2][1:3]</td>\n</tr>\n<tr>\n<td>array_fill(anyelement, int[],  [, int[]])</td>\n<td>anyarray</td>\n<td>返回一个用提供的值和维度初始化好的数组，可以选择下界不为  1</td>\n<td>array_fill(7,  ARRAY[3], ARRAY[2])</td>\n<td>[2:4]={7,7,7}</td>\n</tr>\n<tr>\n<td>array_length(anyarray, int)</td>\n<td>int</td>\n<td>返回被请求的数组维度的长度</td>\n<td>array_length(array[1,2,3],  1)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>array_lower(anyarray, int)</td>\n<td>int</td>\n<td>返回被请求的数组维度的下界</td>\n<td>array_lower(’[0:2]={1,2,3}’::int[],  1)</td>\n<td>0</td>\n</tr>\n<tr>\n<td>array_position(anyarray, anyelement [, int])</td>\n<td>int</td>\n<td>返回在该数组中从第三个参数指定的元素开始或者 第一个元素开始（数组必须是一维的）、第二个参数的 第一次出现的下标</td>\n<td>array_position(ARRAY[‘sun’,‘mon’,’tue’,‘wed’,’thu’,‘fri’,‘sat’],  ‘mon’)</td>\n<td>2</td>\n</tr>\n<tr>\n<td>array_positions(anyarray, anyelement)</td>\n<td>int[]</td>\n<td>返回在第一个参数给定的数组（数组必须是一维的）中， 第二个参数所有出现位置的下标组成的数组</td>\n<td>array_positions(ARRAY[‘A’,‘A’,‘B’,‘A’], ‘A’)</td>\n<td>{1,2,4}</td>\n</tr>\n<tr>\n<td>array_prepend(anyelement, anyarray)</td>\n<td>anyarray</td>\n<td>向一个数组的首部追加一个元素</td>\n<td>array_prepend(1, ARRAY[2,3])</td>\n<td>{1,2,3}</td>\n</tr>\n<tr>\n<td>array_remove(anyarray, anyelement)</td>\n<td>anyarray</td>\n<td>从数组中移除所有等于给定值的所有元素（数组必须是一维的）</td>\n<td>array_remove(ARRAY[1,2,3,2], 2)</td>\n<td>{1,3}</td>\n</tr>\n<tr>\n<td>array_replace(anyarray, anyelement, anyelement)</td>\n<td>anyarray</td>\n<td>将每一个等于给定值的数组元素替换成一个新值</td>\n<td>array_replace(ARRAY[1,2,5,4], 5, 3)</td>\n<td>{1,2,3,4}</td>\n</tr>\n<tr>\n<td>array_to_string(anyarray, text [, text])</td>\n<td>text</td>\n<td>使用提供的定界符和可选的空串连接数组元素</td>\n<td>array_to_string(ARRAY[1,  2, 3, NULL, 5], ‘,’, ‘*’)</td>\n<td>1,2,3,*,5</td>\n</tr>\n<tr>\n<td>array_upper(anyarray, int)</td>\n<td>int</td>\n<td>返回被请求的数组维度的上界</td>\n<td>array_upper(ARRAY[1,8,3,7],  1)</td>\n<td>4</td>\n</tr>\n<tr>\n<td>cardinality(anyarray)</td>\n<td>int</td>\n<td>返回数组中元素的总数，如果数组为空则返回  0</td>\n<td>cardinality(ARRAY[[1,2],[3,4]])</td>\n<td>4</td>\n</tr>\n<tr>\n<td>string_to_array(text, text [, text])</td>\n<td>text[]</td>\n<td>使用提供的定界符和可选的空串将字符串划分成数组元素</td>\n<td>string_to_array(‘xx~^~yy~^~zz’,  ‘~^~’, ‘yy’)</td>\n<td>{xx,NULL,zz}</td>\n</tr>\n<tr>\n<td>unnest(anyarray)</td>\n<td>setof anyelement</td>\n<td>将一个数组扩展成一组行</td>\n<td>unnest(ARRAY[1,2])</td>\n<td>1  2  (2 rows)</td>\n</tr>\n<tr>\n<td>unnest(anyarray, anyarray [,  …])</td>\n<td>setof anyelement,  anyelement [, …]</td>\n<td>把多维数组（可能是不同类型）扩展成一个行的集合。 这只允许用在  FROM 子句中</td>\n<td>SELECT * from  unnest(ARRAY[1,2],ARRAY[‘foo’,‘bar’,‘baz’]);</td>\n<td>1  foo  2    bar  NULL baz    (3 rows)</td>\n</tr>\n</tbody>\n</table>\n<p>在array_position和array_positions中， 每一个数组元素都使用IS NOT DISTINCT FROM 语义与要搜索的值比较。</p>\n<p>在array_position中，如果值没有找到则返回 NULL。</p>\n<p>在array_positions中，只有当数组为 NULL时才返回NULL，如果该值 没有在该数组中找到则返回一个空数组。</p>\n<p>在string_to_array中，如果定界符参数为 NULL，输入字符串中的每一个字符将变成结果数组中的一个独立元素。如果定界符是一个空串，则整个输入字符串被作为一个单一元素的数组返回。否则输入字符串会被在每一个出现定界符字符串的位置分裂。</p>\n<p>在string_to_array中，如果空值串参数被忽略或者为 NULL，输入中的子串不会被替换成 NULL。在array_to_string中，如果空值串参数被忽略或者为 NULL，该数组中的任何空值元素会被简单地跳过并且不会在输出串中被表示。</p>\n<h2 id=\"范围函数和操作符\">范围函数和操作符 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%8c%83%e5%9b%b4%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6\"><i class=\"material-icons align-middle\">link</i></a></h2><p>下表 展示了范围类型可用的操作符。</p>\n<p><strong>表.范围操作符</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>操作符</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>等于</td>\n<td>int4range(1,5) = ‘[1,4]’::int4range</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&lt;&gt;</td>\n<td>不等于</td>\n<td>numrange(1.1,2.2) &lt;&gt; numrange(1.1,2.3)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>int4range(1,10) &lt; int4range(2,3)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>int4range(1,10) &gt; int4range(1,5)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>numrange(1.1,2.2) &lt;= numrange(1.1,2.2)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>numrange(1.1,2.2) &gt;= numrange(1.1,2.0)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>@&gt;</td>\n<td>包含范围</td>\n<td>int4range(2,4) @&gt; int4range(2,3)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>@&gt;</td>\n<td>包含元素</td>\n<td>‘[2011-01-01,2011-03-01)’::tsrange @&gt;  ‘2011-01-10’::timestamp</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&lt;@</td>\n<td>范围被包含</td>\n<td>int4range(2,4) &lt;@ int4range(1,7)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&lt;@</td>\n<td>元素被包含</td>\n<td>42 &lt;@ int4range(1,7)</td>\n<td>f</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>重叠（有公共点）</td>\n<td>int8range(3,7) &amp;&amp; int8range(4,12)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>«</td>\n<td>严格左部</td>\n<td>int8range(1,10) « int8range(100,110)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>»</td>\n<td>严格右部</td>\n<td>int8range(50,60) » int8range(20,30)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&amp;&lt;</td>\n<td>不超过右部</td>\n<td>int8range(1,20) &amp;&lt; int8range(18,20)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>&amp;&gt;</td>\n<td>不超过左部</td>\n<td>int8range(7,20) &amp;&gt; int8range(5,10)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>-|-</td>\n<td>相邻</td>\n<td>numrange(1.1,2.2) -|- numrange(2.2,3.3)</td>\n<td>t</td>\n</tr>\n<tr>\n<td>+</td>\n<td>并</td>\n<td>numrange(5,15) + numrange(10,20)</td>\n<td>[5,20)</td>\n</tr>\n<tr>\n<td>*</td>\n<td>交</td>\n<td>int8range(5,15) * int8range(10,20)</td>\n<td>[10,15)</td>\n</tr>\n<tr>\n<td>-</td>\n<td>差</td>\n<td>int8range(5,15) -  int8range(10,20)</td>\n<td>[5,10)</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>简单比较操作符&lt;、 &gt;、&lt;=和 &gt;=首先比较下界，并且只有在下界相等时才比较上界。这些比较通常对范围不怎么有用，但是还是提供它们以便能够在范围上构建 B树索引。</p>\n<p>当涉及一个空范围时，左部/右部/相邻操作符总是返回假；即一个空范围被认为不在任何其他范围前面或者后面。</p>\n<p>如果结果范围可能需要包含两个分离的子范围，并和差操作符将会失败，因为这样的范围无法被表示。</p>\n<p>下表显示可用于范围类型的函数。</p>\n<p><strong>表. 范围函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>返回类型</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>例子</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lower(anyrange)</td>\n<td>范围的元素类型</td>\n<td>范围的下界</td>\n<td>lower(numrange(1.1,2.2))</td>\n<td>1.1</td>\n</tr>\n<tr>\n<td>upper(anyrange)</td>\n<td>范围的元素类型</td>\n<td>范围的上界</td>\n<td>upper(numrange(1.1,2.2))</td>\n<td>2.2</td>\n</tr>\n<tr>\n<td>isempty(anyrange)</td>\n<td>boolean</td>\n<td>范围为空？</td>\n<td>isempty(numrange(1.1,2.2))</td>\n<td>false</td>\n</tr>\n<tr>\n<td>lower_inc(anyrange)</td>\n<td>boolean</td>\n<td>下界包含在内？</td>\n<td>lower_inc(numrange(1.1,2.2))</td>\n<td>true</td>\n</tr>\n<tr>\n<td>upper_inc(anyrange)</td>\n<td>boolean</td>\n<td>上界包含在内？</td>\n<td>upper_inc(numrange(1.1,2.2))</td>\n<td>false</td>\n</tr>\n<tr>\n<td>lower_inf(anyrange)</td>\n<td>boolean</td>\n<td>下界无限？</td>\n<td>lower_inf(’(,)’::daterange)</td>\n<td>true</td>\n</tr>\n<tr>\n<td>upper_inf(anyrange)</td>\n<td>boolean</td>\n<td>上界无限？</td>\n<td>upper_inf(’(,)’::daterange)</td>\n<td>true</td>\n</tr>\n<tr>\n<td>range_merge(anyrange, anyrange)</td>\n<td>anyrange</td>\n<td>包含两个给定范围的最小范围</td>\n<td>range_merge(’[1,2)’::int4range,  ‘[3,4)’::int4range)</td>\n<td>[1,4)</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>如果范围为空或者被请求的界是无限的，lower和upper函数返回空值。函数lower_inc、upper_inc、lower_inf和upper_inf对一个空范围全部返回假。</p>\n<h2 id=\"聚集函数\">聚集函数 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%81%9a%e9%9b%86%e5%87%bd%e6%95%b0\"><i class=\"material-icons align-middle\">link</i></a></h2><p>聚集函数从一个输入值的集合计算出一个单一值；</p>\n<p>聚合函数分为四类：</p>\n<p>·   通用聚集函数</p>\n<p>·   统计聚集函数</p>\n<p>·   有序集聚集函数</p>\n<p>·   假象集聚集函数</p>\n<p><strong>通用聚集函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>参数类型</strong></th>\n<th><strong>返回类型</strong></th>\n<th><strong>部分模式</strong></th>\n<th><strong>描述</strong></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>array_agg(expression)</td>\n<td>任何非数组类型</td>\n<td>参数类型的数组</td>\n<td>No</td>\n<td>输入值（包括空）被连接到一个数组</td>\n<td></td>\n</tr>\n<tr>\n<td>array_agg(expression)</td>\n<td>任意数组类型</td>\n<td>和参数数据类型相同</td>\n<td>No</td>\n<td>输入数组被串接到一个更高维度的数组中 （输入必须都具有相同的维度并且不能为空或者 NULL）</td>\n<td></td>\n</tr>\n<tr>\n<td>avg(expression)</td>\n<td>smallint, int, bigint、real、double precision、numeric或interval</td>\n<td>对于任何整数类型参数是numeric，对于一个浮点参数是double precision，否则和参数数据类型相同</td>\n<td>Yes</td>\n<td>所有输入值的平均值（算术平均）</td>\n<td></td>\n</tr>\n<tr>\n<td>bit_and(expression)</td>\n<td>smallint、int、bigint或bit</td>\n<td>与参数数据类型相同</td>\n<td>Yes</td>\n<td>所有非空输入值的按位与，如果没有非空值则结果是空值</td>\n<td></td>\n</tr>\n<tr>\n<td>bit_or(expression)</td>\n<td>smallint, int, bigint, or bit</td>\n<td>与参数数据类型相同</td>\n<td>Yes</td>\n<td>所有非空输入值的按位或，如果没有非空值则结果是空值</td>\n<td></td>\n</tr>\n<tr>\n<td>bool_and(expression)</td>\n<td>bool</td>\n<td>bool</td>\n<td>Yes</td>\n<td>如果所有输入值为真则结果为真，否则为假</td>\n<td></td>\n</tr>\n<tr>\n<td>bool_or(expression)</td>\n<td>bool</td>\n<td>bool</td>\n<td>Yes</td>\n<td>至少一个输入值为真时结果为真，否则为假</td>\n<td></td>\n</tr>\n<tr>\n<td>count(*)</td>\n<td></td>\n<td>bigint</td>\n<td>Yes</td>\n<td>输入的行数</td>\n<td></td>\n</tr>\n<tr>\n<td>count(expression)</td>\n<td>any</td>\n<td>bigint</td>\n<td>Yes</td>\n<td>expression值非空的输入行的数目</td>\n<td></td>\n</tr>\n<tr>\n<td>every(expression)</td>\n<td>bool</td>\n<td>bool</td>\n<td>Yes</td>\n<td>等价于bool_and</td>\n<td></td>\n</tr>\n<tr>\n<td>json_agg(expression)</td>\n<td>any</td>\n<td>json</td>\n<td>No</td>\n<td>将值聚集成一个 JSON 数组</td>\n<td></td>\n</tr>\n<tr>\n<td>jsonb_agg(expression)</td>\n<td>any</td>\n<td>jsonb</td>\n<td>No</td>\n<td>把值聚合成一个 JSON 数组</td>\n<td></td>\n</tr>\n<tr>\n<td>json_object_agg(name, value)</td>\n<td>(any, any)</td>\n<td>json</td>\n<td>No</td>\n<td>将名字/值对聚集成一个 JSON 对象</td>\n<td></td>\n</tr>\n<tr>\n<td>jsonb_object_agg(name, value)</td>\n<td>(any, any)</td>\n<td>jsonb</td>\n<td>No</td>\n<td>把名字/值对聚合成一个 JSON 对象</td>\n<td></td>\n</tr>\n<tr>\n<td>max(expression)</td>\n<td>任意数组、数字、串、日期/时间、网络或者枚举类型，或者这些类型的数组</td>\n<td>与参数数据类型相同</td>\n<td>Yes</td>\n<td>所有输入值中expression的最大值</td>\n<td></td>\n</tr>\n<tr>\n<td>min(expression)</td>\n<td>任意数组、数字、串、日期/时间、网络或者枚举类型，或者这些类型的数组</td>\n<td>与参数数据类型相同</td>\n<td>Yes</td>\n<td>所有输入值中expression的最小值</td>\n<td></td>\n</tr>\n<tr>\n<td>string_agg(expression, delimiter)</td>\n<td>(text, text) 或 (bytea, bytea)</td>\n<td>与参数数据类型相同</td>\n<td>No</td>\n<td>输入值连接成一个串，用定界符分隔</td>\n<td></td>\n</tr>\n<tr>\n<td>sum(expression)</td>\n<td>smallint、int、 bigint、real、double precision、numeric、 interval或money</td>\n<td>对smallint或int参数是bigint，对bigint参数是numeric，否则和参数数据类型相同</td>\n<td>Yes</td>\n<td>所有输入值的expression的和</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>对于array_agg()，string_agg()，jsonb_agg()，和json_agg()，所述列表顺序是由确定ORDER BY子句中的SELECT列表表达式调用的聚合函数。由于jsonb_object_agg()（和json_object_agg()）产生的单个值是一个JSON对象，并且由于该值的元素没有顺序，ORDER BY因此SELECT列表表达式中的子句无效。</p>\n<p><strong>用于统计的聚集函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>参数类型</strong></th>\n<th><strong>返回类型</strong></th>\n<th><strong>部分模式</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>corr(Y, X)</td>\n<td>double precision</td>\n<td>double precision</td>\n<td>Yes</td>\n<td>相关系数</td>\n</tr>\n<tr>\n<td>covar_pop(Y, X)</td>\n<td>double precision</td>\n<td>double precision</td>\n<td>Yes</td>\n<td>总体协方差</td>\n</tr>\n<tr>\n<td>covar_samp(Y, X)</td>\n<td>double precision</td>\n<td>double precision</td>\n<td>Yes</td>\n<td>样本协方差</td>\n</tr>\n<tr>\n<td>regr_avgx(Y, X)</td>\n<td>double precision</td>\n<td>double precision</td>\n<td>Yes</td>\n<td>自变量的平均值 （sum(X)/N）</td>\n</tr>\n<tr>\n<td>regr_avgy(Y, X)</td>\n<td>double precision</td>\n<td>double precision</td>\n<td>Yes</td>\n<td>因变量的平均值 （sum(Y)/N）</td>\n</tr>\n<tr>\n<td>regr_count(Y, X)</td>\n<td>double precision</td>\n<td>bigint</td>\n<td>Yes</td>\n<td>两个表达式都不为空的输入行的数目</td>\n</tr>\n<tr>\n<td>regr_intercept(Y, X)</td>\n<td>double precision</td>\n<td>double precision</td>\n<td>Yes</td>\n<td>由（X, Y）对决定的最小二乘拟合的线性方程的 y截距</td>\n</tr>\n<tr>\n<td>regr_r2(Y, X)</td>\n<td>double precision</td>\n<td>double precision</td>\n<td>Yes</td>\n<td>相关系数的平方</td>\n</tr>\n<tr>\n<td>regr_slope(Y, X)</td>\n<td>double precision</td>\n<td>double precision</td>\n<td>Yes</td>\n<td>由（X, Y）对决定的最小二乘拟合的线性方程的斜率</td>\n</tr>\n<tr>\n<td>regr_sxx(Y, X)</td>\n<td>double precision</td>\n<td>double precision</td>\n<td>Yes</td>\n<td>sum(X^2) - sum(X)^2/N（自变量的“平方和”）</td>\n</tr>\n<tr>\n<td>regr_sxy(Y, X)</td>\n<td>double precision</td>\n<td>double precision</td>\n<td>Yes</td>\n<td>sum(X*Y) - sum(X) * sum(Y)/N（自变量乘以因变量的“积之合”）</td>\n</tr>\n<tr>\n<td>regr_syy(Y, X)</td>\n<td>double precision</td>\n<td>double precision</td>\n<td>Yes</td>\n<td>sum(Y^2) - sum(Y)^2/N（因变量的“平方和”）</td>\n</tr>\n<tr>\n<td>stddev(expression)</td>\n<td>smallint、int、 bigint、real、double precision或numeric</td>\n<td>浮点参数为double precision，否则为numeric</td>\n<td>Yes</td>\n<td>stddev_samp的历史别名</td>\n</tr>\n<tr>\n<td>stddev_pop(expression)</td>\n<td>smallint、int、 bigint、real、double precision或numeric</td>\n<td>浮点参数为double precision，否则为numeric</td>\n<td>Yes</td>\n<td>输入值的总体标准偏差</td>\n</tr>\n<tr>\n<td>stddev_samp(expression)</td>\n<td>smallint、int、 bigint、real、double precision或numeric</td>\n<td>浮点参数为double precision，否则为numeric</td>\n<td>Yes</td>\n<td>输入值的样本标准偏差</td>\n</tr>\n<tr>\n<td>variance(expression)</td>\n<td>smallint、int、 bigint、real、double precision或numeric</td>\n<td>浮点参数为double precision，否则为numeric</td>\n<td>Yes</td>\n<td>var_samp的历史别名</td>\n</tr>\n<tr>\n<td>var_pop(expression)</td>\n<td>smallint、int、 bigint、real、double precision或numeric</td>\n<td>浮点参数为double precision，否则为numeric</td>\n<td>Yes</td>\n<td>输入值的总体方差（总体标准偏差的平方）</td>\n</tr>\n<tr>\n<td>var_samp(expression)</td>\n<td>smallint、int、 bigint、real、double precision或numeric</td>\n<td>浮点参数为double precision，否则为numeric</td>\n<td>Yes</td>\n<td>输入值的样本方差（样本标准偏差的平方）</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>可以通过以下两种方法之一调用此类中的聚合函数：</p>\n<p>·   GROUP BY当表中的所有行返回一组行的单个值时，<em>要么</em>“通常”在表中的所有行上，要么与结合。在这种用法中，行排序无关紧要。</p>\n<p>·   <em>或</em>作为窗口函数用OVER。在此用法中，针对窗口中的每一行评估聚合函数时，排序始终很重要。</p>\n<p><strong>有序集聚集函数</strong></p>\n<p>只能使用专用WITHIN GROUP (ORDER BY …)语法来调用它们。他们不能被调用的窗函数有OVER。\n\n\n\n\n\n\n\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>直接参数类型</th>\n<th>聚集参数类型</th>\n<th>返回类型</th>\n<th>部分模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mode() WITHIN GROUP (ORDER BY sort_expression)</td>\n<td></td>\n<td>任何可排序类型</td>\n<td>与排序表达式相同</td>\n<td>No</td>\n<td>返回最频繁的输入值（如果有多个频度相同的值就选第一个）</td>\n</tr>\n<tr>\n<td>percentile_cont(fraction) WITHIN GROUP (ORDER BY sort_expression)</td>\n<td>double precision</td>\n<td>double precision或者interval</td>\n<td>与排序表达式相同</td>\n<td>No</td>\n<td>连续百分率：返回一个对应于排序中指定分数的值，如有必要就在相邻的输入项之间插值</td>\n</tr>\n<tr>\n<td>percentile_cont(fractions) WITHIN GROUP (ORDER BY sort_expression)</td>\n<td>double precision[]</td>\n<td>double precision或者interval</td>\n<td>排序表达式的类型的数组</td>\n<td>No</td>\n<td>多重连续百分率：返回一个匹配fractions参数形状的结果数组， 其中每一个非空元素都用对应于那个百分率的值替换</td>\n</tr>\n<tr>\n<td>percentile_disc(fraction) WITHIN GROUP (ORDER BY sort_expression)</td>\n<td>double precision</td>\n<td>一种可排序类型</td>\n<td>与排序表达式相同</td>\n<td>No</td>\n<td>离散百分率：返回第一个在排序中位置等于或者超过指定分数的输入值</td>\n</tr>\n<tr>\n<td>percentile_disc(fractions) WITHIN GROUP (ORDER BY sort_expression)</td>\n<td>double precision[]</td>\n<td>任何可排序类型</td>\n<td>排序表达式的类型的数组</td>\n<td>No</td>\n<td>多重离散百分率：返回一个匹配fractions参数形状的结果数组， 其中每一个非空元素都用对应于那个百分率的输入值替换</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p><strong>假想集聚集函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th>直接参数类型</th>\n<th>聚集参数类型</th>\n<th>返回类型</th>\n<th>部分模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rank(args) WITHIN GROUP (ORDER BY sorted_args)</td>\n<td>VARIADIC “any”</td>\n<td>VARIADIC “any”</td>\n<td>bigint</td>\n<td>No</td>\n<td>假想行的排名，为重复的行留下间隔</td>\n</tr>\n<tr>\n<td>dense_rank(args) WITHIN GROUP (ORDER BY sorted_args)</td>\n<td>VARIADIC “any”</td>\n<td>VARIADIC “any”</td>\n<td>bigint</td>\n<td>No</td>\n<td>假想行的排名，不留间隔</td>\n</tr>\n<tr>\n<td>percent_rank(args) WITHIN GROUP (ORDER BY sorted_args)</td>\n<td>VARIADIC “any”</td>\n<td>VARIADIC “any”</td>\n<td>double precision</td>\n<td>No</td>\n<td>假想行的相对排名，范围从 0 到 1</td>\n</tr>\n<tr>\n<td>cume_dist(args) WITHIN GROUP (ORDER BY sorted_args)</td>\n<td>VARIADIC “any”</td>\n<td>VARIADIC “any”</td>\n<td>double precision</td>\n<td>No</td>\n<td>假想行的相对排名，范围从 1/N 到 1</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p><strong>表. 分组操作</strong></p>\n<table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GROUPING(args…)</td>\n<td>integer</td>\n<td>整数位掩码指示哪些参数不被包括在当前分组集合中</td>\n</tr>\n</tbody>\n</table>\n<p>分组操作用来与分组集合共同来区分结果行。GROUPING操作的参数并不会被实际计算，但是它们必 须准确地匹配在相关查询层次的GROUP BY子句中给定的表达式。 最右边参数指派的位是最低有效位，如果对应的表达式被包括在产生结果行的分组 集合的分组条件中则每一位是 0，否则是 1。例如：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"a5d81f4\" tabindex=\"0\"><code class=\"language-none\">=&gt; SELECT * FROM items_sold;\n make  | model | sales\n-------+-------+-------\n Foo   | GT    |  10\n Foo   | Tour  |  20\n Bar   | City  |  15\n Bar   | Sport |  5\n(4 rows)\n\n=&gt; SELECT make, model, GROUPING(make,model), sum(sales) FROM items_sold GROUP BY ROLLUP(make,model);\n make  | model | grouping | sum\n-------+-------+----------+-----\n Foo   | GT    |        0 | 10\n Foo   | Tour  |        0 | 20\n Bar   | City  |        0 | 15\n Bar   | Sport |        0 | 5\n Foo   |       |        1 | 30\n Bar   |       |        1 | 20\n       |       |        3 | 50\n(7 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h2 id=\"窗口函数\">窗口函数 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%aa%97%e5%8f%a3%e5%87%bd%e6%95%b0\"><i class=\"material-icons align-middle\">link</i></a></h2><p>窗口函数提供在与当前查询行相关的行集合上执行计算的能力。注意：必须使用窗口函数的语法调用这些函数； 一个OVER子句是必需的。</p>\n<p><strong>通用窗口函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>row_number()</td>\n<td>当前行在其分区中的行号，从1计</td>\n</tr>\n<tr>\n<td>rank()</td>\n<td>带间隙的当前行排名； 与该行的第一个同等行的row_number相同</td>\n</tr>\n<tr>\n<td>dense_rank()</td>\n<td>不带间隙的当前行排名； 这个函数计数同等组</td>\n</tr>\n<tr>\n<td>percent_rank()</td>\n<td>当前行的相对排名： (rank- 1) / (总行数 - 1)</td>\n</tr>\n<tr>\n<td>cume_dist()</td>\n<td>累积分布：(在当前行之前或者平级的分区行数) / 分区行总数</td>\n</tr>\n<tr>\n<td>ntile()</td>\n<td>从1到参数值的整数范围，尽可能等分分区</td>\n</tr>\n<tr>\n<td>lag(value anyelement [, offset integer [, default anyelement ]])</td>\n<td>返回value，它在分区内当前行的之前offset个位置的行上计算；如果没有这样的行，返回default替代（必须和value类型相同）。offset和default都是根据当前行计算的结果。如果忽略它们，则offset默认是1，default默认是空值</td>\n</tr>\n<tr>\n<td>lead(value anyelement [, offset integer [, default anyelement ]])</td>\n<td>返回value，它在分区内当前行的之后offset个位置的行上计算；如果没有这样的行，返回default替代（必须和value类型相同）。offset和default都是根据当前行计算的结果。如果忽略它们，则offset默认是1，default默认是空值</td>\n</tr>\n<tr>\n<td>first_value()</td>\n<td>返回在窗口帧中第一行上计算的值</td>\n</tr>\n<tr>\n<td>last_value()</td>\n<td>返回在窗口帧中最后一行上计算的值</td>\n</tr>\n<tr>\n<td>nth_value()</td>\n<td>返回在窗口帧中第n行（行从1计数）上计算的值；没有这样的行则返回空值</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h2 id=\"子查询表达式\">子查询表达式 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%ad%90%e6%9f%a5%e8%af%a2%e8%a1%a8%e8%be%be%e5%bc%8f\"><i class=\"material-icons align-middle\">link</i></a></h2><p>本节描述MemFireDB中可用的SQL兼容的子查询表达式。所有本节中成文的表达式都返回布尔值（真/假）结果。</p>\n<h3 id=\"exists\">EXISTS <a aria-hidden=\"true\" class=\"anchor\" href=\"#exists\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"c7a3748\" tabindex=\"0\"><code class=\"language-none\">EXISTS (subquery)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>EXISTS的参数是一个任意的SELECT语句， 或者说子查询。系统对子查询进行运算以判断它是否返回行。如果它至少返回一行，那么EXISTS的结果就为“真”； 如果子查询没有返回行，那么EXISTS的结果是“假”。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"c0eb915\" tabindex=\"0\"><code class=\"language-none\">NOT EXISTS (subquery)\nnot exists与exists正好相反，如果子查询没有返回结果，为'TRUE'，否则'FALSE'。</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>子查询可以引用来自周围的查询的变量，这些变量在该子查询的任何一次计算中都起常量的作用。</p>\n<p>这个子查询通常只是运行到能判断它是否可以返回至少一行为止， 而不是等到全部结束。在这里写任何有副作用的子查询都是不明智的（例如调用序列函数）；这些副作用是否发生是很难判断的。</p>\n<p>因为结果只取决于是否会返回行，而不取决于这些行的内容， 所以这个子查询的输出列表通常是无关紧要的。一个常用的编码习惯是用EXISTS(SELECT 1 WHERE …)的形式写所有的EXISTS测试。不过这条规则有例外，例如那些使用INTERSECT的子查询。</p>\n<p>下面这个简单的例子类似在col2上的一次内联接，但是它为每个 tab1的行生成最多一个输出，即使存在多个匹配tab2的行也如此∶</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"623f4f6\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> col1\n<span class=\"token keyword\">FROM</span> tab1\n<span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token keyword\">FROM</span> tab2 <span class=\"token keyword\">WHERE</span> col2 <span class=\"token operator\">=</span> tab1<span class=\"token punctuation\">.</span>col2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"in\">IN <a aria-hidden=\"true\" class=\"anchor\" href=\"#in\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"cc583f8\" tabindex=\"0\"><code class=\"language-none\">expression IN (subquery)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>右手边是一个圆括弧括起来的子查询， 它必须正好只返回一个列。左手边表达式将被计算并与子查询结果逐行进行比较。 如果找到任何等于子查询行的情况，那么IN的结果就是“真”。 如果没有找到相等行，那么结果是“假”（包括子查询没有返回任何行的情况）。</p>\n<p>请注意如果左手边表达式得到空值，或者没有相等的右手边值， 并且至少有一个右手边行得到空值，那么IN结构的结果将是空值，而不是假。这个行为是遵照 SQL 处理空值的一般规则的。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"4c91b2c\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> COMPANY<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> COMPANY<span class=\"token punctuation\">(</span>\n   ID <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>     <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n   NAME           <span class=\"token keyword\">TEXT</span>    <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n   AGE            <span class=\"token keyword\">INT</span>     <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n   ADDRESS        <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   SALARY         <span class=\"token keyword\">REAL</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> COMPANY <span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">,</span>NAME<span class=\"token punctuation\">,</span>AGE<span class=\"token punctuation\">,</span>ADDRESS<span class=\"token punctuation\">,</span>SALARY<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paul'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'California'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000.00</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> COMPANY <span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">,</span>NAME<span class=\"token punctuation\">,</span>AGE<span class=\"token punctuation\">,</span>ADDRESS<span class=\"token punctuation\">,</span>SALARY<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Allen'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Texas'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15000.00</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> COMPANY <span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">,</span>NAME<span class=\"token punctuation\">,</span>AGE<span class=\"token punctuation\">,</span>ADDRESS<span class=\"token punctuation\">,</span>SALARY<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Teddy'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Norway'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000.00</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> COMPANY <span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">,</span>NAME<span class=\"token punctuation\">,</span>AGE<span class=\"token punctuation\">,</span>ADDRESS<span class=\"token punctuation\">,</span>SALARY<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mark'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Rich-Mond '</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65000.00</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> COMPANY <span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">,</span>NAME<span class=\"token punctuation\">,</span>AGE<span class=\"token punctuation\">,</span>ADDRESS<span class=\"token punctuation\">,</span>SALARY<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'David'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Texas'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">85000.00</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> COMPANY <span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">,</span>NAME<span class=\"token punctuation\">,</span>AGE<span class=\"token punctuation\">,</span>ADDRESS<span class=\"token punctuation\">,</span>SALARY<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Kim'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'South-Hall'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45000.00</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> COMPANY <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'James'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Houston'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000.00</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> COMPANY <span class=\"token keyword\">WHERE</span> ID <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> ID <span class=\"token keyword\">FROM</span> COMPANY  <span class=\"token keyword\">WHERE</span> SALARY <span class=\"token operator\">&gt;</span> <span class=\"token number\">45000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>和EXISTS一样，假设子查询将被完成运行完全是不明智的。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4038b64\" tabindex=\"0\"><code class=\"language-none\">row_constructor IN (subquery)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这种形式的IN的左手边是一个行构造器。 右手边是一个圆括弧子查询，它必须返回和左手边返回的行中表达式所构成的完全一样多的列。 左手边表达式将被计算并与子查询结果逐行进行比较。如果找到任意相等的子查询行，则IN的结果为“真”。如果没有找到相等行， 那么结果为“假”（包括子查询不返回行的情况）。</p>\n<p>通常，表达式或者子查询行里的空值是按照 SQL 布尔表达式的一般规则进行组合的。 如果两个行对应的成员都非空并且相等，那么认为这两行相等；如果任意对应成员为非空且不等，那么这两行不等； 否则这样的行比较的结果是未知（空值）。如果所有行的结果要么是不等， 要么是空值，并且至少有一个空值，那么IN的结果是空值。</p>\n<h3 id=\"not-in\">NOT IN <a aria-hidden=\"true\" class=\"anchor\" href=\"#not-in\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"ab89334\" tabindex=\"0\"><code class=\"language-none\">expression NOT IN (subquery)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>右手边是一个用圆括弧包围的子查询，它必须返回正好一个列。左手边表达式将被计算并与子查询结果逐行进行比较。 如果只找到不相等的子查询行（包括子查询不返回行的情况），那么NOT IN的结果是“真”。 如果找到任何相等行，则结果为“假”。</p>\n<p>请注意如果左手边表达式得到空值，或者没有相等的右手边值， 并且至少有一个右手边行得到空值，那么NOT IN结构的结果将是空值，而不是真。这个行为是遵照 SQL 处理空值的一般规则的。</p>\n<p>和EXISTS一样，假设子查询会完全结束是不明智的。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"dc9f2fa\" tabindex=\"0\"><code class=\"language-none\">row_constructor NOT IN (subquery)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这种形式的NOT IN的左手边是一个行构造器。 右手边是一个圆括弧子查询，它必须返回和左手边返回的行中表达式所构成的完全一样多的列。 左手边表达式将被计算并与子查询结果逐行进行比较。如果找到不等于子查询行的行，则NOT IN的结果为“真”。如果找到相等行， 那么结果为“假”（包括子查询不返回行的情况）。</p>\n<p>通常，表达式或者子查询行里的空值是按照 SQL 布尔表达式的一般规则进行组合的。 如果两个行对应的成员都非空并且相等，那么认为这两行相等；如果任意对应成员为非空且不等，那么这两行不等； 否则这样的行比较的结果是未知（空值）。如果所有行的结果要么是不等， 要么是空值，并且至少有一个空值，那么NOT IN的结果是空值。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"d53ab82\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> COMPANY <span class=\"token keyword\">WHERE</span> ID <span class=\"token operator\">not</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> ID <span class=\"token keyword\">FROM</span> COMPANY  <span class=\"token keyword\">WHERE</span> SALARY <span class=\"token operator\">&gt;</span> <span class=\"token number\">45000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<h3 id=\"anysome\">ANY/SOME <a aria-hidden=\"true\" class=\"anchor\" href=\"#anysome\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"4de68b0\" tabindex=\"0\"><code class=\"language-none\">expression operator ANY (subquery)\nexpression operator SOME (subquery)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这种形式的右手边是一个圆括弧括起来的子查询， 它必须返回正好一个列。左手边表达式将被计算并使用给出的 操作符对子查询结果逐行进行比较。如果获得任何真值结果，那么ANY的结果就是“真”。 如果没有找到真值结果，那么结果是“假”（包括子查询没有返回任何行的情况）。</p>\n<p>SOME是ANY的同义词。IN等价于= ANY。</p>\n<p>请注意如果没有任何成功并且至少有一个右手边行为该操作符结果生成空值， 那么ANY结构的结果将是空值，而不是假。 这个行为是遵照 SQL 处理空值布尔组合的一般规则制定的。</p>\n<p>和EXISTS一样，假设子查询将被完全运行是不明智的。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"620155f\" tabindex=\"0\"><code class=\"language-none\">row_constructor operator ANY (subquery)\nrow_constructor operator SOME (subquery)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这种形式的左手边是一个行构造器。右手边是一个圆括弧括起来的子查询， 它必须返回和左手边列表给出的表达式一样多的列。左手边表达式将被计算并使用给出的操作符对子查询结果逐行进行比较。如果比较为任何子查询行返回真，则ANY的结果为“真”。如果比较对每一个子查询行都返回假，则结果为“假”（包括子查询不返回行的情况）。如果比较不对任何行返回真并且至少对一行返回 NULL，则结果为 NULL。</p>\n<h3 id=\"all\">ALL <a aria-hidden=\"true\" class=\"anchor\" href=\"#all\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"e80a156\" tabindex=\"0\"><code class=\"language-none\">expression operator ALL (subquery)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>ALL 的这种形式的右手边是一个圆括弧括起来的子查询， 它必须只返回一列。左手边表达式将被计算并使用给出的 操作符对子查询结果逐行进行比较。该操作符必须生成布尔结果。 如果所有行得到真（包括子查询没有返回任何行的情况），ALL的结果就是“真”。如果没有存在任何假值结果，那么结果是“假”。如果比较为任何行都不返回假并且对至少一行返回 NULL，则结果为 NULL。</p>\n<p>NOT IN等价于&lt;&gt; ALL。</p>\n<p>和EXISTS一样，假设子查询将被完全运行是不明智的。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"0e86292\" tabindex=\"0\"><code class=\"language-none\">row_constructor operator ALL (subquery)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>ALL的这种形式的左手边是一个行构造器。 右手边是一个圆括弧括起来的子查询，它必须返回和左手边行中表达式一样多的列。 左手边表达式将被计算并使用给出的 操作符对子查询结果逐行进行比较。如果对所有子查询行该比较都返回真，那么ALL的结果就是“真”（包括子查询没有返回任何行的情况）。如果对任何子查询行比较返回假，则结果为“假”。如果比较对任何子查询行都不返回假并且对至少一行返回 NULL，则结果为 NULL。</p>\n<h3 id=\"单一行比较\">单一行比较 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e5%8d%95%e4%b8%80%e8%a1%8c%e6%af%94%e8%be%83\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"6644e04\" tabindex=\"0\"><code class=\"language-none\">row_constructor operator (subquery)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>左手边是一个行构造器，。 右手边是一个圆括弧括起来的子查询，该查询必须返回和左手边行中表达式数目完全一样的列。 另外，该子查询不能返回超过一行的数量（如果它返回零行，那么结果就是空值）。 左手边被计算并逐行与右手边的子查询结果行比较。</p>\n<h2 id=\"行与数组比较\">行与数组比较 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%a1%8c%e4%b8%8e%e6%95%b0%e7%bb%84%e6%af%94%e8%be%83\"><i class=\"material-icons align-middle\">link</i></a></h2><p>本节描述几个特殊的结构，用于在值的组之间进行多重比较。这些形式语法上和前面一节的子查询形式相关，但是不涉及子查询。所有本节记录的表达式形式都返回布尔（Boolean）结果（真/假）。</p>\n<h3 id=\"in-1\">IN <a aria-hidden=\"true\" class=\"anchor\" href=\"#in-1\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"760c803\" tabindex=\"0\"><code class=\"language-none\">expression IN (value [, ...])</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>右手边是一个圆括弧包围的标量列表。如果左手边表达式的结果等于任何右手边表达式中的一个，结果为“真”。它是下面形式的缩写</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"69bee21\" tabindex=\"0\"><code class=\"language-none\">expression = value1\nOR\nexpression = value2\nOR\n...</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>请注意如果左手边表达式得到空值，或者没有相等的右手边值并且至少有一个右手边的表达式得到空值，那么IN结构的结果将为空值，而不是假。这符合 SQL 处理空值的布尔组合的一般规则。</p>\n<h3 id=\"not-in-1\">NOT IN <a aria-hidden=\"true\" class=\"anchor\" href=\"#not-in-1\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"5191a14\" tabindex=\"0\"><code class=\"language-none\">expression NOT IN (value [, ...])</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>右手边是一个圆括弧包围的标量列表。如果左手边表达式的结果不等于所有右手边表达式，结果为“真”。它是下面形式的缩写</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"3e50736\" tabindex=\"0\"><code class=\"language-none\">expression &lt;&gt; value1\nAND\nexpression &lt;&gt; value2\nAND\n...</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>请注意如果左手边表达式得到空值，或者没有相等的右手边值并且至少有一个右手边的表达式得到空值，那么NOT IN结构的结果将为空值， 而不是我们可能天真地认为的真值。这符合 SQL 处理空值的布尔组合的一般规则。</p>\n<p>提示</p>\n<p>x NOT IN y在所有情况下都等效于NOT (x IN y)。但是，在处理空值的时候，用NOT IN比用IN更可能迷惑新手。最好尽可能用正逻辑来表达你的条件。</p>\n<h3 id=\"anysome-array\">ANY/SOME (array) <a aria-hidden=\"true\" class=\"anchor\" href=\"#anysome-array\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"462e4f2\" tabindex=\"0\"><code class=\"language-none\">expression operator ANY (array expression)\nexpression operator SOME (array expression)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>右手边是一个圆括弧包围的表达式，它必须得到一个数组值。左手边表达式被计算并且使用给出的操作符对数组的每个元素进行比较，这个操作符必须得到布尔结果。如果得到了任何真值结果，那么ANY的结果是“真”。 如果没有找到真值结果（包括数组只有零个元素的情况），那么结果是“假”。</p>\n<p>如果数组表达式得到一个空数组，ANY的结果将为空值。如果左手边的表达式得到空值，ANY通常是空值（尽管一个非严格比较操作符可能得到一个不同的结果）。另外，如果右手边的数组包含任何空值元素或者没有得到真值比较结果，ANY的结果将是空值而不是假（再次，假设是一个严格的比较操作符）。这符合 SQL 对空值的布尔组合的一般规则。</p>\n<p>SOME是ANY的同义词。</p>\n<h3 id=\"all-array\">ALL (array) <a aria-hidden=\"true\" class=\"anchor\" href=\"#all-array\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"70a2527\" tabindex=\"0\"><code class=\"language-none\">expression operator ALL (array expression)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>右手边是一个圆括弧包围的表达式，它必须得到一个数组值。左手边表达式将被计算并使用给出的操作符与数组的每个元素进行比较，这个操作符必须得到一个布尔结果。如果所有比较都得到真值结果，那么ALL的结果是 “真”（包括数组只有零个元素的情况）。如果有任何假值结果，那么结果是“假”。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language-sql\" id=\"bd26d9f\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> t1<span class=\"token punctuation\">(</span>id  <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t1 <span class=\"token keyword\">Values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> t1 <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> id <span class=\"token operator\">not</span>  <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> id <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> id <span class=\"token operator\">&gt;</span> <span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> id <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">ALL</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>如果数组表达式得到一个空数组，ALL的结果将为空值。如果左手边的表达式得到空值，ALL通常是空值（尽管一个非严格比较操作符可能得到一个不同的结果）。另外，如果右手边的数组包含任何空值元素或者没有得到假值比较结果，ALL的结果将是空值而不是真（再次，假设是一个严格的比较操作符）。这符合 SQL 对空值的布尔组合的一般规则。</p>\n<h3 id=\"行构造器比较\">行构造器比较 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e8%a1%8c%e6%9e%84%e9%80%a0%e5%99%a8%e6%af%94%e8%be%83\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"3087a15\" tabindex=\"0\"><code class=\"language-none\">row_constructor operator row_constructor</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>每一边都是一个行构造器。两个行值必须具有相同数量的域。每一边被计算并且被逐行比较。当操作符是 =、 &lt;&gt;、 &lt; &lt;=、 &gt;、 &gt;=时，允许进行行构造器比较。</p>\n<p>=和&lt;&gt;情况略有不同。如果两行的所有对应成员都是非空且相等则这两行被认为相等；如果任何对应成员是非空但是不相等则这两行不相等；否则行比较的结果为未知（空值）。</p>\n<p>对于&lt;、&lt;=、&gt;和&gt;=情况，行元素被从左至右比较，在找到一处不等的或为空的元素对就立刻停下来。如果这一对元素都为空值，则行比较的结果为未知（空值）；否则这一对元素的比较结果决定行比较的结果。例如，ROW(1,2,NULL) &lt; ROW(1,3,0)得到真，而不是空值，因为第三对元素并没有被考虑。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2f618fd\" tabindex=\"0\"><code class=\"language-none\">row_constructor IS DISTINCT FROM row_constructor</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这个结构与&lt;&gt;行比较相似，但是它对于空值输入不会得到空值。任何空值被认为和任何非空值不相等（有区别），并且任意两个空值被认为相等（无区别）。因此结果将总是为真或为假，永远不会是空值。</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"2ced726\" tabindex=\"0\"><code class=\"language-none\">row_constructor IS NOT DISTINCT FROM row_constructor</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>这个结构与=行比较相似，但是它对于空值输入不会得到空值。任何空值被认为和任何非空值不相等（有区别），并且任意两个空值被认为相等（无区别）。因此结果将总是为真或为假，永远不会是空值。</p>\n<h3 id=\"组合类型比较\">组合类型比较 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e7%bb%84%e5%90%88%e7%b1%bb%e5%9e%8b%e6%af%94%e8%be%83\"><i class=\"material-icons align-middle\">link</i></a></h3>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"19b2d38\" tabindex=\"0\"><code class=\"language-none\">record operator record</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>SQL 规范要求在结果依赖于比较两个 NULL 值或者一个 NULL 与一个非 NULL 时逐行比较返回 NULL。PostgreSQL只有在比较两个行构造器的结果或者比较一个行构造器与一个子查询的输出时才这样做。在其他比较两个组合类型值的环境中，两个 NULL 域值被认为相等，并且一个 NULL 被认为大于一个非 NULL。为了得到组合类型的一致的排序和索引行为，这样做是必要的。</p>\n<h2 id=\"集合返回函数\">集合返回函数 <a aria-hidden=\"true\" class=\"anchor\" href=\"#%e9%9b%86%e5%90%88%e8%bf%94%e5%9b%9e%e5%87%bd%e6%95%b0\"><i class=\"material-icons align-middle\">link</i></a></h2><p>本节描述那些可能返回多于一行的函数。目前这个类中被使用最广泛的是级数生成函数， 如表所述。其他更特殊的集合返回函数在本手册的其他地方描述。</p>\n<p><strong>表.级数生成函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>参数类型</strong></th>\n<th><strong>返回类型</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>generate_series(start, stop)</td>\n<td>int、bigint或者numeric</td>\n<td>setof int、setof bigint或者setof numeric（与参数类型相同）</td>\n<td>产生一系列值，从start到stop，步长为 1</td>\n</tr>\n<tr>\n<td>generate_series(start, stop, step)</td>\n<td>int、bigint或者numeric</td>\n<td>setof int、setof bigint或者setof numeric（与参数类型相同）</td>\n<td>产生一系列值，从start到stop，步长为step</td>\n</tr>\n<tr>\n<td>generate_series(start, stop, step interval)</td>\n<td>timestamp或timestamp with time  zone</td>\n<td>setof timestamp或setof timestamp with time zone（和参数类型相同）</td>\n<td>产生一系列值，从start到stop，步长为step</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>当step为正时，如果start大于stop则返回零行。相反，当step为负时，如果start小于stop则返回零行。对于NULL输入也会返回零行。step为零是一个错误。下面是一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"6923a46\" tabindex=\"0\"><code class=\"language-none\">SELECT * FROM generate_series(2,4);\n generate_series\n-----------------\n               2\n               3\n               4\n(3 rows)\n\nSELECT * FROM generate_series(5,1,-2);\n generate_series\n-----------------\n               5\n               3\n               1\n(3 rows)\n\nSELECT * FROM generate_series(4,3);\n generate_series\n-----------------\n(0 rows)\n\nSELECT generate_series(1.1, 4, 1.3);\n generate_series\n-----------------\n             1.1\n             2.4\n             3.7\n(3 rows)\n\n-- 这个例子依赖于日期+整数操作符\nSELECT current_date + s.a AS dates FROM generate_series(0,14,7) AS s(a);\n   dates\n------------\n 2004-02-05\n 2004-02-12\n 2004-02-19\n(3 rows)\n\nSELECT * FROM generate_series('2008-03-01 00:00'::timestamp,\n                              '2008-03-04 12:00', '10 hours');\n   generate_series\n---------------------\n 2008-03-01 00:00:00\n 2008-03-01 10:00:00\n 2008-03-01 20:00:00\n 2008-03-02 06:00:00\n 2008-03-02 16:00:00\n 2008-03-03 02:00:00\n 2008-03-03 12:00:00\n 2008-03-03 22:00:00\n 2008-03-04 08:00:00\n(9 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p><strong>表.下标生成函数</strong>\n</p><table class=\"table table-striped\">\n<thead>\n<tr>\n<th>函数</th>\n<th>返回类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>generate_subscripts(array anyarray, dim  int)</td>\n<td>setof int</td>\n<td>生成一个级数组成给定数组的下标。</td>\n</tr>\n<tr>\n<td>generate_subscripts(array anyarray, dim  int, reverse boolean)</td>\n<td>setof int</td>\n<td>生成一个级数组成给定数组的下标。当reverse为真，级数以逆序返回。</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p>generate_subscripts是一个快捷函数，它为给定数组的指定维度生成一组合法的下标。对于不具有请求维度的数组返回零行，对于 NULL 数组也返回零行（但是会对 NULL 数组元素返回合法的下标）。下面是一些例子：</p>\n<div class=\"prism-codeblock\">\n<div class=\"code-toolbar\"><pre class=\"language- language-none\" id=\"1edfcc3\" tabindex=\"0\"><code class=\"language-none\">-- 基本使用\nSELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s;\n s\n---\n 1\n 2\n 3\n 4\n(4 rows)\n生成数组下标\nselect generate_subscripts( array['a','b','c','d'],1);\ngenerate_subscripts\n---------------------\n                   1\n                   2\n                   3\n                   4\n(4 rows)\n\n-- 表示一个数组，下标和被下标的值需要一个子查询\nSELECT * FROM arrays;\n         a\n--------------------\n {-1,-2}\n {100,200,300}\n(2 rows)\n\nSELECT a AS array, s AS subscript, a[s] AS value\nFROM (SELECT generate_subscripts(a, 1) AS s, a FROM arrays) foo;\n     array     | subscript | value\n---------------+-----------+-------\n {-1,-2}       |         1 |    -1\n {-1,-2}       |         2 |    -2\n {100,200,300} |         1 |   100\n {100,200,300} |         2 |   200\n {100,200,300} |         3 |   300\n(5 rows)\n\n-- 平面化一个 2D 数组\nCREATE OR REPLACE FUNCTION unnest2(anyarray)\nRETURNS SETOF anyelement AS $$\nselect $1[i][j]\n   from generate_subscripts($1,1) g1(i),\n        generate_subscripts($1,2) g2(j);\n$$ LANGUAGE sql IMMUTABLE;\nCREATE FUNCTION\nSELECT * FROM unnest2(ARRAY[[1,2],[3,4]]);\n unnest2\n---------\n       1\n       2\n       3\n       4\n(4 rows)</code></pre><div class=\"toolbar\"><div class=\"toolbar-item\"><button aria-label=\"copy\" class=\"copy-to-clipboard-button\" data-copy-state=\"copy\" type=\"button\"><span></span></button></div></div></div>\n</div>\n<p>当FROM子句中的一个函数后面有WITH ORDINALITY时，输出中会追加一个bigint列，它的值从1开始并且该函数输出的每一行加1。这在unnest()之类的集合返回函数中最有用。</p>\n</div>\n</div>\n<div><hr class=\"doc-hr\"/>\n<div class=\"d-print-none\" id=\"doc-nav\">\n<div class=\"row flex-xl-nowrap\">\n<div class=\"col-sm-6 pt-2 doc-next\">\n<a href=\"/docs/db/guides/sql-grammar/\">\n<div class=\"card h-100 my-1\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\"><i class=\"material-icons align-middle\">navigate_before</i> SQL语法</p>\n</div>\n</div>\n</a>\n</div>\n<div class=\"col-sm-6 pt-2 doc-prev\">\n<a class=\"ms-auto\" href=\"/docs/contactus/\">\n<div class=\"card h-100 my-1 text-end\">\n<div class=\"card-body py-2\">\n<p class=\"card-title fs-5 fw-semibold lh-base mb-0\">联系我们 <i class=\"material-icons align-middle\">navigate_next</i></p>\n</div>\n</div>\n</a>\n</div>\n</div>\n</div></div>\n</div>\n</div>\n</div>\n</div>\n\n</main>",
  "markdown": "[MemFireDB备份 6](/)\n\nmenu\n\n[官网](https://memfiredb.com/)\n[论坛](https://community.memfiredb.com/)\n[登录](https://cloud.memfiredb.com/auth/login)\n\nEnable dark mode\n\nEnable light mode\n\n本页\n\n逻辑操作符\n\n# 函数与操作\n\n# 逻辑操作符 [*link*](#%e9%80%bb%e8%be%91%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n常用的逻辑操作符有：\n\n| AND |\n| --- |\n| OR |\n| NOT |\n\nSQL使用三值的逻辑系统，包括真、假和null，null表示“未知”。观察下面的真值表：\n\n| a | b | a AND b | a OR b |\n| --- | --- | --- | --- |\n| TRUE | TRUE | TRUE | TRUE |\n| TRUE | FALSE | FALSE | TRUE |\n| TRUE | NULL | NULL | TRUE |\n| FALSE | FALSE | FALSE | FALSE |\n| FALSE | NULL | FALSE | NULL |\n| NULL | NULL | NULL | NULL |\n\n| a | NOT a |\n| --- | --- |\n| TRUE | FALSE |\n| FALSE | TRUE |\n| NULL | NULL |\n\n操作符AND和OR是可交换的，也就是说，你可以交换左右操作数而不影响结果。\n\n## 比较函数与操作符 [*link*](#%e6%af%94%e8%be%83%e5%87%bd%e6%95%b0%e4%b8%8e%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n比较操作符可以用于所有可以比较的数据类型。所有比较操作符都是双目操作符，它们返回boolean类型；类似于1 < 2 < 3的表达式是非法的（因为没有<操作符可以比较一个布尔值和3）。\n\n常见的比较操作符都可用，如表所示。\n\n**表.比较操作符**\n\n| 操作符 | 描述 |\n| --- | --- |\n| < | 小于 |\n| > | 大于 |\n| <= | 小于等于 |\n| >= | 大于等于 |\n| = | 等于 |\n| <> or != | 不等于 |\n\n注意\n\n!=操作符在分析器阶段被转换成<>。不能把!=和<>操作符实现为做不同的事。\n\n如表所示，也有一些比较谓词。它们的行为和操作符很像，但是具有 SQL 标准所要求的特殊语法。\n\n**表.比较谓词**\n\n| 谓词 | 描述 |\n| --- | --- |\n| a BETWEEN x AND y | 在x和y之间 |\n| a NOT BETWEEN x AND y | 不在x和y之间 |\n| a BETWEEN SYMMETRIC x AND y | 在对比较值排序后位于x和y之间 |\n| a NOT BETWEEN SYMMETRIC x AND y | 在对比较值排序后不位于x和y之间 |\n| a IS DISTINCT FROM b | 不等于，空值被当做一个普通值 |\n| a IS NOT DISTINCT FROM b | 等于，空值被当做一个普通值 |\n| expression IS NULL | 是空值 |\n| expression IS NOT NULL | 不是空值 |\n| expression ISNULL | 是空值（非标准语法） |\n| expression NOTNULL | 不是空值（非标准语法） |\n| boolean\\_expression IS TRUE | 为真 |\n| boolean\\_expression IS NOT TRUE | 为假或未知 |\n| boolean\\_expression IS FALSE | 为假 |\n| boolean\\_expression IS NOT FALSE | 为真或者未知 |\n| boolean\\_expression IS UNKNOWN | 值为未知 |\n| boolean\\_expression IS NOT UNKNOWN | 为真或者为假 |\n\nBETWEEN谓词可以简化范围测试：\n\n```\na BETWEEN x AND y\n```\n\n等效于\n\n```\na >= x AND a <= y\n```\n\n注意BETWEEN认为终点值是包含在范围内的。 NOT BETWEEN可以做相反比较：\n\n```\na NOT BETWEEN x AND y\n```\n\n等效于\n\n```\na < x OR a > y\n```\n\nBETWEEN SYMMETRIC和BETWEEN相似，不过BETWEEN SYMMETRIC不要求AND左边的参数小于或等于右边的参数。如果左参数不是小于等于右参数，这两个参数会自动被交换，这样总是会应用一个非空范围。\n\n当有一个输入为空时，普通的比较操作符会得到空（表示“未知”），而不是真或假。例如，7 = NULL得到空，7 <> NULL也一样。如果这种行为不合适，可以使用IS [ NOT ] DISTINCT FROM谓词：\n\n```\na IS DISTINCT FROM b\na IS NOT DISTINCT FROM b\n```\n\n对于非空输入，IS DISTINCT FROM和<>操作符一样。不过，如果两个输入都为空，它会返回假。而如果只有一个输入为空，它会返回真。类似地，IS NOT DISTINCT FROM对于非空输入的行为与=相同，但是当两个输入都为空时它返回真，并且当只有一个输入为空时返回假。因此，这些谓词实际上把空值当作一种普通数据值而不是“unknown”。\n\n要检查一个值是否为空，使用下面的谓词：\n\n```\nexpression IS NULL\nexpression IS NOT NULL\n```\n\n或者等效，但并不标准的谓词：\n\n```\nexpression ISNULL\nexpression NOTNULL\n```\n\n不要写expression = NULL，因为NULL是不“等于”NULL的（控制代表一个未知的值，因此我们无法知道两个未知的数值是否相等）。\n\n如果expression是行值，那么当行表达式本身为非空值或者行的所有域为非空时IS NULL为真。由于这种行为，IS NULL和IS NOT NULL并不总是为行值表达式返回反转的结果，特别是，一个同时包含 NULL 和非空值的域将会对两种测试都返回假。在某些情况下，写成row IS DISTINCT FROM NULL或者row IS NOT DISTINCT FROM NULL会更好，它们只会检查整个行值是否为空而不需要在行的域上做额外的测试。\n\n布尔值也可以使用下列谓词进行测试：\n\n```\nboolean_expression IS TRUE\nboolean_expression IS NOT TRUE\nboolean_expression IS FALSE\nboolean_expression IS NOT FALSE\nboolean_expression IS UNKNOWN\nboolean_expression IS NOT UNKNOWN\n```\n\n这些谓词将总是返回真或假，从来不返回空值，即使操作数是空也如此。空值输入被当做逻辑值“未知”。 请注意实际上IS UNKNOWN和IS NOT UNKNOWN分别与IS NULL和IS NOT NULL相同， 只是输入表达式必须是布尔类型。\n\n如表中所示，也有一些比较相关的函数可用。\n\n**表.比较函数**\n\n| 函数 | 描述 | 例子 | 例子结果 |\n| --- | --- | --- | --- |\n| num\\_nonnulls(VARIADIC “any”) | 返回非空参数的数量 | num\\_nonnulls(1, NULL, 2) | 2 |\n| num\\_nulls(VARIADIC “any”) | 返回空参数的数量 | num\\_nulls(1, NULL, 2) | 1 |\n\n## 数学函数和操作符 [*link*](#%e6%95%b0%e5%ad%a6%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\nMemFireDB为很多类型提供了数学操作符。对于那些没有标准数学表达的类型（如日期/时间类型），我们将在后续小节中描述实际的行为。\n\n### 数学操作符 [*link*](#%e6%95%b0%e5%ad%a6%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n下表展示了所有可用的数学操作符。\n\n**表.数学操作符**\n\n| **操作符** | **描述** | **例子** | **结果** |\n| --- | --- | --- | --- |\n| + | 加 | 2 + 3 | 5 |\n| - | 减 | 2 - 3 | -1 |\n| \\* | 乘 | 2 \\* 3 | 6 |\n| / | 除（整数除法截断结果） | 4 / 2 | 2 |\n| % | 模（取余） | 5 % 4 | 1 |\n| ^ | 指数（从左至右结合） | 2.0 ^ 3.0 | 8 |\n| |/ | 平方根 | |/ 25.0 | 5 |\n| ||/ | 立方根 | ||/ 27.0 | 3 |\n| ! | 阶乘 | 5 ! | 120 |\n| !! | 阶乘（前缀操作符） | !! 5 | 120 |\n| @ | 绝对值 | @ -5.0 | 5 |\n| & | 按位与 | 91 & 15 | 11 |\n| | | 按位或 | 32 | 3 | 35 |\n| # | 按位异或 | 17 # 5 | 20 |\n| ~ | 按位求反 | ~1 | -2 |\n| « | 按位左移 | 1 « 4 | 16 |\n| » | 按位右移 | 8 » 2 | 2 |\n\n按位操作操作符只能用于整数数据类型，而其它的操作符可以用于全部数字数据类型。按位操作的操作符还可以用于位串类型bit和bit varying。\n\n上表显示了可用的数学函数。在该表中，dp表示double precision。这些函数中有许多都有多种不同的形式，区别是参数不同。除非特别指明，任何特定形式的函数都返回和它的参数相同的数据类型。 处理double precision数据的函数大多数是在宿主系统的 C 库基础上实现的；因此，边界情况下的准确度和行为是根据宿主系统而变化的。\n\n### 数学函数 [*link*](#%e6%95%b0%e5%ad%a6%e5%87%bd%e6%95%b0)\n\n**表.数学函数**\n\n| 函数 | 返回类型 | 描述 | 例子 | 结果 |\n| --- | --- | --- | --- | --- |\n| abs(x) | （和输入相同） | 绝对值 | abs(-17.4) | 17.4 |\n| cbrt(dp) | dp | 立方根 | cbrt(27.0) | 3 |\n| ceil(dp or numeric) | （和输入相同） | 不小于参数的最近的整数 | ceil(-42.8) | -42 |\n| ceiling(dp or numeric) | （和输入相同） | 不小于参数的最近的整数（ceil的别名） | ceiling(-95.3) | -95 |\n| degrees(dp) | dp | 把弧度转为角度 | degrees(0.5) | 28.6478897565412 |\n| div(y numeric, x numeric) | numeric | y/x的整数商 | div(9,4) | 2 |\n| exp(dp or numeric) | （和输入相同） | 指数 | exp(1.0) | 2.71828182845905 |\n| floor(dp or numeric) | （和输入相同） | 不大于参数的最近的整数 | floor(-42.8) | -43 |\n| ln(dp or numeric) | （和输入相同） | 自然对数 | ln(2.0) | 0.693147180559945 |\n| log(dp or numeric) | （和输入相同） | 以10为底的对数 | log(100.0) | 2 |\n| log(b numeric, x numeric) | numeric | 以b为底的对数 | log(2.0, 64.0) | 6.0000000000 |\n| mod(y, x) | （和参数类型相同） | y/x的余数 | mod(9,4) | 1 |\n| pi() | dp | “π”常数 | pi() | 3.14159265358979 |\n| power(a dp, b dp) | dp | 求a的b次幂 | power(9.0, 3.0) | 729 |\n| power(a numeric, b numeric) | numeric | 求a的b次幂 | power(9.0, 3.0) | 729 |\n| radians(dp) | dp | 把角度转为弧度 | radians(45.0) | 0.785398163397448 |\n| round(dp or numeric) | （和输入相同） | 圆整为最接近的整数 | round(42.4) | 42 |\n| round(v numeric, s int) | numeric | 圆整为s位小数数字 | round(42.4382, 2) | 42.44 |\n| scale(numeric) | integer | 参数的精度（小数点后的位数） | scale(8.41) | 2 |\n| sign(dp or numeric) | （和输入相同） | 参数的符号（-1, 0, +1） | sign(-8.4) | -1 |\n| sqrt(dp or numeric) | （和输入相同） | 平方根 | sqrt(2.0) | 1.4142135623731 |\n| trunc(dp or numeric) | （和输入相同） | 截断（向零靠近） | trunc(42.8) | 42 |\n| trunc(v numeric, s int) | numeric | 截断为s位小数位置的数字 | trunc(42.4382, 2) | 42.43 |\n| width\\_bucket(op dp, b1 dp, b2 dp, count int) | int | 返回一个桶号，这个桶是在一个柱状图中operand将被分配的那个桶，该柱状图有count个散布在范围b1到b2上的等宽桶。对于超过该范围的输入，将返回0或者count+1 | width\\_bucket(5.35, 0.024, 10.06, 5) | 3 |\n| width\\_bucket(op numeric, b1 numeric, b2 numeric, count int) | int | 返回一个桶号，这个桶是在一个柱状图中operand将被分配的那个桶，该柱状图有count个散布在范围b1到b2上的等宽桶。对于超过该范围的输入，将返回0或者count+1 | width\\_bucket(5.35, 0.024, 10.06, 5) | 3 |\n| width\\_bucket(operand anyelement, thresholds anyarray) | int | 返回一个桶号，这个桶是在给定数组中operand 将被分配的桶，该数组列出了桶的下界。对于一个低于第一个下界的输入返回 0。thresholds数组*必须被排好序*， 最小的排在最前面，否则将会得到意想不到的结果 | width\\_bucket(now(), array[‘yesterday’, ’today’, ’tomorrow’]::timestamptz[]) | 2 |\n\n### 随机函数 [*link*](#%e9%9a%8f%e6%9c%ba%e5%87%bd%e6%95%b0)\n\n下表展示了用于产生随机数的函数。\n\n**表.随机函数**\n\n| 函数 | 返回类型 | 描述 |\n| --- | --- | --- |\n| random() | dp | 范围 0.0 <= x < 1.0 中的随机值 |\n| setseed(dp) | void | 为后续的random()调用设置种子（值为于 -1.0 和 1.0 之间，包括边界值） |\n\nrandom()返回的值的特征取决于系统实现。 它不适合用于加密应用，如果需要用于加密应用请参考pgcrypto模块。\n\n最后，表显示了可用的三角函数。所有三角函数都有类型为double precision的参数和返回类型。每一种三角函数都有两个变体，一个以弧度度量角，另一个以角度度量角。\n\n### 三角函数 [*link*](#%e4%b8%89%e8%a7%92%e5%87%bd%e6%95%b0)\n\n**表.三角函数**\n\n| 函数（弧度） | 函数（角度） | 描述 |\n| --- | --- | --- |\n| acos(x) | acosd(x) | 反余弦 |\n| asin(x) | asind(x) | 反正弦 |\n| atan(x) | atand(x) | 反正切 |\n| atan2(y, x) | atan2d(y, x) | y/x的反正切 |\n| cos(x) | cosd(x) | 余弦 |\n| cot(x) | cotd(x) | 余切 |\n| sin(x) | sind(x) | 正弦 |\n| tan(x) | tand(x) | 正切 |\n\n## 字符串函数和操作符 [*link*](#%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n本节描述了用于检查和操作字符串值的函数和操作符。在这个环境中的串包括所有类型character、character varying和text的值。除非另外说明，所有下面列出的函数都可以处理这些类型，不过要小心的是，在使用character类型的时候， 它有自动填充空白的潜在影响。有些函数还可以处理位串类型。\n\nSQL定义了一些字符串函数，它们使用关键字，而不是逗号来分隔参数。MemFireDB也提供了这些函数使用正常函数调用语法的版本。\n\n**表.SQL字符串函数和操作符**\n\n| 函数 | 返回类型 | 描述 | 例子 | 结果 |\n| --- | --- | --- | --- | --- |\n| string || string | text | 串接 | ‘Post’ || ‘greSQL’ | PostgreSQL |\n| string || non-string or non-string || string | text | 使用一个非字符串输入的串接 | ‘Value: ’ || 42 | Value: 42 |\n| bit\\_length(string) | int | 串中的位数 | bit\\_length(‘jose’) | 32 |\n| char\\_length(string) or character\\_length(string) | int | 串中字符数 | char\\_length(‘jose’) | 4 |\n| lower(string) | text | 将字符串转换为小写形式 | lower(‘TOM’) | tom |\n| octet\\_length(string) | int | 串中的字节数 | octet\\_length(‘jose’) | 4 |\n| overlay(string placing string from int [for int]) | text | 替换子串 | overlay(‘Txxxxas’ placing ‘hom’ from 2 for 4) | Thomas |\n| position(substring in string) | int | 定位指定子串 | position(‘om’ in ‘Thomas’) | 3 |\n| substring(string [from int] [for int]) | text | 提取子串 | substring(‘Thomas’ from 2 for 3) | hom |\n| substring(string from pattern) | text | 提取匹配POSIX正则表达式的子串。模式匹配。 | substring(‘Thomas’ from ‘…$’) | mas |\n| substring(string from pattern for escape) | text | 提取匹配SQL正则表达式的子串。 | substring(‘Thomas’ from ‘%#“o\\_a#”\\_’ for ‘#’) | oma |\n| trim([leading | trailing | both] [characters] from string) | text | 从string的开头、结尾或者两端（both是默认值）移除只包含characters（默认是一个空格）中字符的最长字符串 | trim(both ‘xyz’ from ‘yxTomxx’) | Tom |\n| trim([leading | trailing | both] [from] string [, characters] ) | text | trim()的非标准版本 | trim(both from ‘xTomxx’, ‘x’) | Tom |\n| upper(string) | text | 将字符串转换成大写形式 | upper(’tom’) | TOM |\n\n还有额外的串操作函数可以用，它们在下表中列出。它们有些在内部用于实现表 列出的SQL标准字符串函数。\n\n**表.其他字符串函数**\n\n| 函数 | 返回类型 | 描述 | 例子 | 结果 |\n| --- | --- | --- | --- | --- |\n| ascii(string) | int | 参数第一个字符的ASCII代码。对于UTF8返回该字符的Unicode代码点。对于其他多字节编码，该参数必须是一个ASCII字符。 | ascii(‘x’) | 120 |\n| btrim(string text [, characters text]) | text | 从string的开头或结尾删除最长的只包含characters（默认是一个空格）的串 | btrim(‘xyxtrimyyx’, ‘xyz’) | trim |\n| chr(int) | text | 给定代码的字符。对于UTF8该参数被视作一个Unicode代码点。对于其他多字节编码该参数必须指定一个ASCII字符。NULL (0) 字符不被允许，因为文本数据类型不能存储这种字节。 | chr(65) | A |\n| concat(str “any” [, str “any” [, …] ]) | text | 串接所有参数的文本表示。NULL 参数被忽略。 | concat(‘abcde’, 2, NULL, 22) | abcde222 |\n| concat\\_ws(sep text, str “any” [, str “any” [, …] ]) | text | 将除了第一个参数外的其他参数用分隔符串接在一起。第一个参数被用作分隔符字符串。NULL 参数被忽略。 | concat\\_ws(’,’, ‘abcde’, 2, NULL, 22) | abcde,2,22 |\n| decode(string text, format text) | bytea | 从string中的文本表达解码二进制数据。format的选项和encode中的一样。 | decode(‘MTIzAAE=’, ‘base64’) | \\x3132330001 |\n| encode(data bytea, format text) | text | 将二进制数据编码成一个文本表达。支持的格式有：base64、hex、escape。escape将零字节和高位组字节转换为八进制序列（\\nnn）和双写的反斜线。 | encode(‘123\\000\\001’, ‘base64’) | MTIzAAE= |\n| format(formatstr text [, formatarg “any” [, …] ]) | text | 根据一个格式字符串格式化参数。该函数和C函数sprintf相似。 | format(‘Hello %s, %1$s’, ‘World’) | Hello World, World |\n| initcap(string) | text | 将每一个词的第一个字母转换为大写形式并把剩下的字母转换为小写形式。词是由非字母数字字符分隔的字母数字字符的序列。 | initcap(‘hi THOMAS’) | Hi Thomas |\n| left(str text, n int) | text | 返回字符串中的前n个字符。当n为负时，将返回除了最后|n|个字符之外的所有字符。 | left(‘abcde’, 2) | ab |\n| length(string) | int | string中的字符数 | length(‘jose’) | 4 |\n| length(string bytea, encoding name ) | int | string在给定编码中的字符数。string必须在这个编码中有效。 | length(‘jose’, ‘UTF8’) | 4 |\n| lpad(string text, length int [, fill text]) | text | 将string通过前置字符fill（默认是一个空格）填充到长度length。如果string已经长于length，则它被（从右边）截断。 | lpad(‘hi’, 5, ‘xy’) | xyxhi |\n| ltrim(string text [, characters text]) | text | 从string的开头删除最长的只包含characters（默认是一个空格）的串 | ltrim(‘zzzytest’, ‘xyz’) | test |\n| md5(string) | text | 计算string的 MD5 哈希，返回十六进制的结果 | md5(‘abc’) | 900150983cd24fb0 d6963f7d28e17f72 |\n| parse\\_ident(qualified\\_identifier text [, strictmode boolean DEFAULT true ] ) | text[] | 把qualified\\_identifier分成一个标识符数组，移除单个标识符上的任何引号。默认情况下，最后一个标识符后面的多余字符会被当做错误。但是如果第二个参数为false，那么这一类多余的字符会被忽略（这种行为对于解析函数之类的对象名称有用）。注意这个函数不会截断超长标识符。如果想要进行截断，可以把结果转换成name[]。 | parse\\_ident(’“SomeSchema”.someTable’) | {SomeSchema,sometable} |\n| pg\\_client\\_encoding() | name | 当前的客户端编码名字 | pg\\_client\\_encoding() | SQL\\_ASCII |\n| quote\\_ident(string text) | text | 将给定字符串返回成合适的引用形式，使它可以在一个SQL语句字符串中被用作一个标识符。只有需要时才会加上引号（即，如果字符串包含非标识符字符或可能是大小写折叠的）。嵌入的引号会被正确地双写。 | quote\\_ident(‘Foo bar’) | “Foo bar” |\n| quote\\_literal(string text) | text | 将给定字符串返回成合适的引用形式，使它可以在一个SQL语句字符串中被用作一个字符串文字。嵌入的引号会被正确地双写。注意quote\\_literal对空输入返回空；如果参数可能为空，quote\\_nullable通常更合适。 | quote\\_literal(E’O'Reilly’) | ‘O’‘Reilly’ |\n| quote\\_literal(value anyelement) | text | 强迫给定值为文本并且接着将它用引号包围作为一个文本。嵌入的单引号和反斜线被正确的双写。 | quote\\_literal(42.5) | ‘42.5’ |\n| quote\\_nullable(string text) | text | 将给定字符串返回成合适的引用形式，使它可以在一个SQL语句字符串中被用作一个字符串文字；或者，如果参数为空，返回NULL。嵌入的引号会被正确地双写。 | quote\\_nullable(NULL) | NULL |\n| quote\\_nullable(value anyelement) | text | 强迫给定值为文本并且接着将它用引号包围作为一个文本；或者，如果参数为空，返回NULL。嵌入的单引号和反斜线被正确的双写。 | quote\\_nullable(42.5) | ‘42.5’ |\n| regexp\\_match(string text, pattern text [, flags text]) | text[] | 返回一个POSIX正则表达式与string的第一个匹配得到的子串。 | regexp\\_match(‘foobarbequebaz’, ‘(bar)(beque)’) | {bar,beque} |\n| regexp\\_matches(string text, pattern text [, flags text]) | setof text[] | 返回一个POSIX正则表达式与string匹配得到的子串。 | regexp\\_matches(‘foobarbequebaz’, ‘ba.’, ‘g’) | {bar} {baz} (2 rows) |\n| regexp\\_replace(string text, pattern text, replacement text [, flags text]) | text | 替换匹配一个POSIX正则表达式的子串。 | regexp\\_replace(‘Thomas’, ‘.[mN]a.’, ‘M’) | ThM |\n| regexp\\_split\\_to\\_array(string text, pattern text [, flags text ]) | text[] | 使用一个POSIX正则表达式作为分隔符划分string。 | regexp\\_split\\_to\\_array(‘hello world’, ‘\\s+’) | {hello,world} |\n| regexp\\_split\\_to\\_table(string text, pattern text [, flags text]) | setof text | 使用一个POSIX正则表达式作为分隔符划分string。 | regexp\\_split\\_to\\_table(‘hello world’, ‘\\s+’) | hello world (2 rows) |\n| repeat(string text, number int) | text | 重复string指定的number次 | repeat(‘Pg’, 4) | PgPgPgPg |\n| replace(string text, from text, to text) | text | 将string中出现的所有子串from替换为子串to | replace(‘abcdefabcdef’, ‘cd’, ‘XX’) | abXXefabXXef |\n| reverse(str) | text | 返回反转的字符串。 | reverse(‘abcde’) | edcba |\n| right(str text, n int) | text | 返回字符串中的最后n个字符。如果n为负，返回除最前面的|n|个字符外的所有字符。 | right(‘abcde’, 2) | de |\n| rpad(string text, length int [, fill text]) | text | 将string通过增加字符fill（默认为一个空格）填充到长度length。如果string已经长于length则它会被截断。 | rpad(‘hi’, 5, ‘xy’) | hixyx |\n| rtrim(string text [, characters text]) | text | 从string的结尾删除最长的只包含characters（默认是一个空格）的串 | rtrim(’testxxzx’, ‘xyz’) | test |\n| split\\_part(string text, delimiter text, field int) | text | 按delimiter划分string并返回给定域（从1开始计算） | split\\_part(‘abc~@~def~@~ghi’, ‘~@~’, 2) | def |\n| strpos(string, substring) | int | 指定子串的位置（和position(substring in string)相同，但是注意相反的参数顺序） | strpos(‘high’, ‘ig’) | 2 |\n| substr(string, from [, count]) | text | 提取子串（与substring(string from from for count)相同） | substr(‘alphabet’, 3, 2) | ph |\n| starts\\_with(string, prefix) | bool | 如果string以prefix开始则返回真。 | starts\\_with(‘alphabet’, ‘alph’) | t |\n| to\\_hex(number int or bigint) | text | 将number转换到它等效的十六进制表示 | to\\_hex(2147483647) | 7fffffff |\n| translate(string text, from text, to text) | text | string中任何匹配from集合中一个字符的字符会被替换成to集合中的相应字符。如果from比to长，from中的额外字符会被删除。 | translate(‘12345’, ‘143’, ‘ax’) | a2x5 |\n\nconcat、concat\\_ws和format函数是可变的，因此可以把要串接或格式化的值作为一个标记了VARIADIC关键字的数组进行传递。数组的元素被当作函数的独立普通参数一样处理。如果可变数组参数为 NULL，concat和concat\\_ws返回 NULL，但format把 NULL 当作一个零元素数组。\n\n**format**\n\n函数format根据一个格式字符串产生格式化的输出，其形式类似于 C 函数sprintf。\n\n```\nformat(formatstr text [, formatarg \"any\" [, ...] ])\n```\n\nformatstr是一个格式字符串，它指定了结果应该如何被格式化。格式字符串中的文本被直接复制到结果中，除了使用格式说明符的地方。格式说明符在字符串中扮演着占位符的角色，它定义后续的函数参数如何被格式化及插入到结果中。每一个formatarg参数会被根据其数据类型的常规输出规则转换为文本，并接着根据格式说明符被格式化和插入到结果字符串中。\n\n格式说明符由一个%字符开始并且有这样的形式\n\n```\n%[position][flags][width]type\n```\n\n其中的各组件域是：\n\n**position**（可选）\n\n一个形式为n$的字符串，其中n是要打印的参数的索引。索引 1 表示formatstr之后的第一个参数。如果position被忽略，默认会使用序列中的下一个参数。\n\nflags（可选）\n\n控制格式说明符的输出如何被格式化的附加选项。当前唯一支持的标志是一个负号（-），它将导致格式说明符的输出会被左对齐（left-justified）。除非width域也被指定，否者这个域不会产生任何效果。\n\nwidth（可选）\n\n指定用于显示格式说明符输出的最小字符数。输出将被在左部或右部（取决于-标志）用空格填充以保证充满该宽度。太小的宽度设置不会导致输出被截断，但是会被简单地忽略。宽度可以使用下列形式之一指定：一个正整数；一个星号（*）表示使用下一个函数参数作为宽度；或者一个形式为*n$的字符串表示使用第n个函数参数作为宽度。\n\n如果宽度来自于一个函数参数，则参数在被格式说明符的值使用之前就被消耗掉了。如果宽度参数是负值，结果会在长度为abs(width)的域中被左对齐（如果-标志被指定）。\n\ntype（必需）\n\n格式转换的类型，用于产生格式说明符的输出。支持下面的类型：\n\n· s将参数值格式化为一个简单字符串。一个控制被视为一个空字符串。\n\n· I将参数值视作 SQL 标识符，并在必要时用双写引号包围它。如果参数为空，将会是一个错误（等效于quote\\_ident）。\n\n· L将参数值引用为 SQL 文字。一个空值将被显示为不带引号的字符串NULL（等效于quote\\_nullable）。\n\n除了以上所述的格式说明符之外，要输出一个文字形式的%字符，可以使用特殊序列%%。\n\n下面有一些基本的格式转换的例子：\n\n```\nSELECT format('Hello %s', 'World');\n结果：Hello World\n\nSELECT format('Testing %s, %s, %s, %%', 'one', 'two', 'three');\n结果：Testing one, two, three, %\n\nSELECT format('INSERT INTO %I VALUES(%L)', 'Foo bar', E'O\\'Reilly');\n结果：INSERT INTO \"Foo bar\" VALUES('O''Reilly')\n\nSELECT format('INSERT INTO %I VALUES(%L)', 'locations', 'C:\\Program Files');\n结果：INSERT INTO locations VALUES(E'C:\\\\Program Files')\n```\n\n下面是使用width域和-标志的例子：\n\n```\nSELECT format('|%10s|', 'foo');\n结果：|       foo|\n\nSELECT format('|%-10s|', 'foo');\n结果：|foo       |\n\nSELECT format('|%*s|', 10, 'foo');\n结果：|       foo|\n\nSELECT format('|%*s|', -10, 'foo');\n结果：|foo       |\n\nSELECT format('|%-*s|', 10, 'foo');\n结果：|foo       |\n\nSELECT format('|%-*s|', -10, 'foo');\n结果：|foo       |\n```\n\n这些例子展示了position域的例子：\n\n```\nSELECT format('Testing %3$s, %2$s, %1$s', 'one', 'two', 'three');\n结果：Testing three, two, one\n\nSELECT format('|%*2$s|', 'foo', 10, 'bar');\n结果：|       bar|\n\nSELECT format('|%1$*2$s|', 'foo', 10, 'bar');\n结果：|       foo|\n```\n\n不同于标准的 C 函数sprintf，PostgreSQL的format函数允许将带有或者不带有position域的格式说明符被混在同一个格式字符串中。一个不带有position域的格式说明符总是使用最后一个被消耗的参数的下一个参数。另外，format函数不要求所有函数参数都被用在格式字符串中。例如：\n\n```\nSELECT format('Testing %3$s, %2$s, %s', 'one', 'two', 'three');\n结果：Testing three, two, three\n```\n\n对于安全地构造动态 SQL 语句，%I和%L格式说明符特别有用。\n\n## 二进制串函数与操作符 [*link*](#%e4%ba%8c%e8%bf%9b%e5%88%b6%e4%b8%b2%e5%87%bd%e6%95%b0%e4%b8%8e%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n本节描述那些检查和操作类型为bytea的值的函数和操作符。\n\nSQL定义了一些使用关键字而不是逗号来分割参数的串函数。\n\n**表.SQL二进制串函数和操作符**\n\n| 函数 | 返回类型 | 描述 | 例子 | 结果 |\n| --- | --- | --- | --- | --- |\n| string || string | bytea | 串连接 | ‘\\Post’::bytea || ‘\\047gres\\000’::bytea | \\Post’gres\\000 |\n| octet\\_length(string) | int | 二进制串中的字节数 | octet\\_length(‘jo\\000se’::bytea) | 5 |\n| overlay(string placing string from int [for int]) | bytea | 替换子串 | overlay(‘Th\\000omas’::bytea placing ‘\\002\\003’::bytea from 2 for 3) | T\\002\\003mas |\n| position(substring in string) | int | 指定子串的位置 | position(’\\000om’::bytea in ‘Th\\000omas’::bytea) | 3 |\n| substring(string [from int] [for int]) | bytea | 提取子串 | substring(‘Th\\000omas’::bytea from 2 for 3) | h\\000o |\n| trim([both] bytes from string) | bytea | 从string的开头或结尾删除只包含出现在bytes中字节的最长串 | trim(’\\000\\001’::bytea from ‘\\000Tom\\001’::bytea) | Tom |\n\n还有一些二进制串处理函数可以使用，在下表列出。\n\n**表 . 其他二进制串函数**\n\n| **函数** | **返回类型** | **描述** | **例子** | **结果** |\n| --- | --- | --- | --- | --- |\n| btrim(string bytea, bytes bytea) | bytea | 从string的开头或结尾删除只由出现在bytes中字节组成的最长串 | btrim(’\\000trim\\001’::bytea, ‘\\000\\001’::bytea) | trim |\n| decode(string text, format text) | bytea | 从string中的文本表示解码二进制数据。format的参数和在encode中一样。 | decode(‘123\\000456’, ’escape’) | 123\\000456 |\n| encode(data bytea, format text) | text | 将二进制数据编码为一个文本表示。支持的格式有：base64、hex、escape。escape将零字节和高位组字节转换为八进制序列（\\nnn）和双反斜线。 | encode(‘123\\000456’::bytea, ’escape’) | 123\\000456 |\n| get\\_bit(string, offset) | int | 从串中抽取位 | get\\_bit(‘Th\\000omas’::bytea, 45) | 1 |\n| get\\_byte(string, offset) | int | 从串中抽取字节 | get\\_byte(‘Th\\000omas’::bytea, 4) | 109 |\n| length(string) | int | 二进制串的长度 | length(‘jo\\000se’::bytea) | 5 |\n| md5(string) | text | 计算string的MD5哈希码，以十六进制形式返回结果 | md5(‘Th\\000omas’::bytea) | 8ab2d3c9689aaf18b4958c334c82d8b1 |\n| set\\_bit(string, offset, newvalue) | bytea | 设置串中的位 | set\\_bit(‘Th\\000omas’::bytea, 45, 0) | Th\\000omAs |\n| set\\_byte(string, offset, newvalue) | bytea | 设置串中的字节 | set\\_byte(‘Th\\000omas’::bytea, 4, 64) | Th\\000o@as |\n| sha224(bytea) | bytea | SHA-224哈希 | sha224(‘abc’) | \\x23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7 |\n| sha256(bytea) | bytea | SHA-256哈希 | sha256(‘abc’) | \\xba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad |\n| sha384(bytea) | bytea | SHA-384哈希 | sha384(‘abc’) | \\xcb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7 |\n| sha512(bytea) | bytea | SHA-512哈希 | sha512(‘abc’) | \\xddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f |\n\nget\\_byte和set\\_byte把一个二进制串中的一个字节计数为字节 0。get\\_bit和set\\_bit在每一个字节中从右边起计数位；例如位 0 是第一个字节的最低有效位，而位 15 是第二个字节的最高有效位。\n\n注意由于历史原因，函数md5返回的是一个十六进制编码的text值，而SHA-2函数返回类型bytea。可以使用函数encode和decode在两者之间转换，例如encode(sha256(‘abc’), ‘hex’)可以得到一个十六进制编码的文本表示。\n\n## 位串函数和操作符 [*link*](#%e4%bd%8d%e4%b8%b2%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n本节描述用于检查和操作位串的函数和操作符，也就是操作类型为bit和bit varying的值的函数和操作符。除了常用的比较操作符之外，还可以使用表里显示的操作符。&、|和#的位串操作数必须等长。在移位的时候，保留原始的位串的的长度，如例子所示。\n\n**表** **位串操作符**\n\n| 操作符 | 描述 | 例子 | 结果 |\n| --- | --- | --- | --- |\n| || | 连接 | B'10001’ || B'011' | 10001011 |\n| & | 按位与 | B'10001’ & B'01101' | 00001 |\n| | | 按位或 | B'10001’ | B'01101' | 11101 |\n| # | 按位异或 | B'10001’ # B'01101' | 11100 |\n| ~ | 按位求反 | ~ B'10001' | 01110 |\n| « | 按位左移 | B'10001’ « 3 | 01000 |\n| » | 按位右移 | B'10001’ » 2 | 00100 |\n\n下面的SQL标准函数除了可以用于字符串之外，也可以用于位串： length、 bit\\_length、 octet\\_length、 position、 substring、 overlay。\n\n下面的函数除了可以用于二进制串之外，也可以用于位串： get\\_bit、 set\\_bit。 当使用于一个位串时，这些函数将串的第一（最左）位计数为位 0。\n\n另外，我们可以在整数和bit之间来回转换。一些例子：\n\n```\n44::bit(10)                    0000101100\n44::bit(3)                     100\ncast(-44 as bit(12))           111111010100\n'1110'::bit(4)::integer        14\n```\n\n请注意，如果只是转换为“bit”，意思是转换成bit(1)，因此只会转换整数的最低有效位。\n\n## 模式匹配 [*link*](#%e6%a8%a1%e5%bc%8f%e5%8c%b9%e9%85%8d)\n\nMemFireDB提供了三种独立的实现模式匹配的方法：SQL LIKE操作符、更近一些的SIMILAR TO操作符（SQL:1999 里添加进来的）和POSIX-风格的正则表达式。除了这些基本的“这个串匹配这个模式吗？”操作符外，还有一些函数可用于提取或替换匹配子串并在匹配位置分离一个串。\n\n### LIKE [*link*](#like)\n\n```\nstring LIKE pattern [ESCAPE escape-character]\nstring NOT LIKE pattern [ESCAPE escape-character]\n```\n\n如果该string匹配了提供的pattern，那么LIKE表达式返回真（和预期的一样，如果LIKE返回真，那么NOT LIKE表达式返回假， 反之亦然。一个等效的表达式是NOT (string LIKE pattern)）。\n\n如果pattern不包含百分号或者下划线，那么该模式只代表它本身的串；这时候LIKE的行为就象等号操作符。在pattern里的下划线 （\\_）代表（匹配）任何单个字符； 而一个百分号（%）匹配任何零或更多个字符的序列。\n\n一些例子：\n\n```\n'abc' LIKE 'abc'    true\n'abc' LIKE 'a%'     true\n'abc' LIKE '_b_'    true\n'abc' LIKE 'c'      false\n```\n\nLIKE模式匹配总是覆盖整个串。因此，要匹配在串内任何位置的序列，该模式必须以百分号开头和结尾。\n\n要匹配文本的下划线或者百分号，而不是匹配其它字符， 在pattern里相应的字符必须 前导逃逸字符。缺省的逃逸字符是反斜线，但是你可以用ESCAPE子句指定一个不同的逃逸字符。 要匹配逃逸字符本身，写两个逃逸字符。\n\n请注意反斜线在串文本里已经有特殊含义了，所以如果你写一个 包含反斜线的模式常量，那你就要在 SQL 语句里写两个反斜线。 因此，写一个匹配单个反斜线的模式实际上要在语句里写四个反斜线。 你可以通过用 ESCAPE 选择一个不同的逃逸字符 来避免这样；这样反斜线就不再是 LIKE 的特殊字符了。 但仍然是字符文本分析器的特殊字符，所以你还是需要两个反斜线。) 我们也可以通过写ESCAPE ‘‘的方式不选择逃逸字符，这样可以有效地禁用逃逸机制，但是没有办法关闭下划线和百分号在模式中的特殊含义。\n\n关键字ILIKE可以用于替换LIKE， 它令该匹配根据活动区域成为大小写无关。这个不属于SQL标准而是一个PostgreSQL扩展。\n\n操作符~~等效于LIKE， 而~~\\*对应ILIKE。 还有 !~~和!~~\\*操作符分别代表NOT LIKE和NOT ILIKE。所有这些操作符都是PostgreSQL特有的。\n\n在仅需要从字符串的开始部分搜索的情况，还有前缀操作符^@和相应的starts\\_with函数可以使用。\n\n### SIMILAR TO正则表达式 [*link*](#similar-to%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f)\n\n```\nstring SIMILAR TO pattern [ESCAPE escape-character]\nstring NOT SIMILAR TO pattern [ESCAPE escape-character]\n```\n\nSIMILAR TO操作符根据自己的模式是否匹配给定串而返回真或者假。 它和LIKE非常类似，只不过它使用 SQL 标准定义的正则表达式理解模式。 SQL 正则表达式是在LIKE标记和普通的正则表达式标记的奇怪的杂交。\n\n类似LIKE，SIMILAR TO操作符只有在它的模式匹配整个串的时候才能成功；这一点和普通的 正则表达式的行为不同，在普通的正则表达式里，模式匹配串的任意部分。 和LIKE类似的地方还有，SIMILAR TO使用\\_和%作为分别代表任意单个字符和任意串的通配符（这些可以比得上 POSIX 正则表达式里的.和.\\*）。\n\n除了这些从LIKE借用的功能之外，SIMILAR TO支持下面这些从 POSIX 正则表达式借用的 模式匹配元字符：\n\n· |表示选择（两个候选之一）。\n\n· \\*表示重复前面的项零次或更多次。\n\n· +表示重复前面的项一次或更多次。\n\n· ?表示重复前面的项零次或一次。\n\n· {m}表示重复前面的项刚好m次。\n\n· {m,}表示重复前面的项m次或更多次。\n\n· {m,n}表示重复前面的项至少m次并且不超过n次。\n\n· 可以使用圆括号()把多个项组合成一个逻辑项。\n\n· 一个方括号表达式[…]声明一个字符类，就像 POSIX 正则表达式一样。\n\n注意点号（.）不是SIMILAR TO的一个元字符。\n\n和LIKE一样，反斜线禁用所有这些元字符的特殊含义；当然我们也可以用ESCAPE指定一个不同的逃逸字符。\n\n一些例子：\n\n```\n'abc' SIMILAR TO 'abc'      true\n'abc' SIMILAR TO 'a'        false\n'abc' SIMILAR TO '%(b|d)%'  true\n'abc' SIMILAR TO '(b|c)%'   false\n```\n\n带三个参数的substring，即substring(string from pattern for escape-character)，提供了抽取一个匹配 SQL 正则表达式的子串的方法。和SIMILAR TO一样，声明的模式必须匹配整个数据串，否则函数失败并返回空值。为了标识在成功的时候应该返回的模式部分，模式 必须包含逃逸字符的两次出现，并且后面要跟上双引号（\"）。匹配这两个标记之间的模式的文本将被返回。\n\n一些例子，使用#“定界返回串：\n\n```\nsubstring('foobar' from '%#\"o_b#\"%' for '#')   oob\nsubstring('foobar' from '#\"o_b#\"%' for '#')    NULL\n```\n\n### POSIX正则表达式 [*link*](#posix%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f)\n\n下表列出了所有可用于 POSIX 正则表达式模式匹配的操作符。\n\n**表 正则表达式匹配操作符**\n\n| **操作符** | **描述** | **例子** |\n| --- | --- | --- |\n| ~ | 匹配正则表达式，大小写敏感 | ’thomas’ ~ ‘.*thomas.*’ |\n| ~\\* | 匹配正则表达式，大小写不敏感 | ’thomas’ ~\\* ‘.*Thomas.*’ |\n| !~ | 不匹配正则表达式，大小写敏感 | ’thomas’ !~ ‘.*Thomas.*’ |\n| !~\\* | 不匹配正则表达式，大小写不敏感 | ’thomas’ !~\\* ‘.*vadim.*’ |\n\nPOSIX正则表达式提供了比LIKE和SIMILAR TO操作符更强大的含义。许多 Unix 工具，例如egrep、sed或awk使用一种与我们这里描述的类似的模式匹配语言。\n\n正则表达式是一个字符序列，它是定义一个串集合 （一个正则集）的缩写。 如果一个串是正则表达式描述的正则集中的一员时， 我们就说这个串匹配该正则表达式。 和LIKE一样，模式字符准确地匹配串字符， 除非在正则表达式语言里有特殊字符 — 不过正则表达式用的 特殊字符和LIKE用的不同。 和LIKE模式不一样的是，正则表达式允许匹配串里的任何位置，除非该正则表达式显式地挂接在串的开头或者结尾。\n\n一些例子：\n\n```\n'abc' ~ 'abc'    true\n'abc' ~ '^a'     true\n'abc' ~ '(b|d)'  true\n'abc' ~ '^(b|c)' false\n```\n\nPOSIX模式语言的详细描述见下文。\n\n带两个参数的substring函数，即**substring(string from pattern)**，提供了抽取一个匹配 POSIX 正则表达式模式的子串的方法。如果没有匹配它返回空值，否则就是文本中匹配模式的那部分。 但是如果该模式包含任何圆括号，那么将返回匹配第一对子表达式（对应第一个左圆括号的） 的文本。如果你想在表达式里使用圆括号而又不想导致这个例外，那么你可以在整个表达式外边放上一对圆括号。 如果你需要在想抽取的子表达式前有圆括号，参阅后文描述的非捕获性圆括号。\n\n一些例子：\n\n```\nsubstring('foobar' from 'o.b')     oob\nsubstring('foobar' from 'o(.)b')   o\n```\n\n**regexp\\_replace**函数提供了将匹配 POSIX 正则表达式模式的子串替换为新文本的功能。 它的语法是 **regexp\\_replace(source, pattern, replacement [, flags ])**。 如果没有匹配pattern，那么返回不加修改的source串。 如果有匹配，则返回的source串里面的匹配子串将被replacement串替换掉。replacement串可以包含\\n， 其中\\n是 1 到 9， 表明源串里匹配模式里第n个圆括号子表达式的子串应该被插入， 并且它可以包含&表示应该插入匹配整个模式的子串。如果你需要放一个文字形式的反斜线在替换文本里，那么写\\。flags参数是一个可选的文本串，它包含另个或更多单字母标志，这些标志可以改变函数的行为。标志i指定大小写无关的匹配，而标志g指定替换每一个匹配的子串而不仅仅是第一个。\n\n一些例子：\n\n```\nregexp_replace('foobarbaz', 'b..', 'X')\n                                   fooXbaz\nregexp_replace('foobarbaz', 'b..', 'X', 'g')\n                                   fooXX\nregexp_replace('foobarbaz', 'b(..)', 'X\\1Y', 'g')\n                                   fooXarYXazY\n```\n\nregexp\\_match返回一个文本数组，它包含一个POSIX正则表达式模式与一个字符串第一个匹配所得到的子串。其语法是**regexp\\_match(string, pattern [, flags ])**。如果没有匹配，则结果为NULL。如果找到一个匹配并且pattern不包含带括号的子表达式，那么结果是一个单一元素的文本数组，其中包含匹配整个模式的子串。如果找到一个匹配并且pattern含有带括号的子表达式，那么结果是一个文本数组，其中第n个元素是与pattern的第n个圆括号子表达式匹配的子串（“非捕获”圆括号不计入在内，详见下文）。flags参数是一个可选的文本字符串，它包含零个或者更多个可以改变该函数行为的单字母标志。所支持的标志在表 中介绍。\n\n**一些例子**：\n\n```\nSELECT regexp_match('foobarbequebaz', 'bar.*que');\n regexp_match\n--------------\n {barbeque}\n(1 row)\n\nSELECT regexp_match('foobarbequebaz', '(bar)(beque)');\n regexp_match\n--------------\n {bar,beque}\n(1 row)\n```\n\n在通常情况下，人们只是想要的大整个匹配的子串或者NULL（没有匹配），可以写成这样\n\n```\nSELECT (regexp_match('foobarbequebaz', 'bar.*que'))[1];\n regexp_match\n--------------\n barbeque\n(1 row)\n```\n\nregexp\\_matches函数返回一个文本数组的集合，其中包含着一个POSIX正则表达式模式与一个字符串匹配得到的子串。它和regexp\\_match具有相同的语法。如果没有匹配，这个函数不会返回行。如果有一个匹配并且给定了g标志，则返回一行。如果有N个匹配并且给定了g标志，则返回N行。每一个返回的行都是一个文本数组，其中含有整个匹配的子串或者匹配pattern的圆括号子表达式的子串，这和上面对regexp\\_match的介绍一样。regexp\\_matches接受展示的所有标志，外加令它返回所有匹配而不仅仅是第一个匹配的g标志。\n\n一些例子：\n\n```\nSELECT regexp_matches('foo', 'not there');\n regexp_matches\n----------------\n(0 rows)\n\nSELECT regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)', 'g');\n regexp_matches\n----------------\n {bar,beque}\n {bazil,barf}\n(2 rows)\n```\n\n提示：在大部分情况下，regexp\\_matches()应该与g标志一起使用，因为如果只是想要第一个匹配，使用regexp\\_match()会更加简单高效。\n\nregexp\\_split\\_to\\_table把一个 POSIX 正则表达式模式当作一个定界符来分离一个串。它的语法形式是regexp\\_split\\_to\\_table(string, pattern [, flags ])。如果没有与pattern的匹配，该函数返回string。如果有至少有一个匹配，对每一个匹配它都返回从上一个匹配的末尾（或者串的开头）到这次匹配开头之间的文本。当没有更多匹配时，它返回从上一次匹配的末尾到串末尾之间的文本。flags参数是一个可选的文本串，它包含零个或更多单字母标志，这些标识可以改变该函数的行为。regexp\\_split\\_to\\_table能支持的标志在表 9.22中描述。\n\nregexp\\_split\\_to\\_array函数的行为和regexp\\_split\\_to\\_table相同，不过regexp\\_split\\_to\\_array会把它的结果以一个text数组的形式返回。它的语法是regexp\\_split\\_to\\_array(string, pattern [, flags ])。这些参数和regexp\\_split\\_to\\_table的相同。\n\n一些例子：\n\n```\nSELECT foo FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', '\\s+') AS foo;\n  foo\n-------\n the\n quick\n brown\n fox\n jumps\n over\n the\n lazy\n dog\n(9 rows)\n\nSELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', '\\s+');\n              regexp_split_to_array\n-----------------------------------------------\n {the,quick,brown,fox,jumps,over,the,lazy,dog}\n(1 row)\n\nSELECT foo FROM regexp_split_to_table('the quick brown fox', '\\s*') AS foo;\n foo\n-----\n t\n h\n e\n q\n u\n i\n c\n k\n b\n r\n o\n w\n n\n f\n o\n x\n(16 rows)\n```\n\n正如上一个例子所示，正则表达式分离函数会忽略零长度的匹配，这种匹配发生在串的开头或结尾或者正好发生在前一个匹配之后。这和正则表达式匹配的严格定义是相悖的，后者由regexp\\_match和regexp\\_matches实现，但是通常前者是实际中最常用的行为。其他软件系统如Perl也使用相似的定义。\n\n#### **正则表达式细节** [*link*](#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e7%bb%86%e8%8a%82)\n\n正则表达式（RE），在POSIX 1003.2 中定义， 它有两种形式：扩展的RE或者是ERE（大概地说就是那些在egrep里的）， 基本的RE或者是BRE（大概地说就是那些在ed里的）。MemFireDB支持两种形式，并且还实现了一些POSIX标准中没有但是在类似 Perl 或者 Tcl 这样的语言中得到广泛应用的一些扩展。使用了那些非POSIX扩展的RE叫高级RE， 或者本文档里说的ARE。ARE 几乎完全是 ERE 的超集，但是 BRE 有几个符号上的不兼容（以及更多的限制）。我们首先描述 ARE 和 ERE 形式， 描述那些只适用于 ARE 的特性，然后描述 BRE 的区别是什么。\n\n**注意**:\n\n一个正则表达式被定义为一个或更多分支，它们之间被|分隔。只要能匹配其中一个分支的东西都能匹配正则表达式。\n\n一个分支是一个或多个量化原子或者约束连接而成。一个原子匹配第一个，然后后面的原子匹配第二个， 以此类推；一个空分支匹配空串。\n\n一个量化原子是一个原子， 后面可能跟着一个量词。没有量词的时候，它匹配一个原子， 有量词的时候，它可以匹配若干个原子。\n\n一个约束匹配一个空串，但只是在满足特定条件下才匹配。 约束可以在能够使用原子的地方使用，只是它不能跟着量词。简单的约束在表里显示； 更多的约束稍后描述。\n\n**表.正则表达式原子**\n\n| 原子 | 描述 |\n| --- | --- |\n| (re) | （其中re是任何正则表达式） 匹配一个对re的匹配，匹配将为可能的报告被记下 |\n| (?:re) | 同上，但是匹配不会为了报告而被记下 （一个“非捕获”圆括号集） （只对 ARE） |\n| . | 匹配任意单个字符 |\n| [chars] | 一个方括号表达式， 匹配chars中的任意一个（详见第 9.7.3.2 节） |\n| \\k | （其中k是一个非字母数字字符） 匹配一个被当作普通字符看待的特定字符， 例如，\\匹配一个反斜线字符 |\n| \\c | 其中c是一个字母数字 （可能跟着其它字符），它是一个逃逸， 参阅第 9.7.3.3 节（仅对 ARE； 在 ERE 和 BRE 中，它匹配c） |\n| { | 如果后面跟着一个字符，而不是数字， 那么就匹配左花括弧{；如果跟着一个数字， 那么它是range的开始（见下文） |\n| x | 其中x是一个没有其它意义的单个字符，则匹配该字符 |\n\nRE 不能以反斜线（\\）结尾。\n\n注意:如果你关掉了standard\\_conforming\\_strings，任何你写在文字串常量中的反斜线都需要被双写。\n\n表 . 正则表达式量词\n\n| 量词 | 匹配 |\n| --- | --- |\n| \\* | 一个由原子的 0 次或更多次匹配组成的序列 |\n| + | 一个由原子的 1 次或更多次匹配组成的序列 |\n| ? | 一个由原子的 0 次或 1 次匹配组成的序列 |\n| {m} | 一个由原子的正好m次匹配组成的序列 |\n| {m,} | 一个由原子的m次或更多次匹配组成的序列 |\n| {m,n} | 一个由原子的从m次到n次（包括）匹配组成的序列；m不能超过n |\n| \\*? | \\*的非贪婪版本 |\n| +? | +的非贪婪版本 |\n| ?? | ?的非贪婪版本 |\n| {m}? | {m}的非贪婪版本 |\n| {m,}? | {m,}的非贪婪版本 |\n| {m,n}? | {m,n}的非贪婪版本 |\n\n使用{…}的形式被称作范围。 一个范围内的数字m和n都是无符号十进制整数， 允许的数值从 0 到 255（包含）。\n\n非贪婪的量词（只在 ARE 中可用）匹配对应的正常 （贪婪）模式，区别是它寻找最少的匹配，而不是最多的匹配。\n\n注意:一个量词不能紧跟在另外一个量词后面，例如\\*\\*是非法的。量词不能作为表达式或者子表达式的开头，也不能跟在^或者|后面。\n\n表 正则表达式约束\n\n| 约束 | 描述 |\n| --- | --- |\n| ^ | 串开头的匹配 |\n| $ | 串末尾的匹配 |\n| (?=re) | 在匹配re的子串开始的任何点的positive lookahead匹配（只对 ARE） |\n| (?!re) | 在匹配re的子串开始的任何点的negative lookahead匹配（只对 ARE） |\n| (?<=re) | 只要有一个点上有一个子串匹配re端， positive lookbehind就在这个点上匹配（只对 ARE） |\n| (?<!re) | 只要有一个点上没有子串匹配re端， negative lookbehind就在这个点上匹配（只对 ARE） |\n\n#### **方括号表达式** [*link*](#%e6%96%b9%e6%8b%ac%e5%8f%b7%e8%a1%a8%e8%be%be%e5%bc%8f)\n\n方括号表达式是一个包围在[]中的字符列表。它通常匹配列表中的任意单个字符（但见下文）。 如果列表以^开头，它匹配任意单个不在该列表参与部分中的字符。如果该列表中两个字符用-隔开， 那它就是那两个字符（包括在内）之间的所有字符范围的缩写，例如，在ASCII中[0-9]匹配任何十进制数字。两个范围共享一个端点是非法的，例如，a-c-e。范围与字符集关系密切， 可移植的程序应该避免依靠它们。\n\n想在列表中包含文本]，可以让它做列表的首字符（如果使用了^，需要放在其后）。 想在列表中包含文本-，可以让它做列表的首字符或者尾字符，或者一个范围的第二个端点。 想在列表中把文本-当做范围的起点， 把它用[.和.]包围起来，这样它就成为一个排序元素（见下文）。 除了这些字符本身、一些用[的组合（见下段）以及逃逸（只在 ARE 中有效）以外，所有其它特殊字符 在方括号表达式里都失去它们的特殊含义。特别是，在 ERE 和 BRE 规则下\\不是特殊的， 但在 ARE 里，它是特殊的（引入一个逃逸）。\n\n在一个方括号表达式里，一个排序元素（一个字符、一个被当做一个单一字符排序的多字符序列或者一个表示上面两种情况的排序序列名称） 包含在[.和.]里面的时候表示该排序元素的字符序列。该序列被当做该方括号列表 的一个单一元素。这允许一个包含多字符排序元素的方括号表达式去匹配多于一个字符，例如，如果排序序列包含一个ch排序元素， 那么 RE [[.ch.]]\\*c匹配chchcc的头五个字符。\n\n在方括号表达式里，包围在[=和=]里的排序元素是一个等价类， 代表等效于那一个的所有排序元素的字符序列，包括它本身（如果没有其它等效排序元素，那么就好象封装定界符是[.和 .]）。例如，如果o和^是一个等价类的成员，那么[[=o=]]、[[=^=]]和[o^]都是同义的。一个等价类不能是一个范围的端点。\n\n在方括号表达式里，在[:和:]里面封装的字符类的名字代表属于该类的所有字符的列表。 标准的字符类名字是：alnum、 alpha、blank、 cntrl、digit、 graph、lower、 print、punct、 space、upper、 xdigit。 它们代表在ctype中定义的字符类。 一个区域可以会提供其他的类。字符类不能用做一个范围的端点。\n\n方括号表达式里有两个特例：方括号表达式[[:<:]]和[[:>:]]是约束，分别匹配一个单词开头和结束的空串。 单词定义为一个单词字符序列，前面和后面都没有其它单词字符。单词字符是一个alnum字符（和ctype中定义的一样） 或者一个下划线。这是一个扩展，兼容POSIX 1003.2， 但那里面并没有说明， 而且在准备移植到其他系统里去的软件里一定要小心使用。通常下文描述的约束逃逸更好些（它们并非更标准，但是更容易键入）。\n\n#### **正则表达式逃逸** [*link*](#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e9%80%83%e9%80%b8)\n\n逃逸是以\\开头，后面跟着一个字母数字字符得特殊序列。 逃逸有好几种变体：字符项、类缩写、约束逃逸以及后引用。在 ARE 里， 如果一个\\后面跟着一个字母数字，但是并未组成一个合法的逃逸， 那么它是非法的。在 ERE 中没有逃逸：在方括号表达式之外，一个后面跟着字母数字字符的\\只是表示该字符是一个普通的字符，而且在一个方括号表达式里，\\是一个普通的字符（后者实际上在 ERE 和 ARE 不兼容）。\n\n字符项逃逸用于便于我们在 RE 中声明那些不可打印的或其他习惯的字符。\n\n类缩写逃逸用来提供一些常用的字符类缩写。。\n\n约束逃逸是一个约束，如果满足特定的条件，它匹配该空串。\n\n后引用（\\n）匹配数字\\n指定的被前面的圆括号子表达式匹配的同一个串。例如， ([bc])\\1匹配bb或者cc， 但是不匹配bc或者cb。RE 中子表达式必须完全在后引用前面。子表达式以它们的先导圆括号的顺序编号。非捕获圆括号并不定义子表达式。\n\n**表 正则表达式字符项逃逸**\n\n| 逃逸 | 描述 |\n| --- | --- |\n| \\a | 警告（响铃）字符，和 C 中一样 |\n| \\b | 退格，和 C 中一样 |\n| \\B | 反斜线（\\）的同义词，用来减少双写反斜线 |\n| \\cX | （其中X是任意字符）低序5位和X相同的字符，它的其他位都是零 |\n| \\e | 排序序列名为ESC的字符，如果无法做到该字符为八进制值 033 |\n| \\f | 换页，和 C 中一样 |\n| \\n | 新行，和 C 中一样 |\n| \\r | 回车，和 C 中一样 |\n| \\t | 水平制表符，和 C 中一样 |\n| \\uwxyz | （其中wxyz正好是四个十六进制位）十六进制值为0xwxyz的字符 |\n| \\Ustuvwxyz | （其中stuvwxyz正好是八个十六进制位）十六进制值为0xstuvwxyz的字符 |\n| \\v | 垂直制表符，和 C 中一样 |\n| \\xhhh | （其中hhh是十六进制位的任意序列）十六进制值为0xhhh的字符（一个单一字符，不管用了多少个十六进制位） |\n| \\0 | 值为0（空字节）的字符 |\n| \\xy | （其中xy正好是两个八进制位，并且不是一个后引用）八进制值为0xy的字符 |\n| \\xyz | （其中xyz正好是三个八进制位，并且不是一个后引用）八进制值为0xyz的字符 |\n\n十六进制位是0-9、a-f和A-F。八进制位是0-7。\n\n指定 ASCII 范围（0-127）之外的值的数字字符项转义的含义取决于数据库编码。 当编码是 UTF-8 时，转义值等价于 Unicode 代码点，例如 \\u1234表示字符U+1234。对于其他多字节编码， 字符项转义通常只是指定该字符的字节值的串接。如果该转义值不对应数据库编码 中的任何合法字符，将不会发生错误，但是它不会匹配任何数据。\n\n字符项逃逸总是被当作普通字符。例如，\\135是 ASCII 中的]， 但\\135并不终止一个方括号表达式。\n\n**表 正则表达式类缩写逃逸**\n\n| 逃逸 | 描述 |\n| --- | --- |\n| \\d | `[[:digit:]]` |\n| \\s | `[[:space:]]` |\n| \\w | `[[:alnum:]_]`（注意下划线是被包括的） |\n| \\D | `[^[:digit:]]` |\n| \\S | `[^[:space:]]` |\n| \\W | `[^[:alnum:]_]` （注意下划线是被包括的） |\n\n在方括号表达式里，\\d、\\s和\\w会失去它们的外层方括号，而\\D、\\S和 \\W是非法的（也就是说，例如[a-c\\d]等效于[a-c[:digit:]]。同样[a-c\\D]等效于 `[a-c^[:digit:]]`的，也是非法的）。\n\n**表.正则表达式约束逃逸**\n\n| 逃逸 | 描述 |\n| --- | --- |\n| \\A | 只在串开头匹配 |\n| \\m | 只在一个词的开头匹配 |\n| \\M | 只在一个词的末尾匹配 |\n| \\y | 只在一个词的开头或末尾匹配 |\n| \\Y | 只在一个词的不是开头或末尾的点上匹配 |\n| \\Z | 只在串的末尾匹配 |\n\n一个词被定义成在上面[[:<:]]和[[:>:]]中的声明。在方括号表达式里，约束逃逸是非法的。\n\n**表 正则表达式后引用**\n\n| 逃逸 | 描述 |\n| --- | --- |\n| \\m | （其中m是一个非零位）一个到第m个子表达式的后引用 |\n| \\mnn | （其中m是一个非零位，并且nn是一些更多的位，并且十六进制值mnn不超过目前能看到的封闭捕获圆括号的数目）一个到第mnn个子表达式的后引用 |\n\n注意\n\n在八进制字符项逃逸和后引用之间有一个历史继承的歧义存在，这个歧义是 通过下面的启发式规则解决的，像上面描述地那样。前导零总是表示这是一个八进制逃逸。 而单个非零数字，如果没有跟着任何其它位，那么总是被认为后引用。 一个多位的非零开头的序列也被认为是后引用，只要它出现在合适的子表达式后面 （也就是说，在后引用的合法范围中的数），否则就被认为是一个八进制。\n\n#### **正则表达式元语法** [*link*](#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%85%83%e8%af%ad%e6%b3%95)\n\n除了上面描述的主要语法之外，还有几种特殊形式和杂项语法。\n\n如果一个 RE 以\\*\\*\\*:开头，那么剩下的 RE 都被当作 ARE。如果一个 RE 以\\*\\*\\*=开头， 那么剩下的 RE 被当作一个文本串，所有的字符都被认为是一个普通字符。\n\n一个 ARE 可以以嵌入选项开头：一个序列(?xyz)（这里的xyz是一个或多个字母字符）声明影响剩余 RE 的选项。 这些选项覆盖任何前面判断的选项 — 特别地，它们可以覆盖一个正则表达式操作符隐含的大小写敏感的行为，或者覆盖flags参数中的正则表达式函数。可用的选项字母在表中显示。注意这些同样的选项字母也被用在正则表达式函数的flags参数中。\n\n**表 ARE嵌入选项字母**\n\n| 选项 | 描述 |\n| --- | --- |\n| b | RE的剩余部分是一个BRE |\n| c | 大小写敏感的匹配（覆盖操作符类型） |\n| e | RE的剩余部分是一个ERE |\n| i | 大小写不敏感的匹配（覆盖操作符类型） |\n| m | n的历史原因的同义词 |\n| n | 新行敏感的匹配 |\n| p | 部分新行敏感的匹配 |\n| q | RE的剩余部分是一个文字（“quoted”）串，全部是普通字符 |\n| s | 非新行敏感的匹配（默认） |\n| t | 紧语法（默认，见下文） |\n| w | 逆部分新行敏感（“怪异”）的匹配 |\n| x | 扩展语法（见下文） |\n\n嵌入选项在)终止序列时发生作用。它们只在 ARE 的开始处起作用 （在任何可能存在的\\*\\*\\*:控制器后面）。\n\n除了通常的（紧）RE 语法（这种情况下所有字符都有效）， 还有一种扩展语法，可以通过声明嵌入的x选项获得。在扩展语法里，RE 中的空白字符被忽略，就像那些在#和其后的新行（或 RE 的末尾）之间的字符一样。这样就允许我们给一个复杂的 RE 分段和注释。不过这个基本规则有三种例外：\n\n· 空白字符或前置了\\的#将被保留\n\n· 方括号表达式里的空白或者#将被保留\n\n· 在多字符符号里面不能出现空白和注释，例如(?:\n\n为了这个目的，空白是空格、制表符、新行和任何属于空白字符类的字符。\n\n最后，在 ARE 里，方括号表达式外面，序列(?#ttt)（其中ttt是任意不包含一个))的文本）是一个注释， 它被完全忽略。同样，这样的东西是不允许出现在多字符符号的字符中间的，例如 (?:。这种注释更像是一种历史产物而不是一种有用的设施，并且它们的使用已经被废弃；请使用扩展语法来替代。\n\n如果声明了一个初始的\\*\\*\\*=控制器，那么所有这些元语法扩展都不能使用，因为这样表示把用户输入当作一个文字串而不是 RE 对待。\n\n#### **正则表达式匹配规则** [*link*](#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e5%8c%b9%e9%85%8d%e8%a7%84%e5%88%99)\n\n在 RE 可以在给定串中匹配多于一个子串的情况下， RE 匹配串中最靠前的那个子串。如果 RE 可以匹配在那个位置开始 的多个子串，要么是取最长的子串，要么是最短的，具体哪种， 取决于 RE 是贪婪的还是非贪婪的。\n\n一个 RE 是否贪婪取决于下面规则：\n\n· 大多数原子以及所有约束，都没有贪婪属性（因为它们毕竟无法匹配个数变化的文本）。\n\n· 在一个 RE 周围加上圆括号并不会改变其贪婪性。\n\n· 带一个固定重复次数量词 （{m}或者{m}?） 的量化原子和原子自身具有同样的贪婪性（可能是没有）。\n\n· 一个带其他普通的量词（包括{m,n}中m等于n的情况）的量化原子是贪婪的（首选最长匹配）。\n\n· 一个带非贪婪量词（包括{m,n}?中m等于 n的情况）的量化原子是非贪婪的（首选最短匹配）。\n\n· 一个分支 — 也就是说，一个没有顶级|操作符的 RE — 和它里面的第一个有贪婪属性的量化原子有着同样的贪婪性。\n\n· 一个由|操作符连接起来的两个或者更多分支组成的 RE 总是贪婪的。\n\n上面的规则所描述的贪婪属性不仅仅适用于独立的量化原子， 而且也适用于包含量化原子的分支和整个 RE。这里的意思是， 匹配是按照分支或者整个 RE 作为一个整体匹配最长或者最短的可能子串。 一旦整个匹配的长度确定，那么匹配任意特定子表达式的部分就基于该子表达式的贪婪属性进行判断，在 RE 里面靠前的子表达式的优先级高于靠后的子表达式。\n\n一个相应的例子：\n\n```\nSELECT SUBSTRING('XY1234Z', 'Y*([0-9]{1,3})');\n结果：123\nSELECT SUBSTRING('XY1234Z', 'Y*?([0-9]{1,3})');\n结果：1\n```\n\n在第一个例子里，RE 作为整体是贪婪的，因为Y*是贪婪的。它可以匹配从Y开始的东西，并且它匹配从这个位置开始的最长的串， 也就是，Y123。输出是这里的圆括号包围的部分，或者说是123。在第二个例子里， RE 总体上是一个非贪婪的 RE，因为Y*?是非贪婪的。它可以匹配从Y开始的最短的子串，也就是说Y1。子表达式[0-9]{1,3}是贪婪的，但是它不能修改总体匹配长度的决定； 因此它被迫只匹配1。\n\n简而言之，如果一个 RE 同时包含贪婪和非贪婪的子表达式，那么总的匹配长度要么是尽可能长，要么是尽可能短，这取决于给整个 RE 赋予的属性。给子表达式赋予的属性只影响在这个匹配里，各个子表达式之间相互允许“吃掉”的多少。\n\n量词{1,1}和{1,1}?可以分别用于在一个子表达式 或者整个 RE 上强制贪婪或者非贪婪。当需要整个 RE 具有不同于从其元素中 推导出的贪婪属性时，这很有用。例如，假设我们尝试将一个包含一些数字的 字符串分隔成数字以及在它们之前和之后的部分，我们可能会尝试这样做：\n\n```\nSELECT regexp_matches('abc01234xyz', '(.*)(\\d+)(.*)');\nResult: {abc0123,4,xyz}\n```\n\n这不会有用：第一个.\\*是贪婪的，因此它会“吃掉” 尽可能多的字符而留下\\d+去匹配在最后一个可能位置上的最 后一个数字。我们可能会通过让它变成非贪婪来修复：\n\n```\nSELECT regexp_matches('abc01234xyz', '(.*?)(\\d+)(.*)');\nResult: {abc,0,\"\"}\n```\n\n这也不会有用：因为现在 RE 作为整体来说是非贪婪的，因此它会尽快结束 全部的匹配。我们可以通过强制 RE 整体是贪婪的来得到我们想要的：\n\n```\nSELECT regexp_matches('abc01234xyz', '(?:(.*?)(\\d+)(.*)){1,1}');\nResult: {abc,01234,xyz}\n```\n\n独立于 RE 的组件的贪婪性之外控制 RE 的整体贪婪性为处理变长模式提供了 很大的灵活性。\n\n在决定更长或者更短的匹配时，匹配长度是以字符衡量的，而不是排序元素。一个空串会被认为比什么都不匹配长。例如：bb*匹配abbbc的中间三个字符；(week|wee)(night|knights)匹配weeknights的所有十个字符； 而(.*).*匹配 abc的时候，圆括号包围的子表达式匹配所有三个字符；当(a*)\\*被拿来匹配bc时，整个 RE 和圆括号 子表达式都匹配一个空串。\n\n如果声明了大小写无关的匹配，那么效果就好像所有大小写区别在字母表中消失了。如果在多个情况中一个字母以一个普通字符的形式出现在方括号表达式外面，那么它实际上被转换成 一个包含大小写的方括号表达式，也就是说，x 变成 [xX]。 如果它出现在一个方括号表达式里面，那么它的所有大小写的同族都被加入 方括号表达式中，也就是说，x变成[xX]。当它出现在一个方括号表达式内时，它的所有大小写副本都被加入到方括号表达式中，例如， [x]会变成[xX]，而[^x]会变成[^xX]。\n\n如果指定了新行敏感的匹配，.和使用^的方括号表达式 将永远不会匹配新行字符（这样，匹配就绝对不会跨越新行，除非 RE 显式地安排了这样的情况）并且^和$除了分别匹配串开头和结尾之外，还将分别匹配新行后面和前面的空串。但是 ARE 逃逸\\A和\\Z仍然只匹配串的开头和结尾。\n\n如果指定了部分新行敏感的匹配，那么它影响.和方括号表达式， 这个时候和新行敏感的匹配一样，但是不影响^和$。\n\n如果指定了逆新行敏感匹配，那么它影响^和$，其作用和在新行敏感的匹配里一样，但是不影响.和方括号表达式。这个并不是很有用，只是为了满足对称性而提供的。\n\n#### **限制和兼容性** [*link*](#%e9%99%90%e5%88%b6%e5%92%8c%e5%85%bc%e5%ae%b9%e6%80%a7)\n\n在这个实现里，对 RE 的长度没有特别的限制。但是，那些希望高移植性的程序应该避免使用长度超过 256 字节的 RE，因为 POSIX 兼容 的实现可以拒绝接受这样的 RE。\n\nARE 实际上和 POSIX ERE 不兼容的唯一的特性是在方括号表达式里\\并不失去它特殊的含义。所有其它 ARE 特性都使用在 POSIX ERE 里面是非法或者是未定义、未声明效果的语法；指示器的\\*\\*\\*就是在 POSIX 的 BRE 和 ERE 之外的语法。\n\n许多 ARE 扩展都是从 Perl 那里借来的（但是有些被做了修改来清理它们），以及一些 Perl 里没有出现的扩展。要注意的不兼容性包括\\b、\\B、对结尾的新行缺乏特别的处理、对那些被新行敏感匹配的东西附加的补齐方括号表达式、在 lookahead/lookbehind 约束里对圆括号和后引用的限制以及最长/最短 匹配（而不是第一匹配）的语义。\n\n在 ARE 中，后面跟着一个字母数字字符的\\要么是一个逃逸要么是一个错误， 但是在以前的版本里，它只是写该字母数字字符的另外一种方法。这个应该不是什么问题， 因为在以前的版本里没有什么理由会让我们写这样的序列。\n\n在 ARE 里，\\在[]里还是一个特殊字符， 因此在方括号表达式里的一个文本\\必须被写成\\。\n\n#### **基本正则表达式** [*link*](#%e5%9f%ba%e6%9c%ac%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f)\n\nBRE 在几个方面和 ERE 不太一样。在 BRE 中，|、+和?都是普通字符并且没有与它们功能等价的东西。范围的定界符是{和}， 因为 {和}本身是普通字符。嵌套的子表达式的圆括号是(和)，因为(和)自身是普通字符。除非在 RE 开头或者是圆括号子表达式开头，^都是一个普通字符。 除非在 RE 结尾或者是圆括号子表达式的结尾，$是一个普通字符。如果\\*出现在 RE 开头或者是圆括号封装的子表达式开头 （前面可能有^），那么它是个普通字符。最后，可以用单数字的后引用，<和>分别是[[:<:]]和[[:>:]]的同义词；在 BRE 中没有其它可用的逃逸。\n\n## 数据类型格式化函数 [*link*](#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e6%a0%bc%e5%bc%8f%e5%8c%96%e5%87%bd%e6%95%b0)\n\n格式化函数提供一套强大的工具用于把各种数据类型 （日期/时间、整数、浮点、数字） 转换成格式化的字符串以及反过来从格式化的字符串转换成 指定的数据类型。。这些函数都遵循一个公共的调用规范： 第一个参数是待格式化的值，而第二个是一个定义输出或输入格式的模板。\n\n**表 格式化函数**\n\n| 函数 | 返回类型 | 描述 | 例子 |\n| --- | --- | --- | --- |\n| to\\_char(timestamp, text) | text | 把时间戳转成字符串 | to\\_char(current\\_timestamp, `'HH12:MI:SS'`) |\n| to\\_char(interval, text) | text | 把间隔转成字符串 | to\\_char(interval ‘15h 2m 12s’, `'HH24:MI:SS'`) |\n| to\\_char(int, text) | text | 把整数转成字符串 | to\\_char(125, ‘999’) |\n| to\\_char(double precision, text) | text | 把实数或双精度转成字符串 | to\\_char(125.8::real, ‘999D9’) |\n| to\\_char(numeric, text) | text | 把数字转成字符串 | to\\_char(-125.8, ‘999D99S’) |\n| to\\_date(text, text) | date | 把字符串转成日期 | to\\_date(‘05 Dec 2000’, ‘DD Mon YYYY’) |\n| to\\_number(text, text) | numeric | 把字符串转成数字 | to\\_number(‘12,454.8-’, ‘99G999D9S’) |\n| to\\_timestamp(text, text) | timestamp with time zone | 把字符串转成时间戳 | to\\_timestamp(‘05 Dec 2000’, ‘DD Mon YYYY’) |\n\n注意:还有一个单一参数的to\\_timestamp函数。\n\n提示:to\\_timestamp和to\\_date存在的目的是为了处理无法用简单造型转换的输入格式。对于大部分标准的日期/时间格式，简单地把源字符串造型成所需的数据类型是可以的，并且简单很多。类似地，对于标准的数字表示形式，to\\_number也是没有必要的。\n\n在一个to\\_char输出模板串中，一些特定的模式可以被识别并且被替换成基于给定值的被恰当地格式化的数据。任何不属于模板模式的文本都简单地照字面拷贝。同样，在一个输入 模板串里（对其他函数），模板模式标识由输入数据串提供的值。如果在模板字符串中有不是模板模式的字符，输入数据字符串中的对应字符会被简单地跳过（不管它们是否等于模板字符串字符）。\n\n[表 ]展示了可以用于格式化日期和时间值的模版。\n\n**表 .用于日期/时间格式化的模板模式**\n\n| 模式 | 描述 |\n| --- | --- |\n| HH | 一天中的小时 （01-12） |\n| HH12 | 一天中的小时 （01-12） |\n| HH24 | 一天中的小时 （00-23） |\n| MI | 分钟 （00-59）minute (00-59) |\n| SS | 秒（00-59） |\n| MS | 毫秒（000-999） |\n| US | 微秒（000000-999999） |\n| SSSS | 午夜后的秒（0-86399） |\n| AM, am, PM or pm | 正午指示器（不带句号） |\n| A.M., a.m., P.M. or p.m. | 正午指示器（带句号） |\n| Y,YYY | 带逗号的年（4 位或者更多位） |\n| YYYY | 年（4 位或者更多位） |\n| YYY | 年的后三位 |\n| YY | 年的后两位 |\n| Y | 年的最后一位 |\n| IYYY | ISO 8601 周编号方式的年（4 位或更多位） |\n| IYY | ISO 8601 周编号方式的年的最后 3 位 |\n| IY | ISO 8601 周编号方式的年的最后 2 位 |\n| I | ISO 8601 周编号方式的年的最后一位 |\n| BC, bc, AD或者ad | 纪元指示器（不带句号） |\n| B.C., b.c., A.D.或者a.d. | 纪元指示器（带句号） |\n| MONTH | 全大写形式的月名（空格补齐到 9 字符） |\n| Month | 全首字母大写形式的月名（空格补齐到 9 字符） |\n| month | 全小写形式的月名（空格补齐到 9 字符） |\n| MON | 简写的大写形式的月名（英文 3 字符，本地化长度可变） |\n| Mon | 简写的首字母大写形式的月名（英文 3 字符，本地化长度可变） |\n| mon | 简写的小写形式的月名（英文 3 字符，本地化长度可变） |\n| MM | 月编号（01-12） |\n| DAY | 全大写形式的日名（空格补齐到 9 字符） |\n| Day | 全首字母大写形式的日名（空格补齐到 9 字符） |\n| day | 全小写形式的日名（空格补齐到 9 字符） |\n| DY | 简写的大写形式的日名（英语 3 字符，本地化长度可变） |\n| Dy | 简写的首字母大写形式的日名（英语 3 字符，本地化长度可变） |\n| dy | 简写的小写形式的日名（英语 3 字符，本地化长度可变） |\n| DDD | 一年中的日（001-366） |\n| IDDD | ISO 8601 周编号方式的年中的日（001-371，年的第 1 日时第一个 ISO 周的周一） |\n| DD | 月中的日（01-31） |\n| D | 周中的日，周日（1）到周六（7） |\n| ID | 周中的 ISO 8601 日，周一（1）到周日（7） |\n| W | 月中的周（1-5）（第一周从该月的第一天开始） |\n| WW | 年中的周数（1-53）（第一周从该年的第一天开始） |\n| IW | ISO 8601 周编号方式的年中的周数（01 - 53；新的一年的第一个周四在第一周） |\n| CC | 世纪（2 位数）（21 世纪开始于 2001-01-01） |\n| J | 儒略日（从午夜 UTC 的公元前 4714 年 11 月 24 日开始的整数日数） |\n| Q | 季度（to\\_date和to\\_timestamp会忽略） |\n| RM | 大写形式的罗马计数法的月（I-XII；I 是 一月） |\n| rm | 小写形式的罗马计数法的月（i-xii；i 是 一月） |\n| TZ | 大写形式的时区缩写（仅在to\\_char中支持） |\n| tz | 小写形式的时区缩写（仅在to\\_char中支持） |\n| TZH | 时区的小时 |\n| TZM | 时区的分钟 |\n| OF | 从UTC开始的时区偏移（仅在to\\_char中支持） |\n\n修饰语可以被应用于模板模式来修改它们的行为。例如，FMMonth就是带着FM修饰语的Month模式。展示了可用于日期/时间格式化的修饰语模式。\n\n**表. 用于日期/时间格式化的模板模式修饰语**\n\n| 修饰语 | 描述 | 例子 |\n| --- | --- | --- |\n| FM prefix | 填充模式（抑制前导零和填充的空格） | FMMonth |\n| TH suffix | 大写形式的序数后缀 | DDTH, e.g., 12TH |\n| th suffix | 小写形式的序数后缀 | DDth, e.g., 12th |\n| FX prefix | 固定的格式化全局选项（见使用须知） | FX Month DD Day |\n| TM prefix | 翻译模式（基于[lc\\_time]打印本地化的日和月名） | TMMonth |\n| SP suffix | 拼写模式（未实现） | DDSP |\n\n日期/时间格式化的使用须知：\n\n· FM抑制前导的零或尾随的空白， 否则会把它们增加到输入从而把一个模式的输出变成固定宽度。FM只修改下一个声明，而在 Oracle 中，FM影响所有随后的声明，并且重复的FM修饰语将触发填充模式开和关。\n\n· TM不包括结尾空白。to\\_timestamp和to\\_date会忽略TM修饰语。\n\n· 如果没有使用FX选项，to\\_timestamp和to\\_date会跳过输入字符串中的多个空白。例如，to\\_timestamp(‘2000 JUN’, ‘YYYY MON’)是正确的，但to\\_timestamp(‘2000 JUN’, ‘FXYYYY MON’)会返回一个错误，因为to\\_timestamp只期望一个空白。FX必须被指定为模板中的第一个项。\n\n· 在to\\_char模板里可以有普通文本，并且它们会被照字面输出。你可以把一个子串放到双引号里强迫它被解释成一个文本，即使它里面包含模板模式也如此。例如，在 ‘“Hello Year “YYYY’中，YYYY将被年份数据代替，但是Year中单独的Y不会。在to\\_date、to\\_number以及to\\_timestamp中，文本和双引号字符串会导致跳过该字符串中所包含的字符数量，例如\"XX\"会跳过两个输入字符（不管它们是不是XX）。\n\n· 如果你想在输出里有双引号，那么你必须在它们前面放反斜线，例如 ‘\"YYYY Month\"’。不然，在双引号字符串外面的反斜线就不是特殊的。在双引号字符串内，反斜线会导致下一个字符被取其字面形式，不管它是什么字符（但是这没有特殊效果，除非下一个字符是一个双引号或者另一个反斜线）。\n\n· 在to\\_timestamp和to\\_date中，如果年份格式声明少于四位（如YYY）并且提供的年份少于四位，年份将被调整为最接近于 2020 年，例如95会变成 1995。\n\n· 在to\\_timestamp和to\\_date中，在处理超过4位数的年份时，YYYY转换具有限制。你必须在YYYY后面使用一些非数字字符或者模板， 否则年份总是被解释为 4 位数字。例如（对于 20000 年）：to\\_date(‘200001131’, ‘YYYYMMDD’)将会被解释成一个 4 位数字的年份，而不是在年份后使用一个非数字分隔符，像to\\_date(‘20000-1131’, ‘YYYY-MMDD’)或to\\_date(‘20000Nov31’, ‘YYYYMonDD’)。\n\n· 在to\\_timestamp和to\\_date中，CC（世纪）字段会被接受，但是如果有YYY、YYYY或者Y,YYY字段则会忽略它。如果CC与YY或Y一起使用，则结果被计算为指定世纪中的那一年。如果指定了世纪但是没有指定年，则会假定为该世纪的第一年。\n\n· 在to\\_timestamp和to\\_date中，工作日名称或编号（DAY、D以及相关的字段类型）会被接受，但会为了计算结果的目的而忽略。季度（Q）字段也是一样。\n\n· 在to\\_timestamp和to\\_date中，一个 ISO 8601 周编号的日期（与一个格里高利日期相区别）可以用两种方法之一被指定为to\\_timestamp和to\\_date：\n\nn 年、周编号和工作日：例如to\\_date(‘2006-42-4’, ‘IYYY-IW-ID’)返回日期2006-10-19。如果你忽略工作日，它被假定为 1（周一）。\n\nn 年和一年中的日：例如to\\_date(‘2006-291’, ‘IYYY-IDDD’)也返回2006-10-19。\n\n尝试使用一个混合了 ISO 8601 周编号和格里高利日期的域来输入一个日期是无意义的，并且将导致一个错误。在一个 ISO 周编号的年的环境下，一个“月”或“月中的日”的概念没有意义。在一个格里高利年的环境下，ISO 周没有意义。用户应当避免混合格里高利和 ISO 日期声明。\n\n小心:虽然to\\_date将会拒绝混合使用格里高利和 ISO 周编号日期的域， to\\_char却不会，因为YYYY-MM-DD (IYYY-IDDD) 这种输出格式也会有用。但是避免写类似IYYY-MM-DD的东西，那会得到在 起始年附近令人惊讶的结果。\n\n· 在to\\_timestamp中，毫秒（MS）和微秒（US）域都被用作小数点后的秒位。例如to\\_timestamp(‘12.3’, ‘SS.MS’)不是 3 毫秒, 而是 300，因为该转换把它看做 12 + 0.3 秒。这意味着对于格式SS.MS而言，输入值12.3、12.30和12.300指定了相同数目的毫秒。要得到三毫秒，你必须使用 12.003，转换会把它看做 12 + 0.003 = 12.003 秒。\n\n· 下面是一个更复杂的例子∶to\\_timestamp(`'15:12:02.020.001230'`, `'HH24:MI:SS.MS.US'`)是 15 小时、12 分钟和 2 秒 + 20 毫秒 + 1230微秒 = 2.021230 秒。\n\n· to\\_char(…, ‘ID’)的一周中日的编号匹配extract(isodow from …)函数，但是to\\_char(…, ‘D’)不匹配extract(dow from …)的日编号。\n\n· to\\_char(interval)格式化HH和HH12为显示在一个 12 小时的时钟上，即零小时和 36 小时输出为12，而HH24会输出完整的小时值，对于间隔它可以超过 23.\n\n表展示了可以用于格式化数字值的模版模式。\n\n**表 . 用于数字格式化的模板模式**\n\n| 模式 | 描述 |\n| --- | --- |\n| 9 | 数位（如果无意义可以被删除） |\n| 0 | 数位（即便没有意义也不会被删除） |\n| . (period) | 小数点 |\n| , (comma) | 分组（千）分隔符 |\n| PR | 尖括号内的负值 |\n| S | 带符号的数字（使用区域） |\n| L | 货币符号（使用区域） |\n| D | 小数点（使用区域） |\n| G | 分组分隔符（使用区域） |\n| MI | 在指定位置的负号（如果数字 < 0） |\n| PL | 在指定位置的正号（如果数字 > 0） |\n| SG | 在指定位置的正/负号 |\n| RN | 罗马数字（输入在 1 和 3999 之间） |\n| TH or th | 序数后缀 |\n| V | 移动指定位数（参阅注解） |\n| EEEE | 科学记数的指数 |\n\n数字格式化的用法须知：\n\n· 0指定一个总是被打印的数位，即便它包含前导/拖尾的零。9也指定一个数位，但是如果它是前导零则会被空格替换，而如果是拖尾零并且指定了填充模式则它会被删除（对于to\\_number()来说，这两种模式字符等效）。\n\n· 模式字符S、L、D以及G表示当前locale定义的负号、货币符号、小数点以及数字分隔符字符。不管locale是什么，模式字符句号和逗号就表示小数点和数字分隔符。\n\n· 对于to\\_char()的模式中的一个负号，如果没有明确的规定，将为该负号保留一列，并且它将被锚接到（出现在左边）那个数字。如果S正好出现在某个9的左边，它也将被锚接到那个数字。\n\n· 使用SG、PL或MI格式化的符号并不挂在数字上面； 例如，to\\_char(-12, ‘MI9999’)生成’- 12’，而to\\_char(-12, ‘S9999’)生成 ’ -12’。（Oracle 里的实现不允许在9前面使用MI，而是要求9在MI前面。）\n\n· TH不会转换小于零的数值，也不会转换小数。\n\n· 在to\\_number中，如果没有使用L或TH之类的非数据模板模式，相应数量的输入字符会被跳过，不管它们是否匹配模板模式，除非它们是数据字符（也就是数位、负号、小数点或者逗号）。例如，TH会跳过两个非数据字符。\n\n· 带有to\\_char的V会把输入值乘上10^n，其中n是跟在V后面的位数。带有to\\_number的V以类似的方式做除法。to\\_char和to\\_number不支持使用结合小数点的V（例如，不允许99.9V99）。\n\n· EEEE（科学记数法）不能和任何其他格式化模式或修饰语（数字和小数点模式除外）组合在一起使用，并且必须位于格式化字符串的最后（例如9.99EEEE是一个合法的模式）。\n\n某些修饰语可以被应用到任何模板来改变其行为。例如，FM99.99是带有FM修饰语的99.99模式。\n\n**表. 用于数字格式化的模板模式修饰语**\n\n| 修饰语 | 描述 | 例子 |\n| --- | --- | --- |\n| FM prefix | 填充模式（抑制拖尾零和填充的空白） | FM99.99 |\n| TH suffix | 大写序数后缀 | 999TH |\n| th suffix | 小写序数后缀 | 999th |\n\n表展示了一些使用to\\_char函数的例子。\n\n**表. to\\_char例子**\n\n| 表达式 | 结果 |\n| --- | --- |\n| to\\_char(current\\_timestamp, `'Day, DD HH12:MI:SS'`) | `'Tuesday , 06 05:39:18'` |\n| to\\_char(current\\_timestamp, `'FMDay, FMDD HH12:MI:SS'`) | `'Tuesday, 6 05:39:18'` |\n| to\\_char(-0.1, ‘99.99’) | ’ -.10' |\n| to\\_char(-0.1, ‘FM9.99’) | ‘-.1’ |\n| to\\_char(-0.1, ‘FM90.99’) | ‘-0.1’ |\n| to\\_char(0.1, ‘0.9’) | ’ 0.1' |\n| to\\_char(12, ‘9990999.9’) | ’ 0012.0' |\n| to\\_char(12, ‘FM9990999.9’) | ‘0012.’ |\n| to\\_char(485, ‘999’) | ’ 485' |\n| to\\_char(-485, ‘999’) | ‘-485’ |\n| to\\_char(485, ‘9 9 9’) | ’ 4 8 5' |\n| to\\_char(1485, ‘9,999’) | ’ 1,485' |\n| to\\_char(1485, ‘9G999’) | ’ 1 485' |\n| to\\_char(148.5, ‘999.999’) | ’ 148.500' |\n| to\\_char(148.5, ‘FM999.999’) | ‘148.5’ |\n| to\\_char(148.5, ‘FM999.990’) | ‘148.500’ |\n| to\\_char(148.5, ‘999D999’) | ’ 148,500' |\n| to\\_char(3148.5, ‘9G999D999’) | ’ 3 148,500' |\n| to\\_char(-485, ‘999S’) | ‘485-’ |\n| to\\_char(-485, ‘999MI’) | ‘485-’ |\n| to\\_char(485, ‘999MI’) | ‘485 ' |\n| to\\_char(485, ‘FM999MI’) | ‘485’ |\n| to\\_char(485, ‘PL999’) | ‘+485’ |\n| to\\_char(485, ‘SG999’) | ‘+485’ |\n| to\\_char(-485, ‘SG999’) | ‘-485’ |\n| to\\_char(-485, ‘9SG99’) | ‘4-85’ |\n| to\\_char(-485, ‘999PR’) | ‘<485>’ |\n| to\\_char(485, ‘L999’) | ‘DM 485’ |\n| to\\_char(485, ‘RN’) | ’ CDLXXXV’ |\n| to\\_char(485, ‘FMRN’) | ‘CDLXXXV’ |\n| to\\_char(5.2, ‘FMRN’) | ‘V’ |\n| to\\_char(482, ‘999th’) | ’ 482nd' |\n| to\\_char(485, ‘“Good number:“999’) | ‘Good number: 485’ |\n| to\\_char(485.8, ‘“Pre:“999” Post:” .999’) | ‘Pre: 485 Post: .800’ |\n| to\\_char(12, ‘99V999’) | ’ 12000' |\n| to\\_char(12.4, ‘99V999’) | ’ 12400' |\n| to\\_char(12.45, ‘99V9’) | ’ 125' |\n| to\\_char(0.0004859, ‘9.99EEEE’) | ’ 4.86e-04' |\n\n## 时间/日期函数和操作符 [*link*](#%e6%97%b6%e9%97%b4%e6%97%a5%e6%9c%9f%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n表展示了可用于处理日期/时间值的函数，其细节在随后的小节中描述。表演示了基本算术操作符 （+、\\*等）的行为。\n\n所有下文描述的接受time或timestamp输入的函数和操作符实际上都有两种变体： 一种接收time with time zone或timestamp with time zone， 另外一种接受time without time zone或者 timestamp without time zone。为了简化，这些变种没有被独立地展示。此外，+和\\*操作符都是可交换的操作符对（例如，date + integer 和 integer + date）；我们只显示其中一个。\n\n**表 日期/时间操作符**\n\n| 操作符 | 例子 | 结果 |\n| --- | --- | --- |\n| + | date ‘2001-09-28’ + integer ‘7’ | date ‘2001-10-05’ |\n| + | date ‘2001-09-28’ + interval ‘1 hour’ | `timestamp '2001-09-28 01:00:00'` |\n| + | date ‘2001-09-28’ + time ‘03:00’ | `timestamp '2001-09-28 03:00:00'` |\n| + | interval ‘1 day’ + interval ‘1 hour’ | `interval '1 day 01:00:00'` |\n| + | timestamp ‘2001-09-28 01:00’ + interval ‘23 hours’ | `timestamp '2001-09-29 00:00:00'` |\n| + | time ‘01:00’ + interval ‘3 hours’ | `time '04:00:00'` |\n| - | - interval ‘23 hours’ | `interval '-23:00:00'` |\n| - | date ‘2001-10-01’ - date ‘2001-09-28’ | integer ‘3’ (days) |\n| - | date ‘2001-10-01’ - integer ‘7’ | date ‘2001-09-24’ |\n| - | date ‘2001-09-28’ - interval ‘1 hour’ | `timestamp '2001-09-27 23:00:00'` |\n| - | time ‘05:00’ - time ‘03:00’ | `interval '02:00:00'` |\n| - | time ‘05:00’ - interval ‘2 hours’ | `time '03:00:00'` |\n| - | timestamp ‘2001-09-28 23:00’ - interval ‘23 hours’ | `timestamp '2001-09-28 00:00:00'` |\n| - | interval ‘1 day’ - interval ‘1 hour’ | `interval '1 day -01:00:00'` |\n| - | timestamp ‘2001-09-29 03:00’ - timestamp ‘2001-09-27 12:00’ | `interval '1 day 15:00:00'` |\n| \\* | 900 \\* interval ‘1 second’ | `interval '00:15:00'` |\n| \\* | 21 \\* interval ‘1 day’ | interval ‘21 days’ |\n| \\* | double precision ‘3.5’ \\* interval ‘1 hour’ | `interval '03:30:00'` |\n| / | interval ‘1 hour’ / double precision ‘1.5’ | `interval '00:40:00'` |\n\n**表. 日期/时间函数**\n\n| 函数 | 返回类型 | 描述 | 例子 | 结果 |\n| --- | --- | --- | --- | --- |\n| age(timestamp, timestamp) | interval | 减去参数，生成一个使用年、月（而不是只用日）的“符号化”的结果 | age(timestamp ‘2001-04-10’, timestamp ‘1957-06-13’) | 43 年 9 月 27 日 |\n| age(timestamp) | interval | 从current\\_date（在午夜）减去 | age(timestamp ‘1957-06-13’) | 43 years 8 mons 3 days |\n| clock\\_timestamp() | timestamp with time zone | 当前日期和时间（在语句执行期间变化）； |  |  |\n| current\\_date | date | 当前日期； |  |  |\n| current\\_time | time with time zone | 当前时间（一天中的时间）； |  |  |\n| current\\_timestamp | timestamp with time zone | 当前日期和时间（当前事务开始时）； |  |  |\n| date\\_part(text, timestamp) | double precision | 获得子域（等价于extract）； | `date_part('hour', timestamp '2001-02-16 20:38:40')` | 20 |\n| date\\_part(text, interval) | double precision | 获得子域（等价于extract）； | date\\_part(‘month’, interval ‘2 years 3 months’) | 3 |\n| date\\_trunc(text, timestamp) | timestamp | 截断到指定精度； | `date_trunc('hour', timestamp '2001-02-16 20:38:40')` | `2001-02-16 20:00:00` |\n| date\\_trunc(text, interval) | interval | 截断到指定精度； | date\\_trunc(‘hour’, interval ‘2 days 3 hours 40 minutes’) | `2 days 03:00:00` |\n| extract(field from timestamp) | double precision | 获得子域； | `extract(hour from timestamp '2001-02-16 20:38:40')` | 20 |\n| extract(field from interval) | double precision | 获得子域； | extract(month from interval ‘2 years 3 months’) | 3 |\n| isfinite(date) | boolean | 测试有限日期（不是+/-无限） | isfinite(date ‘2001-02-16’) | true |\n| isfinite(timestamp) | boolean | 测试有限时间戳（不是+/-无限） | `isfinite(timestamp '2001-02-16 21:28:30')` | true |\n| isfinite(interval) | boolean | 测试有限间隔 | isfinite(interval ‘4 hours’) | true |\n| justify\\_days(interval) | interval | 调整间隔这样30天时间周期可以表示为月 | justify\\_days(interval ‘35 days’) | 1 mon 5 days |\n| justify\\_hours(interval) | interval | 调整间隔这样24小时时间周期可以表示为日 | justify\\_hours(interval ‘27 hours’) | `1 day 03:00:00` |\n| justify\\_interval(interval) | interval | 使用justify\\_days和justify\\_hours调整间隔，使用额外的符号调整 | justify\\_interval(interval ‘1 mon -1 hour’) | `29 days 23:00:00` |\n| localtime | time | 当前时间（一天中的时间）； |  |  |\n| localtimestamp | timestamp | 当前日期和时间（当前事务的开始）； |  |  |\n| make\\_date(year int, month int, day int) | date | 从年、月、日域创建日期 | make\\_date(2013, 7, 15) | 2013-07-15 |\n| make\\_interval(years int DEFAULT 0, months int DEFAULT 0, weeks int DEFAULT 0, days int DEFAULT 0, hours int DEFAULT 0, mins int DEFAULT 0, secs double precision DEFAULT 0.0) | interval | 从年、月、周、日、时、分、秒域创建 interval | make\\_interval(days => 10) | 10 days |\n| make\\_time(hour int, min int, sec double precision) | time | 从时、分、秒域创建时间 | make\\_time(8, 15, 23.5) | `08:15:23.5` |\n| make\\_timestamp(year int, month int, day int, hour int, min int, sec double precision) | timestamp | 从年、月、日、时、分、秒域创建时间戳 | make\\_timestamp(2013, 7, 15, 8, 15, 23.5) | `2013-07-15 08:15:23.5` |\n| make\\_timestamptz(year int, month int, day int, hour int, min int, sec double precision, [ timezone text ]) | timestamp with time zone | 从年、月、日、时、分、秒域创建带时区的时间戳。如果没有指定timezone， 则使用当前时区。 | make\\_timestamptz(2013, 7, 15, 8, 15, 23.5) | `2013-07-15 08:15:23.5+01` |\n| now() | timestamp with time zone | 当前日期和时间（当前事务的开始）； |  |  |\n| statement\\_timestamp() | timestamp with time zone | 当前日期和时间（当前事务的开始）； |  |  |\n| timeofday() | text | 当前日期和时间（像clock\\_timestamp，但是作为一个text字符串）； |  |  |\n| transaction\\_timestamp() | timestamp with time zone | 当前日期和时间（当前事务的开始）； |  |  |\n| to\\_timestamp(double precision) | timestamp with time zone | 把 Unix 时间（从 1970-01-01 00:00:00+00 开始的秒）转换成 timestamp | to\\_timestamp(1284352323) | `2010-09-13 04:32:03+00` |\n\n除了这些函数以外，还支持 SQL 操作符OVERLAPS：\n\n```\n(start1, end1) OVERLAPS (start2, end2)\n(start1, length1) OVERLAPS (start2, length2)\n```\n\n这个表达式在两个时间域（用它们的端点定义）重叠的时候得到真，当它们不重叠时得到假。端点可以用一对日期、时间或者时间戳来指定；或者是用一个后面跟着一个间隔的日期、时间或时间戳来指定。当一对值被提供时，起点或终点都可以被写在前面，OVERLAPS会自动地把较早的值作为起点。每一个时间段被认为是表示半开的间隔start <= time < end，除非start和end相等，这种情况下它表示单个时间实例。例如这表示两个只有一个共同端点的时间段不重叠。\n\n```\nSELECT (DATE '2001-02-16', DATE '2001-12-21') OVERLAPS\n       (DATE '2001-10-30', DATE '2002-10-30');\n结果：true\nSELECT (DATE '2001-02-16', INTERVAL '100 days') OVERLAPS\n       (DATE '2001-10-30', DATE '2002-10-30');\n结果：false\nSELECT (DATE '2001-10-29', DATE '2001-10-30') OVERLAPS\n       (DATE '2001-10-30', DATE '2001-10-31');\n结果：false\nSELECT (DATE '2001-10-30', DATE '2001-10-30') OVERLAPS\n       (DATE '2001-10-30', DATE '2001-10-31');\n结果：true\n```\n\n当把一个interval值添加到timestamp with time zone上（或从中减去）时， days 部分会按照指定的天数增加或减少timestamp with time zone的日期。 对于横跨夏令时的变化（当会话的时区被设置为可识别DST的时区时），这意味着interval ‘1 day’并 不一定等于interval ‘24 hours’。例如，当会话的时区设置为CST7CDT时，timestamp with time zone ‘2005-04-02 12:00-07’ + interval ‘1 day’ 的结果是timestamp with time zone ‘2005-04-03 12:00-06’，而将interval ‘24 hours’增加到相同的初始timestamp with time zone的结果 则是timestamp with time zone ‘2005-04-03 13:00-06’， 因为CST7CDT时区在2005-04-03 02:00有一个夏令时变更。\n\n注意age返回的月数域可能有歧义，因为不同的月份有不同的天数。当计算部分月数时，采用两个日期中较早的月。例如：age(‘2004-06-01’, ‘2004-04-30’)使用4月份得到1 mon 1 day，而用5月分时会得到1 mon 2 days，因为5月有31天，而4月只有30天。\n\n日期和时间戳的减法也可能会很复杂。执行减法的一种概念上很简单的方法是，使用 EXTRACT(EPOCH FROM …)把每个值都转换成秒数，然后执行减法， 这样会得到两个值之间的*秒*数。这种方法将会适应每个月中天数、 时区改变和夏令时调整。使用“-”操作符的日期或时间 戳减法会返回值之间的天数（24小时）以及时/分/秒，也会做同样的调整。 age函数会返回年、月、日以及时/分/秒，执行按域的减法，然后对 负值域进行调整。下面的查询展示了这些方法的不同。例子中的结果由 timezone = ‘US/Eastern’产生，这使得两个使用的日期之间存在着夏令 时的变化：\n\n```\nSELECT EXTRACT(EPOCH FROM timestamptz '2013-07-01 12:00:00') -\n       EXTRACT(EPOCH FROM timestamptz '2013-03-01 12:00:00');\nResult: 10537200\nSELECT (EXTRACT(EPOCH FROM timestamptz '2013-07-01 12:00:00') -\n        EXTRACT(EPOCH FROM timestamptz '2013-03-01 12:00:00'))\n        / 60 / 60 / 24;\nResult: 121.958333333333\nSELECT timestamptz '2013-07-01 12:00:00' - timestamptz '2013-03-01 12:00:00';\nResult: 121 days 23:00:00\nSELECT age(timestamptz '2013-07-01 12:00:00', timestamptz '2013-03-01 12:00:00');\nResult: 4 mons\n```\n\n### EXTRACT, date\\_part [*link*](#extract-date_part)\n\n```\nEXTRACT(field FROM source)\n```\n\nextract函数从日期/时间值中抽取子域，例如年或者小时等。source必须是一个类型 timestamp、time或interval的值表达式（类型为date的表达式将被造型为 timestamp，并且因此也可以被同样使用）。field是一个标识符或者字符串，它指定从源值中抽取的域。extract函数返回类型为double precision的值。 下列值是有效的域名字∶\n\ncentury\n\n世纪\n\n```\nSELECT EXTRACT(CENTURY FROM TIMESTAMP '2000-12-16 12:21:13');\n结果：20\nSELECT EXTRACT(CENTURY FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：21\n```\n\n第一个世纪从 `0001-01-01 00:00:00 AD` 开始， 尽管那时候人们还不知道这是第一个世纪。这个定义适用于所有使用格里高利历法的国家。其中没有 0 世纪，我们直接从公元前 1 世纪到公元 1 世纪。 如果你认为这个不合理，那么请把抱怨发给：罗马圣彼得教堂，梵蒂冈，教皇收。\n\n```\nday\n```\n\n对于timestamp值，是（月份）里的日域（1-31）；对于interval值，是日数\n\n```\nSELECT EXTRACT(DAY FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：16\n\nSELECT EXTRACT(DAY FROM INTERVAL '40 days 1 minute');\n结果：40\ndecade\n```\n\n年份域除以10\n\n```\nSELECT EXTRACT(DECADE FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：200\ndow\n```\n\n一周中的日，从周日（0）到周六（6）\n\n```\nSELECT EXTRACT(DOW FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：5\n```\n\n请注意，extract的一周中的日和to\\_char(…, ‘D’)函数不同。\n\n```\ndoy\n```\n\n一年的第几天（1 -365/366）\n\n```\nSELECT EXTRACT(DOY FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：47\nepoch\n```\n\n对于timestamp with time zone值， 是自`1970-01-01 00:00:00 UTC`以来的秒数（结果可能是负数）； 对于date and timestamp值，是自本地时间 `1970-01-01 00:00:00` 以来的描述；对于interval值，它是时间间隔的总秒数。\n\n```\nSELECT EXTRACT(EPOCH FROM TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40.12-08');\n结果：982384720.12\n\nSELECT EXTRACT(EPOCH FROM INTERVAL '5 days 3 hours');\n结果：442800\n```\n\n不能用to\\_timestamp把一个 epoch 值转换回成时间戳：\n\n```\nSELECT to_timestamp(982384720.12);\nResult: 2001-02-17 04:38:40.12+00\nhour\n```\n\n小时域（0 - 23）\n\n```\nSELECT EXTRACT(HOUR FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：20\nisodow\n```\n\n一周中的日，从周一（1）到周日（7）\n\n```\nSELECT EXTRACT(ISODOW FROM TIMESTAMP '2001-02-18 20:38:40');\n结果：7\n```\n\n除了周日，这和dow相同。这符合ISO 8601 中一周中的日的编号。\n\n```\nisoyear\n```\n\n日期所落在的ISO 8601 周编号的年（不适用于间隔）\n\n```\nSELECT EXTRACT(ISOYEAR FROM DATE '2006-01-01');\n结果：2005\nSELECT EXTRACT(ISOYEAR FROM DATE '2006-01-02');\n结果：2006\n```\n\n每一个ISO 8601 周编号的年都开始于包含1月4日的那一周的周一，在早的1月或迟的12月中ISO年可能和格里高利年不同。更多信息见week域。\n\n这个域不能用于 PostgreSQL 8.3之前的版本。\n\n```\nmicroseconds\n```\n\n秒域，包括小数部分，乘以 1,000,000。请注意它包括全部的秒\n\n```\nSELECT EXTRACT(MICROSECONDS FROM TIME '17:12:28.5');\n结果：28500000\nmillennium\n```\n\n千年\n\n```\nSELECT EXTRACT(MILLENNIUM FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：3\n```\n\n19xx的年份在第二个千年里。第三个千年从 2001 年 1 月 1 日开始。\n\n```\nmilliseconds\n```\n\n秒域，包括小数部分，乘以 1000。请注意它包括完整的秒。\n\n```\nSELECT EXTRACT(MILLISECONDS FROM TIME '17:12:28.5');\n结果：28500\nminute\n```\n\n分钟域（0 - 59）\n\n```\nSELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：38\nmonth\n```\n\n对于timestamp值，它是一年里的月份数（1 - 12）； 对于interval值，它是月的数目，然后对 12 取模（0 - 11）\n\n```\nSELECT EXTRACT(MONTH FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：2\n\nSELECT EXTRACT(MONTH FROM INTERVAL '2 years 3 months');\n结果：3\n\nSELECT EXTRACT(MONTH FROM INTERVAL '2 years 13 months');\n结果：1\nquarter\n```\n\n该天所在的该年的季度（1 - 4）\n\n```\nSELECT EXTRACT(QUARTER FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：1\nsecond\n```\n\n秒域，包括小数部分（0 - 59[[7]](http://postgres.cn/docs/11/functions-datetime.html#ftn.id-1.5.8.14.12.5.11.16.2.1.1)）\n\n```\nSELECT EXTRACT(SECOND FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：40\n\nSELECT EXTRACT(SECOND FROM TIME '17:12:28.5');\n结果：28.5\ntimezone\n```\n\n与 UTC 的时区偏移，以秒记。正数对应 UTC 东边的时区，负数对应 UTC 西边的时区（从技术上来看，PostgreSQL不使用 UTC，因为其中不处理闰秒）。\n\n```\ntimezone_hour\n```\n\n时区偏移的小时部分。\n\n```\ntimezone_minute\n```\n\n时区偏移的分钟部分。\n\n```\nweek\n```\n\n该天在所在的ISO 8601 周编号的年份里是第几周。根据定义， 一年的第一周包含该年的 1月 4 日并且 ISO 周从星期一开始。换句话说，一年的第一个星期四在第一周。\n\n在 ISO 周编号系统中，早的 1 月的日期可能位于前一年的第五十二或者第五十三周，而迟的 12 月的日期可能位于下一年的第一周。例如， 2005-01-01位于 2004 年的第五十三周，并且2006-01-01位于 2005 年的第五十二周，而2012-12-31位于 2013 年的第一周。我们推荐把isoyear域和week一起使用来得到一致的结果。\n\n```\nSELECT EXTRACT(WEEK FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：7\nyear\n```\n\n年份域。要记住这里没有0 AD，所以从AD年里抽取BC年应该小心处理。\n\n```\nSELECT EXTRACT(YEAR FROM TIMESTAMP '2001-02-16 20:38:40');\n结果：2001\n```\n\n注意\n\n当输入值为 +/-Infinity 时，extract对于单调增的域（epoch、julian、year、isoyear、decade、century以及millennium）返回 +/-Infinity。对于其他域返回 NULL。PostgreSQL 9.6 之前的版本对所有输入无穷的情况都返回零。\n\n在传统的Ingres上建模的date\\_part函数等价于SQL标准函数extract：\n\n```\ndate_part('field', source)\n```\n\n请注意这里的field参数必须是一个串值，而不是一个名字。有效的date\\_part域名 和extract相同。\n\n```\nSELECT date_part('day', TIMESTAMP '2001-02-16 20:38:40');\n结果：16\n\nSELECT date_part('hour', INTERVAL '4 hours 3 minutes');\n结果：4\n```\n\n### date\\_trunc [*link*](#date_trunc)\n\ndate\\_trunc函数在概念上和用于数字的trunc函数类似。\n\n```\ndate_trunc('field', source)\n```\n\nsource是类型timestamp或interval的值表达式（类型date和 time的值都分别被自动转换成timestamp或者interval）。field选择对输入值选用什么样的精度进行截断。返回的值是timestamp类型或者所有小于选定的 精度的域都设置为零（或者一，对于日期和月份）的interval。\n\nfield的有效值是∶\n\n| microseconds |\n| --- |\n| milliseconds |\n| second |\n| minute |\n| hour |\n| day |\n| week |\n| month |\n| quarter |\n| year |\n| decade |\n| century |\n| millennium |\n\n例子：\n\n```\nSELECT date_trunc('hour', TIMESTAMP '2001-02-16 20:38:40');\n结果：2001-02-16 20:00:00\n\nSELECT date_trunc('year', TIMESTAMP '2001-02-16 20:38:40');\n结果：2001-01-01 00:00:00\n```\n\n### AT TIME ZONE [*link*](#at-time-zone)\n\nAT TIME ZONE把时间戳*without time zone*转换成时间戳*with time zone*或者反过来，并且把*time*值转换成不同的时区。表展示了它的变体。\n\n**表** **.** AT TIME ZONE**变体**\n\n| 表达式 | 返回类型 | 描述 |\n| --- | --- | --- |\n| timestamp without time zone AT TIME ZONE zone | timestamp with time zone | 把给定的不带时区的时间戳当作位于指定时区的时间对待 |\n| timestamp with time zone AT TIME ZONE zone | timestamp without time zone | 把给定的带时区的时间戳转换到新的时区，不带时区指定 |\n| time with time zone AT TIME ZONE zone | time with time zone | 把给定的带时区的时间转换到新时区 |\n\n在这些表达式里，我们需要的时区zone可以指定为文本串（例如，‘America/Los\\_Angeles’）或者一个间隔 （例如，INTERVAL ‘-08:00’）。\n\n例子（假设本地时区是America/Los\\_Angeles）：\n\n```\nSELECT TIMESTAMP '2001-02-16 20:38:40' AT TIME ZONE 'America/Denver';\nResult: 2001-02-16 19:38:40-08\n\nSELECT TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40-05' AT TIME ZONE 'America/Denver';\nResult: 2001-02-16 18:38:40\n\nSELECT TIMESTAMP '2001-02-16 20:38:40-05' AT TIME ZONE 'Asia/Tokyo' AT TIME ZONE 'America/Chicago';\nResult: 2001-02-16 05:38:40\n```\n\n第一个例子给缺少时区的值加上了时区，并且显示了使用当前TimeZone设置的值。第二个例子把带有时区值的时间戳移动到指定的时区，并且返回不带时区的值。这允许存储和显示不同于当前TimeZone设置的值。第三个例子把东京时间转换成芝加哥时间。把*time*值转换成其他时区会使用当前活跃的时区规则，因为没有提供日期。\n\n函数timezone(zone, timestamp)等效于 SQL 兼容的结构timestamp AT TIME ZONE zone。\n\n### 当前日期/时间 [*link*](#%e5%bd%93%e5%89%8d%e6%97%a5%e6%9c%9f%e6%97%b6%e9%97%b4)\n\nMemFireDB提供了许多返回当前日期和时间的函数。这些 SQL 标准的函数全部都按照当前事务的开始时刻返回值：\n\n```\nCURRENT_DATE\nCURRENT_TIME\nCURRENT_TIMESTAMP\nCURRENT_TIME(precision)\nCURRENT_TIMESTAMP(precision)\nLOCALTIME\nLOCALTIMESTAMP\nLOCALTIME(precision)\nLOCALTIMESTAMP(precision)\n```\n\nCURRENT\\_TIME和CURRENT\\_TIMESTAMP传递带有时区的值；LOCALTIME和LOCALTIMESTAMP传递的值不带时区。\n\nCURRENT\\_TIME、CURRENT\\_TIMESTAMP、LOCALTIME和 LOCALTIMESTAMP可以有选择地接受一个精度参数， 该精度导致结果的秒域被园整为指定小数位。如果没有精度参数，结果将被给予所能得到的全部精度。\n\n一些例子：\n\n```\nSELECT CURRENT_TIME;\n结果：14:39:53.662522-05\n\nSELECT CURRENT_DATE;\n结果：2001-12-23\n\nSELECT CURRENT_TIMESTAMP;\n结果：2001-12-23 14:39:53.662522-05\n\nSELECT CURRENT_TIMESTAMP(2);\n结果：2001-12-23 14:39:53.66-05\n\nSELECT LOCALTIMESTAMP;\n结果：2001-12-23 14:39:53.662522\n```\n\n因为这些函数全部都按照当前事务的开始时刻返回结果，所以它们的值在事务运行的整个期间内都不改变。 我们认为这是一个特性：目的是为了允许一个事务在“当前”时间上有一致的概念， 这样在同一个事务里的多个修改可以保持同样的时间戳。\n\n注意:许多其它数据库系统可能会更频繁地推进这些值。\nMemFireDB同样也提供了返回当前语句开始时间的函数， 它们会返回函数被调用时的真实当前时间。这些非 SQL 标准的函数列表如下：\n\n```\ntransaction_timestamp()\nstatement_timestamp()\nclock_timestamp()\ntimeofday()\nnow()\n```\n\n`transaction_timestamp()`等价于`CURRENT_TIMESTAMP`，但是其命名清楚地反映了它的返回值。statement\\_timestamp()返回当前语句的开始时刻（更准确的说是收到 客户端最后一条命令的时间）。statement\\_timestamp()和transaction\\_timestamp()在一个事务的第一条命令期间返回值相同，但是在随后的命令中却不一定相同。 clock\\_timestamp()返回真正的当前时间，因此它的值甚至在同一条 SQL 命令中都会变化。timeofday()是一个有历史原因的PostgreSQL函数。和clock\\_timestamp()相似，timeofday()也返回真实的当前时间，但是它的结果是一个格式化的text串，而不是timestamp with time zone值。now()是PostgreSQL的一个传统，等效于transaction\\_timestamp()。\n\n所有日期/时间类型还接受特殊的文字值now，用于指定当前的日期和时间（重申，被解释为当前事务的开始时刻）。 因此，下面三个都返回相同的结果：\n\n```\nSELECT CURRENT_TIMESTAMP;\nSELECT now();\nSELECT TIMESTAMP 'now';  -- 对于和 DEFAULT 一起使用是不正确的\n```\n\n提示:在创建表期间指定一个DEFAULT子句时，你不会希望使用第三种形式。系统将在分析这个常量的时候把now转换为一个timestamp， 这样需要默认值时就会得到创建表的时间！而前两种形式要到实际使用缺省值的时候才被计算， 因为它们是函数调用。因此它们可以给出每次插入行的时刻。\n\n### 延时执行 [*link*](#%e5%bb%b6%e6%97%b6%e6%89%a7%e8%a1%8c)\n\n下面的这些函数可以用于让服务器进程延时执行：\n\n```\npg_sleep(seconds)\npg_sleep_for(interval)\npg_sleep_until(timestamp with time zone)\n```\n\npg\\_sleep让当前的会话进程休眠seconds 秒以后再执行。seconds是一个double precision 类型的值，所以可以指定带小数的秒数。pg\\_sleep\\_for是针对用 interval指定的较长休眠时间的函数。pg\\_sleep\\_until 则可以用来休眠到一个指定的时刻唤醒。例如：\n\n```\nSELECT pg_sleep(1.5);\nSELECT pg_sleep_for('5 minutes');\nSELECT pg_sleep_until('tomorrow 03:00');\n```\n\n## 枚举支持函数 [*link*](#%e6%9e%9a%e4%b8%be%e6%94%af%e6%8c%81%e5%87%bd%e6%95%b0)\n\n对于枚举类型， 有一些函数允许更清洁的编码，而不需要为一个枚举类型硬写特定的值。它们被列在表 中。本例假定一个枚举类型被创建为：\n\n```\nCREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');\n```\n\n**表. 枚举支持函数**\n\n| 函数 | 描述 |  |  |\n| --- | --- | --- | --- |\n| enum\\_first(anyenum) | 返回输入枚举类型的第一个值 | enum\\_first(null::rainbow) | red |\n| enum\\_last(anyenum) | 返回输入枚举类型的最后一个值 | enum\\_last(null::rainbow) | purple |\n| enum\\_range(anyenum) | 将输入枚举类型的所有值作为一个有序的数组返回 | enum\\_range(null::rainbow) | {red,orange,yellow,green,blue,purple} |\n| enum\\_range(anyenum, anyenum) | 以一个数组返回在给定两个枚举值之间的范围。值必须来自相同的枚举类型。 如果第一个参数为空，其结果将从枚举类型的第一个值开始。如果第二参数为空，其结果将以枚举类型的最后一个值结束。 | enum\\_range(‘orange’::rainbow, ‘green’::rainbow) | {orange,yellow,green} |\n|  |  | enum\\_range(NULL, ‘green’::rainbow)` | {red,orange,yellow,green} |\n|  |  | enum\\_range(‘orange’::rainbow, NULL)` | {orange,yellow,green,blue,purple} |\n\n请注意，除了双参数形式的enum\\_range外， 这些函数忽略传递给它们的具体值，它们只关心声明的数据类型。 空值或类型的一个特定值可以通过，并得到相同的结果。这些函数更多地被用于一个表列或函数参数，而不是一个硬写的类型名，如例子中所建议。\n\n枚举样例如下：\n\n```\ncreate type enum_clor as enum ('red','black','green','white','blue');\nselect enum_first('black'::enum_clor),enum_first(null::enum_clor);\n\nselect enum_last('black'::enum_clor),enum_last(null::enum_clor);\nselect enum_range('black'::enum_clor),enum_range(null::enum_clor);\nselect enum_range(null,'white'::enum_clor);\nselect enum_range('black'::enum_clor,null);\nselect enum_range('black'::enum_clor,'white'::enum_clor);\n```\n\n## 几何函数和操作符 [*link*](#%e5%87%a0%e4%bd%95%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n几何类型point、box、 lseg、line、path、 polygon和circle有一大堆本地支持函数和操作符，如下表中所示。\n\n**表** **.** **几何操作符**\n\n| 操作符 | 描述 | 例子 |\n| --- | --- | --- |\n| + | 平移 | select box ‘((0,0),(1,1))’ + point ‘(2.0,0)’; |\n| - | 平移 | select box ‘((0,0),(1,1))’ - point ‘(2.0,0)’; |\n| \\* | 缩放/旋转 | select box ‘((0,0),(1,1))’ \\* point ‘(2.0,0)’; |\n| / | 缩放/旋转 | select box ‘((0,0),(2,2))’ / point ‘(2.0,0)’; |\n| # | 相交的点或方框 | select box’((1,-1),(-1,1))’ # box’((1,1),(-1,-1))’; |\n| # | 路径或多边形中的点数 | select # path ‘((1,0),(0,1),(-1,0))’; |\n| @-@ | 长度或周长 | select @-@ path ‘((0,0),(1,0))’; |\n| @@ | 中心 | select @@ circle ‘((0,0),10)’; |\n| ## | 第二个操作数上最接近第一个操作数的点 | select point ‘(0,0)’ ## lseg ‘((2,0),(0,2))’; |\n| <-> | 距离 | select circle ‘((0,0),1)’ <-> circle ‘((5,0),1)’; |\n| && | 是否重叠？（只要有一个公共点这就为真） | select box ‘((0,0),(1,1))’ && box ‘((0,0),(2,2))’; |\n| « | 是否严格地在左侧？ | select circle ‘((0,0),1)’ « circle ‘((5,0),1)’; |\n| » | 是否严格地在右侧？ | select circle ‘((5,0),1)’ » circle ‘((0,0),1)’; |\n| &< | 没有延展到右边？ | select box ‘((0,0),(1,1))’ &< box ‘((0,0),(2,2))’; |\n| &> | 没有延展到左边？ | select box ‘((0,0),(3,3))’ &> box ‘((0,0),(2,2))’; |\n| «| | 严格在下？ | select box ‘((0,0),(3,3))’ «| box ‘((3,4),(5,5))’; |\n| |» | 严格在上？ | select box ‘((3,4),(5,5))’ |» box ‘((0,0),(3,3))’; |\n| &<| | 没有延展到上面？ | select box ‘((0,0),(1,1))’ &<| box ‘((0,0),(2,2))’; |\n| |&> | 没有延展到下面？ | select box ‘((0,0),(3,3))’ |&> box ‘((0,0),(2,2))’; |\n| <^ | 在下面（允许相切）？ | select circle ‘((0,0),1)’ <^ circle ‘((0,5),1)’; |\n| >^ | 在上面（允许相切）？ | select circle ‘((0,5),1)’ >^ circle ‘((0,0),1)’; |\n| ?# | 相交？ | select lseg ‘((-1,0),(1,0))’ ?# box ‘((-2,-2),(2,2))’; |\n| ?- | 水平？ | select ?- lseg ‘((-1,0),(1,0))’; |\n| ?- | 水平对齐？ | select point ‘(1,0)’ ?- point ‘(0,0)’; |\n| ?| | 垂直？ | select ?| lseg ‘((-1,0),(1,0))’; |\n| ?| | 垂直对齐？ | select point ‘(0,1)’ ?| point ‘(0,0)’; |\n| ?-| | 相互垂直？ | select lseg ‘((0,0),(0,1))’ ?-| lseg ‘((0,0),(1,0))’; |\n| ?|| | 平行？ | select lseg ‘((-1,0),(1,0))’ ?|| lseg ‘((-1,2),(1,2))’; |\n| @> | 包含？ | select circle ‘((0,0),2)’ @> point ‘(1,1)’; |\n| <@ | 包含在内或在上？ | select point ‘(1,1)’ <@ circle ‘((0,0),2)’; |\n| ~= | 相同？ | select polygon ‘((0,0),(1,1))’ ~= polygon ‘((1,1),(0,0))’; |\n\n**表** **.** **几何函数**\n\n| 函数 | 返回类型 | 描述 | 例子 |\n| --- | --- | --- | --- |\n| area(object) | double precision | 面积 | select area(circle’((0,0),1)’) ; |\n| center(object) | point | 中心 | select center(box ‘((0,0),(1,2))’) ; |\n| diameter(circle) | double precision | 圆的直径 | select diameter(circle ‘((0,0),2.0)’) ; |\n| height(box) | double precision | 方框的垂直尺寸 | select height(box ‘((0,0),(1,1))’) ; |\n| isclosed(path) | boolean | 一个封闭路径？ | select isclosed(path ‘((0,0),(1,1),(2,0))’) ; |\n| isopen(path) | boolean | 一个开放路径？ | select isopen(path ‘[(0,0),(1,1),(2,0)]’) ; |\n| length(object) | double precision | 长度 | select length(path ‘((-1,0),(1,0))’) ; |\n| npoints(path) | int | 点数 | select npoints(path ‘[(0,0),(1,1),(2,0)]’) ; |\n| npoints(polygon) | int | 点数 | select npoints(polygon ‘((1,1),(0,0))’) ; |\n| pclose(path) | path | 将路径转换成封闭的 | select pclose(path ‘[(0,0),(1,1),(2,0)]’) ; |\n| popen(path) | path | 将路径转换成开放 | select popen(path ‘((0,0),(1,1),(2,0))’) ; |\n| radius(circle) | double precision | 圆的半径 | select radius(circle ‘((0,0),2.0)’) ; |\n| width(box) | double precision | 方框的水平尺寸 | select width(box ‘((0,0),(1,1))’) ; |\n\n**表** **.** **几何类型转换函数**\n\n| 函数 | 返回类型 | 描述 | 例子 |\n| --- | --- | --- | --- |\n| box(circle) | box | 圆到方框 | select box(circle ‘((0,0),2.0)’); |\n| box(point) | box | 点到空方框 | select box(point ‘(0,0)’) ; |\n| box(point, point) | box | 点到方框 | select box(point ‘(0,0)’, point ‘(1,1)’) ; |\n| box(polygon) | box | 多边形到方框 | select box(polygon ‘((0,0),(1,1),(2,0))’) ; |\n| bound\\_box(box, box) | box | 方框到外包框 | select bound\\_box(box ‘((0,0),(1,1))’, box ‘((3,3),(4,4))’) ; |\n| circle(box) | circle | 方框到圆 | select circle(box ‘((0,0),(1,1))’) ; |\n| circle(point, double precision) | circle | 中心和半径到圆 | select circle(point ‘(0,0)’, 2.0) ; |\n| circle(polygon) | circle | 多边形到圆 | select circle(polygon ‘((0,0),(1,1),(2,0))’) ; |\n| line(point, point) | line | 点到线 | select line(point ‘(-1,0)’, point ‘(1,0)’) ; |\n| lseg(box) | lseg | 方框对角线到线段 | select lseg(box ‘((-1,0),(1,0))’) ; |\n| lseg(point, point) | lseg | 点到线段 | select lseg(point ‘(-1,0)’, point ‘(1,0)’) ; |\n| path(polygon) | path | 多边形到路径 | select path(polygon ‘((0,0),(1,1),(2,0))’) ; |\n| point(double precision, double precision) | point | 构造点 | select point(23.4, -44.5) ; |\n| point(box) | point | 方框的中心 | select point(box ‘((-1,0),(1,0))’) ; |\n| point(circle) | point | 圆的中心 | select point(circle ‘((0,0),2.0)’) ; |\n| point(lseg) | point | 线段的中心 | select point(lseg ‘((-1,0),(1,0))’) ; |\n| point(polygon) | point | 多边形的中心 | select point(polygon ‘((0,0),(1,1),(2,0))’) ; |\n| polygon(box) | polygon | 方框到4点多边形 | select polygon(box ‘((0,0),(1,1))’) ; |\n| polygon(circle) | polygon | 圆到12点多边形 | select polygon(circle ‘((0,0),2.0)’) ; |\n| polygon(npts, circle) | polygon | 点到npts点多边形 | select polygon(12, circle ‘((0,0),2.0)’) ; |\n| polygon(path) | polygon | 路径到多边形 | select polygon(path ‘((0,0),(1,1),(2,0))’) ; |\n\n我们可以把一个point的两个组成数字当作具有索引 0 和 1 的数组访问。例如，如果t.p是一个point列，那么SELECT p[0] FROM t检索 X 座标而 UPDATE t SET p[1] = …改变 Y 座标。同样，box或者lseg类型的值可以当作两个point值的数组值看待。\n\n函数area可以用于类型box、circle和path。area函数操作path数据类型的时候， 只有在path的点没有交叉的情况下才可用。例如，path ‘((0,0),(0,1),(2,1),(2,2),(1,2),(1,0),(0,0))’::PATH是不行的， 而下面的视觉上相同的 path ‘((0,0),(0,1),(1,1),(1,2),(2,2),(2,1),(1,1),(1,0),(0,0))’::PATH就可以。 如果交叉和不交叉的path概念让你疑惑，那么把上面两个path都画在一张图纸上，你就明白了。\n\n## 网络地址函数和操作符 [*link*](#%e7%bd%91%e7%bb%9c%e5%9c%b0%e5%9d%80%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n展示了可以用于cidr和 inet类型的操作符。 操作符«、«=、 »、»=和 &&测试用于子网包含。它们只考虑两个地址的网络部分（忽略任何主机部分），然后判断其中一个网络部分是等于另外一个或者是另外一个的子网。\n\n**表.cidr和inet操作符**\n\n| 操作符 | 描述 | 例子 |\n| --- | --- | --- |\n| < | 小于 | select inet ‘192.168.1.5’ < inet ‘192.168.1.6’ ; |\n| <= | 小于等于 | select inet ‘192.168.1.5’ <= inet ‘192.168.1.5’ ; |\n| = | 等于 | select inet ‘192.168.1.5’ = inet ‘192.168.1.5’ ; |\n| >= | 大于等于 | select inet ‘192.168.1.5’ >= inet ‘192.168.1.5’ ; |\n| > | 大于 | select inet ‘192.168.1.5’ > inet ‘192.168.1.4’ ; |\n| <> | 不等于 | select inet ‘192.168.1.5’ <> inet ‘192.168.1.4’ ; |\n| « | 被包含在内 | select inet ‘192.168.1.5’ « inet ‘192.168.1/24’ ; |\n| «= | 被包含在内或等于 | select inet ‘192.168.1/24’ «= inet ‘192.168.1/24’ ; |\n| » | 包含 | select inet ‘192.168.1/24’ » inet ‘192.168.1.5’ ; |\n| »= | 包含或等于 | select inet ‘192.168.1/24’ »= inet ‘192.168.1/24’ ; |\n| && | 包含或者被包含contains or is contained by | select inet ‘192.168.1/24’ && inet ‘192.168.1.80/28’ ; |\n| ~ | 按位 NOT | select ~ inet ‘192.168.1.6’ ; |\n| & | 按位 AND | select inet ‘192.168.1.6’ & inet ‘0.0.0.255’ ; |\n| | | 按位 OR | select inet ‘192.168.1.6’ | inet ‘0.0.0.255’ ; |\n| + | 加 | select inet ‘192.168.1.6’ + 25 ; |\n| - | 减 | select inet ‘192.168.1.43’ - 36 ; |\n| - | 减 | select inet ‘192.168.1.43’ - inet ‘192.168.1.19’ ; |\n\n展示了所有可以用于cidr和inet类型的函数。函数abbrev、host和text主要是为了提供可选的显示格式用的。\n\n**表** **. cidr和inet函数**\n\n| **函数** | **返回类型** | **描述** | **例子** | **结果** |\n| --- | --- | --- | --- | --- |\n| abbrev(inet) | text | 缩写显示格式文本 | select abbrev(inet ‘10.1.0.0/16’); | 10.1.0.0/16 |\n| abbrev(cidr) | text | 缩写显示格式文本 | select abbrev(cidr ‘10.1.0.0/16’) ; | 10.1/16 |\n| broadcast(inet) | inet | 网络广播地址 | select broadcast(‘192.168.1.5/24’) ; | 192.168.1.255/24 |\n| family(inet) | int | 抽取地址族；4为 IPv4， 6为 IPv6 | select family(’::1’) ; | 6 |\n| host(inet) | text | 抽取 IP 地址为文本 | select host(‘192.168.1.5/24’) ; | 192.168.1.5 |\n| hostmask(inet) | inet | 为网络构造主机掩码 | select hostmask(‘192.168.23.20/30’) ; | 0.0.0.3 |\n| masklen(inet) | int | 抽取网络掩码长度 | select masklen(‘192.168.1.5/24’) ; | 24 |\n| netmask(inet) | inet | 为网络构造网络掩码 | select netmask(‘192.168.1.5/24’) ; | 255.255.255.0 |\n| network(inet) | cidr | 抽取地址的网络部分 | select network(‘192.168.1.5/24’) ; | 192.168.1.0/24 |\n| set\\_masklen(inet, int) | inet | 为inet值设置网络掩码长度 | select set\\_masklen(‘192.168.1.5/24’, 16) ; | 192.168.1.5/16 |\n| set\\_masklen(cidr, int) | cidr | 为cidr值设置网络掩码长度 | select set\\_masklen(‘192.168.1.0/24’::cidr, 16) ; | 192.168.0.0/16 |\n| text(inet) | text | 抽取 IP 地址和网络掩码长度为文本 | select text(inet ‘192.168.1.5’) ; | 192.168.1.5/32 |\n| inet\\_same\\_family(inet, inet) | boolean | 地址是来自于同一个家族吗？ | select inet\\_same\\_family(‘192.168.1.5/24’, ‘::1’) ; | false |\n| inet\\_merge(inet, inet) | cidr | 包括给定网络的最小网络 | select inet\\_merge(‘192.168.1.5/24’, ‘192.168.2.5/24’) ; | 192.168.0.0/22 |\n\n任何cidr值都能够被隐式或显式地转换为inet值， 因此上述能够操作inet值的函数也同样能够操作cidr值（也有独立的用于inet和cidr的函数，因为它的行为应当和这两种情况不同）。inet值也可以转换为cidr值。完成时，该网络掩码右侧的任何位都将无声地转换为零以获得一个有效的cidr值。另外，你还可以使用常规的造型语法将一个文本字符串转换为inet或cidr值：例如，inet(expression)或colname::cidr。\n\n下表展示了可以用于macaddr类型的函数。 函数trunc(macaddr)返回一个 MAC 地址，该地址的最后三个字节设置为零。这样可以把剩下的前缀与一个制造商相关联。\n\n**表. macaddr函数**\n\n| **函数** | **返回类型** | **描述** | **例子** | **结果** |\n| --- | --- | --- | --- | --- |\n| trunc(macaddr) | macaddr | 设置最后3个字节为零 | `select trunc(macaddr '12:34:56:78:90:ab');` | `12:34:56:00:00:00` |\n\nmacaddr类型还支持标准关系操作符 （>、<=等） 用于编辑次序，并且按位算术操作符（~、&和|）用于 NOT、AND 和 OR。\n\n表 中展示了可以用于macaddr8类型的函数。函数trunc(macaddr8)返回一个后五个字节设置为零的MAC地址。这可以被用来为一个制造商关联一个前缀。\n\n**表. macaddr8函数**\n\n| **函数** | **返回类型** | **描述** | **例子** | **结果** |\n| --- | --- | --- | --- | --- |\n| trunc(macaddr8) | macaddr8 | 设置最后五个字节为零 | `select trunc(macaddr8 '12:34:56:78:90:ab:cd:ef');` | `12:34:56:00:00:00:00:00` |\n| macaddr8\\_set7bit(macaddr8) | macaddr8 | 设置第7位为一，也被称为修改版的EUI-64，用于内含在IPv6地址中 | `select macaddr8_set7bit(macaddr8 '00:34:56:ab:cd:ef');` | `02:34:56:ff:fe:ab:cd:ef` |\n\nmacaddr8类型也支持用于排序的标准关系操作符（>、<=等）以及用于NOT、AND和OR的位运算操作符（~、&和|）。\n\n## 文本搜索函数和操作符 [*link*](#%e6%96%87%e6%9c%ac%e6%90%9c%e7%b4%a2%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n结了为全文搜索提供的函数和操作符。\n\n**表.文本搜索操作符**\n\n| 操作符 | 返回类型 | 描述 | 例子 | 结果 |\n| --- | --- | --- | --- | --- |\n| || | tsvector | 连接tsvector | ‘a:1 b:2’::tsvector || ‘c:1 d:2 b:3’::tsvector | ‘a’:1 ‘b’:2,5 ‘c’:3 ’d’:4 |\n| && | tsquery | 将tsquery用 AND 连接起来 | ‘fat | rat’::tsquery && ‘cat’::tsquery | ( ‘fat’ | ‘rat’ ) & ‘cat’ |\n| || | tsquery | 将tsquery用 OR 连接起来 | ‘fat | rat’::tsquery || ‘cat’::tsquery | ( ‘fat’ | ‘rat’ ) | ‘cat’ |\n| !! | tsquery | 对一个tsquery取反 | !! ‘cat’::tsquery | !‘cat’ |\n| @> | boolean | tsquery包含另一个？ | ‘cat’::tsquery @> ‘cat & rat’::tsquery | f |\n| <@ | boolean | tsquery被包含？ | ‘cat’::tsquery <@ ‘cat & rat’::tsquery | t |\n\n除了显示在表中的操作符，还定义了tsvector和tsquery类型的普通B-tree比较操作符（=、<等）。它们对于文本搜索不是很有用，但是允许使用。例如，建在这些类型列上的唯一索引。\n\n**表.文本搜索函数**\n\n| 函数 | 返回类型 | 描述 | 例子 | 结果 |\n| --- | --- | --- | --- | --- |\n| array\\_to\\_tsvector(text[]) | tsvector | 把词位数组转换成tsvector | array\\_to\\_tsvector(’{fat,cat,rat}’::text[]) | ‘cat’ ‘fat’ ‘rat’ |\n| length(tsvector) | integer | tsvector中的词位数 | length(‘fat:2,4 cat:3 rat:5A’::tsvector) | 3 |\n| numnode(tsquery) | integer | tsquery中词位外加操作符的数目 | numnode(’(fat & rat) | cat’::tsquery) | 5 |\n| querytree(query tsquery) | text | 获得一个tsquery的可索引部分 | querytree(‘foo & ! bar’::tsquery) | ‘foo’ |\n| setweight(vector tsvector, weight “char”) | tsvector | 为vector的每一个元素分配权重 | setweight(‘fat:2,4 cat:3 rat:5B’::tsvector, ‘A’) | ‘cat’:3A ‘fat’:2A,4A ‘rat’:5A |\n| setweight(vector tsvector, weight “char”, lexemes text[]) | tsvector | 为lexemes中列出的vector的元素分配权重 | setweight(‘fat:2,4 cat:3 rat:5B’::tsvector, ‘A’, ‘{cat,rat}’) | ‘cat’:3A ‘fat’:2,4 ‘rat’:5A |\n| strip(tsvector) | tsvector | 从tsvector中移除位置和权重 | strip(‘fat:2,4 cat:3 rat:5A’::tsvector) | ‘cat’ ‘fat’ ‘rat’ |\n| ts\\_delete(vector tsvector, lexeme text) | tsvector | 从vector中移除给定的lexeme | ts\\_delete(‘fat:2,4 cat:3 rat:5A’::tsvector, ‘fat’) | ‘cat’:3 ‘rat’:5A |\n| ts\\_delete(vector tsvector, lexemes text[]) | tsvector | 从vector中移除lexemes中词位的任何出现 | ts\\_delete(‘fat:2,4 cat:3 rat:5A’::tsvector, ARRAY[‘fat’,‘rat’]) | ‘cat’:3 |\n| ts\\_filter(vector tsvector, weights “char”[]) | tsvector | 从vector中只选择带有给定权重的元素 | ts\\_filter(‘fat:2,4 cat:3b rat:5A’::tsvector, ‘{a,b}’) | ‘cat’:3B ‘rat’:5A |\n| ts\\_rewrite(query tsquery, target tsquery, substitute tsquery) | tsquery | 在查询内用substitute替换target | ts\\_rewrite(‘a & b’::tsquery, ‘a’::tsquery, ‘foo|bar’::tsquery) | ‘b’ & ( ‘foo’ | ‘bar’ ) |\n| tsvector\\_to\\_array(tsvector) | text[] | 把tsvector转换为词位数组 | tsvector\\_to\\_array(‘fat:2,4 cat:3 rat:5A’::tsvector) | {cat,fat,rat} |\n| unnest(tsvector, OUT lexeme text, OUT positions smallint[], OUT weights text) | setof record | 把一个 tsvector 扩展成一组行 | unnest(‘fat:2,4 cat:3 rat:5A’::tsvector) | (cat,{3},{D}) … |\n\n表中的函数被单独列出，因为它们通常不被用于日常的文本搜索操作。 它们有助于开发和调试新的文本搜索配置。\n\n**表.文本搜索调试函数**\n\n| 函数 | 返回类型 | 描述 | 例子 | 结果 |\n| --- | --- | --- | --- | --- |\n| ts\\_parse(parser\\_name text, document text, OUT tokid integer, OUT token text) | setof record | 测试一个解析器 | ts\\_parse(‘default’, ‘foo - bar’) | (1,foo) … |\n| ts\\_parse(parser\\_oid oid, document text, OUT tokid integer, OUT token text) | setof record | 测试一个解析器 | ts\\_parse(3722, ‘foo - bar’) | (1,foo) … |\n| ts\\_token\\_type(parser\\_name text, OUT tokid integer, OUT alias text, OUT description text) | setof record | 获得解析器定义的记号类型 | ts\\_token\\_type(‘default’) | (1,asciiword,“Word, all ASCII”) … |\n| ts\\_token\\_type(parser\\_oid oid, OUT tokid integer, OUT alias text, OUT description text) | setof record | 获得解析器定义的记号类型 | ts\\_token\\_type(3722) | (1,asciiword,“Word, all ASCII”) … |\n\n## JSON函数与操作符 [*link*](#json%e5%87%bd%e6%95%b0%e4%b8%8e%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n大多数运算符都是重载的，因此可以同时在json和jsonb值上使用它们。下表展示了可以用于两种 JSON 数据类型的操作符。\n\n**表** json**和**jsonb **操作符**\n\n| **操作符** | **右操作数类型** | **描述** | **例子** | **例子结果** |\n| --- | --- | --- | --- | --- |\n| -> | int | 获得 JSON 数组元素（索引从 0 开始，负整数从末尾开始计） | ‘[{“a”:“foo”},{“b”:“bar”},{“c”:“baz”}]’::json->2 | {“c”:“baz”} |\n| -> | text | 通过键获得 JSON 对象域 | ‘{“a”: {“b”:“foo”}}’::json->‘a’ | {“b”:“foo”} |\n| -» | int | 以text形式获得 JSON 数组元素 | ‘[1,2,3]’::json-»2 | 3 |\n| -» | text | 以text形式获得 JSON 对象域 | ‘{“a”:1,“b”:2}’::json-»‘b’ | 2 |\n| #> | text[] | 获取在指定路径的 JSON 对象 | ‘{“a”: {“b”:{“c”: “foo”}}}’::json#>’{a,b}’ | {“c”: “foo”} |\n| #» | text[] | 以text形式获取在指定路径的 JSON 对象 | ‘{“a”:[1,2,3],“b”:[4,5,6]}’::json#»’{a,2}’ | 3 |\n\n注意：对json和jsonb类型，这些操作符都有其并行变体。 域/元素/路径抽取操作符返回与其左手输入（json或jsonb） 相同的类型，不过那些被指定为返回text的除外，它们的返回值会被强制 为文本。如果该 JSON 输入没有匹配请求的正确结构（例如那样的元素不存在），这些 域/元素/路径抽取操作符会返回 NULL 而不是失败。 接受整数 JSON 数组下标的 域/元素/路径抽取操作符都支持表示从数组末尾开始的负值下标形式。\n\n**表** **额外的jsonb操作符**\n\n| **操作符** | **右操作数类型** | **描述** | **例子** |\n| --- | --- | --- | --- |\n| @> | jsonb | 左边的 JSON 值是否在顶层包含右边的 JSON 路径/值项？ | ‘{“a”:1, “b”:2}’::jsonb @> ‘{“b”:2}’::jsonb |\n| <@ | jsonb | 左边的 JSON 路径/值项是否被包含在右边的 JSON 值的顶层？ | ‘{“b”:2}’::jsonb <@ ‘{“a”:1, “b”:2}’::jsonb |\n| ? | text | 键/元素字符串是否存在于 JSON 值的顶层？ | ‘{“a”:1, “b”:2}’::jsonb ? ‘b’ |\n| ?| | text[] | 这些数组字符串中的任何一个是否做为顶层键存在？ | ‘{“a”:1, “b”:2, “c”:3}’::jsonb ?| array[‘b’, ‘c’] |\n| ?& | text[] | 是否所有这些数组字符串都作为顶层键存在？ | ‘[“a”, “b”]’::jsonb ?& array[‘a’, ‘b’] |\n| || | jsonb | 把两个jsonb值串接成一个新的jsonb值 | ‘[“a”, “b”]’::jsonb || ‘[“c”, “d”]’::jsonb |\n| - | text | 从左操作数删除键/值对或者string 元素。键/值对基于它们的键值来匹配。 | ‘{“a”: “b”}’::jsonb - ‘a’ |\n| - | text[] | 从左操作数中删除多个键/值对或者string元素。键/值对基于它们的键值来匹配。 | ‘{“a”: “b”, “c”: “d”}’::jsonb - ‘{a,c}’::text[] |\n| - | integer | 删除具有指定索引（负值表示倒数）的数组元素。如果 顶层容器不是数组则抛出一个错误。 | ‘[“a”, “b”]’::jsonb - 1 |\n| #- | text[] | 删除具有指定路径的域或者元素（对于 JSON 数组，负值 表示倒数） | ‘[“a”, {“b”:1}]’::jsonb #- ‘{1,b}’ |\n\n注意：||操作符将其每一个操作数的顶层的元素串接起来。它不会递归操作。例如，如果两个操作数都是具有公共域名称的对象，结果中的域值将只是来自右手操作数的值。\n\n下表展示了可用于创建 json 和 jsonb值的函数（没有用于 jsonb的与row\\_to\\_json和 array\\_to\\_json等价的函数。不过，to\\_jsonb函数 提供了这些函数的很大一部分相同的功能）。\n\n**表. JSON创建函数**\n\n| **函数** | **描述** | **例子** | **例子结果** |\n| --- | --- | --- | --- |\n| to\\_json(anyelement) to\\_jsonb(anyelement) | 把该值返回为json或者jsonb。数组和组合 会被（递归）转换成数组和对象；对于不是数组和组合的值，如果有 从该类型到json的造型，造型函数将被用来执行该 转换；否则将产生一个标量值。对于任何不是数字、布尔、空值的标 量类型，将使用文本表达，在这种风格下它是一个合法的 json或者jsonb值。 | to\\_json(‘Fred said “Hi.”’::text) | “Fred said \"Hi.\"” |\n| row\\_to\\_json(record [, pretty\\_bool]) | 把行作为一个 JSON 对象返回。如果pretty\\_bool为真，将在第1层元素之间增加换行。 | row\\_to\\_json(row(1,‘foo’)) | {“f1”:1,“f2”:“foo”} |\n| json\\_build\\_array(VARIADIC “any”) jsonb\\_build\\_array(VARIADIC “any”) | 从一个可变参数列表构造一个可能包含异质类型的 JSON 数组。 | json\\_build\\_array(1,2,‘3’,4,5) | [1, 2, “3”, 4, 5] |\n| json\\_build\\_object(VARIADIC “any”) jsonb\\_build\\_object(VARIADIC “any”) | 从一个可变参数列表构造一个 JSON 对象。通过转换，该参数列表由交替 出现的键和值构成。 | json\\_build\\_object(‘foo’,1,‘bar’,2) | {“foo”: 1, “bar”: 2} |\n| json\\_object(keys text[], values text[]) jsonb\\_object(keys text[], values text[]) | json\\_object的这种形式从两个独立的数组得到键/值对。在其 他方面和一个参数的形式相同。 | json\\_object(’{a, b}’, ‘{1,2}’) | {“a”: “1”, “b”: “2”} |\n\n注意：array\\_to\\_json和row\\_to\\_json与to\\_json 具有相同的行为，不过它们提供了更好的打印选项。针对to\\_json所描述 的行为同样也适用于由其他 JSON 创建函数转换的每个值。\n\n下表展示了可用来处理json 和jsonb值的函数。\n\n**表. JSON处理**\n\n| **函数** | **返回值** | **描述** | **例子** | **例子结果** |\n| --- | --- | --- | --- | --- |\n| json\\_array\\_length(json) jsonb\\_array\\_length(jsonb) | int | 返回最外层 JSON 数组中的元素数量。 | json\\_array\\_length(’[1,2,3,{“f1”:1,“f2”:[5,6]},4]') | 5 |\n| json\\_each(json) jsonb\\_each(jsonb) | setof key text, value json setof key text, value jsonb | 扩展最外层的 JSON 对象成为一组键/值对。 | select \\* from json\\_each(’{“a”:“foo”, “b”:“bar”}') | key | value —–+——- a | “foo” b | “bar” |\n| json\\_each\\_text(json) jsonb\\_each\\_text(jsonb) | setof key text, value text | 扩展最外层的 JSON 对象成为一组键/值对。返回值将是text类型。 | select \\* from json\\_each\\_text(’{“a”:“foo”, “b”:“bar”}') | key | value —–+——- a | foo b | bar |\n| json\\_extract\\_path(from\\_json json, VARIADIC path\\_elems text[]) jsonb\\_extract\\_path(from\\_json jsonb, VARIADIC path\\_elems text[]) | json jsonb | 返回由path\\_elems指向的 JSON 值（等效于#>操作符）。 | json\\_extract\\_path(’{“f2”:{“f3”:1},“f4”:{“f5”:99,“f6”:“foo”}}’,‘f4’) | {“f5”:99,“f6”:“foo”} |\n| json\\_extract\\_path\\_text(from\\_json json, VARIADIC path\\_elems text[]) jsonb\\_extract\\_path\\_text(from\\_json jsonb, VARIADIC path\\_elems text[]) | text | 以text返回由path\\_elems指向的 JSON 值（等效于#»操作符）。 | json\\_extract\\_path\\_text(’{“f2”:{“f3”:1},“f4”:{“f5”:99,“f6”:“foo”}}’,‘f4’, ‘f6’) | foo |\n| json\\_object\\_keys(json) jsonb\\_object\\_keys(jsonb) | setof text | 返回最外层 JSON 对象中的键集合。 | json\\_object\\_keys(’{“f1”:“abc”,“f2”:{“f3”:“a”, “f4”:“b”}}’) | json\\_object\\_keys —————— f1 f2 |\n| json\\_populate\\_record(base anyelement, from\\_json json) jsonb\\_populate\\_record(base anyelement, from\\_json jsonb) | anyelement | 扩展from\\_json中的对象成一个行，它的列匹配由base定义的记录类型。 | select \\* from json\\_populate\\_record(null::myrowtype, ‘{“a”: 1, “b”: [“2”, “a b”], “c”: {“d”: 4, “e”: “a b c”}}’) | a | b | c —+———–+————- 1 | {2,“a b”} | (4,“a b c”) |\n| json\\_populate\\_recordset(base anyelement, from\\_json json) jsonb\\_populate\\_recordset(base anyelement, from\\_json jsonb) | setof anyelement | 扩展from\\_json中最外的对象数组为一个集合，该集合的列匹配由base定义的记录类型。 | select \\* from json\\_populate\\_recordset(null::myrowtype, ‘[{“a”:1,“b”:2},{“a”:3,“b”:4}]’) | a | b —+— 1 | 2 3 | 4 |\n| json\\_array\\_elements(json) jsonb\\_array\\_elements(jsonb) | setof json setof jsonb | 把一个 JSON 数组扩展成一个 JSON 值的集合。 | select \\* from json\\_array\\_elements(’[1,true, [2,false]]') | value ———– 1 true [2,false] |\n| json\\_array\\_elements\\_text(json) jsonb\\_array\\_elements\\_text(jsonb) | setof text | 把一个 JSON 数组扩展成一个text值集合。 | select \\* from json\\_array\\_elements\\_text(’[“foo”, “bar”]') | value ———– foo bar |\n| json\\_typeof(json) jsonb\\_typeof(jsonb) | text | 把最外层的 JSON 值的类型作为一个文本字符串返回。可能的类型是： object、array、string、number、 boolean以及null。 | json\\_typeof(’-123.4') | number |\n| json\\_to\\_record(json) jsonb\\_to\\_record(jsonb) | record | 从一个 JSON 对象（见下文的注解）构建一个任意的记录。正如所有返回record 的函数一样，调用者必须用一个AS子句显式地定义记录的结构。 | select \\* from json\\_to\\_record(’{“a”:1,“b”:[1,2,3],“c”:[1,2,3],“e”:“bar”,“r”: {“a”: 123, “b”: “a b c”}}’) as x(a int, b text, c int[], d text, r myrowtype) | a | b | c | d | r —+———+———+—+————— 1 | [1,2,3] | {1,2,3} | | (123,“a b c”) |\n| json\\_to\\_recordset(json) jsonb\\_to\\_recordset(jsonb) | setof record | 从一个 JSON 对象数组构建一个任意的记录集合。正如所有返回record 的函数一样，调用者必须用一个AS子句显式地定义记录的结构。 | select \\* from json\\_to\\_recordset(’[{“a”:1,“b”:“foo”},{“a”:“2”,“c”:“bar”}]’) as x(a int, b text); | a | b —+—– 1 | foo 2 | |\n| json\\_strip\\_nulls(from\\_json json) jsonb\\_strip\\_nulls(from\\_json jsonb) | json jsonb | 返回from\\_json，其中所有具有空值的 对象域都被省略。其他空值不动。 | json\\_strip\\_nulls(’[{“f1”:1,“f2”:null},2,null,3]') | [{“f1”:1},2,null,3] |\n| jsonb\\_set(target jsonb, path text[], new\\_value jsonb[, create\\_missing boolean]) | jsonb | 返回target，其中由 path指定的节用 new\\_value替换，如果 path指定的项不存在并且 create\\_missing为真则加上 new\\_value。正如面向路径的 操作符一样，出现在path中的 负整数表示从 JSON 数组的末尾开始数。 | jsonb\\_set(’[{“f1”:1,“f2”:null},2,null,3]’, ‘{0,f1}’,’[2,3,4]’, false) jsonb\\_set(’[{“f1”:1,“f2”:null},2]’, ‘{0,f3}’,’[2,3,4]’) | [{“f1”:[2,3,4],“f2”:null},2,null,3] [{“f1”: 1, “f2”: null, “f3”: [2, 3, 4]}, 2] |\n| jsonb\\_insert(target jsonb, path text[], new\\_value jsonb, [insert\\_after boolean]) | jsonb | 返回被插入了new\\_value的target。如果path指定的target节在一个 JSONB 数组中，new\\_value将被插入到目标之前（insert\\_after为false，默认情况）或者之后（insert\\_after为真）。如果path指定的target节在一个 JSONB 对象内，则只有当target不存在时才插入new\\_value。对于面向路径的操作符来说，出现在path中的负整数表示从 JSON 数组的末尾开始计数。 | jsonb\\_insert(’{“a”: [0,1,2]}’, ‘{a, 1}’, ‘“new\\_value”’) jsonb\\_insert(’{“a”: [0,1,2]}’, ‘{a, 1}’, ‘“new\\_value”’, true) | {“a”: [0, “new\\_value”, 1, 2]} {“a”: [0, 1, “new\\_value”, 2]} |\n| jsonb\\_pretty(from\\_json jsonb) | text | 把from\\_json返回成一段 缩进后的 JSON 文本。 | jsonb\\_pretty(’[{“f1”:1,“f2”:null},2,null,3]’) | [ { “f1”: 1, “f2”: null }, 2, null, 3 ] |\n\n```\ndrop type if exists json_test_columns;\n--根据json结构创建自定义类型\ncreate type json_test_columns as (a int,b int,c int,d int);\n--使用自定义类型输出\nselect * from json_populate_record(null::json_test_columns,'{\"a\":1,\"b\":2,\"c\":3,\"d\":4}');\nselect * from json_populate_recordset(null::json_test_columns,'[{\"a\":1,\"b\":2,\"c\":3,\"d\":4},{\"a\":2,\"b\":3,\"c\":4,\"d\":5}]');\n--上面的压缩版本,目前还不支持,我个人觉得应该支持,\n-- select * from json_populate_recordset(null::json_test_columns,'[[1,2,3,4],[2,3,4,5]]');\n--变通方法\nselect value->>0 as a,value->>1 as b,value->>2 as c,value->>3 as c from (select * from jsonb_array_elements('[[1,2,3,4],[2,3,4,5]]')) as tmp;\n```\n\n注意:很多这些函数和操作符将把 JSON 字符串中的 Unicode 转义转换成合适的单一字符。如果 输入类型是jsonb，这就没有问题，因为该转换已经完成了。但是对于json 输入，这可能会导致抛出一个错误。\n\n注意:虽然函数json\\_populate\\_record、json\\_populate\\_recordset、json\\_to\\_record以及json\\_to\\_recordset的例子使用了常量，但常见的用法是引用FROM子句中的表并且使用其json或jsonb列之一作为函数的参数。然后抽取出的键值可以被查询的其他部分引用，例如WHERE子句和目标列表。以这种方式抽取多个值的性能比用以键为单位的操作符单个抽取它们的性能更好。\n\nJSON键被匹配到目标行类型中的相同列名。这些函数的JSON类型强制是一种“尽力而为”的方式并且对于某些类型可能得不到想要的值。不出现在目标行类型中的JSON字段将从输出中忽略，而且不匹配任何JSON字段的目标列将为NULL。\n\n注意:jsonb\\_set和jsonb\\_insert的path参数中除最后一项之外的所有项都必须存在于target中。如果create\\_missing为假，jsonb\\_set的path参数的所有项都必须存在。如果这些条件不满足，则返回的target不会被改变。\n\n如果最后的路径项是一个对象键，在它不存在且给定了新值的情况下会创建它。如果最后的路径项是一个数组索引，为正值则表示从左边开始计数，为负值表示从右边开始计数 - -1表示最右边的元素，以此类推。如果该项超过范围 -array\\_length .. array\\_length -1 并且 create\\_missing 为真，则该项为负时把新值加载数组的开始处，而该项为正时把新值加在数组的末尾处。\n\n注意:不要把json\\_typeof函数的null返回值与 SQL 的 NULL 弄混。 虽然调用json\\_typeof(’null’::json)将会返回null，但调用 json\\_typeof(NULL::json)将会返回一个 SQL 的 NULL。\n\n注意:如果json\\_strip\\_nulls的参数在任何对象中包含重复的域名称， 结果在语义上可能有所不同，具体取决于它们发生的顺序。这不是 jsonb\\_strip\\_nulls的一个问题，因为jsonb值 不能具有重复的对象域名称。\n\n## 序列操作函数 [*link*](#%e5%ba%8f%e5%88%97%e6%93%8d%e4%bd%9c%e5%87%bd%e6%95%b0)\n\n本节描述用于操作序列对象的函数，序列对象也被称为序列生成器或者就是序列。序列对象都是用CREATE SEQUENCE创建的特殊的单行表。序列对象通常用于为表的行生成唯一的标识符。表中列出的这些序列函数，可以为我们从序列对象中获取连续的序列值提供了简单的、多用户安全的方法。\n\n**表** **.** **序列函数**\n\n| 函数 | 返回类型 | 描述 |\n| --- | --- | --- |\n| currval(regclass) | bigint | 返回最近一次用nextval获取的指定序列的值 |\n| lastval() | bigint | 返回最近一次用nextval获取的任何序列的值 |\n| nextval(regclass) | bigint | 递增序列并返回新值 |\n| setval(regclass, bigint) | bigint | 设置序列的当前值 |\n| setval(regclass, bigint, boolean) | bigint | 设置序列的当前值以及is\\_called标志 |\n\n**创建序列**\n\n```\ncreate sequence public.test_sequece\nincrement by 1\nminvalue 10000000\nmaxvalue 9999999999\nstart with 10000000\ncache 1;\n```\n\n查看序列结构\n\n```\n\\d test_sequece\n                     Sequence \"public.test_sequece\"\n  Type  |  Start   | Minimum  |  Maximum   | Increment | Cycles? | Cache\n--------+----------+----------+------------+-----------+---------+-------\n bigint | 10000000 | 10000000 | 9999999999 |         1 | no      |   100\n\nSELECT nextval('test_sequece');\n nextval\n----------\n 10000000\n(1 row)\n\nSELECT nextval('test_sequece');\n nextval\n----------\n 10000001\n(1 row)\nselect currval('test_sequece');\n currval\n----------\n 10000001\n(1 row)\n\nSELECT setval('test_sequece',  11000001);\n  setval\n----------\n 11000001\n(1 row)\n\nselect currval('test_sequece');\n currval\n----------\n 11000001\n(1 row)\n```\n\n将要由序列函数调用操作的序列是用一个regclass参数声明的， 它只是序列在pg\\_class系统表里面的 OID。不过，你不需要手工查找 OID， 因为regclass数据类型的输入转换器会帮你做这件事情。 只要写出用单引号包围的序列名字即可，因此它看上去像文本常量。为了和普通SQL名字处理兼容，这个字串将转换成小写形式， 除非在序列名字周围包含双引号。因此：\n\n```\nnextval('test_sequece');      操作序列test_sequece\nnextval(' test_sequece ')      操作序列test_sequece\nnextval(' test_Sequece \"')    操作序列test_sequece\n```\n\n必要时序列名可以用模式限定∶\n\n```\nnextval(' public.test_sequece ')     操作myschema.foo\nnextval('\"public\". test_sequece ') ;   同上\nnextval(' test_sequece ')              在搜索路径中查找foo\nnextval(' test_sequece '::text)      foo在运行时查找\n查看数据库中有哪些序列\n--r =普通表， i =索引，S =序列，v =视图，m =物化视图， c =复合类型，t = TOAST表，f =外部表\nselect *  from pg_class where relkind='S'\n```\n\n可用的序列函数有∶\n\n**nextval**\n\n递增序列对象到它的下一个值并且返回该值。这个动作是自动完成的： 即使多个会话并发执行nextval，每个进程也会安全地收到一个唯一的序列值。\n\n如果一个序列对象是用默认参数创建的，连续的nextval调用将会返回从 1 开始的连续的值。其他的行为可以通过在CREATE SEQUENCE命令中使用特殊参数来获得；详见该命令的参考页。\n\n重要\n\n为了避免阻塞从同一个序列获取序号的并发事务，nextval操作从来不会被回滚。也就是说，一旦一个值被取出就视同被用掉并且不会被再次返回给调用者，即便调用该操作的外层事务后来中止或者调用查询后来没有使用取得的值也是这样。例如一个带有ON CONFLICT子句的INSERT会计算要被插入的元组，其中可能就包括调用nextval，然后才会检测到导致它转向ON CONFLICT规则的冲突。这种情况就会在已分配值的序列中留下未被使用的“空洞”。因此，序列对象不能被用来得到“无间隙”的序列。\n\n这个函数要求序列上的USAGE或者UPDATE特权。\n\n**currval**\n\n在当前会话中返回最近一次nextval取到的该序列的值（如果在本会话中从未在该序列上调用过nextval，那么会报告一个错误）。请注意因为此函数返回一个会话本地的值，不论其它会话是否在当前会话之后执行过nextval，它都能给出一个可预测的回答。\n\n这个函数要求序列上的USAGE或者SELECT特权。\n\n**lastval**\n\n返回当前会话里最近一次nextval返回的值。 这个函数等效于currval，只是它不用序列名作为参数， 它会引用当前会话里面最近一次被应用的序列的nextval。如果当前会话还没有调用过nextval，那么调用lastval会报错。\n\n这个函数要求上一次使用的序列上的USAGE或者SELECT特权。\n\n**setval**\n\n重置序列对象的计数器值。双参数的形式设置序列的last\\_value域为指定值并且将其is\\_called域设置为 true，表示下一次nextval将在返回值之前递增该序列。currval报告的值也被设置为指定的值。在三参数形式里，is\\_called可以设置为true或false。true具有和双参数形式相同的效果。如果你把它设置为false，那么下一次nextval将返回指定的值，而从随后的nextval才开始递增该序列。此外，在这种情况中currval报告的值不会被改变。 例如：\n\n```\nSELECT setval(' test_sequece ', 10000001);           下一次nextval会返回 43\nSELECT setval(' test_sequece ', 10000001, true);     同上\nSELECT setval(' test_sequece ', 10000001, false);    下一次nextval将返回 42\n```\n\nsetval返回的结果就是它的第二个参数的值。\n\n## 条件表达式 [*link*](#%e6%9d%a1%e4%bb%b6%e8%a1%a8%e8%be%be%e5%bc%8f)\n\n本节描述在MemFireDB中可用的SQL兼容的条件表达式。\n\n### CASE [*link*](#case)\n\nSQL CASE表达式是一种通用的条件表达式，类似于其它编程语言中的 if/else 语句：\n\n```\nCASE WHEN condition THEN result\n     [WHEN ...]\n     [ELSE result]\nEND\n```\n\nCASE子句可以用于任何表达式可以出现的地方。每一个condition是一个返回boolean结果的表达式。如果结果为真，那么CASE表达式的结果就是符合条件的result，并且剩下的CASE表达式不会被处理。如果条件的结果不为真，那么以相同方式搜寻任何随后的WHEN子句。如果没有WHEN condition为真，那么CASE表达式的值就是在ELSE子句里的result。如果省略了ELSE子句而且没有条件为真，结果为空。\n\n例子：\n\n```\ncreate table test (a integer);\ninsert into table test values(1),(2),(3);\nSELECT * FROM test;\n\n a\n---\n 1\n 2\n 3\n\nSELECT a,\n       CASE WHEN a=1 THEN 'one'\n            WHEN a=2 THEN 'two'\n            ELSE 'other'\n       END\n    FROM test;\n\n a | case\n---+-------\n 1 | one\n 2 | two\n 3 | other\n```\n\n所有result表达式的数据类型都必须可以转换成单一的输出类型。\n\n下面这个“简单”形式的CASE表达式是上述通用形式的一个变种：\n\n```\nCASE expression\n    WHEN value THEN result\n    [WHEN ...]\n    [ELSE result]\nEND\n```\n\n第一个expression会被计算，然后与所有在WHEN子句中的每一个value对比，直到找到一个相等的。如果没有找到匹配的，则返回在ELSE子句中的result（或者控制）。 这类似于 C 里的switch语句。\n\n上面的例子可以用简单CASE语法来写：\n\n```\nSELECT a,\n       CASE a WHEN 1 THEN 'one'\n              WHEN 2 THEN 'two'\n              ELSE 'other'\n       END\n    FROM test;\n\n a | case\n---+-------\n 1 | one\n 2 | two\n 3 | other\n```\n\nCASE表达式并不计算任何无助于判断结果的子表达式。例如，下面是一个可以避免被零除错误的方法：\n\n```\nSELECT ... WHERE CASE WHEN x <> 0 THEN y/x > 1.5 ELSE false END;\n```\n\n### COALESCE [*link*](#coalesce)\n\n```\nCOALESCE(value [, ...])\n```\n\nCOALESCE函数返回它的第一个非空参数的值。当且仅当所有参数都为空时才会返回空。它常用于在为显示目的检索数据时用缺省值替换空值。例如：\n\n```\nSELECT COALESCE(description, short_description, '(none)') ...\n```\n\n如果description不为空，这将会返回它的值，否则如果short\\_description非空则返回short\\_description的值，如果前两个都为空则返回(none)。\n\n```\nSELECT COALESCE(null,null,now()::varchar, ' ');\n```\n\n和CASE表达式一样，COALESCE将不会计算无助于判断结果的参数；也就是说，在第一个非空参数右边的参数不会被计算。这个 SQL 标准函数提供了类似于NVL和IFNULL的能力，它们被用在某些其他数据库系统中。\n\n### NULLIF [*link*](#nullif)\n\n```\nNULLIF(value1, value2)\n```\n\n当value1和value2相等时，NULLIF返回一个空值。 否则它返回value1。 这些可以用于执行前文给出的COALESCE例子的逆操作：\n\n```\nSELECT NULLIF(value, '(none)') ...\n```\n\n在这个例子中，如果value是(none)，将返回空值，否则返回value的值。\n\n### GREATEST和LEAST [*link*](#greatest%e5%92%8cleast)\n\n```\nGREATEST(value [, ...])\nLEAST(value [, ...])\n```\n\nGREATEST和LEAST函数从一个任意的数字表达式列表里选取最大或者最小的数值。 这些表达式必须都可以转换成一个普通的数据类型，它将会是结果类型。列表中的 NULL 数值将被忽略。只有所有表达式的结果都是 NULL 的时候，结果才会是 NULL。\n\n请注意GREATEST和LEAST都不是 SQL 标准，但却是很常见的扩展。某些其他数据库让它们在任何参数为 NULL 时返回 NULL，而不是在所有参数都为 NULL 时才返回 NULL。\n\n```\ndrop table biztable\ncreate table biztable (\n           id int PRIMARY key,\n           time1 TIMESTAMP,\n           time2 TIMESTAMP,\n    time3 TIMESTAMP\n);\nselect * from biztable;\ninsert into            biztable VALUES(1,'2018-05-20 22:52','2019-05-20 22:54','2019-05-20 23:52');\n\nselect id,GREATEST(time1,time2,time3)as maxval, LEAST(time1,time2,time3) AS minval\nfrom biztable;\n```\n\n## 数组函数与操作符 [*link*](#%e6%95%b0%e7%bb%84%e5%87%bd%e6%95%b0%e4%b8%8e%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n显示了可以用于数组类型的操作符。\n\n**表.数组操作符**\n\n| 操作符 | 描述 | 例子 | 结果 |\n| --- | --- | --- | --- |\n| = | 等于 | ARRAY[1.1,2.1,3.1]::int[] = ARRAY[1,2,3] | t |\n| <> | 不等于 | ARRAY[1,2,3] <> ARRAY[1,2,4] | t |\n| < | 小于 | ARRAY[1,2,3] < ARRAY[1,2,4] | t |\n| > | 大于 | ARRAY[1,4,3] > ARRAY[1,2,4] | t |\n| <= | 小于等于 | ARRAY[1,2,3] <= ARRAY[1,2,3] | t |\n| >= | 大于等于 | ARRAY[1,4,3] >= ARRAY[1,4,3] | t |\n| @> | 包含 | ARRAY[1,4,3] @> ARRAY[3,1] | t |\n| <@ | 被包含 | ARRAY[2,7] <@ ARRAY[1,7,4,2,6] | t |\n| && | 重叠（具有公共元素） | ARRAY[1,4,3] && ARRAY[2,1] | t |\n| || | 数组和数组串接 | ARRAY[1,2,3] || ARRAY[4,5,6] | {1,2,3,4,5,6} |\n| || | 元素到数组串接 | 3 || ARRAY[4,5,6] | {3,4,5,6} |\n| || | 数组到元素串接 | ARRAY[4,5,6] || 7 | {4,5,6,7} |\n\n**表.数组函数**\n\n| **函数** | **返回类型** | **描述** | **例子** | **结果** |\n| --- | --- | --- | --- | --- |\n| array\\_append(anyarray, anyelement) | anyarray | 向一个数组的末端追加一个元素 | array\\_append(ARRAY[1,2], 3) | {1,2,3} |\n| array\\_cat(anyarray, anyarray) | anyarray | 连接两个数组 | array\\_cat(ARRAY[1,2,3], ARRAY[4,5]) | {1,2,3,4,5} |\n| array\\_ndims(anyarray) | int | 返回数组的维度数 | array\\_ndims(ARRAY[[1,2,3], [4,5,6]]) | 2 |\n| array\\_dims(anyarray) | text | 返回数组的维度的文本表示 | array\\_dims(ARRAY[[1,2,3], [4,5,6]]) | [1:2][1:3] |\n| array\\_fill(anyelement, int[], [, int[]]) | anyarray | 返回一个用提供的值和维度初始化好的数组，可以选择下界不为 1 | array\\_fill(7, ARRAY[3], ARRAY[2]) | [2:4]={7,7,7} |\n| array\\_length(anyarray, int) | int | 返回被请求的数组维度的长度 | array\\_length(array[1,2,3], 1) | 3 |\n| array\\_lower(anyarray, int) | int | 返回被请求的数组维度的下界 | array\\_lower(’[0:2]={1,2,3}’::int[], 1) | 0 |\n| array\\_position(anyarray, anyelement [, int]) | int | 返回在该数组中从第三个参数指定的元素开始或者 第一个元素开始（数组必须是一维的）、第二个参数的 第一次出现的下标 | array\\_position(ARRAY[‘sun’,‘mon’,’tue’,‘wed’,’thu’,‘fri’,‘sat’], ‘mon’) | 2 |\n| array\\_positions(anyarray, anyelement) | int[] | 返回在第一个参数给定的数组（数组必须是一维的）中， 第二个参数所有出现位置的下标组成的数组 | array\\_positions(ARRAY[‘A’,‘A’,‘B’,‘A’], ‘A’) | {1,2,4} |\n| array\\_prepend(anyelement, anyarray) | anyarray | 向一个数组的首部追加一个元素 | array\\_prepend(1, ARRAY[2,3]) | {1,2,3} |\n| array\\_remove(anyarray, anyelement) | anyarray | 从数组中移除所有等于给定值的所有元素（数组必须是一维的） | array\\_remove(ARRAY[1,2,3,2], 2) | {1,3} |\n| array\\_replace(anyarray, anyelement, anyelement) | anyarray | 将每一个等于给定值的数组元素替换成一个新值 | array\\_replace(ARRAY[1,2,5,4], 5, 3) | {1,2,3,4} |\n| array\\_to\\_string(anyarray, text [, text]) | text | 使用提供的定界符和可选的空串连接数组元素 | array\\_to\\_string(ARRAY[1, 2, 3, NULL, 5], ‘,’, ‘\\*’) | 1,2,3,\\*,5 |\n| array\\_upper(anyarray, int) | int | 返回被请求的数组维度的上界 | array\\_upper(ARRAY[1,8,3,7], 1) | 4 |\n| cardinality(anyarray) | int | 返回数组中元素的总数，如果数组为空则返回 0 | cardinality(ARRAY[[1,2],[3,4]]) | 4 |\n| string\\_to\\_array(text, text [, text]) | text[] | 使用提供的定界符和可选的空串将字符串划分成数组元素 | string\\_to\\_array(‘xx~^~yy~^~zz’, ‘~^~’, ‘yy’) | {xx,NULL,zz} |\n| unnest(anyarray) | setof anyelement | 将一个数组扩展成一组行 | unnest(ARRAY[1,2]) | 1 2 (2 rows) |\n| unnest(anyarray, anyarray [, …]) | setof anyelement, anyelement [, …] | 把多维数组（可能是不同类型）扩展成一个行的集合。 这只允许用在 FROM 子句中 | SELECT \\* from unnest(ARRAY[1,2],ARRAY[‘foo’,‘bar’,‘baz’]); | 1 foo 2 bar NULL baz (3 rows) |\n\n在array\\_position和array\\_positions中， 每一个数组元素都使用IS NOT DISTINCT FROM 语义与要搜索的值比较。\n\n在array\\_position中，如果值没有找到则返回 NULL。\n\n在array\\_positions中，只有当数组为 NULL时才返回NULL，如果该值 没有在该数组中找到则返回一个空数组。\n\n在string\\_to\\_array中，如果定界符参数为 NULL，输入字符串中的每一个字符将变成结果数组中的一个独立元素。如果定界符是一个空串，则整个输入字符串被作为一个单一元素的数组返回。否则输入字符串会被在每一个出现定界符字符串的位置分裂。\n\n在string\\_to\\_array中，如果空值串参数被忽略或者为 NULL，输入中的子串不会被替换成 NULL。在array\\_to\\_string中，如果空值串参数被忽略或者为 NULL，该数组中的任何空值元素会被简单地跳过并且不会在输出串中被表示。\n\n## 范围函数和操作符 [*link*](#%e8%8c%83%e5%9b%b4%e5%87%bd%e6%95%b0%e5%92%8c%e6%93%8d%e4%bd%9c%e7%ac%a6)\n\n下表 展示了范围类型可用的操作符。\n\n**表.范围操作符**\n\n| **操作符** | **描述** | **例子** | **结果** |\n| --- | --- | --- | --- |\n| = | 等于 | int4range(1,5) = ‘[1,4]’::int4range | t |\n| <> | 不等于 | numrange(1.1,2.2) <> numrange(1.1,2.3) | t |\n| < | 小于 | int4range(1,10) < int4range(2,3) | t |\n| > | 大于 | int4range(1,10) > int4range(1,5) | t |\n| <= | 小于等于 | numrange(1.1,2.2) <= numrange(1.1,2.2) | t |\n| >= | 大于等于 | numrange(1.1,2.2) >= numrange(1.1,2.0) | t |\n| @> | 包含范围 | int4range(2,4) @> int4range(2,3) | t |\n| @> | 包含元素 | ‘[2011-01-01,2011-03-01)’::tsrange @> ‘2011-01-10’::timestamp | t |\n| <@ | 范围被包含 | int4range(2,4) <@ int4range(1,7) | t |\n| <@ | 元素被包含 | 42 <@ int4range(1,7) | f |\n| && | 重叠（有公共点） | int8range(3,7) && int8range(4,12) | t |\n| « | 严格左部 | int8range(1,10) « int8range(100,110) | t |\n| » | 严格右部 | int8range(50,60) » int8range(20,30) | t |\n| &< | 不超过右部 | int8range(1,20) &< int8range(18,20) | t |\n| &> | 不超过左部 | int8range(7,20) &> int8range(5,10) | t |\n| -|- | 相邻 | numrange(1.1,2.2) -|- numrange(2.2,3.3) | t |\n| + | 并 | numrange(5,15) + numrange(10,20) | [5,20) |\n| \\* | 交 | int8range(5,15) \\* int8range(10,20) | [10,15) |\n| - | 差 | int8range(5,15) - int8range(10,20) | [5,10) |\n\n简单比较操作符<、 >、<=和 >=首先比较下界，并且只有在下界相等时才比较上界。这些比较通常对范围不怎么有用，但是还是提供它们以便能够在范围上构建 B树索引。\n\n当涉及一个空范围时，左部/右部/相邻操作符总是返回假；即一个空范围被认为不在任何其他范围前面或者后面。\n\n如果结果范围可能需要包含两个分离的子范围，并和差操作符将会失败，因为这样的范围无法被表示。\n\n下表显示可用于范围类型的函数。\n\n**表. 范围函数**\n\n| **函数** | **返回类型** | **描述** | **例子** | **结果** |\n| --- | --- | --- | --- | --- |\n| lower(anyrange) | 范围的元素类型 | 范围的下界 | lower(numrange(1.1,2.2)) | 1.1 |\n| upper(anyrange) | 范围的元素类型 | 范围的上界 | upper(numrange(1.1,2.2)) | 2.2 |\n| isempty(anyrange) | boolean | 范围为空？ | isempty(numrange(1.1,2.2)) | false |\n| lower\\_inc(anyrange) | boolean | 下界包含在内？ | lower\\_inc(numrange(1.1,2.2)) | true |\n| upper\\_inc(anyrange) | boolean | 上界包含在内？ | upper\\_inc(numrange(1.1,2.2)) | false |\n| lower\\_inf(anyrange) | boolean | 下界无限？ | lower\\_inf(’(,)’::daterange) | true |\n| upper\\_inf(anyrange) | boolean | 上界无限？ | upper\\_inf(’(,)’::daterange) | true |\n| range\\_merge(anyrange, anyrange) | anyrange | 包含两个给定范围的最小范围 | range\\_merge(’[1,2)’::int4range, ‘[3,4)’::int4range) | [1,4) |\n\n如果范围为空或者被请求的界是无限的，lower和upper函数返回空值。函数lower\\_inc、upper\\_inc、lower\\_inf和upper\\_inf对一个空范围全部返回假。\n\n## 聚集函数 [*link*](#%e8%81%9a%e9%9b%86%e5%87%bd%e6%95%b0)\n\n聚集函数从一个输入值的集合计算出一个单一值；\n\n聚合函数分为四类：\n\n· 通用聚集函数\n\n· 统计聚集函数\n\n· 有序集聚集函数\n\n· 假象集聚集函数\n\n**通用聚集函数**\n\n| **函数** | **参数类型** | **返回类型** | **部分模式** | **描述** |  |\n| --- | --- | --- | --- | --- | --- |\n| array\\_agg(expression) | 任何非数组类型 | 参数类型的数组 | No | 输入值（包括空）被连接到一个数组 |  |\n| array\\_agg(expression) | 任意数组类型 | 和参数数据类型相同 | No | 输入数组被串接到一个更高维度的数组中 （输入必须都具有相同的维度并且不能为空或者 NULL） |  |\n| avg(expression) | smallint, int, bigint、real、double precision、numeric或interval | 对于任何整数类型参数是numeric，对于一个浮点参数是double precision，否则和参数数据类型相同 | Yes | 所有输入值的平均值（算术平均） |  |\n| bit\\_and(expression) | smallint、int、bigint或bit | 与参数数据类型相同 | Yes | 所有非空输入值的按位与，如果没有非空值则结果是空值 |  |\n| bit\\_or(expression) | smallint, int, bigint, or bit | 与参数数据类型相同 | Yes | 所有非空输入值的按位或，如果没有非空值则结果是空值 |  |\n| bool\\_and(expression) | bool | bool | Yes | 如果所有输入值为真则结果为真，否则为假 |  |\n| bool\\_or(expression) | bool | bool | Yes | 至少一个输入值为真时结果为真，否则为假 |  |\n| count(\\*) |  | bigint | Yes | 输入的行数 |  |\n| count(expression) | any | bigint | Yes | expression值非空的输入行的数目 |  |\n| every(expression) | bool | bool | Yes | 等价于bool\\_and |  |\n| json\\_agg(expression) | any | json | No | 将值聚集成一个 JSON 数组 |  |\n| jsonb\\_agg(expression) | any | jsonb | No | 把值聚合成一个 JSON 数组 |  |\n| json\\_object\\_agg(name, value) | (any, any) | json | No | 将名字/值对聚集成一个 JSON 对象 |  |\n| jsonb\\_object\\_agg(name, value) | (any, any) | jsonb | No | 把名字/值对聚合成一个 JSON 对象 |  |\n| max(expression) | 任意数组、数字、串、日期/时间、网络或者枚举类型，或者这些类型的数组 | 与参数数据类型相同 | Yes | 所有输入值中expression的最大值 |  |\n| min(expression) | 任意数组、数字、串、日期/时间、网络或者枚举类型，或者这些类型的数组 | 与参数数据类型相同 | Yes | 所有输入值中expression的最小值 |  |\n| string\\_agg(expression, delimiter) | (text, text) 或 (bytea, bytea) | 与参数数据类型相同 | No | 输入值连接成一个串，用定界符分隔 |  |\n| sum(expression) | smallint、int、 bigint、real、double precision、numeric、 interval或money | 对smallint或int参数是bigint，对bigint参数是numeric，否则和参数数据类型相同 | Yes | 所有输入值的expression的和 |  |\n|  |  |  |  |  |  |\n\n对于array\\_agg()，string\\_agg()，jsonb\\_agg()，和json\\_agg()，所述列表顺序是由确定ORDER BY子句中的SELECT列表表达式调用的聚合函数。由于jsonb\\_object\\_agg()（和json\\_object\\_agg()）产生的单个值是一个JSON对象，并且由于该值的元素没有顺序，ORDER BY因此SELECT列表表达式中的子句无效。\n\n**用于统计的聚集函数**\n\n| **函数** | **参数类型** | **返回类型** | **部分模式** | **描述** |\n| --- | --- | --- | --- | --- |\n| corr(Y, X) | double precision | double precision | Yes | 相关系数 |\n| covar\\_pop(Y, X) | double precision | double precision | Yes | 总体协方差 |\n| covar\\_samp(Y, X) | double precision | double precision | Yes | 样本协方差 |\n| regr\\_avgx(Y, X) | double precision | double precision | Yes | 自变量的平均值 （sum(X)/N） |\n| regr\\_avgy(Y, X) | double precision | double precision | Yes | 因变量的平均值 （sum(Y)/N） |\n| regr\\_count(Y, X) | double precision | bigint | Yes | 两个表达式都不为空的输入行的数目 |\n| regr\\_intercept(Y, X) | double precision | double precision | Yes | 由（X, Y）对决定的最小二乘拟合的线性方程的 y截距 |\n| regr\\_r2(Y, X) | double precision | double precision | Yes | 相关系数的平方 |\n| regr\\_slope(Y, X) | double precision | double precision | Yes | 由（X, Y）对决定的最小二乘拟合的线性方程的斜率 |\n| regr\\_sxx(Y, X) | double precision | double precision | Yes | sum(X^2) - sum(X)^2/N（自变量的“平方和”） |\n| regr\\_sxy(Y, X) | double precision | double precision | Yes | sum(X\\*Y) - sum(X) \\* sum(Y)/N（自变量乘以因变量的“积之合”） |\n| regr\\_syy(Y, X) | double precision | double precision | Yes | sum(Y^2) - sum(Y)^2/N（因变量的“平方和”） |\n| stddev(expression) | smallint、int、 bigint、real、double precision或numeric | 浮点参数为double precision，否则为numeric | Yes | stddev\\_samp的历史别名 |\n| stddev\\_pop(expression) | smallint、int、 bigint、real、double precision或numeric | 浮点参数为double precision，否则为numeric | Yes | 输入值的总体标准偏差 |\n| stddev\\_samp(expression) | smallint、int、 bigint、real、double precision或numeric | 浮点参数为double precision，否则为numeric | Yes | 输入值的样本标准偏差 |\n| variance(expression) | smallint、int、 bigint、real、double precision或numeric | 浮点参数为double precision，否则为numeric | Yes | var\\_samp的历史别名 |\n| var\\_pop(expression) | smallint、int、 bigint、real、double precision或numeric | 浮点参数为double precision，否则为numeric | Yes | 输入值的总体方差（总体标准偏差的平方） |\n| var\\_samp(expression) | smallint、int、 bigint、real、double precision或numeric | 浮点参数为double precision，否则为numeric | Yes | 输入值的样本方差（样本标准偏差的平方） |\n\n可以通过以下两种方法之一调用此类中的聚合函数：\n\n· GROUP BY当表中的所有行返回一组行的单个值时，*要么*“通常”在表中的所有行上，要么与结合。在这种用法中，行排序无关紧要。\n\n· *或*作为窗口函数用OVER。在此用法中，针对窗口中的每一行评估聚合函数时，排序始终很重要。\n\n**有序集聚集函数**\n\n只能使用专用WITHIN GROUP (ORDER BY …)语法来调用它们。他们不能被调用的窗函数有OVER。\n\n| 函数 | 直接参数类型 | 聚集参数类型 | 返回类型 | 部分模式 | 描述 |\n| --- | --- | --- | --- | --- | --- |\n| mode() WITHIN GROUP (ORDER BY sort\\_expression) |  | 任何可排序类型 | 与排序表达式相同 | No | 返回最频繁的输入值（如果有多个频度相同的值就选第一个） |\n| percentile\\_cont(fraction) WITHIN GROUP (ORDER BY sort\\_expression) | double precision | double precision或者interval | 与排序表达式相同 | No | 连续百分率：返回一个对应于排序中指定分数的值，如有必要就在相邻的输入项之间插值 |\n| percentile\\_cont(fractions) WITHIN GROUP (ORDER BY sort\\_expression) | double precision[] | double precision或者interval | 排序表达式的类型的数组 | No | 多重连续百分率：返回一个匹配fractions参数形状的结果数组， 其中每一个非空元素都用对应于那个百分率的值替换 |\n| percentile\\_disc(fraction) WITHIN GROUP (ORDER BY sort\\_expression) | double precision | 一种可排序类型 | 与排序表达式相同 | No | 离散百分率：返回第一个在排序中位置等于或者超过指定分数的输入值 |\n| percentile\\_disc(fractions) WITHIN GROUP (ORDER BY sort\\_expression) | double precision[] | 任何可排序类型 | 排序表达式的类型的数组 | No | 多重离散百分率：返回一个匹配fractions参数形状的结果数组， 其中每一个非空元素都用对应于那个百分率的输入值替换 |\n\n**假想集聚集函数**\n\n| **函数** | 直接参数类型 | 聚集参数类型 | 返回类型 | 部分模式 | 描述 |\n| --- | --- | --- | --- | --- | --- |\n| rank(args) WITHIN GROUP (ORDER BY sorted\\_args) | VARIADIC “any” | VARIADIC “any” | bigint | No | 假想行的排名，为重复的行留下间隔 |\n| dense\\_rank(args) WITHIN GROUP (ORDER BY sorted\\_args) | VARIADIC “any” | VARIADIC “any” | bigint | No | 假想行的排名，不留间隔 |\n| percent\\_rank(args) WITHIN GROUP (ORDER BY sorted\\_args) | VARIADIC “any” | VARIADIC “any” | double precision | No | 假想行的相对排名，范围从 0 到 1 |\n| cume\\_dist(args) WITHIN GROUP (ORDER BY sorted\\_args) | VARIADIC “any” | VARIADIC “any” | double precision | No | 假想行的相对排名，范围从 1/N 到 1 |\n\n**表. 分组操作**\n\n| 函数 | 返回类型 | 描述 |\n| --- | --- | --- |\n| GROUPING(args…) | integer | 整数位掩码指示哪些参数不被包括在当前分组集合中 |\n\n分组操作用来与分组集合共同来区分结果行。GROUPING操作的参数并不会被实际计算，但是它们必 须准确地匹配在相关查询层次的GROUP BY子句中给定的表达式。 最右边参数指派的位是最低有效位，如果对应的表达式被包括在产生结果行的分组 集合的分组条件中则每一位是 0，否则是 1。例如：\n\n```\n=> SELECT * FROM items_sold;\n make  | model | sales\n-------+-------+-------\n Foo   | GT    |  10\n Foo   | Tour  |  20\n Bar   | City  |  15\n Bar   | Sport |  5\n(4 rows)\n\n=> SELECT make, model, GROUPING(make,model), sum(sales) FROM items_sold GROUP BY ROLLUP(make,model);\n make  | model | grouping | sum\n-------+-------+----------+-----\n Foo   | GT    |        0 | 10\n Foo   | Tour  |        0 | 20\n Bar   | City  |        0 | 15\n Bar   | Sport |        0 | 5\n Foo   |       |        1 | 30\n Bar   |       |        1 | 20\n       |       |        3 | 50\n(7 rows)\n```\n\n## 窗口函数 [*link*](#%e7%aa%97%e5%8f%a3%e5%87%bd%e6%95%b0)\n\n窗口函数提供在与当前查询行相关的行集合上执行计算的能力。注意：必须使用窗口函数的语法调用这些函数； 一个OVER子句是必需的。\n\n**通用窗口函数**\n\n| 函数 | 描述 |\n| --- | --- |\n| row\\_number() | 当前行在其分区中的行号，从1计 |\n| rank() | 带间隙的当前行排名； 与该行的第一个同等行的row\\_number相同 |\n| dense\\_rank() | 不带间隙的当前行排名； 这个函数计数同等组 |\n| percent\\_rank() | 当前行的相对排名： (rank- 1) / (总行数 - 1) |\n| cume\\_dist() | 累积分布：(在当前行之前或者平级的分区行数) / 分区行总数 |\n| ntile() | 从1到参数值的整数范围，尽可能等分分区 |\n| lag(value anyelement [, offset integer [, default anyelement ]]) | 返回value，它在分区内当前行的之前offset个位置的行上计算；如果没有这样的行，返回default替代（必须和value类型相同）。offset和default都是根据当前行计算的结果。如果忽略它们，则offset默认是1，default默认是空值 |\n| lead(value anyelement [, offset integer [, default anyelement ]]) | 返回value，它在分区内当前行的之后offset个位置的行上计算；如果没有这样的行，返回default替代（必须和value类型相同）。offset和default都是根据当前行计算的结果。如果忽略它们，则offset默认是1，default默认是空值 |\n| first\\_value() | 返回在窗口帧中第一行上计算的值 |\n| last\\_value() | 返回在窗口帧中最后一行上计算的值 |\n| nth\\_value() | 返回在窗口帧中第n行（行从1计数）上计算的值；没有这样的行则返回空值 |\n\n## 子查询表达式 [*link*](#%e5%ad%90%e6%9f%a5%e8%af%a2%e8%a1%a8%e8%be%be%e5%bc%8f)\n\n本节描述MemFireDB中可用的SQL兼容的子查询表达式。所有本节中成文的表达式都返回布尔值（真/假）结果。\n\n### EXISTS [*link*](#exists)\n\n```\nEXISTS (subquery)\n```\n\nEXISTS的参数是一个任意的SELECT语句， 或者说子查询。系统对子查询进行运算以判断它是否返回行。如果它至少返回一行，那么EXISTS的结果就为“真”； 如果子查询没有返回行，那么EXISTS的结果是“假”。\n\n```\nNOT EXISTS (subquery)\nnot exists与exists正好相反，如果子查询没有返回结果，为'TRUE'，否则'FALSE'。\n```\n\n子查询可以引用来自周围的查询的变量，这些变量在该子查询的任何一次计算中都起常量的作用。\n\n这个子查询通常只是运行到能判断它是否可以返回至少一行为止， 而不是等到全部结束。在这里写任何有副作用的子查询都是不明智的（例如调用序列函数）；这些副作用是否发生是很难判断的。\n\n因为结果只取决于是否会返回行，而不取决于这些行的内容， 所以这个子查询的输出列表通常是无关紧要的。一个常用的编码习惯是用EXISTS(SELECT 1 WHERE …)的形式写所有的EXISTS测试。不过这条规则有例外，例如那些使用INTERSECT的子查询。\n\n下面这个简单的例子类似在col2上的一次内联接，但是它为每个 tab1的行生成最多一个输出，即使存在多个匹配tab2的行也如此∶\n\n```\nSELECT col1\nFROM tab1\nWHERE EXISTS (SELECT 1 FROM tab2 WHERE col2 = tab1.col2);\n```\n\n### IN [*link*](#in)\n\n```\nexpression IN (subquery)\n```\n\n右手边是一个圆括弧括起来的子查询， 它必须正好只返回一个列。左手边表达式将被计算并与子查询结果逐行进行比较。 如果找到任何等于子查询行的情况，那么IN的结果就是“真”。 如果没有找到相等行，那么结果是“假”（包括子查询没有返回任何行的情况）。\n\n请注意如果左手边表达式得到空值，或者没有相等的右手边值， 并且至少有一个右手边行得到空值，那么IN结构的结果将是空值，而不是假。这个行为是遵照 SQL 处理空值的一般规则的。\n\n```\nDROP TABLE COMPANY;\nCREATE TABLE COMPANY(\n   ID INT PRIMARY KEY     NOT NULL,\n   NAME           TEXT    NOT NULL,\n   AGE            INT     NOT NULL,\n   ADDRESS        CHAR(50),\n   SALARY         REAL\n);\nINSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)\nVALUES (1, 'Paul', 32, 'California', 20000.00 );\nINSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)\nVALUES (2, 'Allen', 25, 'Texas', 15000.00 );\nINSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)\nVALUES (3, 'Teddy', 23, 'Norway', 20000.00 );\nINSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)\nVALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00 );\nINSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)\nVALUES (5, 'David', 27, 'Texas', 85000.00 );\nINSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)\nVALUES (6, 'Kim', 22, 'South-Hall', 45000.00 );\nINSERT INTO COMPANY VALUES (7, 'James', 24, 'Houston', 10000.00 );\nSELECT * FROM COMPANY WHERE ID IN (SELECT ID FROM COMPANY  WHERE SALARY > 45000) ;\n```\n\n和EXISTS一样，假设子查询将被完成运行完全是不明智的。\n\n```\nrow_constructor IN (subquery)\n```\n\n这种形式的IN的左手边是一个行构造器。 右手边是一个圆括弧子查询，它必须返回和左手边返回的行中表达式所构成的完全一样多的列。 左手边表达式将被计算并与子查询结果逐行进行比较。如果找到任意相等的子查询行，则IN的结果为“真”。如果没有找到相等行， 那么结果为“假”（包括子查询不返回行的情况）。\n\n通常，表达式或者子查询行里的空值是按照 SQL 布尔表达式的一般规则进行组合的。 如果两个行对应的成员都非空并且相等，那么认为这两行相等；如果任意对应成员为非空且不等，那么这两行不等； 否则这样的行比较的结果是未知（空值）。如果所有行的结果要么是不等， 要么是空值，并且至少有一个空值，那么IN的结果是空值。\n\n### NOT IN [*link*](#not-in)\n\n```\nexpression NOT IN (subquery)\n```\n\n右手边是一个用圆括弧包围的子查询，它必须返回正好一个列。左手边表达式将被计算并与子查询结果逐行进行比较。 如果只找到不相等的子查询行（包括子查询不返回行的情况），那么NOT IN的结果是“真”。 如果找到任何相等行，则结果为“假”。\n\n请注意如果左手边表达式得到空值，或者没有相等的右手边值， 并且至少有一个右手边行得到空值，那么NOT IN结构的结果将是空值，而不是真。这个行为是遵照 SQL 处理空值的一般规则的。\n\n和EXISTS一样，假设子查询会完全结束是不明智的。\n\n```\nrow_constructor NOT IN (subquery)\n```\n\n这种形式的NOT IN的左手边是一个行构造器。 右手边是一个圆括弧子查询，它必须返回和左手边返回的行中表达式所构成的完全一样多的列。 左手边表达式将被计算并与子查询结果逐行进行比较。如果找到不等于子查询行的行，则NOT IN的结果为“真”。如果找到相等行， 那么结果为“假”（包括子查询不返回行的情况）。\n\n通常，表达式或者子查询行里的空值是按照 SQL 布尔表达式的一般规则进行组合的。 如果两个行对应的成员都非空并且相等，那么认为这两行相等；如果任意对应成员为非空且不等，那么这两行不等； 否则这样的行比较的结果是未知（空值）。如果所有行的结果要么是不等， 要么是空值，并且至少有一个空值，那么NOT IN的结果是空值。\n\n```\nSELECT * FROM COMPANY WHERE ID not IN (SELECT ID FROM COMPANY  WHERE SALARY > 45000) ;\n```\n\n### ANY/SOME [*link*](#anysome)\n\n```\nexpression operator ANY (subquery)\nexpression operator SOME (subquery)\n```\n\n这种形式的右手边是一个圆括弧括起来的子查询， 它必须返回正好一个列。左手边表达式将被计算并使用给出的 操作符对子查询结果逐行进行比较。如果获得任何真值结果，那么ANY的结果就是“真”。 如果没有找到真值结果，那么结果是“假”（包括子查询没有返回任何行的情况）。\n\nSOME是ANY的同义词。IN等价于= ANY。\n\n请注意如果没有任何成功并且至少有一个右手边行为该操作符结果生成空值， 那么ANY结构的结果将是空值，而不是假。 这个行为是遵照 SQL 处理空值布尔组合的一般规则制定的。\n\n和EXISTS一样，假设子查询将被完全运行是不明智的。\n\n```\nrow_constructor operator ANY (subquery)\nrow_constructor operator SOME (subquery)\n```\n\n这种形式的左手边是一个行构造器。右手边是一个圆括弧括起来的子查询， 它必须返回和左手边列表给出的表达式一样多的列。左手边表达式将被计算并使用给出的操作符对子查询结果逐行进行比较。如果比较为任何子查询行返回真，则ANY的结果为“真”。如果比较对每一个子查询行都返回假，则结果为“假”（包括子查询不返回行的情况）。如果比较不对任何行返回真并且至少对一行返回 NULL，则结果为 NULL。\n\n### ALL [*link*](#all)\n\n```\nexpression operator ALL (subquery)\n```\n\nALL 的这种形式的右手边是一个圆括弧括起来的子查询， 它必须只返回一列。左手边表达式将被计算并使用给出的 操作符对子查询结果逐行进行比较。该操作符必须生成布尔结果。 如果所有行得到真（包括子查询没有返回任何行的情况），ALL的结果就是“真”。如果没有存在任何假值结果，那么结果是“假”。如果比较为任何行都不返回假并且对至少一行返回 NULL，则结果为 NULL。\n\nNOT IN等价于<> ALL。\n\n和EXISTS一样，假设子查询将被完全运行是不明智的。\n\n```\nrow_constructor operator ALL (subquery)\n```\n\nALL的这种形式的左手边是一个行构造器。 右手边是一个圆括弧括起来的子查询，它必须返回和左手边行中表达式一样多的列。 左手边表达式将被计算并使用给出的 操作符对子查询结果逐行进行比较。如果对所有子查询行该比较都返回真，那么ALL的结果就是“真”（包括子查询没有返回任何行的情况）。如果对任何子查询行比较返回假，则结果为“假”。如果比较对任何子查询行都不返回假并且对至少一行返回 NULL，则结果为 NULL。\n\n### 单一行比较 [*link*](#%e5%8d%95%e4%b8%80%e8%a1%8c%e6%af%94%e8%be%83)\n\n```\nrow_constructor operator (subquery)\n```\n\n左手边是一个行构造器，。 右手边是一个圆括弧括起来的子查询，该查询必须返回和左手边行中表达式数目完全一样的列。 另外，该子查询不能返回超过一行的数量（如果它返回零行，那么结果就是空值）。 左手边被计算并逐行与右手边的子查询结果行比较。\n\n## 行与数组比较 [*link*](#%e8%a1%8c%e4%b8%8e%e6%95%b0%e7%bb%84%e6%af%94%e8%be%83)\n\n本节描述几个特殊的结构，用于在值的组之间进行多重比较。这些形式语法上和前面一节的子查询形式相关，但是不涉及子查询。所有本节记录的表达式形式都返回布尔（Boolean）结果（真/假）。\n\n### IN [*link*](#in-1)\n\n```\nexpression IN (value [, ...])\n```\n\n右手边是一个圆括弧包围的标量列表。如果左手边表达式的结果等于任何右手边表达式中的一个，结果为“真”。它是下面形式的缩写\n\n```\nexpression = value1\nOR\nexpression = value2\nOR\n...\n```\n\n请注意如果左手边表达式得到空值，或者没有相等的右手边值并且至少有一个右手边的表达式得到空值，那么IN结构的结果将为空值，而不是假。这符合 SQL 处理空值的布尔组合的一般规则。\n\n### NOT IN [*link*](#not-in-1)\n\n```\nexpression NOT IN (value [, ...])\n```\n\n右手边是一个圆括弧包围的标量列表。如果左手边表达式的结果不等于所有右手边表达式，结果为“真”。它是下面形式的缩写\n\n```\nexpression <> value1\nAND\nexpression <> value2\nAND\n...\n```\n\n请注意如果左手边表达式得到空值，或者没有相等的右手边值并且至少有一个右手边的表达式得到空值，那么NOT IN结构的结果将为空值， 而不是我们可能天真地认为的真值。这符合 SQL 处理空值的布尔组合的一般规则。\n\n提示\n\nx NOT IN y在所有情况下都等效于NOT (x IN y)。但是，在处理空值的时候，用NOT IN比用IN更可能迷惑新手。最好尽可能用正逻辑来表达你的条件。\n\n### ANY/SOME (array) [*link*](#anysome-array)\n\n```\nexpression operator ANY (array expression)\nexpression operator SOME (array expression)\n```\n\n右手边是一个圆括弧包围的表达式，它必须得到一个数组值。左手边表达式被计算并且使用给出的操作符对数组的每个元素进行比较，这个操作符必须得到布尔结果。如果得到了任何真值结果，那么ANY的结果是“真”。 如果没有找到真值结果（包括数组只有零个元素的情况），那么结果是“假”。\n\n如果数组表达式得到一个空数组，ANY的结果将为空值。如果左手边的表达式得到空值，ANY通常是空值（尽管一个非严格比较操作符可能得到一个不同的结果）。另外，如果右手边的数组包含任何空值元素或者没有得到真值比较结果，ANY的结果将是空值而不是假（再次，假设是一个严格的比较操作符）。这符合 SQL 对空值的布尔组合的一般规则。\n\nSOME是ANY的同义词。\n\n### ALL (array) [*link*](#all-array)\n\n```\nexpression operator ALL (array expression)\n```\n\n右手边是一个圆括弧包围的表达式，它必须得到一个数组值。左手边表达式将被计算并使用给出的操作符与数组的每个元素进行比较，这个操作符必须得到一个布尔结果。如果所有比较都得到真值结果，那么ALL的结果是 “真”（包括数组只有零个元素的情况）。如果有任何假值结果，那么结果是“假”。\n\n```\ncreate table t1(id  int);\ninsert into t1 Values (1), (2),(3);\nselect * from t1 where t1 in (2,5,6);\nselect * from t1 where id not  in (2,5,6);\nselect * from t1 where id < any(array[1,3]);\nselect * from t1 where id > some(array[1,3]);\nselect * from t1 where id < ALL(array[3]);\n```\n\n如果数组表达式得到一个空数组，ALL的结果将为空值。如果左手边的表达式得到空值，ALL通常是空值（尽管一个非严格比较操作符可能得到一个不同的结果）。另外，如果右手边的数组包含任何空值元素或者没有得到假值比较结果，ALL的结果将是空值而不是真（再次，假设是一个严格的比较操作符）。这符合 SQL 对空值的布尔组合的一般规则。\n\n### 行构造器比较 [*link*](#%e8%a1%8c%e6%9e%84%e9%80%a0%e5%99%a8%e6%af%94%e8%be%83)\n\n```\nrow_constructor operator row_constructor\n```\n\n每一边都是一个行构造器。两个行值必须具有相同数量的域。每一边被计算并且被逐行比较。当操作符是 =、 <>、 < <=、 >、 >=时，允许进行行构造器比较。\n\n=和<>情况略有不同。如果两行的所有对应成员都是非空且相等则这两行被认为相等；如果任何对应成员是非空但是不相等则这两行不相等；否则行比较的结果为未知（空值）。\n\n对于<、<=、>和>=情况，行元素被从左至右比较，在找到一处不等的或为空的元素对就立刻停下来。如果这一对元素都为空值，则行比较的结果为未知（空值）；否则这一对元素的比较结果决定行比较的结果。例如，ROW(1,2,NULL) < ROW(1,3,0)得到真，而不是空值，因为第三对元素并没有被考虑。\n\n```\nrow_constructor IS DISTINCT FROM row_constructor\n```\n\n这个结构与<>行比较相似，但是它对于空值输入不会得到空值。任何空值被认为和任何非空值不相等（有区别），并且任意两个空值被认为相等（无区别）。因此结果将总是为真或为假，永远不会是空值。\n\n```\nrow_constructor IS NOT DISTINCT FROM row_constructor\n```\n\n这个结构与=行比较相似，但是它对于空值输入不会得到空值。任何空值被认为和任何非空值不相等（有区别），并且任意两个空值被认为相等（无区别）。因此结果将总是为真或为假，永远不会是空值。\n\n### 组合类型比较 [*link*](#%e7%bb%84%e5%90%88%e7%b1%bb%e5%9e%8b%e6%af%94%e8%be%83)\n\n```\nrecord operator record\n```\n\nSQL 规范要求在结果依赖于比较两个 NULL 值或者一个 NULL 与一个非 NULL 时逐行比较返回 NULL。PostgreSQL只有在比较两个行构造器的结果或者比较一个行构造器与一个子查询的输出时才这样做。在其他比较两个组合类型值的环境中，两个 NULL 域值被认为相等，并且一个 NULL 被认为大于一个非 NULL。为了得到组合类型的一致的排序和索引行为，这样做是必要的。\n\n## 集合返回函数 [*link*](#%e9%9b%86%e5%90%88%e8%bf%94%e5%9b%9e%e5%87%bd%e6%95%b0)\n\n本节描述那些可能返回多于一行的函数。目前这个类中被使用最广泛的是级数生成函数， 如表所述。其他更特殊的集合返回函数在本手册的其他地方描述。\n\n**表.级数生成函数**\n\n| **函数** | **参数类型** | **返回类型** | **描述** |\n| --- | --- | --- | --- |\n| generate\\_series(start, stop) | int、bigint或者numeric | setof int、setof bigint或者setof numeric（与参数类型相同） | 产生一系列值，从start到stop，步长为 1 |\n| generate\\_series(start, stop, step) | int、bigint或者numeric | setof int、setof bigint或者setof numeric（与参数类型相同） | 产生一系列值，从start到stop，步长为step |\n| generate\\_series(start, stop, step interval) | timestamp或timestamp with time zone | setof timestamp或setof timestamp with time zone（和参数类型相同） | 产生一系列值，从start到stop，步长为step |\n\n当step为正时，如果start大于stop则返回零行。相反，当step为负时，如果start小于stop则返回零行。对于NULL输入也会返回零行。step为零是一个错误。下面是一些例子：\n\n```\nSELECT * FROM generate_series(2,4);\n generate_series\n-----------------\n               2\n               3\n               4\n(3 rows)\n\nSELECT * FROM generate_series(5,1,-2);\n generate_series\n-----------------\n               5\n               3\n               1\n(3 rows)\n\nSELECT * FROM generate_series(4,3);\n generate_series\n-----------------\n(0 rows)\n\nSELECT generate_series(1.1, 4, 1.3);\n generate_series\n-----------------\n             1.1\n             2.4\n             3.7\n(3 rows)\n\n-- 这个例子依赖于日期+整数操作符\nSELECT current_date + s.a AS dates FROM generate_series(0,14,7) AS s(a);\n   dates\n------------\n 2004-02-05\n 2004-02-12\n 2004-02-19\n(3 rows)\n\nSELECT * FROM generate_series('2008-03-01 00:00'::timestamp,\n                              '2008-03-04 12:00', '10 hours');\n   generate_series\n---------------------\n 2008-03-01 00:00:00\n 2008-03-01 10:00:00\n 2008-03-01 20:00:00\n 2008-03-02 06:00:00\n 2008-03-02 16:00:00\n 2008-03-03 02:00:00\n 2008-03-03 12:00:00\n 2008-03-03 22:00:00\n 2008-03-04 08:00:00\n(9 rows)\n```\n\n**表.下标生成函数**\n\n| 函数 | 返回类型 | 描述 |\n| --- | --- | --- |\n| generate\\_subscripts(array anyarray, dim int) | setof int | 生成一个级数组成给定数组的下标。 |\n| generate\\_subscripts(array anyarray, dim int, reverse boolean) | setof int | 生成一个级数组成给定数组的下标。当reverse为真，级数以逆序返回。 |\n\ngenerate\\_subscripts是一个快捷函数，它为给定数组的指定维度生成一组合法的下标。对于不具有请求维度的数组返回零行，对于 NULL 数组也返回零行（但是会对 NULL 数组元素返回合法的下标）。下面是一些例子：\n\n```\n-- 基本使用\nSELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s;\n s\n---\n 1\n 2\n 3\n 4\n(4 rows)\n生成数组下标\nselect generate_subscripts( array['a','b','c','d'],1);\ngenerate_subscripts\n---------------------\n                   1\n                   2\n                   3\n                   4\n(4 rows)\n\n-- 表示一个数组，下标和被下标的值需要一个子查询\nSELECT * FROM arrays;\n         a\n--------------------\n {-1,-2}\n {100,200,300}\n(2 rows)\n\nSELECT a AS array, s AS subscript, a[s] AS value\nFROM (SELECT generate_subscripts(a, 1) AS s, a FROM arrays) foo;\n     array     | subscript | value\n---------------+-----------+-------\n {-1,-2}       |         1 |    -1\n {-1,-2}       |         2 |    -2\n {100,200,300} |         1 |   100\n {100,200,300} |         2 |   200\n {100,200,300} |         3 |   300\n(5 rows)\n\n-- 平面化一个 2D 数组\nCREATE OR REPLACE FUNCTION unnest2(anyarray)\nRETURNS SETOF anyelement AS $$\nselect $1[i][j]\n   from generate_subscripts($1,1) g1(i),\n        generate_subscripts($1,2) g2(j);\n$$ LANGUAGE sql IMMUTABLE;\nCREATE FUNCTION\nSELECT * FROM unnest2(ARRAY[[1,2],[3,4]]);\n unnest2\n---------\n       1\n       2\n       3\n       4\n(4 rows)\n```\n\n当FROM子句中的一个函数后面有WITH ORDINALITY时，输出中会追加一个bigint列，它的值从1开始并且该函数输出的每一行加1。这在unnest()之类的集合返回函数中最有用。\n\n---\n\n[*navigate\\_before* SQL语法](/docs/db/guides/sql-grammar/)\n\n[联系我们 *navigate\\_next*](/docs/contactus/)"
}